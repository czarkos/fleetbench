// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message3 {
  optional string f_0 = 3;
  optional int64 f_1 = 4;
  optional bool f_2 = 6;
  optional bytes f_3 = 7;
  message M1 {
    optional int32 f_0 = 2;
    optional bool f_1 = 3;
    message M3 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 58;
        E4_CONST_2 = 27;
        E4_CONST_3 = 75;
        E4_CONST_4 = 95;
        E4_CONST_5 = 125;
      }
      optional E4 f_0 = 1;
      message M19 {
        optional int64 f_0 = 1;
      }
      optional M19 f_1 = 3;
      message M21 {
        optional float f_0 = 1;
        message M27 {
          optional uint32 f_0 = 4;
          message M34 {
            optional int32 f_0 = 1;
            message M48 {
              optional uint32 f_0 = 1;
              enum E20 {
                E20_UNSPECIFIED = 0;
                E20_CONST_1 = 103;
                E20_CONST_2 = 53;
                E20_CONST_3 = 10;
                E20_CONST_4 = 108;
                E20_CONST_5 = 6;
              }
              optional E20 f_1 = 3;
              optional int32 f_2 = 5;
              message M50 {
                optional float f_0 = 1;
                message M61 {
                  optional fixed64 f_0 = 1;
                }
                optional M61 f_1 = 2;
                message M63 {
                  optional bytes f_0 = 2;
                  optional fixed32 f_1 = 3;
                  optional uint64 f_2 = 6;
                  optional string f_3 = 8;
                  optional float f_4 = 9;
                  optional float f_5 = 11;
                  optional int64 f_6 = 12;
                  optional string f_7 = 13;
                  optional string f_8 = 14;
                  optional uint64 f_9 = 16;
                  optional bool f_10 = 17;
                  optional double f_11 = 19;
                  optional bytes f_12 = 20;
                  optional double f_13 = 21;
                  optional string f_14 = 22;
                  enum E23 {
                    E23_UNSPECIFIED = 0;
                    E23_CONST_1 = 118;
                    E23_CONST_2 = 85;
                    E23_CONST_3 = 18;
                    E23_CONST_4 = 39;
                    E23_CONST_5 = 97;
                  }
                  optional E23 f_15 = 23;
                  message M64 {
                    optional fixed32 f_0 = 1;
                  }
                  repeated M64 f_23 = 24;
                  message M65 {
                    optional int32 f_0 = 1;
                  }
                  repeated M65 f_24 = 25;
                }
                repeated M63 f_2 = 4;
              }
              repeated M50 f_5 = 8;
              message M52 {
                optional float f_0 = 2;
              }
              repeated M52 f_8 = 9;
              message M54 {
                optional bool f_0 = 1;
                optional int32 f_1 = 6;
              }
              optional M54 f_9 = 10;
              message M58 {
                optional int32 f_0 = 1;
                message M62 {
                  enum E22 {
                    E22_UNSPECIFIED = 0;
                    E22_CONST_1 = 6;
                    E22_CONST_2 = 74;
                    E22_CONST_3 = 51;
                    E22_CONST_4 = 71;
                    E22_CONST_5 = 66;
                  }
                  optional E22 f_0 = 1;
                  message M66 {
                    optional int32 f_0 = 1;
                  }
                  repeated M66 f_1 = 3;
                }
                optional M62 f_1 = 3;
              }
              optional M58 f_10 = 11;
            }
            optional M48 f_1 = 2;
          }
          optional M34 f_4 = 6;
          message M36 {
            optional int64 f_0 = 3;
          }
          optional M36 f_6 = 10;
        }
        optional M27 f_1 = 3;
        message M32 {
          optional int32 f_0 = 1;
          optional bytes f_1 = 4;
          optional int64 f_2 = 6;
          optional bytes f_3 = 7 [ctype = CORD];
          message M42 {
            optional double f_0 = 1;
          }
          optional M42 f_7 = 8;
        }
        repeated M32 f_3 = 4;
      }
      optional M21 f_3 = 4;
    }
    optional M3 f_3 = 4;
    message M6 {
      optional string f_0 = 2;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 25;
        E5_CONST_2 = 40;
        E5_CONST_3 = 73;
        E5_CONST_4 = 75;
        E5_CONST_5 = 12;
      }
      optional E5 f_1 = 3;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 38;
        E6_CONST_2 = 20;
        E6_CONST_3 = 18;
        E6_CONST_4 = 97;
        E6_CONST_5 = 26;
      }
      optional E6 f_2 = 5;
      message M14 {
        optional float f_0 = 3;
        message M29 {
          optional string f_0 = 1;
          message M35 {
            optional int64 f_0 = 2;
          }
          optional M35 f_1 = 2;
          message M41 {
            optional fixed64 f_0 = 1;
            optional bool f_1 = 2;
            optional uint64 f_2 = 4;
          }
          optional M41 f_2 = 3;
        }
        optional M29 f_3 = 4;
      }
      optional M14 f_5 = 6;
      message M18 {
        optional float f_0 = 1;
        message M30 {
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 126;
            E14_CONST_2 = 84;
            E14_CONST_3 = 93;
            E14_CONST_4 = 54;
            E14_CONST_5 = 75;
          }
          optional E14 f_0 = 1;
          message M33 {
            optional float f_0 = 3;
            message M49 {
              optional double f_0 = 1;
              message M51 {
                optional int32 f_0 = 4;
              }
              repeated M51 f_1 = 3;
              message M55 {
                optional int32 f_0 = 1;
                message M60 {
                  enum E21 {
                    E21_UNSPECIFIED = 0;
                    E21_CONST_1 = 65;
                    E21_CONST_2 = 123;
                    E21_CONST_3 = 77;
                    E21_CONST_4 = 55;
                    E21_CONST_5 = 106;
                  }
                  optional E21 f_0 = 1;
                }
                repeated M60 f_1 = 2;
              }
              repeated M55 f_3 = 5;
              message M57 {
                optional int32 f_0 = 2;
                optional int64 f_1 = 4;
                optional int32 f_2 = 6;
                optional int64 f_3 = 7;
              }
              repeated M57 f_5 = 6;
            }
            optional M49 f_3 = 4;
          }
          optional M33 f_1 = 2;
        }
        optional M30 f_1 = 2;
      }
      repeated M18 f_6 = 10;
      message M23 {
        optional string f_0 = 1;
      }
      optional M23 f_10 = 11;
    }
    optional M6 f_4 = 6;
    message M9 {
      optional uint32 f_0 = 1;
    }
    optional M9 f_6 = 7;
  }
  optional M1 f_7 = 8;
  message M2 {
    optional int32 f_0 = 2;
    optional int64 f_1 = 3;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 92;
      E1_CONST_2 = 101;
      E1_CONST_3 = 116;
      E1_CONST_4 = 125;
      E1_CONST_5 = 74;
    }
    optional E1 f_2 = 5;
    optional int64 f_3 = 6;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 61;
      E2_CONST_2 = 49;
      E2_CONST_3 = 81;
      E2_CONST_4 = 40;
      E2_CONST_5 = 119;
    }
    optional E2 f_4 = 7;
    optional string f_5 = 8;
    optional int32 f_6 = 9;
    repeated bytes f_7 = 10;
    optional int64 f_8 = 12;
    optional float f_9 = 13;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 58;
      E3_CONST_2 = 110;
      E3_CONST_3 = 49;
      E3_CONST_4 = 52;
      E3_CONST_5 = 57;
    }
    optional E3 f_10 = 14;
    optional int32 f_11 = 16;
    message M4 {
      repeated int64 f_0 = 3 [packed = true];
    }
    optional M4 f_16 = 17;
    message M5 {
      optional int64 f_0 = 1;
      optional double f_1 = 4;
      optional string f_2 = 5;
      optional uint32 f_3 = 6;
      message M12 {
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 90;
          E7_CONST_2 = 8;
          E7_CONST_3 = 60;
          E7_CONST_4 = 39;
          E7_CONST_5 = 77;
        }
        optional E7 f_0 = 3;
        message M31 {
          optional bool f_0 = 2;
          optional fixed64 f_1 = 3;
          optional int32 f_2 = 4;
          optional int64 f_3 = 6;
          optional double f_4 = 8;
          optional int32 f_5 = 9;
          optional uint32 f_6 = 12;
        }
        optional M31 f_3 = 5;
      }
      optional M12 f_6 = 8;
    }
    optional M5 f_17 = 18;
    message M7 {
      optional int64 f_0 = 2;
      optional float f_1 = 3;
      optional string f_2 = 5;
      optional uint32 f_3 = 7;
      message M24 {
        optional fixed32 f_0 = 2;
      }
      repeated M24 f_7 = 8;
    }
    repeated M7 f_18 = 19;
    message M8 {
      optional int32 f_0 = 1;
      message M20 {
        optional bytes f_0 = 1 [ctype = CORD];
      }
      optional M20 f_1 = 2;
      message M22 {
        optional bool f_0 = 1;
        message M26 {
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 14;
            E13_CONST_2 = 81;
            E13_CONST_3 = 94;
            E13_CONST_4 = 83;
            E13_CONST_5 = 38;
          }
          optional E13 f_0 = 3;
          optional int32 f_1 = 4;
          optional int64 f_2 = 5;
          optional int64 f_3 = 6;
          optional string f_4 = 7;
          optional int32 f_5 = 8;
          optional string f_6 = 9;
          optional int64 f_7 = 11;
          message M43 {
            repeated string f_0 = 1;
          }
          optional M43 f_11 = 12;
          message M45 {
            optional string f_0 = 1;
            enum E16 {
              E16_UNSPECIFIED = 0;
              E16_CONST_1 = 15;
              E16_CONST_2 = 76;
              E16_CONST_3 = 82;
              E16_CONST_4 = 45;
              E16_CONST_5 = 21;
            }
            optional E16 f_1 = 2;
            optional fixed64 f_2 = 4;
            optional int64 f_3 = 5;
            optional int64 f_4 = 6;
            optional int64 f_5 = 7;
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 8;
              E17_CONST_2 = 44;
              E17_CONST_3 = 14;
              E17_CONST_4 = 88;
              E17_CONST_5 = 101;
            }
            optional E17 f_6 = 9;
            optional int64 f_7 = 10;
          }
          optional M45 f_12 = 13;
        }
        optional M26 f_1 = 2;
        message M28 {
          optional int64 f_0 = 3;
          message M37 {
            optional string f_0 = 1;
            message M46 {
              optional string f_0 = 2;
              optional string f_1 = 3;
              optional uint64 f_2 = 4;
              enum E18 {
                E18_UNSPECIFIED = 0;
                E18_CONST_1 = 61;
                E18_CONST_2 = 32;
                E18_CONST_3 = 96;
                E18_CONST_4 = 18;
                E18_CONST_5 = 103;
              }
              optional E18 f_3 = 5;
              optional double f_4 = 6;
              optional string f_5 = 7;
              optional bool f_6 = 9;
              optional int32 f_7 = 10;
              optional float f_8 = 11;
              optional int64 f_9 = 13;
              optional uint32 f_10 = 14;
              repeated string f_11 = 16;
              optional fixed32 f_12 = 17;
              optional int32 f_13 = 19;
              optional float f_14 = 20;
              message M56 {
                optional int32 f_0 = 1;
              }
              repeated M56 f_20 = 21;
            }
            optional M46 f_1 = 2;
          }
          optional M37 f_3 = 4;
          message M38 {
            optional int64 f_0 = 2;
          }
          repeated M38 f_4 = 5;
          message M39 {
            optional bytes f_0 = 2;
          }
          optional M39 f_5 = 6;
          message M40 {
            enum E15 {
              E15_UNSPECIFIED = 0;
              E15_CONST_1 = 27;
              E15_CONST_2 = 7;
              E15_CONST_3 = 82;
              E15_CONST_4 = 99;
              E15_CONST_5 = 119;
            }
            optional E15 f_0 = 1;
          }
          optional M40 f_6 = 7;
          message M44 {
            optional string f_0 = 1;
            message M47 {
              enum E19 {
                E19_UNSPECIFIED = 0;
                E19_CONST_1 = 92;
                E19_CONST_2 = 29;
                E19_CONST_3 = 109;
                E19_CONST_4 = 41;
                E19_CONST_5 = 1;
              }
              optional E19 f_0 = 1;
              message M53 {
                optional fixed64 f_0 = 1;
                message M59 {
                  optional uint64 f_0 = 1;
                  message M67 {
                    repeated int32 f_0 = 1 [packed = true];
                    message M68 {
                      enum E24 {
                        E24_UNSPECIFIED = 0;
                        E24_CONST_1 = 123;
                        E24_CONST_2 = 49;
                        E24_CONST_3 = 35;
                        E24_CONST_4 = 108;
                        E24_CONST_5 = 112;
                      }
                      optional E24 f_0 = 1;
                      message M70 {
                        optional string f_0 = 1;
                        message M72 {
                          optional bytes f_0 = 5;
                          message M73 {
                            optional int64 f_0 = 2;
                            message M74 {
                              optional double f_0 = 1;
                              message M75 {
                                enum E26 {
                                  E26_UNSPECIFIED = 0;
                                  E26_CONST_1 = 76;
                                  E26_CONST_2 = 118;
                                  E26_CONST_3 = 53;
                                  E26_CONST_4 = 35;
                                  E26_CONST_5 = 19;
                                }
                                optional E26 f_0 = 1;
                                message M76 {
                                  optional string f_0 = 1;
                                }
                                repeated M76 f_1 = 2;
                                message M77 {
                                  optional int32 f_0 = 2;
                                  optional string f_1 = 3;
                                  optional string f_2 = 4;
                                  enum E27 {
                                    E27_UNSPECIFIED = 0;
                                    E27_CONST_1 = 32;
                                    E27_CONST_2 = 80;
                                    E27_CONST_3 = 62;
                                    E27_CONST_4 = 9;
                                    E27_CONST_5 = 14;
                                  }
                                  optional E27 f_3 = 6;
                                }
                                repeated M77 f_2 = 4;
                              }
                              optional M75 f_1 = 3;
                            }
                            optional M74 f_2 = 4;
                          }
                          repeated M73 f_5 = 6;
                        }
                        optional M72 f_1 = 4;
                      }
                      repeated M70 f_1 = 2;
                      message M71 {
                        optional int64 f_0 = 2;
                        optional float f_1 = 4;
                        enum E25 {
                          E25_UNSPECIFIED = 0;
                          E25_CONST_1 = 41;
                          E25_CONST_2 = 116;
                          E25_CONST_3 = 14;
                          E25_CONST_4 = 75;
                          E25_CONST_5 = 50;
                        }
                        optional E25 f_2 = 5;
                      }
                      optional M71 f_2 = 3;
                    }
                    repeated M68 f_1 = 2;
                    message M69 {
                      optional string f_0 = 1;
                      optional float f_1 = 2;
                    }
                    repeated M69 f_2 = 4;
                  }
                  repeated M67 f_1 = 2;
                }
                repeated M59 f_1 = 4;
              }
              repeated M53 f_1 = 2;
            }
            repeated M47 f_1 = 3;
          }
          optional M44 f_7 = 10;
        }
        optional M28 f_2 = 4;
      }
      repeated M22 f_2 = 5;
    }
    repeated M8 f_19 = 20;
    message M10 {
      optional int64 f_0 = 2;
      message M13 {
        optional double f_0 = 2;
      }
      repeated M13 f_2 = 3;
      message M15 {
        optional string f_0 = 2;
      }
      optional M15 f_3 = 5;
    }
    optional M10 f_20 = 23;
    message M11 {
      optional string f_0 = 1;
      message M16 {
        optional fixed32 f_0 = 1;
      }
      optional M16 f_1 = 3;
      message M17 {
        optional string f_0 = 1;
      }
      optional M17 f_3 = 5;
      message M25 {
        optional bool f_0 = 1;
        optional int64 f_1 = 2;
        optional int64 f_2 = 4;
        optional int64 f_3 = 5;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 51;
          E8_CONST_2 = 92;
          E8_CONST_3 = 76;
          E8_CONST_4 = 96;
          E8_CONST_5 = 22;
        }
        optional E8 f_4 = 6;
        optional int64 f_5 = 8;
        optional int64 f_6 = 9;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 52;
          E9_CONST_2 = 110;
          E9_CONST_3 = 67;
          E9_CONST_4 = 36;
          E9_CONST_5 = 2;
        }
        optional E9 f_7 = 11;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 126;
          E10_CONST_2 = 88;
          E10_CONST_3 = 72;
          E10_CONST_4 = 70;
          E10_CONST_5 = 71;
        }
        optional E10 f_8 = 13;
        optional int32 f_9 = 14;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 33;
          E11_CONST_2 = 5;
          E11_CONST_3 = 30;
          E11_CONST_4 = 97;
          E11_CONST_5 = 96;
        }
        optional E11 f_10 = 15;
        optional int32 f_11 = 17;
        optional bool f_12 = 18;
        optional int32 f_13 = 19;
        optional int64 f_14 = 22;
        optional string f_15 = 24;
        optional fixed32 f_16 = 26;
        optional float f_17 = 27;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 117;
          E12_CONST_2 = 97;
          E12_CONST_3 = 59;
          E12_CONST_4 = 6;
          E12_CONST_5 = 68;
        }
        optional E12 f_18 = 28;
        optional int32 f_19 = 30;
        optional string f_20 = 31;
        optional fixed32 f_21 = 32;
        optional string f_22 = 35;
        optional string f_23 = 36;
        optional string f_24 = 38;
        optional int32 f_25 = 39;
      }
      optional M25 f_5 = 6;
    }
    optional M11 f_23 = 24;
  }
  repeated M2 f_8 = 9;
}
