// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message2 {
  optional float f_0 = 2;
  optional int32 f_1 = 4;
  optional bool f_2 = 5;
  optional bool f_3 = 7;
  message M1 {
    optional int32 f_0 = 1;
    optional uint32 f_1 = 2;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 8;
      E1_CONST_2 = 73;
      E1_CONST_3 = 68;
      E1_CONST_4 = 75;
      E1_CONST_5 = 26;
    }
    optional E1 f_2 = 3;
    message M4 {
      optional int64 f_0 = 2;
    }
    repeated M4 f_3 = 4;
    message M5 {
      optional string f_0 = 1;
    }
    optional M5 f_4 = 6;
    message M6 {
      optional int32 f_0 = 2;
      message M12 {
        enum E26 {
          E26_UNSPECIFIED = 0;
          E26_CONST_1 = 41;
          E26_CONST_2 = 6;
          E26_CONST_3 = 106;
          E26_CONST_4 = 10;
          E26_CONST_5 = 8;
        }
        optional E26 f_0 = 2;
        message M19 {
          optional string f_0 = 1;
          message M29 {
            optional bool f_0 = 3;
          }
          optional M29 f_1 = 2;
          message M30 {
            optional int32 f_0 = 1;
            optional int64 f_1 = 3;
            optional uint64 f_2 = 5;
            optional int32 f_3 = 7;
            optional bool f_4 = 8;
          }
          repeated M30 f_2 = 4;
        }
        optional M19 f_2 = 4;
      }
      optional M12 f_2 = 3;
    }
    repeated M6 f_6 = 7;
    message M7 {
      enum E19 {
        E19_UNSPECIFIED = 0;
        E19_CONST_1 = 112;
        E19_CONST_2 = 125;
        E19_CONST_3 = 50;
        E19_CONST_4 = 108;
        E19_CONST_5 = 31;
      }
      optional E19 f_0 = 2;
    }
    repeated M7 f_7 = 9;
  }
  repeated M1 f_7 = 8;
  message M2 {
    optional fixed64 f_0 = 3;
    optional string f_1 = 4;
    optional double f_2 = 7;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 58;
      E2_CONST_2 = 49;
      E2_CONST_3 = 7;
      E2_CONST_4 = 57;
      E2_CONST_5 = 97;
    }
    optional E2 f_3 = 8;
    optional string f_4 = 9;
    optional fixed64 f_5 = 11;
    optional fixed64 f_6 = 12;
    optional int32 f_7 = 13;
    optional uint64 f_8 = 15;
    optional string f_9 = 18;
    optional string f_10 = 21;
    optional fixed32 f_11 = 22;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 50;
      E3_CONST_2 = 76;
      E3_CONST_3 = 10;
      E3_CONST_4 = 26;
      E3_CONST_5 = 54;
    }
    optional E3 f_12 = 23;
    optional string f_13 = 26;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 94;
      E4_CONST_2 = 18;
      E4_CONST_3 = 47;
      E4_CONST_4 = 26;
      E4_CONST_5 = 101;
    }
    optional E4 f_14 = 28;
    optional string f_15 = 29;
    optional float f_16 = 33;
    optional int64 f_17 = 35;
    optional float f_18 = 36;
    repeated int64 f_19 = 38 [packed = true];
    optional int32 f_20 = 40;
    optional bool f_21 = 42;
    optional bytes f_22 = 44;
    optional int64 f_23 = 45;
    optional int32 f_24 = 46;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 81;
      E5_CONST_2 = 88;
      E5_CONST_3 = 46;
      E5_CONST_4 = 61;
      E5_CONST_5 = 49;
    }
    optional E5 f_25 = 48;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 45;
      E6_CONST_2 = 21;
      E6_CONST_3 = 78;
      E6_CONST_4 = 66;
      E6_CONST_5 = 109;
    }
    optional E6 f_26 = 49;
    optional string f_27 = 52;
    optional bytes f_28 = 53;
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 63;
      E7_CONST_2 = 6;
      E7_CONST_3 = 54;
      E7_CONST_4 = 75;
      E7_CONST_5 = 60;
    }
    optional E7 f_29 = 55;
    repeated uint64 f_30 = 56 [packed = true];
    optional bytes f_31 = 57;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 72;
      E8_CONST_2 = 48;
      E8_CONST_3 = 77;
      E8_CONST_4 = 62;
      E8_CONST_5 = 122;
    }
    optional E8 f_32 = 59;
    optional int64 f_33 = 60;
    optional int64 f_34 = 64;
    optional fixed64 f_35 = 68;
    enum E9 {
      E9_UNSPECIFIED = 0;
      E9_CONST_1 = 103;
      E9_CONST_2 = 23;
      E9_CONST_3 = 83;
      E9_CONST_4 = 104;
      E9_CONST_5 = 47;
    }
    optional E9 f_36 = 69;
    repeated bytes f_37 = 70;
    optional int64 f_38 = 71;
    optional string f_39 = 74;
    enum E10 {
      E10_UNSPECIFIED = 0;
      E10_CONST_1 = 90;
      E10_CONST_2 = 68;
      E10_CONST_3 = 46;
      E10_CONST_4 = 104;
      E10_CONST_5 = 120;
    }
    optional E10 f_40 = 75;
    optional int32 f_41 = 76;
    optional string f_42 = 77;
    optional int32 f_43 = 78;
    enum E11 {
      E11_UNSPECIFIED = 0;
      E11_CONST_1 = 121;
      E11_CONST_2 = 68;
      E11_CONST_3 = 12;
      E11_CONST_4 = 1;
      E11_CONST_5 = 29;
    }
    optional E11 f_44 = 79;
    optional int32 f_45 = 82;
    optional string f_46 = 83;
    enum E12 {
      E12_UNSPECIFIED = 0;
      E12_CONST_1 = 47;
      E12_CONST_2 = 68;
      E12_CONST_3 = 66;
      E12_CONST_4 = 42;
      E12_CONST_5 = 38;
    }
    optional E12 f_47 = 84;
    optional bool f_48 = 87;
    enum E13 {
      E13_UNSPECIFIED = 0;
      E13_CONST_1 = 76;
      E13_CONST_2 = 66;
      E13_CONST_3 = 93;
      E13_CONST_4 = 122;
      E13_CONST_5 = 53;
    }
    optional E13 f_49 = 88;
    optional int32 f_50 = 89;
    enum E14 {
      E14_UNSPECIFIED = 0;
      E14_CONST_1 = 119;
      E14_CONST_2 = 18;
      E14_CONST_3 = 41;
      E14_CONST_4 = 79;
      E14_CONST_5 = 50;
    }
    optional E14 f_51 = 90;
    optional int32 f_52 = 92;
    optional float f_53 = 94;
    optional bool f_54 = 95;
    optional int64 f_55 = 96;
    optional int64 f_56 = 97;
    enum E15 {
      E15_UNSPECIFIED = 0;
      E15_CONST_1 = 20;
      E15_CONST_2 = 92;
      E15_CONST_3 = 75;
      E15_CONST_4 = 9;
      E15_CONST_5 = 18;
    }
    optional E15 f_57 = 98;
    optional double f_58 = 99;
    optional string f_59 = 101;
    optional int32 f_60 = 102;
    optional int32 f_61 = 103;
    optional int32 f_62 = 104;
    enum E16 {
      E16_UNSPECIFIED = 0;
      E16_CONST_1 = 35;
      E16_CONST_2 = 75;
      E16_CONST_3 = 117;
      E16_CONST_4 = 73;
      E16_CONST_5 = 18;
    }
    optional E16 f_63 = 105;
    optional string f_64 = 106;
    enum E17 {
      E17_UNSPECIFIED = 0;
      E17_CONST_1 = 67;
      E17_CONST_2 = 56;
      E17_CONST_3 = 6;
      E17_CONST_4 = 44;
      E17_CONST_5 = 21;
    }
    optional E17 f_65 = 107;
    optional int64 f_66 = 108;
    optional bool f_67 = 109;
    enum E18 {
      E18_UNSPECIFIED = 0;
      E18_CONST_1 = 15;
      E18_CONST_2 = 67;
      E18_CONST_3 = 22;
      E18_CONST_4 = 7;
      E18_CONST_5 = 48;
    }
    repeated E18 f_68 = 110 [packed = true];
    optional int32 f_69 = 111;
    optional int32 f_70 = 112;
    optional int64 f_71 = 113;
    optional string f_72 = 115;
    repeated bytes f_73 = 117;
    optional int64 f_74 = 118;
    optional uint32 f_75 = 119;
    optional int64 f_76 = 121;
    optional string f_77 = 122;
    optional int32 f_78 = 123;
    optional bool f_79 = 124;
    optional int64 f_80 = 126;
    optional float f_81 = 127;
    optional int64 f_82 = 129;
    optional bool f_83 = 130;
    optional int64 f_84 = 132;
    optional int64 f_85 = 133;
    optional string f_86 = 135;
    optional int64 f_87 = 136;
    optional int64 f_88 = 137;
    optional int32 f_89 = 138;
    optional string f_90 = 139;
    optional int64 f_91 = 140;
    optional int32 f_92 = 141;
    optional float f_93 = 143;
    optional bool f_94 = 146;
    optional int64 f_95 = 148;
    optional int32 f_96 = 149;
    optional int32 f_97 = 150;
    message M3 {
      optional int64 f_0 = 1;
      optional bytes f_1 = 2;
      message M9 {
        optional int64 f_0 = 1;
        message M17 {
          optional bool f_0 = 1;
          optional string f_1 = 2;
          optional int32 f_2 = 3;
          enum E28 {
            E28_UNSPECIFIED = 0;
            E28_CONST_1 = 110;
            E28_CONST_2 = 63;
            E28_CONST_3 = 114;
            E28_CONST_4 = 88;
            E28_CONST_5 = 120;
          }
          optional E28 f_3 = 4;
          optional string f_4 = 6;
          message M23 {
            optional bytes f_0 = 1;
          }
          repeated M23 f_6 = 8;
          message M27 {
            optional string f_0 = 1;
          }
          repeated M27 f_8 = 10;
        }
        repeated M17 f_1 = 2;
      }
      optional M9 f_2 = 4;
      message M11 {
        optional int32 f_0 = 1;
        message M16 {
          optional bool f_0 = 2;
        }
        optional M16 f_1 = 4;
        message M18 {
          optional uint64 f_0 = 2;
          message M22 {
            optional string f_0 = 1;
          }
          optional M22 f_2 = 3;
          message M28 {
            enum E35 {
              E35_UNSPECIFIED = 0;
              E35_CONST_1 = 58;
              E35_CONST_2 = 21;
              E35_CONST_3 = 15;
              E35_CONST_4 = 81;
              E35_CONST_5 = 34;
            }
            optional E35 f_0 = 1;
          }
          optional M28 f_3 = 4;
        }
        optional M18 f_4 = 7;
        message M20 {
          optional int32 f_0 = 2;
          optional int64 f_1 = 6;
          optional double f_2 = 7;
          optional int32 f_3 = 9;
          optional bool f_4 = 10;
          optional fixed64 f_5 = 11;
          optional string f_6 = 12;
          enum E29 {
            E29_UNSPECIFIED = 0;
            E29_CONST_1 = 40;
            E29_CONST_2 = 71;
            E29_CONST_3 = 44;
            E29_CONST_4 = 89;
            E29_CONST_5 = 93;
          }
          optional E29 f_7 = 15;
          enum E30 {
            E30_UNSPECIFIED = 0;
            E30_CONST_1 = 66;
            E30_CONST_2 = 117;
            E30_CONST_3 = 82;
            E30_CONST_4 = 64;
            E30_CONST_5 = 5;
          }
          optional E30 f_8 = 17;
          optional bool f_9 = 18;
          optional int32 f_10 = 20;
          repeated bytes f_11 = 22;
          enum E31 {
            E31_UNSPECIFIED = 0;
            E31_CONST_1 = 88;
            E31_CONST_2 = 119;
            E31_CONST_3 = 21;
            E31_CONST_4 = 101;
            E31_CONST_5 = 24;
          }
          optional E31 f_12 = 23;
          optional float f_13 = 25;
          optional float f_14 = 28;
          optional fixed64 f_15 = 29;
          optional string f_16 = 30;
          optional int32 f_17 = 31;
          optional string f_18 = 33;
          optional string f_19 = 36;
          optional int64 f_20 = 37;
          optional int32 f_21 = 38;
          message M24 {
            optional double f_0 = 1;
            message M31 {
              optional double f_0 = 1;
              optional int64 f_1 = 3;
              optional int64 f_2 = 4;
              optional bool f_3 = 5;
              optional int64 f_4 = 6;
              enum E36 {
                E36_UNSPECIFIED = 0;
                E36_CONST_1 = 60;
                E36_CONST_2 = 97;
                E36_CONST_3 = 74;
                E36_CONST_4 = 30;
                E36_CONST_5 = 25;
              }
              optional E36 f_5 = 7;
              optional bool f_6 = 8;
              enum E37 {
                E37_UNSPECIFIED = 0;
                E37_CONST_1 = 19;
                E37_CONST_2 = 74;
                E37_CONST_3 = 27;
                E37_CONST_4 = 47;
                E37_CONST_5 = 25;
              }
              optional E37 f_7 = 9;
              optional uint64 f_8 = 10;
              optional bool f_9 = 11;
              optional bytes f_10 = 13;
              enum E38 {
                E38_UNSPECIFIED = 0;
                E38_CONST_1 = 109;
                E38_CONST_2 = 125;
                E38_CONST_3 = 61;
                E38_CONST_4 = 39;
                E38_CONST_5 = 47;
              }
              optional E38 f_11 = 15;
              optional bool f_12 = 16;
              optional int32 f_13 = 18;
              enum E39 {
                E39_UNSPECIFIED = 0;
                E39_CONST_1 = 65;
                E39_CONST_2 = 61;
                E39_CONST_3 = 123;
                E39_CONST_4 = 52;
                E39_CONST_5 = 2;
              }
              optional E39 f_14 = 19;
              optional int32 f_15 = 21;
              enum E40 {
                E40_UNSPECIFIED = 0;
                E40_CONST_1 = 31;
                E40_CONST_2 = 120;
                E40_CONST_3 = 75;
                E40_CONST_4 = 63;
                E40_CONST_5 = 23;
              }
              repeated E40 f_16 = 23 [packed = true];
              optional uint64 f_17 = 25;
              optional float f_18 = 26;
              optional float f_19 = 27;
              optional int64 f_20 = 29;
              optional int64 f_21 = 30;
              optional bool f_22 = 32;
              optional int64 f_23 = 33;
              optional int32 f_24 = 35;
              optional string f_25 = 37;
              optional string f_26 = 38;
              optional uint32 f_27 = 39;
              optional int32 f_28 = 40;
              optional bool f_29 = 41;
              optional string f_30 = 42;
              enum E41 {
                E41_UNSPECIFIED = 0;
                E41_CONST_1 = 97;
                E41_CONST_2 = 13;
                E41_CONST_3 = 69;
                E41_CONST_4 = 83;
                E41_CONST_5 = 66;
              }
              optional E41 f_31 = 43;
              optional string f_32 = 44;
              optional float f_33 = 45;
              optional string f_34 = 46;
              optional fixed32 f_35 = 47;
              enum E42 {
                E42_UNSPECIFIED = 0;
                E42_CONST_1 = 81;
                E42_CONST_2 = 40;
                E42_CONST_3 = 9;
                E42_CONST_4 = 95;
                E42_CONST_5 = 74;
              }
              optional E42 f_36 = 49;
              enum E43 {
                E43_UNSPECIFIED = 0;
                E43_CONST_1 = 112;
                E43_CONST_2 = 87;
                E43_CONST_3 = 81;
                E43_CONST_4 = 91;
                E43_CONST_5 = 97;
              }
              repeated E43 f_37 = 50 [packed = true];
              enum E44 {
                E44_UNSPECIFIED = 0;
                E44_CONST_1 = 21;
                E44_CONST_2 = 96;
                E44_CONST_3 = 82;
                E44_CONST_4 = 111;
                E44_CONST_5 = 108;
              }
              optional E44 f_38 = 51;
              enum E45 {
                E45_UNSPECIFIED = 0;
                E45_CONST_1 = 30;
                E45_CONST_2 = 13;
                E45_CONST_3 = 45;
                E45_CONST_4 = 2;
                E45_CONST_5 = 59;
              }
              optional E45 f_39 = 53;
              optional fixed64 f_40 = 56;
              optional uint32 f_41 = 58;
              optional string f_42 = 59;
              optional int32 f_43 = 61;
              enum E46 {
                E46_UNSPECIFIED = 0;
                E46_CONST_1 = 77;
                E46_CONST_2 = 10;
                E46_CONST_3 = 51;
                E46_CONST_4 = 6;
                E46_CONST_5 = 19;
              }
              optional E46 f_44 = 62;
              optional int64 f_45 = 64;
              optional string f_46 = 66;
              optional string f_47 = 68;
              optional string f_48 = 70;
              enum E47 {
                E47_UNSPECIFIED = 0;
                E47_CONST_1 = 4;
                E47_CONST_2 = 96;
                E47_CONST_3 = 86;
                E47_CONST_4 = 113;
                E47_CONST_5 = 78;
              }
              optional E47 f_49 = 71;
              optional int64 f_50 = 72;
              optional uint64 f_51 = 73;
              optional float f_52 = 74;
              optional float f_53 = 75;
              optional fixed32 f_54 = 77;
              optional string f_55 = 80;
              optional string f_56 = 81;
              optional int64 f_57 = 83;
              optional int32 f_58 = 84;
              optional string f_59 = 85;
              optional int32 f_60 = 88;
              optional int32 f_61 = 89;
              optional int64 f_62 = 91;
              optional int32 f_63 = 93;
              optional bool f_64 = 94;
              optional int64 f_65 = 96;
              optional int32 f_66 = 97;
              message M32 {
                optional int32 f_0 = 1;
                message M46 {
                  optional int64 f_0 = 2;
                  message M50 {
                    optional fixed64 f_0 = 2;
                    optional int32 f_1 = 3;
                    optional float f_2 = 5;
                    optional fixed32 f_3 = 6;
                    message M51 {
                      repeated fixed32 f_0 = 1 [packed = true];
                    }
                    repeated M51 f_6 = 8;
                    message M52 {
                      optional double f_0 = 1;
                      optional int32 f_1 = 2;
                      enum E53 {
                        E53_UNSPECIFIED = 0;
                        E53_CONST_1 = 121;
                        E53_CONST_2 = 69;
                        E53_CONST_3 = 107;
                        E53_CONST_4 = 106;
                        E53_CONST_5 = 94;
                      }
                      repeated E53 f_2 = 4 [packed = true];
                      optional string f_3 = 5;
                      enum E54 {
                        E54_UNSPECIFIED = 0;
                        E54_CONST_1 = 29;
                        E54_CONST_2 = 18;
                        E54_CONST_3 = 100;
                        E54_CONST_4 = 12;
                        E54_CONST_5 = 54;
                      }
                      optional E54 f_4 = 6;
                      optional float f_5 = 7;
                      optional fixed64 f_6 = 9;
                      optional int32 f_7 = 11;
                      optional bool f_8 = 12;
                      optional string f_9 = 14;
                      message M53 {
                        optional string f_0 = 1;
                      }
                      repeated M53 f_14 = 15;
                      message M54 {
                        enum E55 {
                          E55_UNSPECIFIED = 0;
                          E55_CONST_1 = 2;
                          E55_CONST_2 = 38;
                          E55_CONST_3 = 39;
                          E55_CONST_4 = 68;
                          E55_CONST_5 = 74;
                        }
                        optional E55 f_0 = 1;
                        repeated string f_1 = 2;
                        message M55 {
                          optional bool f_0 = 2;
                          message M56 {
                            optional string f_0 = 1;
                            message M57 {
                              optional uint32 f_0 = 1;
                              message M58 {
                                optional int64 f_0 = 1;
                                message M59 {
                                  optional int32 f_0 = 1;
                                }
                                optional M59 f_1 = 3;
                                message M60 {
                                  optional int64 f_0 = 1;
                                }
                                repeated M60 f_3 = 7;
                              }
                              optional M58 f_1 = 3;
                            }
                            optional M57 f_1 = 2;
                          }
                          repeated M56 f_2 = 5;
                        }
                        optional M55 f_2 = 3;
                      }
                      repeated M54 f_15 = 16;
                    }
                    optional M52 f_8 = 9;
                  }
                  optional M50 f_2 = 4;
                }
                repeated M46 f_1 = 3;
              }
              repeated M32 f_97 = 99;
              message M33 {
                optional int32 f_0 = 1;
              }
              optional M33 f_99 = 101;
              message M34 {
                optional bool f_0 = 2;
              }
              repeated M34 f_101 = 102;
              message M35 {
                optional string f_0 = 1;
              }
              optional M35 f_102 = 104;
              message M36 {
                optional int64 f_0 = 2;
                message M48 {
                  optional int64 f_0 = 1;
                  optional int64 f_1 = 2;
                  optional int32 f_2 = 4;
                  optional bool f_3 = 5;
                  enum E51 {
                    E51_UNSPECIFIED = 0;
                    E51_CONST_1 = 47;
                    E51_CONST_2 = 23;
                    E51_CONST_3 = 88;
                    E51_CONST_4 = 115;
                    E51_CONST_5 = 51;
                  }
                  optional E51 f_4 = 6;
                  optional int64 f_5 = 7;
                  optional double f_6 = 10;
                  optional int32 f_7 = 11;
                  optional fixed32 f_8 = 12;
                  optional float f_9 = 13;
                  optional string f_10 = 15;
                  optional int64 f_11 = 17;
                  optional int64 f_12 = 18;
                  optional string f_13 = 19;
                  enum E52 {
                    E52_UNSPECIFIED = 0;
                    E52_CONST_1 = 69;
                    E52_CONST_2 = 58;
                    E52_CONST_3 = 53;
                    E52_CONST_4 = 117;
                    E52_CONST_5 = 46;
                  }
                  optional E52 f_14 = 20;
                  optional float f_15 = 21;
                  repeated string f_16 = 23;
                  optional int64 f_17 = 25;
                  optional int64 f_18 = 27;
                  message M49 {
                    optional fixed32 f_0 = 1;
                  }
                  optional M49 f_27 = 30;
                }
                optional M48 f_2 = 3;
              }
              optional M36 f_104 = 105;
              message M37 {
                enum E48 {
                  E48_UNSPECIFIED = 0;
                  E48_CONST_1 = 97;
                  E48_CONST_2 = 16;
                  E48_CONST_3 = 90;
                  E48_CONST_4 = 63;
                  E48_CONST_5 = 105;
                }
                optional E48 f_0 = 2;
              }
              repeated M37 f_105 = 106;
              message M38 {
                optional int64 f_0 = 1;
              }
              optional M38 f_106 = 107;
              message M39 {
                optional float f_0 = 1;
                optional double f_1 = 3;
                message M47 {
                  optional bool f_0 = 1;
                  optional int64 f_1 = 2;
                }
                optional M47 f_3 = 4;
              }
              optional M39 f_107 = 108;
              message M40 {
                optional bytes f_0 = 2;
              }
              repeated M40 f_108 = 109;
              message M41 {
                enum E49 {
                  E49_UNSPECIFIED = 0;
                  E49_CONST_1 = 109;
                  E49_CONST_2 = 92;
                  E49_CONST_3 = 39;
                  E49_CONST_4 = 19;
                  E49_CONST_5 = 94;
                }
                optional E49 f_0 = 1;
                message M44 {
                  optional uint32 f_0 = 1;
                }
                repeated M44 f_1 = 3;
                message M45 {
                  optional bool f_0 = 3;
                }
                optional M45 f_3 = 4;
              }
              optional M41 f_109 = 110;
              message M42 {
                enum E50 {
                  E50_UNSPECIFIED = 0;
                  E50_CONST_1 = 15;
                  E50_CONST_2 = 29;
                  E50_CONST_3 = 106;
                  E50_CONST_4 = 88;
                  E50_CONST_5 = 119;
                }
                optional E50 f_0 = 2;
              }
              optional M42 f_110 = 111;
              message M43 {
                repeated string f_0 = 1;
              }
              optional M43 f_111 = 113;
            }
            repeated M31 f_1 = 2;
          }
          optional M24 f_38 = 39;
        }
        repeated M20 f_7 = 8;
      }
      optional M11 f_4 = 5;
      message M13 {
        optional float f_0 = 3;
        optional string f_1 = 4;
        optional string f_2 = 6;
        optional int32 f_3 = 9;
        optional int64 f_4 = 10;
        enum E27 {
          E27_UNSPECIFIED = 0;
          E27_CONST_1 = 4;
          E27_CONST_2 = 67;
          E27_CONST_3 = 12;
          E27_CONST_4 = 106;
          E27_CONST_5 = 78;
        }
        optional E27 f_5 = 11;
        optional string f_6 = 12;
        optional int32 f_7 = 13;
        optional string f_8 = 15;
        optional int64 f_9 = 17;
        optional string f_10 = 18;
        optional int32 f_11 = 19;
        optional bytes f_12 = 20 ;
        optional bool f_13 = 21;
        optional string f_14 = 23;
        optional string f_15 = 24;
        message M15 {
          optional string f_0 = 2;
          optional string f_1 = 4;
          optional fixed32 f_2 = 5;
          repeated int32 f_3 = 6 [packed = true];
          optional float f_4 = 7;
          optional float f_5 = 8;
          optional double f_6 = 9;
          optional float f_7 = 10;
        }
        repeated M15 f_24 = 25;
      }
      repeated M13 f_5 = 7;
    }
    repeated M3 f_150 = 152;
    message M8 {
      optional int32 f_0 = 2;
      optional uint64 f_1 = 3;
      optional int32 f_2 = 4;
      optional bool f_3 = 5;
      optional int32 f_4 = 7;
      optional string f_5 = 8;
      enum E20 {
        E20_UNSPECIFIED = 0;
        E20_CONST_1 = 110;
        E20_CONST_2 = 18;
        E20_CONST_3 = 70;
        E20_CONST_4 = 21;
        E20_CONST_5 = 117;
      }
      optional E20 f_6 = 9;
      optional double f_7 = 12;
      optional int64 f_8 = 13;
      optional string f_9 = 14;
      optional int32 f_10 = 15;
      optional int64 f_11 = 16;
      optional float f_12 = 17;
      optional int64 f_13 = 18;
      optional fixed32 f_14 = 20;
      optional int64 f_15 = 21;
      optional int64 f_16 = 24;
      optional int64 f_17 = 25;
      enum E21 {
        E21_UNSPECIFIED = 0;
        E21_CONST_1 = 52;
        E21_CONST_2 = 54;
        E21_CONST_3 = 94;
        E21_CONST_4 = 88;
        E21_CONST_5 = 23;
      }
      repeated E21 f_18 = 26 [packed = true];
      optional int64 f_19 = 27;
      optional string f_20 = 28;
      optional int64 f_21 = 30;
      optional double f_22 = 31;
      optional int64 f_23 = 32;
      enum E22 {
        E22_UNSPECIFIED = 0;
        E22_CONST_1 = 48;
        E22_CONST_2 = 3;
        E22_CONST_3 = 5;
        E22_CONST_4 = 23;
        E22_CONST_5 = 104;
      }
      optional E22 f_24 = 33;
      optional int64 f_25 = 34;
      optional string f_26 = 35;
      repeated string f_27 = 36;
      optional int64 f_28 = 39;
      optional int64 f_29 = 40;
      optional uint64 f_30 = 42;
      optional int32 f_31 = 43;
      optional int32 f_32 = 44;
      optional fixed64 f_33 = 46;
      optional int32 f_34 = 47;
      optional uint64 f_35 = 48;
      optional int64 f_36 = 50;
      optional double f_37 = 51;
      optional int32 f_38 = 52;
      optional int32 f_39 = 54;
      optional string f_40 = 55;
      optional int32 f_41 = 56;
      optional int64 f_42 = 57;
      optional int32 f_43 = 58;
      enum E23 {
        E23_UNSPECIFIED = 0;
        E23_CONST_1 = 9;
        E23_CONST_2 = 99;
        E23_CONST_3 = 15;
        E23_CONST_4 = 41;
        E23_CONST_5 = 29;
      }
      optional E23 f_44 = 59;
      optional int32 f_45 = 60;
      repeated sint32 f_46 = 61 [packed = true];
      optional bool f_47 = 62;
      optional int32 f_48 = 65;
      optional double f_49 = 67;
      enum E24 {
        E24_UNSPECIFIED = 0;
        E24_CONST_1 = 79;
        E24_CONST_2 = 35;
        E24_CONST_3 = 88;
        E24_CONST_4 = 6;
        E24_CONST_5 = 53;
      }
      optional E24 f_50 = 68;
      optional fixed32 f_51 = 69;
      optional uint32 f_52 = 70;
      optional int64 f_53 = 72;
      optional bool f_54 = 74;
      optional string f_55 = 75;
      repeated bytes f_56 = 78;
      optional int64 f_57 = 80;
      optional string f_58 = 82;
      optional uint64 f_59 = 83;
      optional int64 f_60 = 86;
      optional float f_61 = 87;
      optional int32 f_62 = 92;
      optional string f_63 = 93;
      message M10 {
        repeated string f_0 = 1;
        optional int64 f_1 = 2;
        enum E25 {
          E25_UNSPECIFIED = 0;
          E25_CONST_1 = 58;
          E25_CONST_2 = 11;
          E25_CONST_3 = 126;
          E25_CONST_4 = 1;
          E25_CONST_5 = 70;
        }
        repeated E25 f_2 = 4 [packed = true];
        optional string f_3 = 5;
        optional bool f_4 = 7;
        optional int64 f_5 = 8;
        optional float f_6 = 9;
        optional int64 f_7 = 10;
        optional bytes f_8 = 11 ;
        optional int32 f_9 = 12;
        optional int32 f_10 = 14;
        message M14 {
          optional int32 f_0 = 2;
          message M21 {
            optional int64 f_0 = 1;
          }
          optional M21 f_2 = 3;
          message M25 {
            optional float f_0 = 2;
          }
          repeated M25 f_3 = 4;
          message M26 {
            enum E32 {
              E32_UNSPECIFIED = 0;
              E32_CONST_1 = 121;
              E32_CONST_2 = 76;
              E32_CONST_3 = 16;
              E32_CONST_4 = 22;
              E32_CONST_5 = 67;
            }
            optional E32 f_0 = 4;
            enum E33 {
              E33_UNSPECIFIED = 0;
              E33_CONST_1 = 121;
              E33_CONST_2 = 47;
              E33_CONST_3 = 64;
              E33_CONST_4 = 10;
              E33_CONST_5 = 123;
            }
            optional E33 f_1 = 5;
            optional bool f_2 = 6;
            optional int32 f_3 = 7;
            optional fixed32 f_4 = 9;
            repeated string f_5 = 11;
            optional bytes f_6 = 13 [ctype = CORD];
            enum E34 {
              E34_UNSPECIFIED = 0;
              E34_CONST_1 = 21;
              E34_CONST_2 = 15;
              E34_CONST_3 = 4;
              E34_CONST_4 = 53;
              E34_CONST_5 = 63;
            }
            optional E34 f_7 = 14;
            optional int64 f_8 = 15;
          }
          optional M26 f_4 = 8;
        }
        repeated M14 f_14 = 16;
      }
      repeated M10 f_93 = 94;
    }
    repeated M8 f_152 = 153;
  }
  repeated M2 f_8 = 10;
}
