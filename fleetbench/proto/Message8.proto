// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message8 {
  optional bool f_0 = 1;
  optional float f_1 = 3;
  optional bytes f_2 = 4 [ctype = CORD];
  optional bool f_3 = 6;
  message M1 {
    optional int64 f_0 = 1;
    message M14 {
      optional fixed64 f_0 = 1;
    }
    optional M14 f_1 = 3;
  }
  repeated M1 f_6 = 7;
  message M2 {
    optional uint64 f_0 = 1;
    message M8 {
      optional uint32 f_0 = 1;
    }
    repeated M8 f_1 = 3;
    message M13 {
      optional int64 f_0 = 1;
    }
    optional M13 f_3 = 4;
  }
  optional M2 f_7 = 8;
  message M3 {
    optional int32 f_0 = 1;
    message M11 {
      optional int32 f_0 = 1;
    }
    optional M11 f_1 = 2;
    message M16 {
      optional bytes f_0 = 1;
    }
    optional M16 f_2 = 3;
    message M18 {
      optional int32 f_0 = 1;
      message M19 {
        optional bool f_0 = 2;
        message M25 {
          optional bytes f_0 = 2;
          enum E4 {
            E4_UNSPECIFIED = 0;
            E4_CONST_1 = 42;
            E4_CONST_2 = 37;
            E4_CONST_3 = 39;
            E4_CONST_4 = 61;
            E4_CONST_5 = 33;
          }
          optional E4 f_1 = 3;
          repeated int64 f_2 = 5 [packed = true];
          optional int64 f_3 = 6;
          optional float f_4 = 7;
          optional string f_5 = 9;
          optional fixed32 f_6 = 10;
          optional float f_7 = 11;
          optional string f_8 = 12;
          optional int64 f_9 = 14;
          optional bytes f_10 = 15;
          optional int32 f_11 = 16;
          optional bytes f_12 = 18;
          optional uint64 f_13 = 21;
          optional int32 f_14 = 23;
          optional int64 f_15 = 25;
          optional int64 f_16 = 27;
          optional string f_17 = 28;
        }
        optional M25 f_2 = 3;
      }
      optional M19 f_1 = 3;
      message M22 {
        optional bool f_0 = 1;
        optional double f_1 = 2;
        repeated uint64 f_2 = 5 [packed = true];
        optional int32 f_3 = 6;
      }
      optional M22 f_3 = 4;
    }
    optional M18 f_3 = 4;
  }
  repeated M3 f_8 = 10;
  message M4 {
    optional bytes f_0 = 1 ;
    message M9 {
      optional int64 f_0 = 2;
      optional int32 f_1 = 3;
      optional float f_2 = 4;
      optional string f_3 = 5;
      optional int64 f_4 = 6;
      message M23 {
        optional int64 f_0 = 1;
        message M24 {
          enum E3 {
            E3_UNSPECIFIED = 0;
            E3_CONST_1 = 93;
            E3_CONST_2 = 117;
            E3_CONST_3 = 101;
            E3_CONST_4 = 87;
            E3_CONST_5 = 58;
          }
          optional E3 f_0 = 1;
          message M29 {
            enum E5 {
              E5_UNSPECIFIED = 0;
              E5_CONST_1 = 117;
              E5_CONST_2 = 86;
              E5_CONST_3 = 95;
              E5_CONST_4 = 55;
              E5_CONST_5 = 71;
            }
            repeated E5 f_0 = 3 [packed = true];
            message M41 {
              optional int32 f_0 = 1;
            }
            repeated M41 f_3 = 4;
          }
          repeated M29 f_1 = 2;
          message M31 {
            enum E6 {
              E6_UNSPECIFIED = 0;
              E6_CONST_1 = 7901;
              E6_CONST_2 = 60;
              E6_CONST_3 = 75;
              E6_CONST_4 = 21;
              E6_CONST_5 = 113;
            }
            optional E6 f_0 = 1;
            optional string f_1 = 2;
            optional int64 f_2 = 7;
            message M38 {
              optional uint32 f_0 = 1;
            }
            optional M38 f_7 = 9;
          }
          optional M31 f_2 = 3;
          message M33 {
            enum E8 {
              E8_UNSPECIFIED = 0;
              E8_CONST_1 = 20;
              E8_CONST_2 = 55;
              E8_CONST_3 = 37;
              E8_CONST_4 = 81;
              E8_CONST_5 = 7;
            }
            optional E8 f_0 = 1;
            optional fixed32 f_1 = 3;
            optional bool f_2 = 4;
            optional string f_3 = 5;
            message M36 {
              optional string f_0 = 2;
              optional string f_1 = 3;
              message M47 {
                enum E9 {
                  E9_UNSPECIFIED = 0;
                  E9_CONST_1 = 62;
                  E9_CONST_2 = 1;
                  E9_CONST_3 = 18;
                  E9_CONST_4 = 27;
                  E9_CONST_5 = 7;
                }
                optional E9 f_0 = 2;
              }
              optional M47 f_3 = 5;
            }
            repeated M36 f_5 = 7;
            message M39 {
              optional int64 f_0 = 1;
              message M48 {
                optional int32 f_0 = 1;
              }
              optional M48 f_1 = 3;
            }
            repeated M39 f_7 = 9;
            message M44 {
              optional double f_0 = 2;
              optional double f_1 = 3;
              message M49 {
                optional bytes f_0 = 2;
                message M57 {
                  repeated string f_0 = 1;
                  message M61 {
                    optional uint64 f_0 = 4;
                  }
                  optional M61 f_1 = 3;
                }
                repeated M57 f_2 = 4;
                message M59 {
                  optional string f_0 = 1;
                  optional bool f_1 = 2;
                }
                repeated M59 f_4 = 5;
              }
              repeated M49 f_3 = 6;
              message M53 {
                enum E10 {
                  E10_UNSPECIFIED = 0;
                  E10_CONST_1 = 46;
                  E10_CONST_2 = 117;
                  E10_CONST_3 = 34;
                  E10_CONST_4 = 56;
                  E10_CONST_5 = 67;
                }
                optional E10 f_0 = 1;
                message M56 {
                  optional string f_0 = 1 ;
                }
                optional M56 f_1 = 3;
                message M58 {
                  repeated string f_0 = 1;
                  message M62 {
                    optional int32 f_0 = 3;
                    message M64 {
                      optional fixed64 f_0 = 1;
                      message M66 {
                        optional int64 f_0 = 2;
                        message M68 {
                          optional float f_0 = 1;
                          message M69 {
                            optional bytes f_0 = 1 [ctype = CORD];
                            message M70 {
                              optional string f_0 = 2;
                              message M71 {
                                enum E13 {
                                  E13_UNSPECIFIED = 0;
                                  E13_CONST_1 = 53;
                                  E13_CONST_2 = 23;
                                  E13_CONST_3 = 112;
                                  E13_CONST_4 = 4;
                                  E13_CONST_5 = 56;
                                }
                                optional E13 f_0 = 2;
                                message M72 {
                                  optional fixed32 f_0 = 2;
                                }
                                optional M72 f_2 = 3;
                                message M73 {
                                  optional float f_0 = 1;
                                }
                                repeated M73 f_3 = 6;
                              }
                              optional M71 f_2 = 3;
                            }
                            repeated M70 f_1 = 2;
                          }
                          repeated M69 f_1 = 3;
                        }
                        optional M68 f_2 = 3;
                      }
                      repeated M66 f_1 = 2;
                    }
                    optional M64 f_3 = 5;
                    message M65 {
                      optional float f_0 = 1;
                      enum E12 {
                        E12_UNSPECIFIED = 0;
                        E12_CONST_1 = 37;
                        E12_CONST_2 = 53;
                        E12_CONST_3 = 64;
                        E12_CONST_4 = 32;
                        E12_CONST_5 = 82;
                      }
                      repeated E12 f_1 = 2 [packed = true];
                      message M67 {
                        optional fixed64 f_0 = 1;
                      }
                      repeated M67 f_2 = 3;
                    }
                    repeated M65 f_5 = 6;
                  }
                  optional M62 f_1 = 2;
                }
                repeated M58 f_3 = 4;
              }
              optional M53 f_6 = 8;
            }
            repeated M44 f_9 = 11;
          }
          repeated M33 f_3 = 5;
        }
        repeated M24 f_1 = 2;
        message M27 {
          optional double f_0 = 1;
          message M34 {
            optional int64 f_0 = 2;
          }
          optional M34 f_1 = 3;
        }
        optional M27 f_2 = 3;
      }
      optional M23 f_6 = 7;
    }
    optional M9 f_1 = 2;
    message M10 {
      optional string f_0 = 1;
    }
    optional M10 f_2 = 3;
  }
  optional M4 f_10 = 11;
  message M5 {
    optional float f_0 = 1;
    optional int64 f_1 = 4;
    message M7 {
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 2;
        E2_CONST_2 = 27;
        E2_CONST_3 = 121;
        E2_CONST_4 = 56;
        E2_CONST_5 = 17;
      }
      optional E2 f_0 = 2;
      message M20 {
        optional string f_0 = 2;
        optional string f_1 = 3;
        optional double f_2 = 4;
        optional int32 f_3 = 5;
      }
      optional M20 f_2 = 4;
    }
    repeated M7 f_4 = 5;
    message M15 {
      repeated uint64 f_0 = 4 [packed = true];
      optional bool f_1 = 5;
    }
    optional M15 f_5 = 6;
  }
  repeated M5 f_11 = 13;
  message M6 {
    optional string f_0 = 1;
    optional int64 f_1 = 2;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 100;
      E1_CONST_2 = 35;
      E1_CONST_3 = 9;
      E1_CONST_4 = 47;
      E1_CONST_5 = 4;
    }
    repeated E1 f_2 = 4 [packed = true];
    optional string f_3 = 8;
    optional bytes f_4 = 9;
    message M12 {
      optional string f_0 = 1;
      message M21 {
        optional double f_0 = 1;
        optional string f_1 = 3;
        optional uint64 f_2 = 4;
        optional bytes f_3 = 7;
        optional bool f_4 = 9;
        optional string f_5 = 11;
        optional string f_6 = 12;
        optional int32 f_7 = 13;
        optional bool f_8 = 15;
        optional int32 f_9 = 17;
        optional string f_10 = 18;
        message M26 {
          repeated string f_0 = 1;
          message M30 {
            optional bool f_0 = 1;
            message M42 {
              repeated int32 f_0 = 1 [packed = true];
              message M50 {
                optional int64 f_0 = 1;
              }
              repeated M50 f_1 = 2;
            }
            repeated M42 f_1 = 2;
          }
          optional M30 f_1 = 2;
          message M32 {
            enum E7 {
              E7_UNSPECIFIED = 0;
              E7_CONST_1 = 111;
              E7_CONST_2 = 123;
              E7_CONST_3 = 41;
              E7_CONST_4 = 29;
              E7_CONST_5 = 27;
            }
            optional E7 f_0 = 1;
            message M37 {
              optional double f_0 = 2;
              optional string f_1 = 4;
              optional int64 f_2 = 7;
              optional bool f_3 = 10;
              optional string f_4 = 12;
              optional int64 f_5 = 14;
              optional string f_6 = 15;
              message M51 {
                optional int64 f_0 = 1;
              }
              optional M51 f_15 = 16;
              message M52 {
                optional string f_0 = 1;
                message M55 {
                  optional double f_0 = 1;
                  optional float f_1 = 2;
                  optional int64 f_2 = 3;
                  message M60 {
                    optional string f_0 = 1;
                  }
                  optional M60 f_3 = 5;
                  message M63 {
                    optional string f_0 = 1;
                  }
                  optional M63 f_5 = 7;
                }
                optional M55 f_1 = 3;
              }
              repeated M52 f_16 = 17;
              message M54 {
                optional float f_0 = 4;
                optional int32 f_1 = 6;
                enum E11 {
                  E11_UNSPECIFIED = 0;
                  E11_CONST_1 = 59;
                  E11_CONST_2 = 48;
                  E11_CONST_3 = 100;
                  E11_CONST_4 = 29;
                  E11_CONST_5 = 16;
                }
                optional E11 f_2 = 7;
                optional bytes f_3 = 8;
                optional bytes f_4 = 9;
                optional int64 f_5 = 10;
              }
              optional M54 f_17 = 19;
            }
            optional M37 f_1 = 3;
            message M40 {
              optional uint64 f_0 = 1;
            }
            repeated M40 f_3 = 5;
            message M43 {
              optional string f_0 = 2;
              message M46 {
                optional int64 f_0 = 1;
              }
              optional M46 f_2 = 3;
            }
            optional M43 f_5 = 6;
            message M45 {
              optional float f_0 = 2;
              optional double f_1 = 3;
              optional fixed32 f_2 = 4;
            }
            repeated M45 f_6 = 7;
          }
          optional M32 f_2 = 3;
        }
        repeated M26 f_18 = 19;
        message M28 {
          optional int64 f_0 = 1;
          repeated int32 f_1 = 2 [packed = true];
          optional int64 f_2 = 3;
          message M35 {
            optional float f_0 = 1;
            optional int32 f_1 = 3;
            optional string f_2 = 4;
            optional double f_3 = 5;
            optional int64 f_4 = 6;
            optional int64 f_5 = 7;
            optional string f_6 = 8;
            optional int32 f_7 = 10;
            optional int32 f_8 = 11;
          }
          optional M35 f_3 = 4;
        }
        optional M28 f_19 = 20;
      }
      optional M21 f_1 = 2;
    }
    optional M12 f_9 = 12;
    message M17 {
      optional float f_0 = 1;
    }
    optional M17 f_12 = 15;
  }
  optional M6 f_13 = 16;
}
