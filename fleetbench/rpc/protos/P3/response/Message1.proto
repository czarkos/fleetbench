// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P3.response.Message1;

message Message1 {
  optional int64 f_0 = 3;
  optional int32 f_1 = 5;
  optional double f_2 = 7;
  optional double f_3 = 8;
  optional int32 f_4 = 13;
  optional fixed64 f_5 = 18;
  optional fixed64 f_6 = 22;
  optional double f_7 = 28;
  optional double f_8 = 33;
  optional double f_9 = 35;
  optional double f_10 = 41;
  optional int32 f_11 = 46;
  optional double f_12 = 48;
  optional double f_13 = 49;
  optional fixed64 f_14 = 55;
  optional double f_15 = 62;
  optional double f_16 = 67;
  optional fixed64 f_17 = 69;
  optional int32 f_18 = 73;
  optional int32 f_19 = 78;
  optional double f_20 = 80;
  optional int32 f_21 = 88;
  optional int32 f_22 = 91;
  optional int32 f_23 = 92;
  optional double f_24 = 94;
  message M1 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 4;
    optional double f_2 = 10;
    optional double f_3 = 16;
    optional double f_4 = 19;
    optional int64 f_5 = 21;
    message M17 {
      optional fixed64 f_0 = 1;
      message M67 {
        optional fixed64 f_0 = 3;
      }
      optional M67 f_5 = 5;
      message M106 {
        optional double f_0 = 3;
      }
      optional M106 f_8 = 8;
    }
    optional M17 f_23 = 23;
    message M20 {
      optional double f_0 = 4;
      message M105 {
        optional int32 f_0 = 2;
      }
      optional M105 f_9 = 9;
    }
    repeated M20 f_29 = 29;
    message M21 {
      optional bool f_0 = 6;
      optional fixed64 f_1 = 10;
      optional double f_2 = 14;
      optional int64 f_3 = 18;
      optional double f_4 = 20;
      optional double f_5 = 25;
      optional fixed64 f_6 = 28;
      optional fixed64 f_7 = 32;
      optional fixed64 f_8 = 35;
      optional fixed64 f_9 = 39;
      optional int32 f_10 = 42;
      optional fixed64 f_11 = 43;
      optional double f_12 = 48;
      optional bool f_13 = 53;
      optional int32 f_14 = 58;
      optional double f_15 = 61;
      repeated bool f_16 = 65 [packed = true];
      optional double f_17 = 68;
      optional fixed64 f_18 = 69;
      optional double f_19 = 72;
      message M49 {
        optional fixed64 f_0 = 2;
      }
      optional M49 f_76 = 76;
      message M60 {
        optional int32 f_0 = 2;
      }
      optional M60 f_83 = 83;
      message M68 {
        optional double f_0 = 3;
      }
      repeated M68 f_86 = 86;
      message M95 {
        optional int32 f_0 = 4;
      }
      optional M95 f_89 = 89;
    }
    optional M21 f_32 = 32;
    message M36 {
      optional double f_0 = 5;
      optional int64 f_1 = 9;
      optional int32 f_2 = 13;
      optional fixed64 f_3 = 14;
      message M70 {
        optional int64 f_0 = 6;
      }
      optional M70 f_16 = 16;
      message M75 {
        optional int32 f_0 = 2;
      }
      optional M75 f_20 = 20;
      message M102 {
        optional double f_0 = 5;
      }
      optional M102 f_24 = 24;
    }
    optional M36 f_37 = 37;
    message M44 {
      optional fixed64 f_0 = 4;
      optional double f_1 = 7;
      optional double f_2 = 11;
      optional double f_3 = 13;
      optional int32 f_4 = 17;
      optional double f_5 = 19;
      optional double f_6 = 23;
      message M54 {
        optional double f_0 = 2;
        optional double f_1 = 6;
      }
      repeated M54 f_27 = 27;
    }
    optional M44 f_43 = 43;
    message M47 {
      optional fixed64 f_0 = 3;
    }
    optional M47 f_46 = 46;
  }
  optional M1 f_97 = 97;
  message M2 {
    optional int32 f_0 = 5;
    message M24 {
      optional int32 f_0 = 10;
      message M62 {
        optional int32 f_0 = 3;
      }
      optional M62 f_12 = 12;
      message M69 {
        optional fixed64 f_0 = 3;
      }
      optional M69 f_17 = 17;
      message M74 {
        optional int32 f_0 = 3;
        optional double f_1 = 6;
        optional double f_2 = 10;
        optional int64 f_3 = 13;
        optional double f_4 = 19;
        optional double f_5 = 21;
        optional fixed64 f_6 = 24;
        optional fixed64 f_7 = 27;
        optional fixed64 f_8 = 29;
        optional int32 f_9 = 38;
        optional double f_10 = 42;
        optional double f_11 = 45;
        optional double f_12 = 50;
        optional fixed64 f_13 = 53;
        optional double f_14 = 55;
        optional fixed64 f_15 = 58;
        optional double f_16 = 61;
        optional fixed64 f_17 = 63;
        optional double f_18 = 68;
        optional double f_19 = 74;
        optional double f_20 = 76;
        optional int64 f_21 = 80;
        optional int32 f_22 = 85;
        optional fixed64 f_23 = 87;
        optional int64 f_24 = 89;
        optional double f_25 = 90;
        optional fixed64 f_26 = 96;
        optional fixed64 f_27 = 98;
        optional int32 f_28 = 103;
        optional fixed64 f_29 = 106;
        optional double f_30 = 109;
        optional int64 f_31 = 112;
        optional int64 f_32 = 114;
        optional int32 f_33 = 118;
        optional int64 f_34 = 123;
        optional int32 f_35 = 126;
        optional double f_36 = 127;
        optional int32 f_37 = 131;
        optional fixed64 f_38 = 136;
        optional int64 f_39 = 140;
        optional int32 f_40 = 147;
        optional double f_41 = 151;
        optional fixed64 f_42 = 152;
        optional int32 f_43 = 157;
        optional fixed64 f_44 = 160;
        optional double f_45 = 164;
        optional fixed32 f_46 = 169;
        optional double f_47 = 172;
        optional double f_48 = 176;
        optional int32 f_49 = 181;
        optional fixed64 f_50 = 186;
        optional int32 f_51 = 191;
        optional double f_52 = 194;
        optional fixed64 f_53 = 197;
        optional int64 f_54 = 205;
        optional double f_55 = 211;
        optional double f_56 = 212;
        optional double f_57 = 215;
        optional double f_58 = 221;
        optional int64 f_59 = 224;
        optional double f_60 = 228;
        optional double f_61 = 233;
        optional float f_62 = 238;
        optional int32 f_63 = 242;
        optional int32 f_64 = 245;
        optional int32 f_65 = 248;
        optional double f_66 = 249;
        optional fixed64 f_67 = 255;
        optional int32 f_68 = 258;
        optional fixed64 f_69 = 262;
        optional double f_70 = 263;
        optional double f_71 = 267;
        optional double f_72 = 268;
        optional double f_73 = 274;
        optional double f_74 = 281;
        optional int32 f_75 = 285;
        optional int32 f_76 = 289;
        optional int32 f_77 = 296;
        optional fixed64 f_78 = 299;
        optional int32 f_79 = 303;
        optional double f_80 = 308;
        optional int64 f_81 = 310;
        optional int32 f_82 = 314;
        optional int32 f_83 = 317;
        optional int64 f_84 = 320;
        optional double f_85 = 322;
        optional int32 f_86 = 325;
        optional int32 f_87 = 328;
        optional int32 f_88 = 331;
        optional fixed64 f_89 = 336;
        optional double f_90 = 338;
        optional fixed64 f_91 = 345;
        optional double f_92 = 347;
        optional int64 f_93 = 348;
        optional fixed64 f_94 = 353;
        optional fixed64 f_95 = 355;
        optional fixed64 f_96 = 360;
        optional fixed64 f_97 = 363;
        optional fixed64 f_98 = 365;
        optional double f_99 = 368;
        optional float f_100 = 372;
        optional double f_101 = 376;
        optional double f_102 = 381;
        optional int64 f_103 = 383;
        optional double f_104 = 386;
        optional int32 f_105 = 388;
        optional double f_106 = 390;
        optional double f_107 = 398;
        optional float f_108 = 402;
        optional double f_109 = 408;
        optional double f_110 = 412;
        optional double f_111 = 416;
        optional double f_112 = 420;
        optional double f_113 = 424;
        optional double f_114 = 426;
        optional int32 f_115 = 428;
        optional double f_116 = 433;
        optional double f_117 = 436;
        optional double f_118 = 440;
        optional double f_119 = 443;
      }
      optional M74 f_19 = 19;
      message M94 {
        optional int32 f_0 = 5;
      }
      optional M94 f_24 = 24;
    }
    repeated M24 f_8 = 8;
  }
  repeated M2 f_99 = 99;
  message M3 {
    optional double f_0 = 5;
    optional int32 f_1 = 7;
    optional double f_2 = 9;
    message M18 {
      optional double f_0 = 3;
      optional int32 f_1 = 5;
      optional bool f_2 = 12;
      optional double f_3 = 15;
      message M73 {
        optional double f_0 = 6;
      }
      optional M73 f_17 = 17;
      message M81 {
        optional int32 f_0 = 5;
        optional int32 f_1 = 6;
        optional int32 f_2 = 8;
        optional int32 f_3 = 14;
        optional int64 f_4 = 17;
        optional fixed64 f_5 = 22;
        optional int32 f_6 = 24;
        optional int32 f_7 = 31;
      }
      optional M81 f_23 = 23;
    }
    optional M18 f_11 = 11;
  }
  optional M3 f_105 = 105;
  message M4 {
    optional int32 f_0 = 1;
    optional double f_1 = 5;
    optional int32 f_2 = 6;
    optional int64 f_3 = 10;
    optional double f_4 = 15;
    optional fixed64 f_5 = 16;
    message M23 {
      optional fixed64 f_0 = 6;
      message M51 {
        optional double f_0 = 4;
      }
      repeated M51 f_10 = 10;
      message M71 {
        optional fixed64 f_0 = 3;
      }
      optional M71 f_13 = 13;
    }
    optional M23 f_17 = 17;
    message M41 {
      optional double f_0 = 3;
    }
    optional M41 f_18 = 18;
  }
  optional M4 f_113 = 113;
  message M5 {
    optional int64 f_0 = 3;
    message M31 {
      optional fixed64 f_0 = 4;
      message M72 {
        optional int32 f_0 = 4;
        optional int32 f_1 = 7;
        optional int32 f_2 = 13;
        optional int64 f_3 = 19;
        optional int32 f_4 = 21;
        optional int32 f_5 = 23;
      }
      optional M72 f_9 = 9;
    }
    optional M31 f_5 = 5;
    message M39 {
      optional int32 f_0 = 5;
      optional int32 f_1 = 10;
      optional int32 f_2 = 12;
      optional int32 f_3 = 15;
      optional int32 f_4 = 18;
      message M78 {
        optional int64 f_0 = 2;
      }
      optional M78 f_23 = 23;
      message M97 {
        optional double f_0 = 2;
      }
      optional M97 f_27 = 27;
      message M98 {
        optional double f_0 = 2;
        optional double f_1 = 6;
        optional double f_2 = 11;
        optional int32 f_3 = 14;
        optional double f_4 = 16;
      }
      repeated M98 f_31 = 31;
    }
    optional M39 f_8 = 8;
  }
  repeated M5 f_118 = 118;
  message M6 {
    optional double f_0 = 2;
    message M35 {
      optional int32 f_0 = 5;
      message M50 {
        optional fixed32 f_0 = 3;
      }
      repeated M50 f_8 = 8;
      message M84 {
        optional double f_0 = 4;
      }
      repeated M84 f_12 = 12;
    }
    repeated M35 f_6 = 6;
    message M46 {
      optional double f_0 = 3;
      message M65 {
        optional int64 f_0 = 3;
      }
      optional M65 f_6 = 6;
    }
    optional M46 f_10 = 10;
  }
  optional M6 f_122 = 122;
  message M7 {
    optional int32 f_0 = 5;
    message M22 {
      optional int32 f_0 = 4;
      optional int32 f_1 = 7;
      message M100 {
        optional int32 f_0 = 4;
        optional double f_1 = 8;
        optional int32 f_2 = 12;
        optional double f_3 = 16;
        optional int64 f_4 = 19;
        optional double f_5 = 26;
      }
      optional M100 f_12 = 12;
    }
    optional M22 f_10 = 10;
    message M34 {
      optional double f_0 = 4;
      message M77 {
        optional int32 f_0 = 3;
      }
      repeated M77 f_8 = 8;
      message M96 {
        optional double f_0 = 4;
      }
      optional M96 f_11 = 11;
      message M99 {
        optional fixed64 f_0 = 5;
        message M108 {
          optional fixed64 f_0 = 8;
          optional int32 f_1 = 12;
          optional int64 f_2 = 14;
          optional double f_3 = 20;
          optional fixed64 f_4 = 24;
          optional int32 f_5 = 26;
          optional fixed64 f_6 = 29;
        }
        optional M108 f_11 = 11;
      }
      optional M99 f_12 = 12;
    }
    optional M34 f_12 = 12;
    message M43 {
      optional int32 f_0 = 4;
      optional int64 f_1 = 9;
      optional int32 f_2 = 11;
      message M76 {
        optional double f_0 = 4;
        repeated bool f_1 = 7 [packed = true];
        optional double f_2 = 10;
        optional int32 f_3 = 13;
        optional fixed64 f_4 = 16;
        optional double f_5 = 19;
        optional int32 f_6 = 20;
        optional int32 f_7 = 22;
        optional int32 f_8 = 28;
        optional double f_9 = 33;
        optional int32 f_10 = 36;
        optional fixed64 f_11 = 39;
        optional int32 f_12 = 45;
      }
      optional M76 f_13 = 13;
    }
    optional M43 f_16 = 16;
  }
  optional M7 f_126 = 126;
  message M8 {
    optional fixed64 f_0 = 4;
    message M33 {
      optional double f_0 = 3;
      message M52 {
        optional fixed64 f_0 = 8;
        optional double f_1 = 13;
        optional int32 f_2 = 15;
        optional double f_3 = 21;
        optional int32 f_4 = 23;
        optional double f_5 = 28;
        optional double f_6 = 32;
        optional int32 f_7 = 35;
        optional fixed64 f_8 = 40;
        optional double f_9 = 43;
        optional int32 f_10 = 45;
        optional int64 f_11 = 51;
        optional int32 f_12 = 56;
        optional int32 f_13 = 61;
      }
      optional M52 f_4 = 4;
    }
    optional M33 f_8 = 8;
    message M38 {
      optional double f_0 = 6;
      message M55 {
        optional double f_0 = 1;
      }
      optional M55 f_10 = 10;
      message M57 {
        optional int64 f_0 = 2;
      }
      optional M57 f_14 = 14;
      message M66 {
        optional double f_0 = 8;
      }
      optional M66 f_18 = 18;
    }
    optional M38 f_13 = 13;
  }
  optional M8 f_132 = 132;
  message M9 {
    optional double f_0 = 4;
    message M16 {
      optional double f_0 = 6;
      message M56 {
        optional double f_0 = 2;
        optional double f_1 = 5;
        optional int32 f_2 = 9;
        optional int32 f_3 = 15;
        optional double f_4 = 20;
        optional double f_5 = 24;
        optional fixed64 f_6 = 27;
      }
      optional M56 f_10 = 10;
      message M87 {
        optional double f_0 = 2;
      }
      repeated M87 f_12 = 12;
      message M101 {
        enum E1 {
          E1_UNSPECIFIED = 0;
          E1_CONST_1 = 54;
          E1_CONST_2 = 114;
          E1_CONST_3 = 31;
          E1_CONST_4 = 12;
          E1_CONST_5 = 56;
        }
        optional E1 f_0 = 3;
      }
      repeated M101 f_15 = 15;
    }
    repeated M16 f_6 = 6;
    message M19 {
      optional double f_0 = 4;
    }
    optional M19 f_12 = 12;
    message M28 {
      optional int32 f_0 = 2;
      message M59 {
        optional double f_0 = 3;
      }
      optional M59 f_5 = 5;
      message M83 {
        optional int64 f_0 = 2;
      }
      optional M83 f_7 = 7;
      message M93 {
        repeated bool f_0 = 2 [packed = true];
        optional double f_1 = 5;
        optional double f_2 = 8;
        message M113 {
          optional int32 f_0 = 3;
          optional double f_1 = 5;
          optional double f_2 = 11;
          optional int32 f_3 = 19;
          optional double f_4 = 23;
          optional double f_5 = 32;
          optional int32 f_6 = 37;
          optional double f_7 = 39;
          optional int32 f_8 = 43;
          optional double f_9 = 51;
          optional double f_10 = 52;
          optional double f_11 = 56;
          optional int32 f_12 = 60;
          optional fixed64 f_13 = 64;
          optional double f_14 = 66;
          optional fixed32 f_15 = 68;
          optional int32 f_16 = 75;
          optional double f_17 = 79;
          enum E2 {
            E2_UNSPECIFIED = 0;
            E2_CONST_1 = 106;
            E2_CONST_2 = 9;
            E2_CONST_3 = 89;
            E2_CONST_4 = 37;
            E2_CONST_5 = 44;
          }
          repeated E2 f_18 = 81 [packed = true];
          message M114 {
            optional int64 f_0 = 3;
            optional fixed64 f_1 = 8;
            optional double f_2 = 14;
            optional fixed64 f_3 = 16;
            optional int64 f_4 = 19;
            optional double f_5 = 21;
            optional double f_6 = 25;
            optional double f_7 = 28;
            optional fixed64 f_8 = 29;
            optional double f_9 = 36;
            optional int32 f_10 = 39;
            optional double f_11 = 43;
            optional fixed64 f_12 = 47;
            optional double f_13 = 53;
            optional double f_14 = 55;
            message M117 {
              optional fixed64 f_0 = 5;
            }
            optional M117 f_58 = 58;
            message M118 {
              optional fixed64 f_0 = 4;
            }
            optional M118 f_60 = 60;
          }
          repeated M114 f_85 = 85;
        }
        optional M113 f_11 = 11;
      }
      optional M93 f_14 = 14;
    }
    optional M28 f_14 = 14;
    message M30 {
      optional double f_0 = 4;
      message M61 {
        optional double f_0 = 4;
      }
      optional M61 f_7 = 7;
      message M89 {
        optional double f_0 = 4;
        message M111 {
          optional fixed64 f_0 = 6;
        }
        optional M111 f_8 = 8;
      }
      repeated M89 f_9 = 9;
      message M104 {
        optional bool f_0 = 3;
      }
      repeated M104 f_12 = 12;
    }
    optional M30 f_17 = 17;
  }
  optional M9 f_136 = 136;
  message M10 {
    optional double f_0 = 6;
    message M25 {
      optional double f_0 = 4;
      optional fixed64 f_1 = 8;
      optional double f_2 = 11;
    }
    optional M25 f_13 = 13;
    message M32 {
      optional fixed64 f_0 = 4;
      message M80 {
        optional int64 f_0 = 3;
        optional double f_1 = 6;
        optional int32 f_2 = 11;
        optional double f_3 = 14;
        optional int32 f_4 = 15;
        optional fixed32 f_5 = 18;
        optional int32 f_6 = 20;
      }
      optional M80 f_8 = 8;
      message M85 {
        optional int32 f_0 = 3;
      }
      optional M85 f_9 = 9;
      message M91 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 4;
        optional int32 f_2 = 5;
      }
      optional M91 f_14 = 14;
      message M92 {
        optional int32 f_0 = 4;
        optional double f_1 = 6;
      }
      optional M92 f_16 = 16;
    }
    optional M32 f_17 = 17;
    message M48 {
      optional int32 f_0 = 4;
      optional int32 f_1 = 6;
      optional int32 f_2 = 8;
      optional double f_3 = 11;
      optional double f_4 = 12;
      optional fixed64 f_5 = 14;
      message M90 {
        optional fixed64 f_0 = 4;
        optional fixed64 f_1 = 8;
        optional fixed64 f_2 = 12;
        optional double f_3 = 15;
      }
      optional M90 f_20 = 20;
      message M103 {
        optional int32 f_0 = 2;
      }
      repeated M103 f_21 = 21;
    }
    optional M48 f_21 = 21;
  }
  optional M10 f_139 = 139;
  message M11 {
    optional int32 f_0 = 3;
    message M15 {
      optional fixed64 f_0 = 6;
      message M58 {
        optional double f_0 = 4;
        message M112 {
          optional int32 f_0 = 3;
        }
        repeated M112 f_7 = 7;
      }
      optional M58 f_10 = 10;
    }
    optional M15 f_4 = 4;
    message M42 {
      optional int64 f_0 = 2;
      optional double f_1 = 6;
      optional double f_2 = 10;
    }
    optional M42 f_10 = 10;
  }
  optional M11 f_144 = 144;
  message M12 {
    optional int32 f_0 = 7;
    message M14 {
      optional double f_0 = 4;
      optional double f_1 = 7;
      repeated bool f_2 = 10 [packed = true];
      optional float f_3 = 16;
      message M63 {
        optional fixed64 f_0 = 4;
        optional fixed64 f_1 = 5;
        optional double f_2 = 12;
        optional int32 f_3 = 15;
        optional fixed64 f_4 = 18;
        repeated bool f_5 = 24 [packed = true];
        optional double f_6 = 30;
        optional double f_7 = 33;
        optional fixed64 f_8 = 37;
        optional int32 f_9 = 45;
        optional int32 f_10 = 48;
        optional double f_11 = 51;
        optional fixed64 f_12 = 54;
        optional int64 f_13 = 57;
        optional double f_14 = 61;
        optional int32 f_15 = 64;
      }
      repeated M63 f_19 = 19;
      message M88 {
        optional fixed64 f_0 = 2;
        optional double f_1 = 5;
        optional int32 f_2 = 7;
        optional int32 f_3 = 10;
        optional fixed64 f_4 = 16;
        message M110 {
          optional fixed64 f_0 = 1;
          optional double f_1 = 2;
          optional fixed64 f_2 = 5;
          optional fixed64 f_3 = 7;
          optional double f_4 = 10;
          optional double f_5 = 13;
          message M116 {
            optional int32 f_0 = 4;
            message M119 {
              optional double f_0 = 4;
              optional int32 f_1 = 6;
              optional fixed32 f_2 = 11;
              optional double f_3 = 16;
              optional double f_4 = 20;
              optional fixed64 f_5 = 23;
            }
            optional M119 f_10 = 10;
          }
          optional M116 f_21 = 21;
        }
        repeated M110 f_23 = 23;
      }
      repeated M88 f_22 = 22;
    }
    repeated M14 f_10 = 10;
    message M37 {
      optional double f_0 = 4;
      optional int64 f_1 = 10;
      optional int32 f_2 = 14;
      optional int32 f_3 = 16;
      optional double f_4 = 18;
      message M86 {
        optional double f_0 = 2;
      }
      repeated M86 f_20 = 20;
    }
    optional M37 f_17 = 17;
  }
  optional M12 f_149 = 149;
  message M13 {
    optional int64 f_0 = 2;
    message M26 {
      optional double f_0 = 5;
      message M79 {
        optional double f_0 = 3;
      }
      optional M79 f_8 = 8;
    }
    optional M26 f_5 = 5;
    message M27 {
      optional fixed64 f_0 = 5;
    }
    repeated M27 f_8 = 8;
    message M29 {
      optional double f_0 = 5;
      repeated bool f_1 = 8 [packed = true];
      optional int32 f_2 = 10;
      optional fixed64 f_3 = 13;
      optional double f_4 = 16;
      optional int32 f_5 = 18;
      optional int32 f_6 = 20;
      optional int32 f_7 = 23;
      optional int64 f_8 = 28;
      optional double f_9 = 31;
      optional int32 f_10 = 33;
      optional double f_11 = 35;
      optional double f_12 = 38;
      optional double f_13 = 40;
      optional double f_14 = 43;
      optional double f_15 = 47;
      optional double f_16 = 52;
    }
    optional M29 f_11 = 11;
    message M40 {
      optional double f_0 = 6;
      optional fixed64 f_1 = 11;
      optional double f_2 = 19;
      optional double f_3 = 20;
      optional fixed64 f_4 = 28;
      message M53 {
        optional double f_0 = 4;
      }
      optional M53 f_32 = 32;
      message M107 {
        repeated bool f_0 = 3 [packed = true];
        optional fixed32 f_1 = 8;
        optional int32 f_2 = 11;
        optional double f_3 = 12;
        optional double f_4 = 15;
        optional fixed64 f_5 = 18;
        message M109 {
          optional double f_0 = 5;
          message M115 {
            optional double f_0 = 3;
          }
          optional M115 f_7 = 7;
        }
        optional M109 f_21 = 21;
      }
      optional M107 f_37 = 37;
    }
    repeated M40 f_15 = 15;
    message M45 {
      optional int32 f_0 = 3;
      message M64 {
        optional double f_0 = 3;
      }
      optional M64 f_5 = 5;
      message M82 {
        optional int64 f_0 = 1;
        repeated bool f_1 = 3 [packed = true];
      }
      optional M82 f_7 = 7;
    }
    repeated M45 f_19 = 19;
  }
  optional M13 f_153 = 153;
}
