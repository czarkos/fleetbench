// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P3.request.Message2;

message Message2 {
  optional uint64 f_0 = 1;
  optional string f_1 = 2;
  message M1 {
    optional double f_0 = 2;
    message M4 {
      optional bytes f_0 = 1 [ctype = CORD];
      message M10 {
        enum E1 {
          E1_UNSPECIFIED = 0;
          E1_CONST_1 = 26;
          E1_CONST_2 = 103;
          E1_CONST_3 = 22;
          E1_CONST_4 = 25;
          E1_CONST_5 = 8;
        }
        optional E1 f_0 = 1;
      }
      repeated M10 f_2 = 2;
      message M11 {
        optional bool f_0 = 1;
        message M13 {
          optional int64 f_0 = 1;
          message M19 {
            optional string f_0 = 1;
          }
          optional M19 f_2 = 2;
          message M22 {
            optional string f_0 = 1;
          }
          optional M22 f_3 = 3;
          message M23 {
            optional string f_0 = 1;
          }
          optional M23 f_5 = 5;
        }
        optional M13 f_2 = 2;
      }
      optional M11 f_3 = 3;
    }
    optional M4 f_3 = 3;
    message M6 {
      optional bytes f_0 = 1;
    }
    optional M6 f_4 = 4;
  }
  optional M1 f_3 = 3;
  message M2 {
    optional string f_0 = 2;
    message M3 {
      optional int64 f_0 = 1;
      message M8 {
        optional int32 f_0 = 2;
        message M14 {
          enum E2 {
            E2_UNSPECIFIED = 0;
            E2_CONST_1 = 114;
            E2_CONST_2 = 123;
            E2_CONST_3 = 61;
            E2_CONST_4 = 53;
            E2_CONST_5 = 15;
          }
          optional E2 f_0 = 1;
          message M18 {
            optional int32 f_0 = 1;
          }
          optional M18 f_2 = 2;
        }
        repeated M14 f_3 = 3;
      }
      optional M8 f_2 = 2;
    }
    repeated M3 f_3 = 3;
    message M5 {
      optional int32 f_0 = 1;
    }
    repeated M5 f_4 = 4;
    message M7 {
      optional int32 f_0 = 1;
      message M9 {
        optional string f_0 = 1;
        message M15 {
          optional int64 f_0 = 1;
          message M20 {
            optional bool f_0 = 1;
          }
          repeated M20 f_2 = 2;
          message M24 {
            enum E3 {
              E3_UNSPECIFIED = 0;
              E3_CONST_1 = 18;
              E3_CONST_2 = 3;
              E3_CONST_3 = 62;
              E3_CONST_4 = 59;
              E3_CONST_5 = 29;
            }
            optional E3 f_0 = 1;
          }
          optional M24 f_3 = 3;
        }
        optional M15 f_2 = 2;
        message M16 {
          optional int64 f_0 = 1;
          message M21 {
            optional int64 f_0 = 1;
            message M25 {
              optional bool f_0 = 2;
              optional int64 f_1 = 4;
              optional bytes f_2 = 5 [ctype = CORD];
              optional double f_3 = 6;
              optional string f_4 = 7;
              enum E4 {
                E4_UNSPECIFIED = 0;
                E4_CONST_1 = 37;
                E4_CONST_2 = 106;
                E4_CONST_3 = 76;
                E4_CONST_4 = 15;
                E4_CONST_5 = 49;
              }
              optional E4 f_5 = 8;
              enum E5 {
                E5_UNSPECIFIED = 0;
                E5_CONST_1 = 52;
                E5_CONST_2 = 12;
                E5_CONST_3 = 31;
                E5_CONST_4 = 47;
                E5_CONST_5 = 82;
              }
              optional E5 f_6 = 9;
              optional fixed64 f_7 = 10;
              message M26 {
                optional int64 f_0 = 1;
                optional string f_1 = 2;
                optional int32 f_2 = 3;
                optional int64 f_3 = 4;
                optional int32 f_4 = 5;
                optional int32 f_5 = 7;
                enum E6 {
                  E6_UNSPECIFIED = 0;
                  E6_CONST_1 = 104;
                  E6_CONST_2 = 56;
                  E6_CONST_3 = 101;
                  E6_CONST_4 = 6;
                  E6_CONST_5 = 17;
                }
                optional E6 f_6 = 8;
                optional bool f_7 = 10;
                enum E7 {
                  E7_UNSPECIFIED = 0;
                  E7_CONST_1 = 108;
                  E7_CONST_2 = 117;
                  E7_CONST_3 = 18;
                  E7_CONST_4 = 77;
                  E7_CONST_5 = 97;
                }
                optional E7 f_8 = 11;
                enum E8 {
                  E8_UNSPECIFIED = 0;
                  E8_CONST_1 = 47;
                  E8_CONST_2 = 82;
                  E8_CONST_3 = 58;
                  E8_CONST_4 = 23;
                  E8_CONST_5 = 100;
                }
                optional E8 f_9 = 13;
                message M27 {
                  optional string f_0 = 1;
                }
                repeated M27 f_14 = 14;
                message M28 {
                  optional int64 f_0 = 1;
                }
                repeated M28 f_15 = 15;
                message M29 {
                  optional int64 f_0 = 1;
                }
                optional M29 f_16 = 16;
                message M30 {
                  optional int64 f_0 = 2;
                  message M31 {
                    optional int64 f_0 = 1;
                  }
                  repeated M31 f_3 = 3;
                  message M32 {
                    optional uint64 f_0 = 1;
                    optional string f_1 = 2;
                    optional int64 f_2 = 3;
                    optional int32 f_3 = 4;
                    optional int64 f_4 = 7;
                    optional string f_5 = 8;
                    optional int32 f_6 = 9;
                    optional int32 f_7 = 10;
                    optional bool f_8 = 11;
                    optional string f_9 = 12;
                    optional int64 f_10 = 13;
                    optional int64 f_11 = 15;
                  }
                  optional M32 f_4 = 4;
                }
                optional M30 f_17 = 17;
              }
              repeated M26 f_11 = 11;
            }
            optional M25 f_2 = 2;
          }
          optional M21 f_2 = 2;
        }
        optional M16 f_3 = 3;
        message M17 {
          optional uint64 f_0 = 1;
        }
        repeated M17 f_4 = 4;
      }
      optional M9 f_3 = 3;
      message M12 {
        optional int64 f_0 = 1;
      }
      optional M12 f_4 = 4;
    }
    optional M7 f_5 = 5;
  }
  repeated M2 f_4 = 4;
}
