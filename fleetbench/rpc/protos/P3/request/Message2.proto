// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P3.request.Message2;

message Message2 {
  optional uint64 f_0 = 2;
  optional fixed64 f_1 = 3;
  optional bool f_2 = 5;
  optional fixed64 f_3 = 6;
  optional fixed64 f_4 = 7;
  optional int32 f_5 = 8;
  optional fixed64 f_6 = 9;
  optional int32 f_7 = 10;
  optional int32 f_8 = 11;
  optional string f_9 = 12;
  optional fixed64 f_10 = 13;
  optional uint64 f_11 = 15;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 25;
    E1_CONST_2 = 74;
    E1_CONST_3 = 34;
    E1_CONST_4 = 118;
    E1_CONST_5 = 116;
  }
  repeated E1 f_12 = 18 [packed = true];
  optional fixed32 f_13 = 19;
  optional fixed32 f_14 = 20;
  optional string f_15 = 21;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 66;
    E2_CONST_2 = 27;
    E2_CONST_3 = 126;
    E2_CONST_4 = 108;
    E2_CONST_5 = 50;
  }
  repeated E2 f_16 = 23 [packed = true];
  optional int32 f_17 = 24;
  optional fixed64 f_18 = 26;
  optional double f_19 = 27;
  optional int32 f_20 = 28;
  optional int32 f_21 = 30;
  optional fixed64 f_22 = 32;
  optional fixed64 f_23 = 33;
  optional string f_24 = 34;
  repeated string f_25 = 35;
  optional fixed64 f_26 = 36;
  optional string f_27 = 38;
  optional string f_28 = 39;
  optional string f_29 = 41;
  message M1 {
    optional fixed32 f_0 = 2;
    message M17 {
      repeated string f_0 = 1;
    }
    repeated M17 f_4 = 4;
  }
  optional M1 f_43 = 43;
  message M2 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 110;
      E3_CONST_2 = 15;
      E3_CONST_3 = 90;
      E3_CONST_4 = 45;
      E3_CONST_5 = 71;
    }
    optional E3 f_0 = 1;
    message M18 {
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 119;
        E9_CONST_2 = 23;
        E9_CONST_3 = 70;
        E9_CONST_4 = 6;
        E9_CONST_5 = 62;
      }
      repeated E9 f_0 = 4 [packed = true];
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 41;
        E10_CONST_2 = 12;
        E10_CONST_3 = 74;
        E10_CONST_4 = 55;
        E10_CONST_5 = 45;
      }
      optional E10 f_1 = 5;
      message M41 {
        optional int32 f_0 = 2;
      }
      repeated M41 f_6 = 6;
    }
    optional M18 f_3 = 3;
    message M23 {
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 30;
        E11_CONST_2 = 29;
        E11_CONST_3 = 59;
        E11_CONST_4 = 64;
        E11_CONST_5 = 87;
      }
      repeated E11 f_0 = 2 [packed = true];
      optional uint64 f_1 = 4;
      optional fixed64 f_2 = 5;
      message M35 {
        optional fixed64 f_0 = 2;
      }
      repeated M35 f_7 = 7;
      message M46 {
        optional fixed32 f_0 = 1;
        optional int32 f_1 = 4;
      }
      optional M46 f_8 = 8;
    }
    repeated M23 f_4 = 4;
    message M29 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional bool f_2 = 3;
      optional fixed64 f_3 = 4;
      optional fixed64 f_4 = 6;
    }
    optional M29 f_6 = 6;
  }
  optional M2 f_45 = 45;
  message M3 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 19;
      E4_CONST_2 = 61;
      E4_CONST_3 = 105;
      E4_CONST_4 = 52;
      E4_CONST_5 = 107;
    }
    optional E4 f_0 = 2;
  }
  repeated M3 f_48 = 48;
  message M4 {
    optional int32 f_0 = 1;
    message M28 {
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 76;
        E13_CONST_2 = 2;
        E13_CONST_3 = 29;
        E13_CONST_4 = 20;
        E13_CONST_5 = 33;
      }
      repeated E13 f_0 = 2 [packed = true];
    }
    optional M28 f_2 = 2;
  }
  optional M4 f_49 = 49;
  message M5 {
    optional int32 f_0 = 1;
    message M22 {
      optional int32 f_0 = 3;
      message M47 {
        optional fixed32 f_0 = 1;
        optional string f_1 = 2;
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 51;
          E18_CONST_2 = 76;
          E18_CONST_3 = 55;
          E18_CONST_4 = 87;
          E18_CONST_5 = 79;
        }
        repeated E18 f_2 = 3 [packed = true];
        optional fixed64 f_3 = 4;
        optional int32 f_4 = 5;
        message M63 {
          optional string f_0 = 1;
        }
        repeated M63 f_7 = 7;
        message M67 {
          optional int32 f_0 = 3;
        }
        repeated M67 f_8 = 8;
      }
      optional M47 f_4 = 4;
    }
    optional M22 f_2 = 2;
  }
  repeated M5 f_50 = 50;
  message M6 {
    optional string f_0 = 3;
  }
  optional M6 f_51 = 51;
  message M7 {
    optional fixed64 f_0 = 2;
    message M34 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 5;
        E14_CONST_2 = 79;
        E14_CONST_3 = 49;
        E14_CONST_4 = 116;
        E14_CONST_5 = 119;
      }
      repeated E14 f_2 = 4 [packed = true];
      optional string f_3 = 5;
      optional string f_4 = 7;
      repeated int32 f_5 = 10 [packed = true];
      optional fixed32 f_6 = 13;
      optional string f_7 = 15;
      optional bytes f_8 = 18;
      optional string f_9 = 19;
      optional string f_10 = 22;
      optional int32 f_11 = 24;
      optional string f_12 = 25;
      optional string f_13 = 26;
      optional int32 f_14 = 27;
      optional fixed32 f_15 = 28;
      optional int32 f_16 = 29;
      optional fixed32 f_17 = 30;
      optional string f_18 = 31;
      enum E15 {
        E15_UNSPECIFIED = 0;
        E15_CONST_1 = 10;
        E15_CONST_2 = 89;
        E15_CONST_3 = 60;
        E15_CONST_4 = 65;
        E15_CONST_5 = 111;
      }
      repeated E15 f_19 = 33 [packed = true];
      optional int32 f_20 = 34;
      optional string f_21 = 35;
      optional string f_22 = 36;
      message M40 {
        optional bool f_0 = 1;
        message M66 {
          enum E24 {
            E24_UNSPECIFIED = 0;
            E24_CONST_1 = 16;
            E24_CONST_2 = 67;
            E24_CONST_3 = 89;
            E24_CONST_4 = 58;
            E24_CONST_5 = 4;
          }
          repeated E24 f_0 = 2 [packed = true];
        }
        optional M66 f_2 = 2;
      }
      optional M40 f_38 = 38;
    }
    optional M34 f_3 = 3;
  }
  optional M7 f_53 = 53;
  message M8 {
    optional bool f_0 = 1;
    message M26 {
      optional int32 f_0 = 1;
    }
    repeated M26 f_3 = 3;
  }
  optional M8 f_54 = 54;
  message M9 {
    optional int32 f_0 = 2;
    message M24 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 4;
      message M37 {
        optional int32 f_0 = 1;
        message M69 {
          optional string f_0 = 1;
        }
        optional M69 f_2 = 2;
        message M73 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed64 f_2 = 4;
          optional fixed64 f_3 = 5;
          optional string f_4 = 8;
          optional string f_5 = 12;
          optional string f_6 = 13;
          optional fixed64 f_7 = 14;
          optional string f_8 = 15;
          optional int32 f_9 = 16;
          optional fixed32 f_10 = 17;
          optional uint64 f_11 = 18;
          optional int32 f_12 = 19;
          optional string f_13 = 20;
          optional fixed64 f_14 = 21;
          optional string f_15 = 23;
          enum E25 {
            E25_UNSPECIFIED = 0;
            E25_CONST_1 = 28;
            E25_CONST_2 = 5;
            E25_CONST_3 = 7;
            E25_CONST_4 = 44;
            E25_CONST_5 = 57;
          }
          repeated E25 f_16 = 24 [packed = true];
          optional int32 f_17 = 25;
          optional int32 f_18 = 26;
          optional int32 f_19 = 28;
          optional fixed64 f_20 = 29;
          optional int32 f_21 = 30;
          optional int32 f_22 = 31;
          optional int32 f_23 = 32;
          optional fixed64 f_24 = 33;
          optional int32 f_25 = 35;
          optional fixed64 f_26 = 37;
          optional fixed64 f_27 = 40;
          enum E26 {
            E26_UNSPECIFIED = 0;
            E26_CONST_1 = 75;
            E26_CONST_2 = 84;
            E26_CONST_3 = 43;
            E26_CONST_4 = 103;
            E26_CONST_5 = 73;
          }
          repeated E26 f_28 = 41 [packed = true];
          optional uint64 f_29 = 42;
          optional fixed64 f_30 = 44;
          optional int32 f_31 = 45;
        }
        repeated M73 f_3 = 3;
      }
      repeated M37 f_6 = 6;
      message M39 {
        optional int32 f_0 = 2;
        optional string f_1 = 3;
        optional fixed64 f_2 = 4;
      }
      optional M39 f_8 = 8;
      message M48 {
        optional int32 f_0 = 2;
        message M59 {
          optional fixed64 f_0 = 1;
          message M76 {
            optional uint64 f_0 = 1;
            optional int32 f_1 = 2;
            optional uint64 f_2 = 3;
            optional int32 f_3 = 4;
            optional fixed64 f_4 = 6;
            optional int32 f_5 = 8;
            optional string f_6 = 9;
            enum E27 {
              E27_UNSPECIFIED = 0;
              E27_CONST_1 = 11;
              E27_CONST_2 = 30;
              E27_CONST_3 = 87;
              E27_CONST_4 = 118;
              E27_CONST_5 = 125;
            }
            optional E27 f_7 = 10;
            optional string f_8 = 12;
            optional fixed64 f_9 = 14;
            optional int32 f_10 = 16;
            repeated string f_11 = 17;
            optional int32 f_12 = 19;
            optional fixed64 f_13 = 21;
            optional string f_14 = 22;
            optional string f_15 = 23;
            optional string f_16 = 24;
            optional string f_17 = 25;
            optional uint64 f_18 = 27;
            optional int32 f_19 = 28;
            optional fixed64 f_20 = 30;
            optional int64 f_21 = 31;
            optional fixed64 f_22 = 33;
            enum E28 {
              E28_UNSPECIFIED = 0;
              E28_CONST_1 = 110;
              E28_CONST_2 = 39;
              E28_CONST_3 = 104;
              E28_CONST_4 = 56;
              E28_CONST_5 = 53;
            }
            optional E28 f_23 = 34;
            optional fixed64 f_24 = 35;
            optional string f_25 = 37;
            optional string f_26 = 38;
            optional int32 f_27 = 39;
            optional string f_28 = 43;
            optional fixed64 f_29 = 48;
            optional string f_30 = 49;
            optional int32 f_31 = 50;
          }
          repeated M76 f_5 = 5;
        }
        optional M59 f_4 = 4;
        message M71 {
          optional int32 f_0 = 1;
        }
        optional M71 f_6 = 6;
        message M72 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 2;
          optional int32 f_2 = 4;
        }
        optional M72 f_8 = 8;
      }
      optional M48 f_10 = 10;
    }
    optional M24 f_4 = 4;
    message M31 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional string f_2 = 4;
      message M52 {
        optional string f_0 = 1;
        message M55 {
          optional int32 f_0 = 1;
        }
        optional M55 f_2 = 2;
        message M70 {
          optional fixed64 f_0 = 1;
        }
        optional M70 f_4 = 4;
      }
      repeated M52 f_6 = 6;
    }
    optional M31 f_5 = 5;
  }
  optional M9 f_58 = 58;
  message M10 {
    optional string f_0 = 2;
    message M27 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      optional fixed32 f_2 = 4;
      optional bool f_3 = 6;
    }
    repeated M27 f_4 = 4;
  }
  optional M10 f_59 = 59;
  message M11 {
    optional int32 f_0 = 3;
    optional bool f_1 = 5;
    optional fixed64 f_2 = 7;
    optional int32 f_3 = 10;
    optional int32 f_4 = 12;
    optional fixed64 f_5 = 14;
    message M33 {
      optional bytes f_0 = 1;
      message M36 {
        optional bool f_0 = 1;
        optional fixed64 f_1 = 3;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 82;
          E16_CONST_2 = 26;
          E16_CONST_3 = 56;
          E16_CONST_4 = 54;
          E16_CONST_5 = 97;
        }
        optional E16 f_2 = 4;
      }
      optional M36 f_2 = 2;
      message M44 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 4;
      }
      repeated M44 f_3 = 3;
      message M53 {
        optional int32 f_0 = 1;
        enum E20 {
          E20_UNSPECIFIED = 0;
          E20_CONST_1 = 21;
          E20_CONST_2 = 11;
          E20_CONST_3 = 60;
          E20_CONST_4 = 74;
          E20_CONST_5 = 118;
        }
        optional E20 f_1 = 2;
        optional int32 f_2 = 3;
        enum E21 {
          E21_UNSPECIFIED = 0;
          E21_CONST_1 = 2;
          E21_CONST_2 = 115;
          E21_CONST_3 = 75;
          E21_CONST_4 = 85;
          E21_CONST_5 = 1;
        }
        optional E21 f_3 = 4;
        optional string f_4 = 6;
        optional string f_5 = 8;
        optional fixed64 f_6 = 10;
        optional fixed64 f_7 = 11;
        optional fixed64 f_8 = 12;
        optional int32 f_9 = 16;
        optional fixed64 f_10 = 17;
        optional fixed64 f_11 = 19;
        optional int32 f_12 = 21;
        optional string f_13 = 23;
        optional fixed64 f_14 = 25;
        optional string f_15 = 27;
        optional int32 f_16 = 28;
        optional fixed64 f_17 = 30;
        optional fixed32 f_18 = 31;
        enum E22 {
          E22_UNSPECIFIED = 0;
          E22_CONST_1 = 87;
          E22_CONST_2 = 42;
          E22_CONST_3 = 10;
          E22_CONST_4 = 24;
          E22_CONST_5 = 16;
        }
        repeated E22 f_19 = 32 [packed = true];
        optional fixed64 f_20 = 33;
        optional uint64 f_21 = 34;
        optional fixed64 f_22 = 36;
        optional string f_23 = 38;
        optional int32 f_24 = 39;
        optional bool f_25 = 42;
        optional string f_26 = 43;
        optional fixed64 f_27 = 44;
        optional string f_28 = 45;
        optional int32 f_29 = 47;
        optional string f_30 = 48;
      }
      repeated M53 f_5 = 5;
    }
    optional M33 f_16 = 16;
  }
  optional M11 f_62 = 62;
  message M12 {
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 75;
      E5_CONST_2 = 61;
      E5_CONST_3 = 124;
      E5_CONST_4 = 19;
      E5_CONST_5 = 28;
    }
    optional E5 f_0 = 1;
    optional string f_1 = 2;
    optional bool f_2 = 3;
    optional fixed64 f_3 = 4;
    message M25 {
      optional fixed64 f_0 = 2;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 16;
        E12_CONST_2 = 33;
        E12_CONST_3 = 6;
        E12_CONST_4 = 59;
        E12_CONST_5 = 66;
      }
      optional E12 f_1 = 4;
      optional int32 f_2 = 5;
      message M43 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 5;
        optional fixed64 f_3 = 8;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 97;
          E17_CONST_2 = 3;
          E17_CONST_3 = 38;
          E17_CONST_4 = 62;
          E17_CONST_5 = 31;
        }
        repeated E17 f_4 = 9 [packed = true];
      }
      optional M43 f_6 = 6;
    }
    optional M25 f_5 = 5;
    message M30 {
      optional int32 f_0 = 3;
    }
    optional M30 f_8 = 8;
  }
  optional M12 f_64 = 64;
  message M13 {
    optional uint64 f_0 = 1;
    optional int32 f_1 = 2;
    message M32 {
      optional fixed64 f_0 = 2;
      optional string f_1 = 4;
      optional fixed64 f_2 = 5;
      message M49 {
        optional int32 f_0 = 2;
        optional string f_1 = 4;
        optional string f_2 = 5;
        optional string f_3 = 7;
        optional fixed32 f_4 = 10;
        optional bytes f_5 = 13;
        optional fixed64 f_6 = 14;
        message M64 {
          optional int32 f_0 = 1;
        }
        optional M64 f_16 = 16;
      }
      optional M49 f_6 = 6;
    }
    repeated M32 f_5 = 5;
  }
  optional M13 f_65 = 65;
  message M14 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 3;
    optional fixed64 f_2 = 5;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 67;
      E6_CONST_2 = 4;
      E6_CONST_3 = 12;
      E6_CONST_4 = 94;
      E6_CONST_5 = 89;
    }
    optional E6 f_3 = 7;
    optional int32 f_4 = 10;
    message M21 {
      optional fixed32 f_0 = 2;
      message M42 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 4;
        optional fixed64 f_2 = 6;
        optional int32 f_3 = 7;
        optional string f_4 = 9;
        optional fixed64 f_5 = 11;
        optional int32 f_6 = 12;
        message M56 {
          optional int32 f_0 = 1;
          optional string f_1 = 3;
          optional uint64 f_2 = 5;
        }
        optional M56 f_13 = 13;
        message M68 {
          optional int32 f_0 = 3;
          optional fixed32 f_1 = 4;
          optional fixed64 f_2 = 5;
          optional fixed64 f_3 = 7;
        }
        optional M68 f_16 = 16;
      }
      optional M42 f_3 = 3;
      message M45 {
        optional fixed64 f_0 = 2;
        optional fixed32 f_1 = 3;
        message M62 {
          optional uint64 f_0 = 2;
        }
        repeated M62 f_4 = 4;
      }
      repeated M45 f_5 = 5;
    }
    optional M21 f_11 = 11;
  }
  repeated M14 f_66 = 66;
  message M15 {
    optional string f_0 = 2;
    optional string f_1 = 3;
    message M19 {
      optional int32 f_0 = 1;
      message M50 {
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 123;
          E19_CONST_2 = 26;
          E19_CONST_3 = 77;
          E19_CONST_4 = 24;
          E19_CONST_5 = 75;
        }
        repeated E19 f_0 = 2 [packed = true];
        optional string f_1 = 3;
        optional fixed64 f_2 = 4;
        optional fixed64 f_3 = 5;
        optional string f_4 = 6;
      }
      optional M50 f_3 = 3;
      message M51 {
        optional string f_0 = 2;
        message M54 {
          optional string f_0 = 1;
        }
        repeated M54 f_4 = 4;
        message M57 {
          optional int32 f_0 = 1;
        }
        optional M57 f_5 = 5;
        message M60 {
          repeated string f_0 = 1;
        }
        optional M60 f_7 = 7;
      }
      repeated M51 f_6 = 6;
    }
    optional M19 f_5 = 5;
    message M20 {
      optional fixed32 f_0 = 2;
      message M38 {
        optional int32 f_0 = 2;
        message M58 {
          enum E23 {
            E23_UNSPECIFIED = 0;
            E23_CONST_1 = 99;
            E23_CONST_2 = 106;
            E23_CONST_3 = 25;
            E23_CONST_4 = 98;
            E23_CONST_5 = 15;
          }
          repeated E23 f_0 = 2 [packed = true];
        }
        optional M58 f_3 = 3;
        message M61 {
          optional int32 f_0 = 2;
        }
        optional M61 f_5 = 5;
        message M65 {
          optional int32 f_0 = 1;
          optional uint64 f_1 = 2;
          optional string f_2 = 5;
          message M74 {
            optional fixed64 f_0 = 1;
            message M77 {
              enum E29 {
                E29_UNSPECIFIED = 0;
                E29_CONST_1 = 55;
                E29_CONST_2 = 78;
                E29_CONST_3 = 2;
                E29_CONST_4 = 57;
                E29_CONST_5 = 39;
              }
              repeated E29 f_0 = 3 [packed = true];
            }
            repeated M77 f_3 = 3;
            message M78 {
              optional fixed64 f_0 = 2;
              optional fixed64 f_1 = 5;
              optional string f_2 = 7;
              optional fixed64 f_3 = 9;
              optional fixed64 f_4 = 11;
            }
            repeated M78 f_5 = 5;
          }
          optional M74 f_6 = 6;
          message M75 {
            optional string f_0 = 1;
            optional uint64 f_1 = 2;
          }
          optional M75 f_7 = 7;
        }
        repeated M65 f_7 = 7;
      }
      optional M38 f_3 = 3;
    }
    repeated M20 f_6 = 6;
  }
  repeated M15 f_68 = 68;
  message M16 {
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 3;
      E7_CONST_2 = 28;
      E7_CONST_3 = 79;
      E7_CONST_4 = 81;
      E7_CONST_5 = 86;
    }
    optional E7 f_0 = 2;
    optional string f_1 = 3;
    optional fixed32 f_2 = 6;
    optional fixed64 f_3 = 8;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 70;
      E8_CONST_2 = 48;
      E8_CONST_3 = 22;
      E8_CONST_4 = 73;
      E8_CONST_5 = 88;
    }
    repeated E8 f_4 = 9 [packed = true];
  }
  optional M16 f_69 = 69;
}
