// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P3.request.Message1;

message Message1 {
  optional fixed64 f_0 = 3;
  optional int32 f_1 = 6;
  optional bool f_2 = 7;
  optional fixed32 f_3 = 8;
  optional uint64 f_4 = 9;
  optional int32 f_5 = 12;
  optional string f_6 = 15;
  optional fixed32 f_7 = 17;
  optional string f_8 = 20;
  optional fixed64 f_9 = 23;
  optional string f_10 = 25;
  optional fixed64 f_11 = 26;
  optional fixed64 f_12 = 28;
  optional fixed64 f_13 = 29;
  optional uint64 f_14 = 30;
  optional uint64 f_15 = 32;
  optional fixed64 f_16 = 35;
  optional string f_17 = 36;
  optional int32 f_18 = 38;
  optional string f_19 = 40;
  optional fixed64 f_20 = 41;
  optional string f_21 = 42;
  repeated string f_22 = 44;
  optional string f_23 = 45;
  optional fixed64 f_24 = 46;
  optional string f_25 = 47;
  optional int32 f_26 = 50;
  optional fixed64 f_27 = 51;
  optional int32 f_28 = 52;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 37;
    E1_CONST_2 = 32;
    E1_CONST_3 = 18;
    E1_CONST_4 = 70;
    E1_CONST_5 = 38;
  }
  optional E1 f_29 = 53;
  message M1 {
    optional int32 f_0 = 1;
    message M16 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      message M30 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 3;
        optional bool f_2 = 4;
        optional fixed64 f_3 = 5;
        message M48 {
          optional string f_0 = 1;
        }
        repeated M48 f_6 = 6;
      }
      repeated M30 f_3 = 3;
    }
    repeated M16 f_2 = 2;
  }
  repeated M1 f_54 = 54;
  message M2 {
    optional int32 f_0 = 2;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 12;
      E2_CONST_2 = 64;
      E2_CONST_3 = 34;
      E2_CONST_4 = 9;
      E2_CONST_5 = 8;
    }
    optional E2 f_1 = 3;
    optional fixed64 f_2 = 6;
    message M23 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 4;
      optional string f_2 = 5;
      optional string f_3 = 6;
    }
    optional M23 f_7 = 7;
  }
  optional M2 f_57 = 57;
  message M3 {
    optional int32 f_0 = 1;
  }
  repeated M3 f_60 = 60;
  message M4 {
    optional bool f_0 = 2;
  }
  repeated M4 f_62 = 62;
  message M5 {
    optional int32 f_0 = 2;
  }
  optional M5 f_63 = 63;
  message M6 {
    optional string f_0 = 1;
    message M22 {
      optional int32 f_0 = 1;
      optional uint64 f_1 = 2;
      optional string f_2 = 3;
      message M34 {
        optional string f_0 = 1;
        optional string f_1 = 2;
        optional fixed64 f_2 = 3;
        optional fixed64 f_3 = 5;
        optional int32 f_4 = 6;
        message M53 {
          optional fixed64 f_0 = 3;
          message M57 {
            optional fixed64 f_0 = 2;
            optional fixed64 f_1 = 3;
            optional int32 f_2 = 4;
          }
          optional M57 f_4 = 4;
        }
        optional M53 f_8 = 8;
      }
      optional M34 f_4 = 4;
    }
    repeated M22 f_2 = 2;
    message M28 {
      optional int32 f_0 = 3;
      message M31 {
        optional bool f_0 = 1;
        message M46 {
          optional fixed64 f_0 = 2;
          optional int32 f_1 = 3;
          optional fixed32 f_2 = 4;
          optional fixed64 f_3 = 6;
        }
        optional M46 f_3 = 3;
      }
      optional M31 f_5 = 5;
    }
    repeated M28 f_3 = 3;
  }
  optional M6 f_64 = 64;
  message M7 {
    optional string f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 4;
    optional string f_3 = 5;
    optional fixed64 f_4 = 6;
    message M21 {
      optional int32 f_0 = 1;
      message M37 {
        repeated string f_0 = 1;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 4;
        message M52 {
          enum E20 {
            E20_UNSPECIFIED = 0;
            E20_CONST_1 = 45;
            E20_CONST_2 = 59;
            E20_CONST_3 = 80;
            E20_CONST_4 = 14;
            E20_CONST_5 = 119;
          }
          optional E20 f_0 = 1;
        }
        repeated M52 f_5 = 5;
      }
      repeated M37 f_3 = 3;
    }
    optional M21 f_7 = 7;
    message M27 {
      optional int32 f_0 = 1;
      message M32 {
        optional fixed64 f_0 = 1;
        message M43 {
          optional fixed64 f_0 = 2;
        }
        optional M43 f_3 = 3;
        message M44 {
          optional uint64 f_0 = 3;
        }
        optional M44 f_4 = 4;
      }
      optional M32 f_2 = 2;
    }
    optional M27 f_9 = 9;
  }
  optional M7 f_66 = 66;
  message M8 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 3;
  }
  optional M8 f_67 = 67;
  message M9 {
    optional int32 f_0 = 2;
    optional bool f_1 = 3;
    optional int64 f_2 = 5;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 21;
      E3_CONST_2 = 122;
      E3_CONST_3 = 53;
      E3_CONST_4 = 58;
      E3_CONST_5 = 99;
    }
    repeated E3 f_3 = 6 [packed = true];
    optional fixed64 f_4 = 8;
    optional fixed64 f_5 = 9;
    optional fixed64 f_6 = 10;
    optional uint64 f_7 = 11;
    message M24 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 110;
        E6_CONST_2 = 7;
        E6_CONST_3 = 91;
        E6_CONST_4 = 122;
        E6_CONST_5 = 29;
      }
      repeated E6 f_0 = 1 [packed = true];
    }
    optional M24 f_12 = 12;
    message M29 {
      optional bytes f_0 = 1;
      optional int32 f_1 = 2;
      optional uint64 f_2 = 4;
      optional int32 f_3 = 5;
      optional string f_4 = 8;
      optional int32 f_5 = 10;
      optional string f_6 = 12;
      optional int32 f_7 = 13;
      optional uint64 f_8 = 14;
      optional string f_9 = 16;
      repeated int32 f_10 = 18 [packed = true];
      optional fixed64 f_11 = 19;
      optional string f_12 = 20;
      optional int32 f_13 = 21;
      optional string f_14 = 22;
      optional fixed64 f_15 = 23;
      optional int32 f_16 = 24;
      optional int32 f_17 = 28;
      optional int32 f_18 = 30;
      optional int32 f_19 = 33;
      optional int32 f_20 = 35;
      optional string f_21 = 36;
      optional fixed64 f_22 = 37;
      optional int32 f_23 = 38;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 108;
        E7_CONST_2 = 10;
        E7_CONST_3 = 111;
        E7_CONST_4 = 54;
        E7_CONST_5 = 61;
      }
      repeated E7 f_24 = 40 [packed = true];
      optional uint64 f_25 = 41;
      message M35 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 3;
        optional string f_2 = 5;
        optional fixed64 f_3 = 6;
        optional fixed32 f_4 = 7;
        optional int32 f_5 = 8;
        optional uint64 f_6 = 10;
        optional bool f_7 = 13;
        optional fixed64 f_8 = 14;
        optional fixed64 f_9 = 15;
        optional string f_10 = 16;
        optional bool f_11 = 17;
        optional string f_12 = 18;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 69;
          E9_CONST_2 = 77;
          E9_CONST_3 = 84;
          E9_CONST_4 = 113;
          E9_CONST_5 = 72;
        }
        optional E9 f_13 = 20;
        optional string f_14 = 21;
        optional fixed64 f_15 = 22;
        optional int32 f_16 = 23;
        optional fixed32 f_17 = 25;
        optional int32 f_18 = 26;
        optional string f_19 = 28;
        optional fixed64 f_20 = 29;
        optional fixed64 f_21 = 30;
        optional fixed64 f_22 = 31;
        optional int32 f_23 = 33;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 38;
          E10_CONST_2 = 108;
          E10_CONST_3 = 69;
          E10_CONST_4 = 25;
          E10_CONST_5 = 27;
        }
        optional E10 f_24 = 34;
        optional int32 f_25 = 36;
        optional bool f_26 = 38;
        optional string f_27 = 41;
        optional string f_28 = 43;
        optional int64 f_29 = 45;
        message M42 {
          optional int32 f_0 = 2;
          optional bool f_1 = 3;
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 6;
            E17_CONST_2 = 108;
            E17_CONST_3 = 9;
            E17_CONST_4 = 44;
            E17_CONST_5 = 71;
          }
          optional E17 f_2 = 4;
          optional int32 f_3 = 5;
          optional string f_4 = 7;
          optional string f_5 = 10;
          message M59 {
            optional int32 f_0 = 2;
            optional string f_1 = 4;
            optional fixed64 f_2 = 6;
            optional int32 f_3 = 7;
            optional int32 f_4 = 8;
            optional int32 f_5 = 9;
            optional fixed32 f_6 = 10;
            optional fixed64 f_7 = 12;
            optional bool f_8 = 14;
            message M62 {
              optional fixed64 f_0 = 1;
              optional fixed64 f_1 = 2;
            }
            optional M62 f_16 = 16;
          }
          repeated M59 f_11 = 11;
        }
        repeated M42 f_46 = 46;
        message M47 {
          optional double f_0 = 1;
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 83;
            E18_CONST_2 = 54;
            E18_CONST_3 = 29;
            E18_CONST_4 = 107;
            E18_CONST_5 = 45;
          }
          optional E18 f_1 = 2;
          optional string f_2 = 3;
        }
        repeated M47 f_48 = 48;
        message M49 {
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 92;
            E19_CONST_2 = 104;
            E19_CONST_3 = 43;
            E19_CONST_4 = 35;
            E19_CONST_5 = 4;
          }
          repeated E19 f_0 = 3 [packed = true];
        }
        optional M49 f_49 = 49;
        message M54 {
          optional int32 f_0 = 3;
        }
        repeated M54 f_51 = 51;
      }
      optional M35 f_42 = 42;
      message M36 {
        optional fixed64 f_0 = 1;
        message M40 {
          optional fixed32 f_0 = 1;
          message M58 {
            optional int32 f_0 = 2;
          }
          repeated M58 f_4 = 4;
        }
        repeated M40 f_2 = 2;
        message M50 {
          optional fixed64 f_0 = 4;
          optional int32 f_1 = 7;
          optional uint64 f_2 = 8;
        }
        optional M50 f_4 = 4;
      }
      optional M36 f_45 = 45;
      message M39 {
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 23;
          E11_CONST_2 = 73;
          E11_CONST_3 = 57;
          E11_CONST_4 = 91;
          E11_CONST_5 = 45;
        }
        repeated E11 f_0 = 2 [packed = true];
        optional int32 f_1 = 4;
        optional fixed32 f_2 = 6;
        optional bool f_3 = 7;
        optional fixed32 f_4 = 11;
        optional int32 f_5 = 13;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 53;
          E12_CONST_2 = 28;
          E12_CONST_3 = 115;
          E12_CONST_4 = 30;
          E12_CONST_5 = 26;
        }
        repeated E12 f_6 = 14 [packed = true];
        optional fixed32 f_7 = 16;
        optional fixed64 f_8 = 17;
        optional string f_9 = 18;
        optional string f_10 = 20;
        optional fixed64 f_11 = 21;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 17;
          E13_CONST_2 = 45;
          E13_CONST_3 = 64;
          E13_CONST_4 = 48;
          E13_CONST_5 = 43;
        }
        optional E13 f_12 = 22;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 42;
          E14_CONST_2 = 71;
          E14_CONST_3 = 103;
          E14_CONST_4 = 13;
          E14_CONST_5 = 53;
        }
        repeated E14 f_13 = 24 [packed = true];
        optional fixed64 f_14 = 26;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 72;
          E15_CONST_2 = 18;
          E15_CONST_3 = 66;
          E15_CONST_4 = 15;
          E15_CONST_5 = 24;
        }
        optional E15 f_15 = 27;
        optional fixed64 f_16 = 28;
        optional int32 f_17 = 29;
        optional int32 f_18 = 30;
        optional int32 f_19 = 35;
        optional string f_20 = 36;
        optional int32 f_21 = 37;
        optional int32 f_22 = 38;
        optional fixed64 f_23 = 39;
        optional string f_24 = 41;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 2;
          E16_CONST_2 = 76;
          E16_CONST_3 = 74;
          E16_CONST_4 = 79;
          E16_CONST_5 = 120;
        }
        repeated E16 f_25 = 44 [packed = true];
        optional int32 f_26 = 45;
        optional bool f_27 = 46;
        optional bool f_28 = 47;
        optional fixed64 f_29 = 48;
        optional int32 f_30 = 50;
        optional fixed32 f_31 = 51;
        optional fixed64 f_32 = 53;
        message M45 {
          optional int32 f_0 = 1;
          message M61 {
            optional fixed64 f_0 = 1;
            optional fixed32 f_1 = 2;
            optional fixed64 f_2 = 3;
            optional int32 f_3 = 6;
            optional fixed64 f_4 = 8;
            optional string f_5 = 9;
            optional fixed64 f_6 = 11;
            optional fixed64 f_7 = 13;
            optional fixed64 f_8 = 14;
            optional string f_9 = 15;
            optional uint64 f_10 = 16;
            optional string f_11 = 17;
            enum E21 {
              E21_UNSPECIFIED = 0;
              E21_CONST_1 = 72;
              E21_CONST_2 = 59;
              E21_CONST_3 = 75;
              E21_CONST_4 = 73;
              E21_CONST_5 = 82;
            }
            repeated E21 f_12 = 18 [packed = true];
            optional bool f_13 = 19;
            optional int32 f_14 = 21;
            optional int32 f_15 = 23;
            optional fixed64 f_16 = 25;
            optional string f_17 = 27;
            optional fixed64 f_18 = 28;
            enum E22 {
              E22_UNSPECIFIED = 0;
              E22_CONST_1 = 74;
              E22_CONST_2 = 22;
              E22_CONST_3 = 93;
              E22_CONST_4 = 10;
              E22_CONST_5 = 31;
            }
            repeated E22 f_19 = 29 [packed = true];
          }
          optional M61 f_2 = 2;
        }
        optional M45 f_54 = 54;
        message M51 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 3;
          optional fixed64 f_2 = 6;
          optional fixed64 f_3 = 9;
          optional fixed64 f_4 = 10;
        }
        optional M51 f_56 = 56;
      }
      optional M39 f_47 = 47;
    }
    repeated M29 f_13 = 13;
  }
  optional M9 f_69 = 69;
  message M10 {
    optional fixed64 f_0 = 1;
  }
  optional M10 f_70 = 70;
  message M11 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 55;
      E4_CONST_2 = 25;
      E4_CONST_3 = 61;
      E4_CONST_4 = 16;
      E4_CONST_5 = 29;
    }
    repeated E4 f_0 = 1 [packed = true];
  }
  optional M11 f_72 = 72;
  message M12 {
    optional int32 f_0 = 2;
    message M17 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 5;
      optional fixed64 f_3 = 6;
      optional bool f_4 = 8;
      optional fixed64 f_5 = 9;
      optional uint64 f_6 = 10;
      optional uint64 f_7 = 11;
      optional int32 f_8 = 12;
      optional string f_9 = 13;
      optional bool f_10 = 15;
      optional string f_11 = 17;
      optional fixed64 f_12 = 18;
      optional string f_13 = 20;
      optional fixed32 f_14 = 21;
      optional int32 f_15 = 22;
      optional bool f_16 = 23;
      optional fixed64 f_17 = 24;
      optional fixed64 f_18 = 25;
      optional fixed32 f_19 = 29;
      optional fixed32 f_20 = 30;
      optional fixed64 f_21 = 34;
      optional string f_22 = 35;
      optional int32 f_23 = 37;
      optional int32 f_24 = 39;
      optional fixed32 f_25 = 41;
      optional string f_26 = 42;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 124;
        E5_CONST_2 = 120;
        E5_CONST_3 = 105;
        E5_CONST_4 = 94;
        E5_CONST_5 = 69;
      }
      optional E5 f_27 = 45;
      optional uint64 f_28 = 46;
      optional string f_29 = 47;
      optional int32 f_30 = 49;
      message M33 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 116;
          E8_CONST_2 = 69;
          E8_CONST_3 = 68;
          E8_CONST_4 = 13;
          E8_CONST_5 = 27;
        }
        repeated E8 f_0 = 1 [packed = true];
        optional bool f_1 = 5;
        optional int32 f_2 = 9;
        optional fixed64 f_3 = 10;
        optional string f_4 = 11;
        message M41 {
          optional fixed32 f_0 = 2;
          optional int32 f_1 = 3;
        }
        repeated M41 f_14 = 14;
        message M55 {
          optional fixed32 f_0 = 2;
        }
        repeated M55 f_16 = 16;
      }
      repeated M33 f_50 = 50;
    }
    optional M17 f_3 = 3;
  }
  optional M12 f_74 = 74;
  message M13 {
    optional int32 f_0 = 1;
    message M25 {
      optional fixed64 f_0 = 3;
    }
    repeated M25 f_2 = 2;
  }
  repeated M13 f_76 = 76;
  message M14 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    optional string f_2 = 3;
    optional bool f_3 = 4;
    message M20 {
      optional bool f_0 = 2;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional string f_3 = 6;
    }
    optional M20 f_6 = 6;
    message M26 {
      optional fixed32 f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    optional M26 f_9 = 9;
  }
  repeated M14 f_77 = 77;
  message M15 {
    optional string f_0 = 1;
    message M18 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      message M38 {
        optional fixed32 f_0 = 1;
        message M56 {
          optional int32 f_0 = 3;
          message M60 {
            optional bool f_0 = 1;
          }
          optional M60 f_4 = 4;
        }
        optional M56 f_2 = 2;
      }
      optional M38 f_4 = 4;
    }
    optional M18 f_2 = 2;
    message M19 {
      optional int32 f_0 = 1;
      optional bool f_1 = 3;
      optional fixed64 f_2 = 5;
    }
    optional M19 f_3 = 3;
  }
  optional M15 f_80 = 80;
}
