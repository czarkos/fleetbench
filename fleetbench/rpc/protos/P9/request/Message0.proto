// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P9.request.Message0;

message Message0 {
  optional bool f_0 = 2;
  optional fixed64 f_1 = 4;
  optional bool f_2 = 6;
  optional int64 f_3 = 7;
  optional string f_4 = 9;
  optional string f_5 = 10;
  optional int64 f_6 = 11;
  optional string f_7 = 12;
  optional bool f_8 = 14;
  optional fixed64 f_9 = 15;
  optional int32 f_10 = 17;
  optional int32 f_11 = 19;
  optional int32 f_12 = 22;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 69;
    E1_CONST_2 = 18;
    E1_CONST_3 = 89;
    E1_CONST_4 = 36;
    E1_CONST_5 = 101;
  }
  repeated E1 f_13 = 26 [packed = true];
  optional fixed64 f_14 = 27;
  optional int64 f_15 = 28;
  optional int32 f_16 = 30;
  optional fixed64 f_17 = 33;
  optional string f_18 = 35;
  optional bool f_19 = 36;
  optional uint64 f_20 = 39;
  optional int32 f_21 = 42;
  optional string f_22 = 43;
  optional fixed32 f_23 = 44;
  optional bool f_24 = 45;
  optional double f_25 = 47;
  optional bool f_26 = 48;
  optional int32 f_27 = 50;
  optional bool f_28 = 52;
  optional fixed64 f_29 = 53;
  message M1 {
    optional fixed64 f_0 = 1;
    message M8 {
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 101;
        E3_CONST_2 = 65;
        E3_CONST_3 = 42;
        E3_CONST_4 = 48;
        E3_CONST_5 = 7;
      }
      repeated E3 f_0 = 2 [packed = true];
      message M27 {
        optional bool f_0 = 1;
        optional int64 f_1 = 3;
        optional int64 f_2 = 5;
        optional int32 f_3 = 7;
        message M45 {
          optional int32 f_0 = 3;
          optional uint64 f_1 = 4;
          message M46 {
            optional int32 f_0 = 2;
            optional int64 f_1 = 5;
            optional fixed64 f_2 = 6;
          }
          optional M46 f_6 = 6;
        }
        repeated M45 f_9 = 9;
      }
      optional M27 f_7 = 7;
    }
    optional M8 f_4 = 4;
    message M11 {
      optional int64 f_0 = 1;
      message M29 {
        optional fixed64 f_0 = 1;
      }
      optional M29 f_3 = 3;
      message M34 {
        optional int32 f_0 = 1;
      }
      optional M34 f_4 = 4;
    }
    optional M11 f_7 = 7;
    message M16 {
      optional bool f_0 = 1;
      optional int64 f_1 = 4;
      optional int64 f_2 = 9;
      optional int32 f_3 = 12;
      optional int64 f_4 = 15;
    }
    optional M16 f_8 = 8;
  }
  optional M1 f_56 = 56;
  message M2 {
    optional fixed64 f_0 = 3;
    optional bool f_1 = 5;
    optional int32 f_2 = 8;
    optional int32 f_3 = 10;
    optional string f_4 = 12;
    message M6 {
      optional string f_0 = 2;
      optional int64 f_1 = 4;
      optional int32 f_2 = 8;
      message M28 {
        repeated string f_0 = 3;
        optional fixed64 f_1 = 5;
        optional fixed64 f_2 = 7;
        optional int32 f_3 = 9;
        optional fixed64 f_4 = 10;
        optional fixed64 f_5 = 12;
        optional fixed64 f_6 = 13;
        optional fixed64 f_7 = 14;
        optional int32 f_8 = 15;
        optional fixed64 f_9 = 16;
        optional bool f_10 = 17;
        optional string f_11 = 19;
        message M42 {
          repeated int32 f_0 = 1 [packed = true];
          optional fixed64 f_1 = 2;
          optional int32 f_2 = 3;
          optional fixed32 f_3 = 4;
          optional int32 f_4 = 6;
          optional int32 f_5 = 8;
        }
        optional M42 f_21 = 21;
      }
      repeated M28 f_9 = 9;
      message M31 {
        optional fixed64 f_0 = 1;
      }
      optional M31 f_10 = 10;
      message M35 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 3;
        optional int32 f_2 = 4;
        optional fixed64 f_3 = 6;
        optional string f_4 = 7;
        optional bool f_5 = 11;
        optional int64 f_6 = 13;
        optional int32 f_7 = 15;
        optional int32 f_8 = 16;
        optional int64 f_9 = 18;
        optional string f_10 = 21;
        optional fixed64 f_11 = 22;
        optional int32 f_12 = 23;
        optional int32 f_13 = 25;
        optional fixed64 f_14 = 26;
        optional bool f_15 = 27;
        optional int32 f_16 = 29;
        optional bool f_17 = 30;
        optional int32 f_18 = 31;
        optional uint64 f_19 = 32;
        optional int32 f_20 = 34;
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 120;
          E6_CONST_2 = 82;
          E6_CONST_3 = 66;
          E6_CONST_4 = 119;
          E6_CONST_5 = 56;
        }
        repeated E6 f_21 = 36 [packed = true];
        optional fixed64 f_22 = 38;
        optional int32 f_23 = 41;
        optional string f_24 = 42;
        optional int32 f_25 = 43;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 17;
          E7_CONST_2 = 2;
          E7_CONST_3 = 1;
          E7_CONST_4 = 108;
          E7_CONST_5 = 61;
        }
        optional E7 f_26 = 44;
        optional int32 f_27 = 48;
        optional fixed64 f_28 = 50;
        optional bool f_29 = 51;
        optional fixed64 f_30 = 53;
        optional bool f_31 = 56;
        optional fixed32 f_32 = 57;
        message M41 {
          optional string f_0 = 1;
          optional int32 f_1 = 2;
          optional bool f_2 = 3;
          optional double f_3 = 4;
        }
        optional M41 f_59 = 59;
      }
      repeated M35 f_13 = 13;
    }
    optional M6 f_15 = 15;
    message M7 {
      optional string f_0 = 2;
    }
    optional M7 f_16 = 16;
    message M9 {
      optional int32 f_0 = 4;
    }
    optional M9 f_17 = 17;
    message M15 {
      optional fixed32 f_0 = 3;
      optional fixed64 f_1 = 5;
      optional int32 f_2 = 6;
      message M30 {
        optional fixed32 f_0 = 2;
        message M44 {
          optional int32 f_0 = 3;
          optional fixed64 f_1 = 5;
          optional double f_2 = 6;
          optional bool f_3 = 7;
          optional fixed64 f_4 = 8;
        }
        repeated M44 f_3 = 3;
      }
      optional M30 f_7 = 7;
    }
    optional M15 f_19 = 19;
  }
  repeated M2 f_58 = 58;
  message M3 {
    optional fixed64 f_0 = 1;
    message M17 {
      optional fixed64 f_0 = 1;
    }
    repeated M17 f_3 = 3;
    message M18 {
      optional int32 f_0 = 1;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 14;
        E4_CONST_2 = 75;
        E4_CONST_3 = 112;
        E4_CONST_4 = 67;
        E4_CONST_5 = 118;
      }
      optional E4 f_1 = 4;
      optional int32 f_2 = 5;
      optional fixed64 f_3 = 8;
      optional fixed64 f_4 = 10;
    }
    optional M18 f_4 = 4;
    message M21 {
      repeated string f_0 = 4;
      optional int32 f_1 = 6;
      optional int64 f_2 = 9;
    }
    optional M21 f_8 = 8;
    message M22 {
      optional int32 f_0 = 1;
      optional bool f_1 = 3;
      optional string f_2 = 4;
      optional int32 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional fixed64 f_5 = 7;
      message M32 {
        optional int32 f_0 = 1;
        message M40 {
          optional int32 f_0 = 2;
          optional int32 f_1 = 4;
          optional int32 f_2 = 6;
          optional fixed64 f_3 = 7;
          optional int32 f_4 = 8;
          message M48 {
            optional string f_0 = 2;
            optional fixed64 f_1 = 4;
            optional string f_2 = 7;
          }
          optional M48 f_10 = 10;
        }
        optional M40 f_4 = 4;
      }
      optional M32 f_9 = 9;
    }
    repeated M22 f_10 = 10;
    message M23 {
      optional string f_0 = 1;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 90;
        E5_CONST_2 = 60;
        E5_CONST_3 = 85;
        E5_CONST_4 = 93;
        E5_CONST_5 = 37;
      }
      repeated E5 f_1 = 4 [packed = true];
      optional int32 f_2 = 7;
      optional string f_3 = 8;
    }
    optional M23 f_11 = 11;
  }
  optional M3 f_60 = 60;
  message M4 {
    optional fixed64 f_0 = 2;
    optional fixed32 f_1 = 4;
    optional bool f_2 = 5;
    optional string f_3 = 6;
    optional int32 f_4 = 8;
    optional int32 f_5 = 12;
    optional fixed32 f_6 = 13;
    optional int64 f_7 = 14;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 99;
      E2_CONST_2 = 37;
      E2_CONST_3 = 114;
      E2_CONST_4 = 30;
      E2_CONST_5 = 1;
    }
    optional E2 f_8 = 17;
    optional string f_9 = 18;
    optional int32 f_10 = 19;
    optional bool f_11 = 20;
    optional fixed64 f_12 = 22;
    optional fixed64 f_13 = 24;
    optional int32 f_14 = 26;
    optional int32 f_15 = 28;
    optional bool f_16 = 30;
    optional fixed64 f_17 = 34;
    optional int64 f_18 = 36;
    optional string f_19 = 38;
    optional int32 f_20 = 39;
    optional bool f_21 = 40;
    optional fixed64 f_22 = 42;
    message M12 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional int32 f_3 = 5;
      optional int32 f_4 = 7;
      optional int32 f_5 = 9;
    }
    optional M12 f_43 = 43;
    message M20 {
      optional int64 f_0 = 2;
      message M33 {
        optional string f_0 = 1;
        message M38 {
          optional double f_0 = 2;
          optional fixed64 f_1 = 3;
          optional double f_2 = 4;
          optional bool f_3 = 5;
          optional bool f_4 = 7;
        }
        repeated M38 f_3 = 3;
      }
      optional M33 f_3 = 3;
    }
    optional M20 f_44 = 44;
  }
  repeated M4 f_61 = 61;
  message M5 {
    optional fixed64 f_0 = 1;
    message M10 {
      optional int32 f_0 = 2;
    }
    optional M10 f_4 = 4;
    message M13 {
      optional fixed64 f_0 = 1;
      message M26 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 2;
        message M39 {
          optional fixed64 f_0 = 2;
        }
        optional M39 f_3 = 3;
      }
      repeated M26 f_2 = 2;
      message M36 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 6;
          E8_CONST_2 = 36;
          E8_CONST_3 = 59;
          E8_CONST_4 = 50;
          E8_CONST_5 = 35;
        }
        repeated E8 f_0 = 2 [packed = true];
        optional int32 f_1 = 4;
        optional string f_2 = 5;
        optional int32 f_3 = 7;
        optional int64 f_4 = 9;
        optional int64 f_5 = 10;
        optional string f_6 = 12;
        optional fixed64 f_7 = 13;
        optional bool f_8 = 14;
        optional int32 f_9 = 15;
        optional fixed64 f_10 = 16;
        optional fixed64 f_11 = 18;
        optional int32 f_12 = 19;
        optional bool f_13 = 21;
        optional fixed32 f_14 = 22;
        optional fixed64 f_15 = 24;
        optional fixed64 f_16 = 26;
        optional string f_17 = 28;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 96;
          E9_CONST_2 = 53;
          E9_CONST_3 = 19;
          E9_CONST_4 = 27;
          E9_CONST_5 = 94;
        }
        repeated E9 f_18 = 29 [packed = true];
        optional int32 f_19 = 31;
        optional int32 f_20 = 32;
        optional int64 f_21 = 33;
        optional int32 f_22 = 34;
        optional fixed64 f_23 = 36;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 87;
          E10_CONST_2 = 20;
          E10_CONST_3 = 72;
          E10_CONST_4 = 65;
          E10_CONST_5 = 97;
        }
        optional E10 f_24 = 39;
        optional int32 f_25 = 42;
        optional int32 f_26 = 43;
        optional string f_27 = 45;
        optional int32 f_28 = 46;
        optional fixed64 f_29 = 47;
        optional fixed64 f_30 = 49;
        message M37 {
          optional string f_0 = 1;
          optional int32 f_1 = 2;
          message M47 {
            optional string f_0 = 1;
          }
          optional M47 f_3 = 3;
        }
        optional M37 f_50 = 50;
        message M43 {
          optional int32 f_0 = 3;
        }
        optional M43 f_51 = 51;
      }
      optional M36 f_3 = 3;
    }
    optional M13 f_5 = 5;
    message M14 {
      optional string f_0 = 2;
    }
    optional M14 f_6 = 6;
    message M19 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 3;
      optional string f_2 = 4;
      optional string f_3 = 6;
      optional bool f_4 = 7;
    }
    optional M19 f_9 = 9;
    message M24 {
      optional string f_0 = 1;
      optional bool f_1 = 3;
      optional fixed64 f_2 = 5;
      optional fixed64 f_3 = 6;
      optional int32 f_4 = 8;
      repeated int32 f_5 = 9 [packed = true];
      optional int32 f_6 = 10;
      optional int32 f_7 = 12;
      optional bool f_8 = 13;
      optional int32 f_9 = 15;
    }
    repeated M24 f_11 = 11;
    message M25 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 4;
      optional int64 f_3 = 5;
    }
    optional M25 f_12 = 12;
  }
  optional M5 f_62 = 62;
}
