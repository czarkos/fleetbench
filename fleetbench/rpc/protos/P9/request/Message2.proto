// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P9.request.Message2;

message Message2 {
  optional fixed64 f_0 = 2;
  optional int32 f_1 = 4;
  optional string f_2 = 6;
  optional int32 f_3 = 7;
  optional string f_4 = 9;
  optional fixed64 f_5 = 11;
  optional int32 f_6 = 12;
  optional bool f_7 = 14;
  optional int32 f_8 = 15;
  optional string f_9 = 16;
  optional int32 f_10 = 17;
  optional int64 f_11 = 19;
  optional int32 f_12 = 21;
  optional int32 f_13 = 22;
  optional bool f_14 = 24;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 122;
    E1_CONST_2 = 31;
    E1_CONST_3 = 59;
    E1_CONST_4 = 102;
    E1_CONST_5 = 17;
  }
  optional E1 f_15 = 25;
  optional fixed64 f_16 = 27;
  optional int32 f_17 = 29;
  optional string f_18 = 31;
  optional string f_19 = 33;
  optional string f_20 = 35;
  repeated int32 f_21 = 37 [packed = true];
  optional int64 f_22 = 39;
  optional fixed64 f_23 = 43;
  optional fixed64 f_24 = 44;
  optional int32 f_25 = 47;
  optional int64 f_26 = 48;
  optional int32 f_27 = 50;
  optional string f_28 = 52;
  optional int64 f_29 = 53;
  message M1 {
    optional int32 f_0 = 1;
    message M13 {
      optional fixed64 f_0 = 2;
    }
    optional M13 f_5 = 5;
    message M20 {
      optional int64 f_0 = 1;
    }
    optional M20 f_7 = 7;
    message M24 {
      optional uint64 f_0 = 1;
    }
    optional M24 f_9 = 9;
    message M29 {
      optional double f_0 = 1;
    }
    repeated M29 f_12 = 12;
  }
  optional M1 f_54 = 54;
  message M2 {
    optional fixed32 f_0 = 1;
    message M11 {
      optional string f_0 = 1;
    }
    repeated M11 f_2 = 2;
    message M12 {
      optional string f_0 = 1;
    }
    repeated M12 f_3 = 3;
  }
  optional M2 f_55 = 55;
  message M3 {
    optional int32 f_0 = 3;
    optional fixed64 f_1 = 4;
    optional int32 f_2 = 6;
    message M18 {
      optional string f_0 = 3;
    }
    repeated M18 f_8 = 8;
  }
  repeated M3 f_56 = 56;
  message M4 {
    optional string f_0 = 4;
    message M17 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      message M33 {
        optional fixed64 f_0 = 1;
        message M39 {
          optional double f_0 = 1;
          optional string f_1 = 2;
          optional int32 f_2 = 4;
          optional int32 f_3 = 5;
        }
        repeated M39 f_2 = 2;
        message M46 {
          optional bool f_0 = 1;
          optional int32 f_1 = 2;
          optional int32 f_2 = 4;
        }
        repeated M46 f_5 = 5;
      }
      optional M33 f_5 = 5;
      message M35 {
        optional string f_0 = 2;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 37;
          E8_CONST_2 = 6;
          E8_CONST_3 = 16;
          E8_CONST_4 = 87;
          E8_CONST_5 = 96;
        }
        repeated E8 f_1 = 6 [packed = true];
        optional fixed32 f_2 = 8;
        optional int32 f_3 = 10;
        message M44 {
          optional bool f_0 = 2;
          optional fixed64 f_1 = 4;
          optional fixed64 f_2 = 5;
          repeated string f_3 = 6;
        }
        optional M44 f_12 = 12;
      }
      optional M35 f_6 = 6;
    }
    optional M17 f_6 = 6;
    message M21 {
      optional int32 f_0 = 1;
      message M31 {
        optional fixed64 f_0 = 1;
        message M42 {
          optional int32 f_0 = 2;
        }
        optional M42 f_3 = 3;
      }
      optional M31 f_3 = 3;
      message M36 {
        optional fixed64 f_0 = 1;
        optional int64 f_1 = 2;
        optional int64 f_2 = 3;
        optional int32 f_3 = 6;
        optional int32 f_4 = 7;
        optional int64 f_5 = 9;
        optional string f_6 = 10;
        optional fixed64 f_7 = 11;
        optional int32 f_8 = 12;
        repeated string f_9 = 14;
        optional int32 f_10 = 15;
        optional int32 f_11 = 19;
        optional int64 f_12 = 20;
        optional fixed64 f_13 = 21;
        optional string f_14 = 24;
        optional string f_15 = 25;
        optional fixed64 f_16 = 26;
        optional string f_17 = 27;
        optional int32 f_18 = 28;
        optional int64 f_19 = 30;
        optional fixed64 f_20 = 34;
        optional int32 f_21 = 37;
        optional string f_22 = 38;
        optional fixed64 f_23 = 40;
        repeated int32 f_24 = 42 [packed = true];
        optional int32 f_25 = 44;
        optional fixed64 f_26 = 46;
        optional int64 f_27 = 49;
        optional bool f_28 = 50;
        optional fixed64 f_29 = 51;
        optional fixed64 f_30 = 53;
        optional int32 f_31 = 54;
        message M40 {
          optional int64 f_0 = 2;
        }
        repeated M40 f_55 = 55;
        message M49 {
          optional int32 f_0 = 2;
        }
        optional M49 f_56 = 56;
        message M53 {
          optional fixed64 f_0 = 3;
        }
        optional M53 f_57 = 57;
      }
      optional M36 f_5 = 5;
    }
    optional M21 f_8 = 8;
    message M30 {
      optional fixed64 f_0 = 4;
      optional string f_1 = 6;
      optional int64 f_2 = 7;
      optional int32 f_3 = 8;
      optional string f_4 = 9;
      message M34 {
        optional int32 f_0 = 3;
        optional fixed32 f_1 = 5;
        optional int32 f_2 = 7;
        optional fixed64 f_3 = 8;
        message M41 {
          optional bool f_0 = 4;
        }
        repeated M41 f_10 = 10;
        message M43 {
          optional bool f_0 = 2;
          message M55 {
            optional fixed64 f_0 = 2;
          }
          optional M55 f_3 = 3;
        }
        repeated M43 f_11 = 11;
        message M50 {
          optional string f_0 = 1;
          message M56 {
            optional int32 f_0 = 4;
            optional int32 f_1 = 5;
            optional int32 f_2 = 6;
            optional int32 f_3 = 7;
            optional string f_4 = 9;
            optional string f_5 = 12;
            optional bool f_6 = 14;
          }
          optional M56 f_2 = 2;
        }
        optional M50 f_14 = 14;
        message M51 {
          optional bool f_0 = 2;
          optional int32 f_1 = 4;
        }
        optional M51 f_16 = 16;
        message M52 {
          optional fixed64 f_0 = 1;
        }
        optional M52 f_17 = 17;
      }
      optional M34 f_10 = 10;
    }
    optional M30 f_9 = 9;
  }
  optional M4 f_57 = 57;
  message M5 {
    optional int32 f_0 = 1;
    repeated string f_1 = 3;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 48;
      E2_CONST_2 = 86;
      E2_CONST_3 = 121;
      E2_CONST_4 = 64;
      E2_CONST_5 = 109;
    }
    repeated E2 f_2 = 4 [packed = true];
    optional double f_3 = 7;
    message M14 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 3;
    }
    optional M14 f_9 = 9;
  }
  optional M5 f_59 = 59;
  message M6 {
    optional bool f_0 = 1;
    optional string f_1 = 4;
  }
  repeated M6 f_60 = 60;
  message M7 {
    optional int32 f_0 = 2;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 36;
      E3_CONST_2 = 69;
      E3_CONST_3 = 95;
      E3_CONST_4 = 74;
      E3_CONST_5 = 29;
    }
    repeated E3 f_1 = 3 [packed = true];
    optional int64 f_2 = 5;
    optional string f_3 = 7;
    optional bool f_4 = 8;
    optional int32 f_5 = 10;
    message M25 {
      optional bool f_0 = 1;
      optional fixed32 f_1 = 3;
      optional fixed64 f_2 = 5;
      message M38 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 3;
        optional string f_2 = 5;
        optional fixed64 f_3 = 6;
        optional int32 f_4 = 7;
        optional fixed64 f_5 = 8;
        optional int32 f_6 = 10;
        optional int32 f_7 = 11;
        optional fixed32 f_8 = 14;
        optional bool f_9 = 16;
        optional double f_10 = 18;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 43;
          E9_CONST_2 = 87;
          E9_CONST_3 = 67;
          E9_CONST_4 = 30;
          E9_CONST_5 = 103;
        }
        repeated E9 f_11 = 19 [packed = true];
        optional int32 f_12 = 20;
        optional bool f_13 = 21;
        optional string f_14 = 24;
        optional fixed64 f_15 = 26;
        optional int32 f_16 = 27;
        optional string f_17 = 28;
        repeated string f_18 = 29;
        optional fixed64 f_19 = 30;
        optional fixed32 f_20 = 34;
        optional int32 f_21 = 37;
        optional string f_22 = 42;
        optional int64 f_23 = 43;
        optional bool f_24 = 45;
        optional fixed64 f_25 = 46;
        optional string f_26 = 48;
        optional int64 f_27 = 49;
        optional string f_28 = 52;
        optional fixed64 f_29 = 54;
        optional string f_30 = 56;
        message M45 {
          optional fixed64 f_0 = 2;
          optional fixed64 f_1 = 4;
          optional int32 f_2 = 6;
          optional int32 f_3 = 8;
          optional fixed64 f_4 = 10;
          optional int64 f_5 = 11;
          optional int32 f_6 = 12;
        }
        optional M45 f_57 = 57;
      }
      optional M38 f_6 = 6;
    }
    repeated M25 f_11 = 11;
    message M26 {
      optional bool f_0 = 1;
    }
    repeated M26 f_12 = 12;
    message M27 {
      optional fixed64 f_0 = 2;
      optional string f_1 = 3;
      optional string f_2 = 5;
      optional string f_3 = 6;
      optional int64 f_4 = 7;
      optional string f_5 = 9;
      optional fixed64 f_6 = 10;
      optional int32 f_7 = 14;
      optional int64 f_8 = 16;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 87;
        E4_CONST_2 = 23;
        E4_CONST_3 = 124;
        E4_CONST_4 = 16;
        E4_CONST_5 = 98;
      }
      optional E4 f_9 = 17;
      optional int64 f_10 = 20;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 59;
        E5_CONST_2 = 87;
        E5_CONST_3 = 24;
        E5_CONST_4 = 99;
        E5_CONST_5 = 32;
      }
      repeated E5 f_11 = 21 [packed = true];
      optional string f_12 = 22;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 82;
        E6_CONST_2 = 22;
        E6_CONST_3 = 11;
        E6_CONST_4 = 42;
        E6_CONST_5 = 102;
      }
      optional E6 f_13 = 23;
      optional int32 f_14 = 24;
      optional fixed64 f_15 = 26;
      optional int64 f_16 = 28;
      optional fixed64 f_17 = 29;
      repeated int32 f_18 = 31 [packed = true];
      optional fixed32 f_19 = 32;
      optional string f_20 = 34;
      optional int32 f_21 = 35;
      optional int32 f_22 = 36;
      optional int64 f_23 = 37;
      optional fixed64 f_24 = 38;
      optional fixed64 f_25 = 40;
      optional bool f_26 = 43;
      optional int32 f_27 = 44;
      optional string f_28 = 45;
      optional int64 f_29 = 46;
      optional fixed64 f_30 = 48;
      optional fixed64 f_31 = 51;
    }
    repeated M27 f_15 = 15;
  }
  optional M7 f_61 = 61;
  message M8 {
    optional fixed64 f_0 = 2;
    message M16 {
      optional string f_0 = 1;
      message M37 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 3;
        optional int64 f_2 = 8;
        optional int64 f_3 = 9;
        optional fixed64 f_4 = 12;
        message M47 {
          optional fixed64 f_0 = 2;
          message M54 {
            optional int64 f_0 = 1;
          }
          repeated M54 f_3 = 3;
        }
        optional M47 f_14 = 14;
      }
      repeated M37 f_2 = 2;
    }
    repeated M16 f_3 = 3;
    message M19 {
      optional int32 f_0 = 1;
      message M32 {
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 73;
          E7_CONST_2 = 78;
          E7_CONST_3 = 86;
          E7_CONST_4 = 35;
          E7_CONST_5 = 43;
        }
        repeated E7 f_0 = 3 [packed = true];
        message M48 {
          optional int32 f_0 = 2;
        }
        optional M48 f_4 = 4;
      }
      repeated M32 f_2 = 2;
    }
    repeated M19 f_4 = 4;
    message M28 {
      optional int32 f_0 = 2;
    }
    optional M28 f_6 = 6;
  }
  optional M8 f_62 = 62;
  message M9 {
    optional string f_0 = 2;
    optional fixed64 f_1 = 4;
    optional bool f_2 = 5;
    optional int64 f_3 = 6;
    optional bool f_4 = 8;
    optional string f_5 = 9;
    optional string f_6 = 10;
    optional int32 f_7 = 12;
    optional int64 f_8 = 15;
    optional fixed64 f_9 = 17;
    optional int64 f_10 = 19;
    message M23 {
      optional int64 f_0 = 1;
    }
    optional M23 f_21 = 21;
  }
  optional M9 f_64 = 64;
  message M10 {
    optional int32 f_0 = 2;
    message M15 {
      optional int32 f_0 = 1;
      optional int64 f_1 = 3;
      optional fixed64 f_2 = 6;
      optional int64 f_3 = 9;
      optional fixed64 f_4 = 10;
    }
    optional M15 f_4 = 4;
    message M22 {
      optional int32 f_0 = 1;
    }
    optional M22 f_6 = 6;
  }
  optional M10 f_66 = 66;
}
