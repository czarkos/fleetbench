// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P9.request.Message1;

message Message1 {
  optional bool f_0 = 1;
  optional string f_1 = 3;
  optional bool f_2 = 5;
  optional int32 f_3 = 6;
  optional double f_4 = 7;
  optional bool f_5 = 10;
  optional int32 f_6 = 14;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 116;
    E1_CONST_2 = 126;
    E1_CONST_3 = 61;
    E1_CONST_4 = 47;
    E1_CONST_5 = 66;
  }
  repeated E1 f_7 = 17 [packed = true];
  optional string f_8 = 18;
  repeated string f_9 = 20;
  optional fixed64 f_10 = 21;
  optional fixed64 f_11 = 23;
  optional int64 f_12 = 25;
  optional int32 f_13 = 26;
  optional int32 f_14 = 29;
  optional int32 f_15 = 31;
  optional fixed64 f_16 = 36;
  optional int32 f_17 = 37;
  optional bool f_18 = 39;
  optional fixed64 f_19 = 40;
  optional string f_20 = 42;
  optional int64 f_21 = 46;
  optional fixed64 f_22 = 48;
  optional int32 f_23 = 53;
  optional int32 f_24 = 54;
  optional fixed64 f_25 = 55;
  optional fixed64 f_26 = 57;
  optional int32 f_27 = 58;
  optional bool f_28 = 59;
  optional int32 f_29 = 60;
  message M1 {
    optional fixed32 f_0 = 1;
    optional fixed64 f_1 = 3;
    optional int32 f_2 = 6;
    optional int32 f_3 = 7;
    optional int64 f_4 = 8;
    message M19 {
      optional int64 f_0 = 1;
      optional int64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed64 f_3 = 5;
      optional fixed64 f_4 = 6;
    }
    optional M19 f_9 = 9;
    message M22 {
      optional string f_0 = 2;
    }
    repeated M22 f_10 = 10;
    message M27 {
      optional fixed64 f_0 = 1;
    }
    optional M27 f_12 = 12;
  }
  optional M1 f_61 = 61;
  message M2 {
    optional string f_0 = 2;
    optional fixed64 f_1 = 4;
    optional int32 f_2 = 5;
    optional int32 f_3 = 6;
    optional int32 f_4 = 9;
    optional int32 f_5 = 11;
    repeated string f_6 = 13;
    message M30 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 4;
      optional fixed32 f_2 = 5;
      optional int32 f_3 = 7;
    }
    optional M30 f_14 = 14;
  }
  optional M2 f_63 = 63;
  message M3 {
    optional int32 f_0 = 3;
    message M14 {
      optional fixed64 f_0 = 1;
    }
    repeated M14 f_4 = 4;
    message M15 {
      optional int64 f_0 = 1;
      message M43 {
        optional string f_0 = 2;
        message M67 {
          optional int64 f_0 = 1;
        }
        optional M67 f_3 = 3;
        message M72 {
          optional int32 f_0 = 2;
          optional int32 f_1 = 3;
          optional int64 f_2 = 5;
          optional int32 f_3 = 6;
          optional fixed32 f_4 = 7;
          optional fixed64 f_5 = 9;
          optional int32 f_6 = 11;
          optional string f_7 = 13;
          optional fixed64 f_8 = 14;
          optional fixed64 f_9 = 15;
          optional bool f_10 = 16;
          optional int32 f_11 = 17;
          optional int32 f_12 = 19;
          optional string f_13 = 20;
          optional fixed32 f_14 = 22;
          optional bool f_15 = 23;
          enum E4 {
            E4_UNSPECIFIED = 0;
            E4_CONST_1 = 70;
            E4_CONST_2 = 118;
            E4_CONST_3 = 49;
            E4_CONST_4 = 30;
            E4_CONST_5 = 29;
          }
          optional E4 f_16 = 24;
          optional int64 f_17 = 26;
          optional uint64 f_18 = 29;
          optional bool f_19 = 31;
          optional fixed64 f_20 = 32;
          optional int32 f_21 = 34;
          optional int64 f_22 = 37;
          optional bool f_23 = 38;
          optional fixed64 f_24 = 39;
          optional string f_25 = 40;
          optional fixed64 f_26 = 41;
          optional int32 f_27 = 43;
          optional fixed32 f_28 = 44;
          optional string f_29 = 45;
          optional fixed32 f_30 = 46;
          message M74 {
            optional fixed64 f_0 = 1;
          }
          optional M74 f_49 = 49;
        }
        optional M72 f_5 = 5;
      }
      optional M43 f_2 = 2;
    }
    optional M15 f_7 = 7;
    message M21 {
      optional int32 f_0 = 3;
      message M55 {
        optional fixed64 f_0 = 2;
        optional bool f_1 = 3;
        optional fixed64 f_2 = 4;
        optional fixed32 f_3 = 6;
        message M62 {
          optional bool f_0 = 1;
        }
        optional M62 f_8 = 8;
      }
      repeated M55 f_4 = 4;
    }
    repeated M21 f_8 = 8;
    message M28 {
      optional int32 f_0 = 1;
      message M47 {
        optional fixed64 f_0 = 1;
        message M59 {
          optional string f_0 = 2;
          optional fixed64 f_1 = 4;
          message M76 {
            optional string f_0 = 3;
          }
          optional M76 f_6 = 6;
        }
        optional M59 f_2 = 2;
        message M66 {
          optional string f_0 = 1;
        }
        optional M66 f_4 = 4;
      }
      repeated M47 f_2 = 2;
    }
    optional M28 f_9 = 9;
    message M31 {
      optional fixed32 f_0 = 2;
    }
    optional M31 f_10 = 10;
    message M38 {
      optional uint64 f_0 = 2;
      optional bool f_1 = 3;
      optional string f_2 = 4;
      optional int32 f_3 = 6;
    }
    repeated M38 f_11 = 11;
    message M39 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 3;
      message M54 {
        optional string f_0 = 1;
      }
      optional M54 f_5 = 5;
    }
    optional M39 f_13 = 13;
    message M42 {
      optional int32 f_0 = 1;
      message M44 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 3;
        optional int32 f_2 = 5;
        optional int64 f_3 = 6;
        optional string f_4 = 8;
      }
      optional M44 f_4 = 4;
      message M53 {
        optional string f_0 = 3;
        message M60 {
          optional string f_0 = 1;
          optional int32 f_1 = 2;
          optional int32 f_2 = 3;
        }
        repeated M60 f_6 = 6;
        message M63 {
          optional int64 f_0 = 1;
        }
        optional M63 f_7 = 7;
        message M64 {
          optional int64 f_0 = 1;
          message M75 {
            optional bool f_0 = 1;
            optional string f_1 = 4;
            optional fixed64 f_2 = 6;
          }
          repeated M75 f_2 = 2;
        }
        repeated M64 f_8 = 8;
        message M65 {
          optional bool f_0 = 3;
          optional int32 f_1 = 4;
          optional fixed64 f_2 = 5;
          optional int32 f_3 = 6;
          optional fixed64 f_4 = 7;
          optional int32 f_5 = 9;
        }
        optional M65 f_9 = 9;
      }
      repeated M53 f_5 = 5;
    }
    optional M42 f_14 = 14;
  }
  optional M3 f_65 = 65;
  message M4 {
    optional int32 f_0 = 1;
    optional int64 f_1 = 3;
    message M20 {
      optional double f_0 = 1;
      message M50 {
        optional string f_0 = 3;
      }
      optional M50 f_7 = 7;
    }
    optional M20 f_6 = 6;
    message M24 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 2;
    }
    repeated M24 f_8 = 8;
    message M32 {
      optional bool f_0 = 2;
    }
    optional M32 f_12 = 12;
    message M40 {
      optional int64 f_0 = 1;
    }
    optional M40 f_14 = 14;
  }
  optional M4 f_67 = 67;
  message M5 {
    optional string f_0 = 1;
    message M17 {
      optional bool f_0 = 2;
      message M45 {
        optional bool f_0 = 2;
        optional int64 f_1 = 3;
        optional string f_2 = 4;
      }
      optional M45 f_3 = 3;
      message M48 {
        optional bool f_0 = 2;
      }
      repeated M48 f_8 = 8;
    }
    repeated M17 f_3 = 3;
  }
  repeated M5 f_68 = 68;
  message M6 {
    optional int64 f_0 = 2;
    message M37 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 5;
      optional int32 f_3 = 6;
      optional bool f_4 = 7;
      optional fixed64 f_5 = 8;
      optional int32 f_6 = 9;
      optional bool f_7 = 11;
    }
    optional M37 f_7 = 7;
  }
  repeated M6 f_69 = 69;
  message M7 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional bool f_2 = 3;
    message M36 {
      optional fixed64 f_0 = 4;
    }
    repeated M36 f_4 = 4;
  }
  optional M7 f_71 = 71;
  message M8 {
    optional string f_0 = 3;
    optional bool f_1 = 4;
    optional fixed64 f_2 = 6;
    optional string f_3 = 9;
    message M18 {
      optional fixed64 f_0 = 1;
      optional int64 f_1 = 3;
      optional bool f_2 = 4;
    }
    repeated M18 f_11 = 11;
    message M25 {
      optional bool f_0 = 3;
      message M49 {
        optional int64 f_0 = 1;
        optional int64 f_1 = 2;
        optional fixed64 f_2 = 3;
      }
      optional M49 f_4 = 4;
      message M51 {
        optional bool f_0 = 1;
        optional string f_1 = 4;
      }
      repeated M51 f_8 = 8;
    }
    optional M25 f_13 = 13;
    message M26 {
      optional int32 f_0 = 2;
    }
    optional M26 f_14 = 14;
    message M33 {
      optional fixed32 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int64 f_2 = 5;
      optional int32 f_3 = 6;
      optional int32 f_4 = 7;
      optional string f_5 = 8;
      message M57 {
        optional int64 f_0 = 3;
        message M68 {
          optional string f_0 = 1;
          optional bool f_1 = 2;
          optional int32 f_2 = 3;
          optional fixed64 f_3 = 4;
          optional string f_4 = 7;
          message M73 {
            optional fixed64 f_0 = 2;
          }
          optional M73 f_10 = 10;
        }
        optional M68 f_7 = 7;
        message M70 {
          optional double f_0 = 2;
        }
        optional M70 f_8 = 8;
      }
      optional M57 f_9 = 9;
    }
    optional M33 f_15 = 15;
    message M35 {
      optional bool f_0 = 2;
    }
    optional M35 f_16 = 16;
  }
  optional M8 f_72 = 72;
  message M9 {
    optional fixed64 f_0 = 2;
  }
  repeated M9 f_73 = 73;
  message M10 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 3;
    optional string f_2 = 4;
    message M41 {
      optional int64 f_0 = 1;
    }
    repeated M41 f_5 = 5;
  }
  optional M10 f_75 = 75;
  message M11 {
    optional fixed64 f_0 = 2;
    message M29 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 7;
      optional fixed64 f_3 = 8;
      optional fixed64 f_4 = 9;
      message M52 {
        optional fixed64 f_0 = 3;
        optional bool f_1 = 4;
        optional bool f_2 = 5;
        optional fixed64 f_3 = 7;
        enum E3 {
          E3_UNSPECIFIED = 0;
          E3_CONST_1 = 70;
          E3_CONST_2 = 75;
          E3_CONST_3 = 14;
          E3_CONST_4 = 31;
          E3_CONST_5 = 61;
        }
        repeated E3 f_4 = 8 [packed = true];
        message M61 {
          optional fixed64 f_0 = 1;
        }
        optional M61 f_9 = 9;
        message M69 {
          optional int64 f_0 = 2;
          optional string f_1 = 4;
          optional bool f_2 = 5;
        }
        optional M69 f_10 = 10;
      }
      optional M52 f_10 = 10;
    }
    optional M29 f_3 = 3;
    message M34 {
      optional double f_0 = 1;
      optional bool f_1 = 3;
      optional int32 f_2 = 4;
      message M46 {
        optional bool f_0 = 2;
        optional fixed64 f_1 = 3;
        optional int64 f_2 = 5;
      }
      repeated M46 f_5 = 5;
      message M56 {
        optional int32 f_0 = 1;
        optional bool f_1 = 2;
        optional int32 f_2 = 3;
        message M71 {
          optional int32 f_0 = 2;
        }
        optional M71 f_4 = 4;
      }
      optional M56 f_6 = 6;
      message M58 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 5;
        optional fixed64 f_3 = 6;
        optional int32 f_4 = 7;
        optional int64 f_5 = 8;
        optional int32 f_6 = 10;
        optional fixed64 f_7 = 13;
        optional fixed64 f_8 = 14;
        optional int32 f_9 = 15;
        optional int64 f_10 = 16;
        optional int32 f_11 = 17;
        optional string f_12 = 18;
        optional int32 f_13 = 20;
        optional bool f_14 = 21;
        optional bool f_15 = 23;
        optional int32 f_16 = 26;
        optional bool f_17 = 27;
        optional int32 f_18 = 28;
        optional int32 f_19 = 31;
        optional int32 f_20 = 32;
        optional int32 f_21 = 33;
        optional int64 f_22 = 34;
        optional int32 f_23 = 35;
        optional fixed64 f_24 = 38;
        optional int32 f_25 = 39;
        optional fixed64 f_26 = 40;
        optional int32 f_27 = 42;
        optional bool f_28 = 43;
        optional fixed64 f_29 = 46;
        repeated int32 f_30 = 47 [packed = true];
        optional int64 f_31 = 48;
      }
      repeated M58 f_7 = 7;
    }
    repeated M34 f_5 = 5;
  }
  optional M11 f_77 = 77;
  message M12 {
    optional bool f_0 = 2;
    message M16 {
      optional int32 f_0 = 1;
    }
    optional M16 f_4 = 4;
  }
  repeated M12 f_79 = 79;
  message M13 {
    optional int32 f_0 = 2;
    optional fixed64 f_1 = 5;
    optional int32 f_2 = 8;
    optional fixed32 f_3 = 10;
    optional string f_4 = 11;
    optional int32 f_5 = 14;
    optional int32 f_6 = 15;
    optional int64 f_7 = 16;
    optional fixed64 f_8 = 18;
    optional fixed64 f_9 = 19;
    optional int32 f_10 = 20;
    optional fixed64 f_11 = 21;
    optional int64 f_12 = 22;
    optional string f_13 = 23;
    optional int32 f_14 = 25;
    optional bool f_15 = 26;
    optional fixed64 f_16 = 27;
    optional int32 f_17 = 28;
    optional int32 f_18 = 30;
    optional int64 f_19 = 31;
    optional fixed64 f_20 = 32;
    optional fixed64 f_21 = 34;
    optional fixed32 f_22 = 35;
    optional fixed64 f_23 = 38;
    optional int32 f_24 = 40;
    optional int64 f_25 = 43;
    optional fixed64 f_26 = 44;
    optional int32 f_27 = 45;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 40;
      E2_CONST_2 = 71;
      E2_CONST_3 = 22;
      E2_CONST_4 = 31;
      E2_CONST_5 = 121;
    }
    optional E2 f_28 = 46;
    optional int32 f_29 = 47;
    optional int32 f_30 = 49;
    message M23 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 4;
    }
    repeated M23 f_50 = 50;
  }
  optional M13 f_81 = 81;
}
