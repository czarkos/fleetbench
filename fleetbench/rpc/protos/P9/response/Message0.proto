// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P9.response.Message0;

message Message0 {
  optional string f_0 = 2;
  optional int64 f_1 = 6;
  message M1 {
    optional string f_0 = 1;
    optional int64 f_1 = 4;
    repeated bytes f_2 = 6;
    optional int64 f_3 = 9;
    optional bytes f_4 = 10 [ctype = CORD];
    optional int32 f_5 = 12;
    optional uint64 f_6 = 14;
    optional int32 f_7 = 16;
    optional bool f_8 = 21;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 14;
      E1_CONST_2 = 59;
      E1_CONST_3 = 92;
      E1_CONST_4 = 49;
      E1_CONST_5 = 40;
    }
    optional E1 f_9 = 23;
    optional uint64 f_10 = 29;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 45;
      E2_CONST_2 = 51;
      E2_CONST_3 = 35;
      E2_CONST_4 = 68;
      E2_CONST_5 = 102;
    }
    optional E2 f_11 = 30;
    optional int64 f_12 = 32;
    optional bytes f_13 = 33;
    optional int64 f_14 = 39;
    optional uint64 f_15 = 44;
    optional int64 f_16 = 46;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 101;
      E3_CONST_2 = 1;
      E3_CONST_3 = 121;
      E3_CONST_4 = 10;
      E3_CONST_5 = 87;
    }
    optional E3 f_17 = 48;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 97;
      E4_CONST_2 = 83;
      E4_CONST_3 = 126;
      E4_CONST_4 = 44;
      E4_CONST_5 = 73;
    }
    optional E4 f_18 = 49;
    optional int64 f_19 = 52;
    message M2 {
      optional string f_0 = 2;
      message M6 {
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 105;
          E6_CONST_2 = 46;
          E6_CONST_3 = 75;
          E6_CONST_4 = 41;
          E6_CONST_5 = 107;
        }
        optional E6 f_0 = 4;
      }
      optional M6 f_3 = 3;
    }
    repeated M2 f_54 = 54;
    message M3 {
      optional int64 f_0 = 2;
      optional int64 f_1 = 6;
      optional uint64 f_2 = 7;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 71;
        E5_CONST_2 = 101;
        E5_CONST_3 = 108;
        E5_CONST_4 = 124;
        E5_CONST_5 = 10;
      }
      optional E5 f_3 = 10;
    }
    optional M3 f_59 = 59;
    message M4 {
      optional int64 f_0 = 2;
    }
    optional M4 f_63 = 63;
    message M5 {
      optional string f_0 = 1;
      message M7 {
        optional int32 f_0 = 2;
        optional bytes f_1 = 3;
        optional float f_2 = 4;
        optional string f_3 = 5;
        optional uint64 f_4 = 8;
        optional int64 f_5 = 10;
        optional fixed32 f_6 = 12;
        optional sfixed64 f_7 = 13;
        optional int32 f_8 = 15;
        optional fixed32 f_9 = 18;
        optional bytes f_10 = 19;
        optional uint64 f_11 = 20;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 1;
          E7_CONST_2 = 105;
          E7_CONST_3 = 110;
          E7_CONST_4 = 53;
          E7_CONST_5 = 95;
        }
        optional E7 f_12 = 24;
        optional fixed32 f_13 = 25;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 67;
          E8_CONST_2 = 74;
          E8_CONST_3 = 98;
          E8_CONST_4 = 44;
          E8_CONST_5 = 102;
        }
        optional E8 f_14 = 29;
        optional fixed32 f_15 = 30;
        optional fixed32 f_16 = 33;
        optional bytes f_17 = 34;
        optional fixed32 f_18 = 37;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 107;
          E9_CONST_2 = 56;
          E9_CONST_3 = 77;
          E9_CONST_4 = 31;
          E9_CONST_5 = 115;
        }
        optional E9 f_19 = 39;
        optional string f_20 = 42;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 11;
          E10_CONST_2 = 30;
          E10_CONST_3 = 92;
          E10_CONST_4 = 105;
          E10_CONST_5 = 51;
        }
        optional E10 f_21 = 45;
        optional fixed32 f_22 = 48;
        optional double f_23 = 50;
        optional uint64 f_24 = 51;
        optional int64 f_25 = 52;
        optional bytes f_26 = 55;
        optional int32 f_27 = 56;
        optional bytes f_28 = 60 [ctype = CORD];
        optional bytes f_29 = 61;
        optional fixed32 f_30 = 63;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 93;
          E11_CONST_2 = 50;
          E11_CONST_3 = 123;
          E11_CONST_4 = 15;
          E11_CONST_5 = 8;
        }
        optional E11 f_31 = 66;
        optional int64 f_32 = 69;
        optional float f_33 = 72;
        message M8 {
          optional fixed32 f_0 = 1;
          message M13 {
            optional double f_0 = 3;
            message M15 {
              optional string f_0 = 1;
              optional bytes f_1 = 4;
              optional fixed32 f_2 = 6;
              optional int64 f_3 = 8;
              optional int64 f_4 = 9;
              message M16 {
                optional int64 f_0 = 2;
              }
              repeated M16 f_12 = 12;
              message M17 {
                optional string f_0 = 2;
                optional int64 f_1 = 5;
                message M18 {
                  optional fixed32 f_0 = 5;
                  optional int64 f_1 = 6;
                  optional int64 f_2 = 8;
                  optional uint64 f_3 = 10;
                  optional int64 f_4 = 11;
                  optional int64 f_5 = 13;
                  optional string f_6 = 16;
                  optional fixed32 f_7 = 20;
                }
                repeated M18 f_8 = 8;
              }
              optional M17 f_14 = 14;
            }
            optional M15 f_4 = 4;
          }
          repeated M13 f_2 = 2;
        }
        optional M8 f_75 = 75;
        message M9 {
          optional uint64 f_0 = 4;
        }
        repeated M9 f_76 = 76;
        message M10 {
          optional int64 f_0 = 3;
          message M12 {
            enum E12 {
              E12_UNSPECIFIED = 0;
              E12_CONST_1 = 57;
              E12_CONST_2 = 84;
              E12_CONST_3 = 44;
              E12_CONST_4 = 107;
              E12_CONST_5 = 108;
            }
            optional E12 f_0 = 3;
            message M14 {
              optional uint64 f_0 = 1;
            }
            optional M14 f_4 = 4;
          }
          optional M12 f_8 = 8;
        }
        optional M10 f_80 = 80;
        message M11 {
          optional int64 f_0 = 2;
        }
        optional M11 f_82 = 82;
      }
      repeated M7 f_4 = 4;
    }
    optional M5 f_64 = 64;
  }
  optional M1 f_8 = 8;
}
