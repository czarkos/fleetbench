// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P9.response.Message2;

message Message2 {
  optional fixed64 f_0 = 1;
  optional float f_1 = 2;
  optional double f_2 = 3;
  optional double f_3 = 4;
  optional float f_4 = 5;
  optional int32 f_5 = 6;
  optional int32 f_6 = 7;
  optional int32 f_7 = 8;
  optional fixed64 f_8 = 9;
  optional fixed64 f_9 = 10;
  optional int32 f_10 = 11;
  optional int32 f_11 = 12;
  optional int32 f_12 = 13;
  optional fixed64 f_13 = 14;
  optional float f_14 = 15;
  optional int32 f_15 = 16;
  optional int32 f_16 = 17;
  optional bool f_17 = 18;
  repeated bool f_18 = 19 [packed = true];
  optional int64 f_19 = 20;
  optional int32 f_20 = 22;
  optional int32 f_21 = 23;
  optional fixed64 f_22 = 24;
  optional fixed64 f_23 = 25;
  optional fixed64 f_24 = 26;
  optional fixed64 f_25 = 28;
  message M1 {
    optional fixed64 f_0 = 1;
    message M13 {
      optional int64 f_0 = 1;
      message M21 {
        optional int32 f_0 = 1;
        message M37 {
          optional fixed64 f_0 = 1;
        }
        repeated M37 f_2 = 2;
        message M42 {
          optional double f_0 = 1;
        }
        optional M42 f_3 = 3;
        message M44 {
          optional fixed64 f_0 = 1;
        }
        optional M44 f_4 = 4;
        message M48 {
          optional fixed64 f_0 = 1;
          message M63 {
            optional fixed64 f_0 = 1;
          }
          optional M63 f_2 = 2;
        }
        optional M48 f_5 = 5;
      }
      repeated M21 f_2 = 2;
    }
    optional M13 f_2 = 2;
  }
  optional M1 f_29 = 29;
  message M2 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed64 f_2 = 3;
    optional bool f_3 = 4;
    optional int32 f_4 = 5;
    message M17 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      optional fixed64 f_4 = 5;
      optional fixed64 f_5 = 6;
      optional fixed64 f_6 = 7;
      optional float f_7 = 8;
      optional int32 f_8 = 9;
      optional int32 f_9 = 10;
      optional int64 f_10 = 11;
      optional fixed64 f_11 = 12;
    }
    optional M17 f_6 = 6;
  }
  optional M2 f_30 = 30;
  message M3 {
    optional fixed64 f_0 = 1;
    message M9 {
      optional float f_0 = 1;
      optional fixed64 f_1 = 2;
      optional float f_2 = 3;
      message M22 {
        optional int32 f_0 = 1;
        message M40 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 2;
          optional int32 f_2 = 3;
          optional int32 f_3 = 4;
          optional fixed64 f_4 = 5;
          optional fixed64 f_5 = 7;
          optional bool f_6 = 8;
          optional float f_7 = 9;
          optional fixed64 f_8 = 11;
          enum E2 {
            E2_UNSPECIFIED = 0;
            E2_CONST_1 = 76;
            E2_CONST_2 = 75;
            E2_CONST_3 = 89;
            E2_CONST_4 = 91;
            E2_CONST_5 = 4;
          }
          repeated E2 f_9 = 13 [packed = true];
          optional int32 f_10 = 14;
          optional fixed64 f_11 = 15;
          optional int32 f_12 = 16;
          optional fixed32 f_13 = 18;
        }
        repeated M40 f_2 = 2;
        message M43 {
          optional int64 f_0 = 1;
          optional fixed64 f_1 = 2;
          optional int64 f_2 = 3;
        }
        optional M43 f_3 = 3;
        message M49 {
          optional int32 f_0 = 1;
          optional float f_1 = 3;
        }
        optional M49 f_4 = 4;
        message M52 {
          optional fixed64 f_0 = 1;
          optional float f_1 = 2;
          optional float f_2 = 3;
          optional fixed64 f_3 = 4;
          optional float f_4 = 5;
          optional fixed32 f_5 = 6;
        }
        optional M52 f_5 = 5;
        message M59 {
          optional bool f_0 = 1;
          optional int32 f_1 = 2;
        }
        repeated M59 f_6 = 6;
      }
      optional M22 f_4 = 4;
      message M26 {
        optional fixed32 f_0 = 1;
        message M39 {
          optional int64 f_0 = 1;
        }
        optional M39 f_2 = 2;
        message M46 {
          optional int32 f_0 = 1;
          message M60 {
            optional fixed64 f_0 = 1;
          }
          repeated M60 f_2 = 2;
          message M61 {
            optional fixed64 f_0 = 1;
          }
          optional M61 f_3 = 3;
        }
        repeated M46 f_3 = 3;
        message M47 {
          optional fixed64 f_0 = 1;
          message M62 {
            optional fixed64 f_0 = 1;
            optional int32 f_1 = 2;
            optional fixed64 f_2 = 3;
          }
          optional M62 f_2 = 2;
        }
        repeated M47 f_4 = 4;
      }
      optional M26 f_5 = 5;
      message M29 {
        optional double f_0 = 1;
        message M54 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed64 f_2 = 3;
        }
        optional M54 f_2 = 2;
      }
      optional M29 f_6 = 6;
      message M34 {
        optional int32 f_0 = 1;
        message M51 {
          optional int32 f_0 = 1;
        }
        optional M51 f_2 = 2;
      }
      repeated M34 f_7 = 7;
    }
    optional M9 f_3 = 3;
  }
  optional M3 f_31 = 31;
  message M4 {
    optional int64 f_0 = 1;
    message M10 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int64 f_2 = 3;
      optional double f_3 = 4;
      optional float f_4 = 5;
      optional fixed64 f_5 = 6;
    }
    repeated M10 f_2 = 2;
    message M11 {
      optional int64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 4;
      optional float f_4 = 5;
    }
    repeated M11 f_4 = 4;
    message M14 {
      optional fixed32 f_0 = 1;
      message M25 {
        optional fixed64 f_0 = 1;
      }
      repeated M25 f_2 = 2;
    }
    optional M14 f_5 = 5;
    message M15 {
      optional int32 f_0 = 1;
      message M31 {
        optional fixed64 f_0 = 1;
      }
      optional M31 f_2 = 2;
      message M33 {
        optional fixed64 f_0 = 1;
      }
      repeated M33 f_3 = 3;
      message M35 {
        optional fixed64 f_0 = 1;
        message M58 {
          optional fixed64 f_0 = 1;
        }
        optional M58 f_2 = 2;
      }
      optional M35 f_4 = 4;
    }
    optional M15 f_6 = 6;
  }
  optional M4 f_32 = 32;
  message M5 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 3;
    optional float f_3 = 5;
    optional int32 f_4 = 6;
    optional int64 f_5 = 7;
    optional fixed64 f_6 = 8;
    optional int64 f_7 = 10;
    optional fixed64 f_8 = 11;
    optional int64 f_9 = 12;
    message M12 {
      optional fixed32 f_0 = 1;
      message M23 {
        optional float f_0 = 1;
        message M57 {
          optional int32 f_0 = 1;
          optional float f_1 = 2;
          optional int32 f_2 = 3;
        }
        repeated M57 f_2 = 2;
      }
      optional M23 f_2 = 2;
      message M28 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 2;
        optional float f_2 = 3;
        optional int64 f_3 = 5;
        optional int64 f_4 = 6;
        optional int32 f_5 = 7;
        message M53 {
          optional int32 f_0 = 1;
        }
        repeated M53 f_8 = 8;
        message M55 {
          optional int32 f_0 = 1;
        }
        repeated M55 f_9 = 9;
      }
      optional M28 f_3 = 3;
    }
    repeated M12 f_13 = 13;
    message M18 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional float f_2 = 4;
      optional int32 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional float f_5 = 7;
    }
    optional M18 f_14 = 14;
    message M20 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional fixed64 f_4 = 5;
      optional fixed64 f_5 = 6;
      optional fixed64 f_6 = 7;
      optional int32 f_7 = 8;
      optional float f_8 = 9;
      message M30 {
        optional fixed32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int64 f_2 = 3;
        optional fixed64 f_3 = 4;
        optional float f_4 = 5;
        optional float f_5 = 6;
        optional float f_6 = 7;
        optional fixed64 f_7 = 8;
        optional int32 f_8 = 9;
        repeated bool f_9 = 10 [packed = true];
        optional fixed64 f_10 = 11;
        optional int32 f_11 = 12;
        optional int32 f_12 = 13;
      }
      optional M30 f_10 = 10;
    }
    optional M20 f_15 = 15;
  }
  optional M5 f_33 = 33;
  message M6 {
    optional fixed64 f_0 = 1;
    message M19 {
      optional int32 f_0 = 1;
      message M24 {
        optional double f_0 = 1;
        message M41 {
          optional fixed64 f_0 = 1;
        }
        repeated M41 f_3 = 3;
        message M50 {
          optional int32 f_0 = 2;
        }
        optional M50 f_4 = 4;
      }
      repeated M24 f_2 = 2;
      message M32 {
        optional int64 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 5;
        message M38 {
          optional double f_0 = 1;
        }
        repeated M38 f_6 = 6;
      }
      repeated M32 f_3 = 3;
      message M36 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional float f_3 = 4;
        optional fixed64 f_4 = 6;
        message M56 {
          optional int32 f_0 = 1;
        }
        optional M56 f_8 = 8;
      }
      optional M36 f_4 = 4;
    }
    repeated M19 f_2 = 2;
  }
  optional M6 f_34 = 34;
  message M7 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed64 f_2 = 3;
    optional fixed32 f_3 = 4;
    optional fixed64 f_4 = 5;
    optional float f_5 = 6;
    optional float f_6 = 7;
    optional fixed64 f_7 = 8;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 83;
      E1_CONST_2 = 96;
      E1_CONST_3 = 72;
      E1_CONST_4 = 2;
      E1_CONST_5 = 95;
    }
    optional E1 f_8 = 9;
    optional int32 f_9 = 10;
    optional int32 f_10 = 11;
    optional double f_11 = 12;
    message M8 {
      optional fixed64 f_0 = 1;
      message M27 {
        optional int64 f_0 = 1;
        message M45 {
          optional double f_0 = 1;
        }
        optional M45 f_2 = 2;
      }
      optional M27 f_3 = 3;
    }
    optional M8 f_13 = 13;
    message M16 {
      optional fixed64 f_0 = 1;
    }
    optional M16 f_14 = 14;
  }
  repeated M7 f_36 = 36;
}
