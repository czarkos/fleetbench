// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.response.Message1;

message Message1 {
  optional int64 f_0 = 1;
  message M1 {
    optional string f_0 = 1;
    optional string f_1 = 2;
    optional string f_2 = 3;
    optional float f_3 = 6;
    optional int32 f_4 = 7;
    repeated string f_5 = 8;
    optional int64 f_6 = 10;
    optional string f_7 = 11;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 30;
      E1_CONST_2 = 126;
      E1_CONST_3 = 47;
      E1_CONST_4 = 80;
      E1_CONST_5 = 76;
    }
    optional E1 f_8 = 12;
    optional string f_9 = 14;
    optional uint32 f_10 = 15;
    optional uint32 f_11 = 16;
    optional int64 f_12 = 17;
    optional bool f_13 = 18;
    optional int64 f_14 = 19;
    optional string f_15 = 20;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 101;
      E2_CONST_2 = 51;
      E2_CONST_3 = 13;
      E2_CONST_4 = 110;
      E2_CONST_5 = 103;
    }
    optional E2 f_16 = 22;
    message M2 {
      optional int64 f_0 = 1;
      optional string f_1 = 3;
      optional int64 f_2 = 5;
      optional float f_3 = 6;
      optional string f_4 = 8;
      optional string f_5 = 10;
      optional float f_6 = 11;
      optional string f_7 = 15;
      optional bool f_8 = 17;
      message M3 {
        repeated string f_0 = 1;
        message M7 {
          enum E5 {
            E5_UNSPECIFIED = 0;
            E5_CONST_1 = 72;
            E5_CONST_2 = 84;
            E5_CONST_3 = 49;
            E5_CONST_4 = 21;
            E5_CONST_5 = 36;
          }
          optional E5 f_0 = 2;
        }
        optional M7 f_4 = 4;
        message M9 {
          optional int64 f_0 = 1;
          message M12 {
            optional bool f_0 = 3;
            optional string f_1 = 4;
            enum E10 {
              E10_UNSPECIFIED = 0;
              E10_CONST_1 = 125;
              E10_CONST_2 = 120;
              E10_CONST_3 = 60;
              E10_CONST_4 = 92;
              E10_CONST_5 = 23;
            }
            optional E10 f_2 = 6;
            message M13 {
              optional float f_0 = 2;
              optional int32 f_1 = 3;
            }
            repeated M13 f_9 = 9;
          }
          optional M12 f_3 = 3;
        }
        optional M9 f_5 = 5;
        message M10 {
          optional bool f_0 = 1;
        }
        repeated M10 f_7 = 7;
        message M11 {
          optional float f_0 = 1;
          optional bool f_1 = 2;
          enum E6 {
            E6_UNSPECIFIED = 0;
            E6_CONST_1 = 113;
            E6_CONST_2 = 1;
            E6_CONST_3 = 76;
            E6_CONST_4 = 108;
            E6_CONST_5 = 80;
          }
          optional E6 f_2 = 3;
          optional int64 f_3 = 4;
          optional int32 f_4 = 5;
          enum E7 {
            E7_UNSPECIFIED = 0;
            E7_CONST_1 = 68;
            E7_CONST_2 = 125;
            E7_CONST_3 = 71;
            E7_CONST_4 = 84;
            E7_CONST_5 = 26;
          }
          optional E7 f_5 = 6;
          enum E8 {
            E8_UNSPECIFIED = 0;
            E8_CONST_1 = 56;
            E8_CONST_2 = 94;
            E8_CONST_3 = 107;
            E8_CONST_4 = 27;
            E8_CONST_5 = 117;
          }
          optional E8 f_6 = 8;
          optional string f_7 = 11;
          enum E9 {
            E9_UNSPECIFIED = 0;
            E9_CONST_1 = 32;
            E9_CONST_2 = 40;
            E9_CONST_3 = 31;
            E9_CONST_4 = 90;
            E9_CONST_5 = 113;
          }
          optional E9 f_8 = 13;
          optional int32 f_9 = 16;
          optional string f_10 = 19;
          optional string f_11 = 21;
          optional float f_12 = 22;
          optional int64 f_13 = 23;
          optional int32 f_14 = 24;
          optional string f_15 = 27;
        }
        repeated M11 f_10 = 10;
      }
      repeated M3 f_19 = 19;
      message M4 {
        optional int64 f_0 = 1;
        message M6 {
          optional int32 f_0 = 2;
        }
        optional M6 f_3 = 3;
      }
      repeated M4 f_20 = 20;
      message M5 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 4;
        optional bytes f_2 = 6 [ctype = CORD];
        optional float f_3 = 8;
        optional float f_4 = 11;
        optional int64 f_5 = 12;
        optional bool f_6 = 14;
        optional string f_7 = 15;
        optional bool f_8 = 17;
        optional fixed32 f_9 = 18;
        optional int64 f_10 = 21;
        optional int32 f_11 = 24;
        optional int64 f_12 = 25;
        enum E3 {
          E3_UNSPECIFIED = 0;
          E3_CONST_1 = 82;
          E3_CONST_2 = 88;
          E3_CONST_3 = 107;
          E3_CONST_4 = 77;
          E3_CONST_5 = 26;
        }
        optional E3 f_13 = 26;
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 15;
          E4_CONST_2 = 59;
          E4_CONST_3 = 28;
          E4_CONST_4 = 3;
          E4_CONST_5 = 38;
        }
        optional E4 f_14 = 28;
        optional int64 f_15 = 30;
        message M8 {
          optional bool f_0 = 1;
        }
        repeated M8 f_33 = 33;
      }
      optional M5 f_22 = 22;
    }
    optional M2 f_23 = 23;
  }
  repeated M1 f_2 = 2;
}
