// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.response.Message1;

message Message1 {
  optional double f_0 = 1;
  optional double f_1 = 3;
  optional fixed64 f_2 = 4;
  optional int32 f_3 = 6;
  optional double f_4 = 8;
  optional double f_5 = 9;
  optional int32 f_6 = 10;
  optional fixed64 f_7 = 11;
  optional double f_8 = 12;
  optional fixed64 f_9 = 13;
  optional int32 f_10 = 14;
  repeated bool f_11 = 15 [packed = true];
  optional int32 f_12 = 16;
  optional int32 f_13 = 17;
  optional fixed64 f_14 = 18;
  optional fixed64 f_15 = 20;
  optional double f_16 = 21;
  optional fixed64 f_17 = 22;
  optional fixed64 f_18 = 23;
  optional double f_19 = 25;
  optional fixed64 f_20 = 26;
  optional fixed64 f_21 = 27;
  optional fixed64 f_22 = 28;
  optional int32 f_23 = 29;
  optional double f_24 = 30;
  optional fixed64 f_25 = 31;
  optional int32 f_26 = 32;
  message M1 {
    optional double f_0 = 1;
  }
  optional M1 f_33 = 33;
  message M2 {
    optional double f_0 = 1;
    message M12 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      optional fixed64 f_4 = 8;
    }
    optional M12 f_2 = 2;
  }
  optional M2 f_34 = 34;
  message M3 {
    optional int32 f_0 = 1;
    message M6 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      message M13 {
        optional fixed64 f_0 = 1;
      }
      optional M13 f_3 = 3;
      message M18 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 5;
        optional int32 f_3 = 7;
      }
      optional M18 f_4 = 4;
      message M19 {
        optional double f_0 = 1;
      }
      optional M19 f_5 = 5;
      message M20 {
        optional fixed64 f_0 = 1;
      }
      optional M20 f_6 = 6;
    }
    optional M6 f_2 = 2;
    message M7 {
      optional double f_0 = 1;
      repeated bool f_1 = 2 [packed = true];
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 5;
      optional double f_4 = 6;
      message M15 {
        optional int32 f_0 = 3;
      }
      optional M15 f_8 = 8;
      message M17 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 4;
      }
      optional M17 f_9 = 9;
      message M22 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional int32 f_2 = 3;
        optional double f_3 = 5;
        optional fixed64 f_4 = 7;
      }
      optional M22 f_11 = 11;
    }
    optional M7 f_3 = 3;
    message M8 {
      optional double f_0 = 1;
      optional double f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 5;
      optional double f_4 = 6;
      optional double f_5 = 7;
      optional fixed64 f_6 = 9;
      optional fixed64 f_7 = 10;
      optional int32 f_8 = 11;
      optional int32 f_9 = 12;
      optional int32 f_10 = 13;
      optional double f_11 = 14;
      optional fixed64 f_12 = 15;
      optional double f_13 = 18;
      optional fixed64 f_14 = 19;
      optional int32 f_15 = 20;
      optional double f_16 = 21;
      optional double f_17 = 22;
      optional int32 f_18 = 23;
      optional int32 f_19 = 24;
      optional double f_20 = 25;
      message M21 {
        optional fixed64 f_0 = 2;
      }
      optional M21 f_26 = 26;
    }
    optional M8 f_4 = 4;
  }
  optional M3 f_35 = 35;
  message M4 {
    optional fixed64 f_0 = 2;
    message M9 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 3;
      optional fixed64 f_2 = 4;
      optional double f_3 = 5;
      optional double f_4 = 6;
      message M14 {
        optional double f_0 = 1;
      }
      optional M14 f_7 = 7;
    }
    optional M9 f_3 = 3;
    message M11 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
    }
    optional M11 f_5 = 5;
  }
  optional M4 f_36 = 36;
  message M5 {
    optional fixed64 f_0 = 1;
    message M10 {
      optional double f_0 = 1;
      message M16 {
        optional double f_0 = 1;
      }
      optional M16 f_2 = 2;
    }
    optional M10 f_2 = 2;
  }
  optional M5 f_37 = 37;
}
