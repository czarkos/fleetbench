// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.response.Message0;

message Message0 {
  optional string f_0 = 1;
  optional int32 f_1 = 4;
  message M1 {
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 93;
      E1_CONST_2 = 107;
      E1_CONST_3 = 103;
      E1_CONST_4 = 10;
      E1_CONST_5 = 74;
    }
    optional E1 f_0 = 1;
    message M2 {
      optional string f_0 = 1;
      message M5 {
        optional string f_0 = 2;
        optional float f_1 = 4;
        optional int32 f_2 = 5;
        optional uint32 f_3 = 7;
        enum E2 {
          E2_UNSPECIFIED = 0;
          E2_CONST_1 = 73;
          E2_CONST_2 = 111;
          E2_CONST_3 = 91;
          E2_CONST_4 = 104;
          E2_CONST_5 = 71;
        }
        optional E2 f_4 = 8;
        optional bool f_5 = 9;
        optional int64 f_6 = 11;
        optional int32 f_7 = 12;
        optional string f_8 = 13;
        optional string f_9 = 14;
        optional int64 f_10 = 15;
        optional int64 f_11 = 16;
        optional int64 f_12 = 17;
        optional bool f_13 = 18;
        optional bool f_14 = 20;
        optional string f_15 = 21;
        enum E3 {
          E3_UNSPECIFIED = 0;
          E3_CONST_1 = 101;
          E3_CONST_2 = 106;
          E3_CONST_3 = 43;
          E3_CONST_4 = 42;
          E3_CONST_5 = 107;
        }
        optional E3 f_16 = 24;
        optional int64 f_17 = 26;
        optional float f_18 = 27;
      }
      optional M5 f_3 = 3;
    }
    optional M2 f_2 = 2;
    message M3 {
      optional bool f_0 = 1;
      optional bool f_1 = 3;
      optional bool f_2 = 4;
      optional int32 f_3 = 6;
      optional bool f_4 = 8;
      optional float f_5 = 9;
      message M4 {
        optional int64 f_0 = 1;
        message M6 {
          optional fixed32 f_0 = 2;
        }
        repeated M6 f_3 = 3;
      }
      repeated M4 f_11 = 11;
    }
    optional M3 f_3 = 3;
  }
  repeated M1 f_5 = 5;
}
