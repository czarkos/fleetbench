// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.response.Message2;

message Message2 {
  optional fixed64 f_0 = 1;
  optional int32 f_1 = 2;
  optional int32 f_2 = 3;
  optional uint32 f_3 = 4;
  optional double f_4 = 6;
  optional double f_5 = 7;
  optional int32 f_6 = 8;
  optional fixed64 f_7 = 9;
  optional fixed64 f_8 = 11;
  optional fixed32 f_9 = 12;
  optional int32 f_10 = 13;
  optional double f_11 = 14;
  optional int32 f_12 = 15;
  optional int32 f_13 = 16;
  optional int32 f_14 = 17;
  optional double f_15 = 18;
  optional int32 f_16 = 19;
  optional fixed64 f_17 = 21;
  optional int32 f_18 = 22;
  optional int32 f_19 = 23;
  optional fixed64 f_20 = 24;
  optional int32 f_21 = 25;
  optional int32 f_22 = 26;
  optional fixed64 f_23 = 28;
  optional int32 f_24 = 29;
  optional int32 f_25 = 31;
  optional double f_26 = 32;
  optional int32 f_27 = 33;
  message M1 {
    optional int32 f_0 = 1;
  }
  repeated M1 f_34 = 34;
  message M2 {
    optional int32 f_0 = 1;
  }
  optional M2 f_35 = 35;
  message M3 {
    optional int32 f_0 = 2;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 45;
      E1_CONST_2 = 85;
      E1_CONST_3 = 67;
      E1_CONST_4 = 124;
      E1_CONST_5 = 12;
    }
    optional E1 f_1 = 3;
    optional fixed64 f_2 = 4;
    optional double f_3 = 5;
    optional fixed64 f_4 = 7;
    message M4 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional double f_2 = 4;
      optional fixed64 f_3 = 5;
      optional int32 f_4 = 6;
      optional int32 f_5 = 7;
      optional double f_6 = 8;
      optional double f_7 = 10;
      optional fixed64 f_8 = 11;
      optional int32 f_9 = 13;
      optional double f_10 = 14;
      optional double f_11 = 16;
      optional fixed64 f_12 = 17;
      optional double f_13 = 18;
      optional double f_14 = 19;
      optional int32 f_15 = 22;
      optional fixed64 f_16 = 23;
      optional fixed64 f_17 = 25;
      optional int32 f_18 = 26;
      optional int32 f_19 = 28;
      optional int32 f_20 = 30;
      optional int32 f_21 = 32;
      optional fixed64 f_22 = 33;
      message M5 {
        optional fixed64 f_0 = 1;
      }
      optional M5 f_34 = 34;
      message M6 {
        optional int32 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional fixed64 f_3 = 5;
      }
      repeated M6 f_35 = 35;
      message M7 {
        optional fixed64 f_0 = 1;
      }
      optional M7 f_36 = 36;
      message M8 {
        optional double f_0 = 1;
      }
      optional M8 f_37 = 37;
      message M9 {
        optional double f_0 = 1;
        optional bool f_1 = 2;
        optional fixed64 f_2 = 5;
      }
      optional M9 f_38 = 38;
      message M10 {
        optional double f_0 = 1;
        optional float f_1 = 2;
        optional fixed64 f_2 = 3;
        optional double f_3 = 4;
      }
      optional M10 f_39 = 39;
      message M11 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 3;
        optional double f_3 = 4;
        optional fixed64 f_4 = 5;
        optional double f_5 = 6;
        optional int32 f_6 = 7;
        optional double f_7 = 9;
        optional fixed64 f_8 = 10;
        optional double f_9 = 11;
        optional fixed64 f_10 = 13;
        optional double f_11 = 14;
        optional int32 f_12 = 15;
        optional double f_13 = 16;
        optional double f_14 = 17;
        optional fixed64 f_15 = 19;
        optional double f_16 = 21;
        optional double f_17 = 22;
        optional int32 f_18 = 23;
        optional int32 f_19 = 24;
        optional fixed64 f_20 = 25;
        optional int32 f_21 = 26;
        optional double f_22 = 27;
      }
      repeated M11 f_40 = 40;
    }
    optional M4 f_8 = 8;
  }
  optional M3 f_37 = 37;
}
