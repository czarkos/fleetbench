// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.response.Message2;

message Message2 {
  optional double f_0 = 1;
  optional fixed64 f_1 = 4;
  optional fixed64 f_2 = 5;
  optional string f_3 = 6;
  optional double f_4 = 7;
  optional int32 f_5 = 8;
  optional double f_6 = 9;
  optional double f_7 = 10;
  optional fixed64 f_8 = 12;
  optional double f_9 = 13;
  optional int32 f_10 = 15;
  optional int32 f_11 = 16;
  optional double f_12 = 17;
  optional double f_13 = 18;
  optional double f_14 = 19;
  optional double f_15 = 21;
  optional fixed64 f_16 = 22;
  optional fixed64 f_17 = 23;
  optional double f_18 = 24;
  optional fixed64 f_19 = 27;
  optional double f_20 = 28;
  optional int32 f_21 = 29;
  optional int32 f_22 = 30;
  optional int32 f_23 = 31;
  message M1 {
    optional double f_0 = 1;
    optional int32 f_1 = 2;
    optional fixed64 f_2 = 3;
    optional double f_3 = 5;
    message M2 {
      optional double f_0 = 1;
      message M13 {
        optional double f_0 = 1;
      }
      optional M13 f_2 = 2;
    }
    optional M2 f_6 = 6;
    message M3 {
      optional fixed64 f_0 = 1;
    }
    optional M3 f_8 = 8;
    message M4 {
      optional fixed64 f_0 = 2;
      optional double f_1 = 4;
      optional int32 f_2 = 5;
      repeated bool f_3 = 6 [packed = true];
      optional double f_4 = 7;
      optional int32 f_5 = 8;
      optional int32 f_6 = 9;
      optional fixed64 f_7 = 11;
      message M10 {
        optional double f_0 = 1;
      }
      optional M10 f_12 = 12;
    }
    optional M4 f_9 = 9;
    message M5 {
      repeated bool f_0 = 1 [packed = true];
      message M12 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
      }
      optional M12 f_2 = 2;
    }
    optional M5 f_10 = 10;
    message M6 {
      optional double f_0 = 2;
      optional uint32 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional int32 f_3 = 5;
      message M11 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 3;
        optional fixed64 f_2 = 5;
        optional fixed64 f_3 = 6;
        optional fixed64 f_4 = 7;
      }
      optional M11 f_6 = 6;
    }
    optional M6 f_11 = 11;
    message M7 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional bool f_2 = 5;
      optional int32 f_3 = 6;
      optional fixed64 f_4 = 7;
    }
    optional M7 f_13 = 13;
    message M8 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional int32 f_4 = 6;
      optional fixed64 f_5 = 7;
      optional fixed64 f_6 = 8;
      optional double f_7 = 9;
      optional int32 f_8 = 10;
      optional double f_9 = 11;
      optional double f_10 = 13;
      optional int32 f_11 = 16;
    }
    optional M8 f_14 = 14;
    message M9 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 4;
      optional double f_3 = 5;
    }
    optional M9 f_15 = 15;
  }
  optional M1 f_32 = 32;
}
