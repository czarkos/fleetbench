// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.request.Message0;

message Message0 {
  optional int64 f_0 = 1;
  optional bool f_1 = 4;
  optional bool f_2 = 5;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 10;
    E1_CONST_2 = 75;
    E1_CONST_3 = 37;
    E1_CONST_4 = 38;
    E1_CONST_5 = 69;
  }
  optional E1 f_3 = 7;
  message M1 {
    optional string f_0 = 1;
    message M7 {
      optional int64 f_0 = 1;
      optional string f_1 = 2;
      optional bytes f_2 = 3 [ctype = CORD];
      optional string f_3 = 4;
      optional int32 f_4 = 6;
      optional string f_5 = 8;
      optional string f_6 = 10;
      optional bytes f_7 = 12 [ctype = CORD];
      optional string f_8 = 13;
      optional string f_9 = 14;
      optional bytes f_10 = 16;
      optional bool f_11 = 17;
      message M8 {
        optional bytes f_0 = 1;
        optional string f_1 = 3;
        optional bytes f_2 = 4;
        optional string f_3 = 5;
        optional string f_4 = 6;
      }
      optional M8 f_18 = 18;
    }
    repeated M7 f_2 = 2;
  }
  optional M1 f_8 = 8;
  message M2 {
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 37;
      E2_CONST_2 = 24;
      E2_CONST_3 = 31;
      E2_CONST_4 = 40;
      E2_CONST_5 = 61;
    }
    optional E2 f_0 = 1;
    optional bool f_1 = 4;
    optional bool f_2 = 7;
    optional int32 f_3 = 9;
  }
  optional M2 f_11 = 11;
  message M3 {
    optional string f_0 = 1;
  }
  repeated M3 f_12 = 12;
  message M4 {
    optional int64 f_0 = 1;
  }
  optional M4 f_13 = 13;
  message M5 {
    optional int32 f_0 = 1;
    optional bool f_1 = 2;
  }
  optional M5 f_14 = 14;
  message M6 {
    optional bool f_0 = 1;
    optional string f_1 = 3;
    optional string f_2 = 5;
    optional bool f_3 = 6;
  }
  optional M6 f_15 = 15;
}
