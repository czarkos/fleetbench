// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.request.Message0;

message Message0 {
  optional int32 f_0 = 1;
  optional string f_1 = 3;
  optional fixed64 f_2 = 4;
  optional int32 f_3 = 6;
  optional string f_4 = 8;
  optional fixed64 f_5 = 11;
  optional string f_6 = 14;
  optional string f_7 = 15;
  optional int32 f_8 = 16;
  optional bool f_9 = 17;
  optional bool f_10 = 19;
  optional fixed64 f_11 = 20;
  optional string f_12 = 21;
  optional int32 f_13 = 24;
  optional fixed64 f_14 = 26;
  optional fixed64 f_15 = 27;
  optional fixed64 f_16 = 28;
  optional fixed64 f_17 = 29;
  optional int32 f_18 = 31;
  optional fixed64 f_19 = 32;
  repeated int32 f_20 = 33 [packed = true];
  optional string f_21 = 34;
  optional fixed64 f_22 = 35;
  optional fixed64 f_23 = 36;
  optional int32 f_24 = 38;
  optional string f_25 = 39;
  optional int32 f_26 = 40;
  optional fixed64 f_27 = 43;
  optional int32 f_28 = 44;
  optional fixed64 f_29 = 45;
  message M1 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 2;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 126;
      E1_CONST_2 = 20;
      E1_CONST_3 = 77;
      E1_CONST_4 = 49;
      E1_CONST_5 = 90;
    }
    optional E1 f_2 = 3;
    optional int32 f_3 = 4;
    message M9 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 6;
      optional string f_3 = 7;
      optional string f_4 = 8;
    }
    optional M9 f_7 = 7;
    message M19 {
      optional double f_0 = 1;
    }
    optional M19 f_8 = 8;
    message M24 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional fixed32 f_3 = 4;
      optional fixed64 f_4 = 5;
      message M27 {
        optional fixed64 f_0 = 1;
      }
      optional M27 f_6 = 6;
    }
    optional M24 f_10 = 10;
  }
  optional M1 f_47 = 47;
  message M2 {
    optional fixed64 f_0 = 2;
    message M10 {
      optional fixed32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 5;
      optional int32 f_3 = 8;
      optional fixed64 f_4 = 9;
    }
    optional M10 f_3 = 3;
    message M12 {
      optional string f_0 = 1;
    }
    repeated M12 f_4 = 4;
    message M22 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 5;
      optional bool f_3 = 6;
      optional fixed64 f_4 = 8;
      message M31 {
        optional int32 f_0 = 5;
        message M38 {
          optional int32 f_0 = 2;
          optional fixed32 f_1 = 3;
          optional string f_2 = 6;
          optional int32 f_3 = 8;
          optional bool f_4 = 10;
        }
        optional M38 f_6 = 6;
        message M40 {
          optional string f_0 = 2;
          optional bool f_1 = 5;
          enum E3 {
            E3_UNSPECIFIED = 0;
            E3_CONST_1 = 19;
            E3_CONST_2 = 33;
            E3_CONST_3 = 11;
            E3_CONST_4 = 75;
            E3_CONST_5 = 118;
          }
          repeated E3 f_2 = 6 [packed = true];
          optional fixed64 f_3 = 7;
        }
        optional M40 f_9 = 9;
      }
      optional M31 f_10 = 10;
      message M32 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 3;
        optional fixed64 f_2 = 5;
      }
      optional M32 f_12 = 12;
    }
    optional M22 f_5 = 5;
  }
  optional M2 f_49 = 49;
  message M3 {
    optional string f_0 = 1;
    message M16 {
      optional bool f_0 = 1;
      message M30 {
        optional string f_0 = 1;
        optional bool f_1 = 3;
        optional string f_2 = 4;
        enum E2 {
          E2_UNSPECIFIED = 0;
          E2_CONST_1 = 42;
          E2_CONST_2 = 2;
          E2_CONST_3 = 116;
          E2_CONST_4 = 82;
          E2_CONST_5 = 35;
        }
        repeated E2 f_3 = 6 [packed = true];
        optional fixed64 f_4 = 7;
        optional double f_5 = 8;
        optional fixed64 f_6 = 10;
        optional fixed64 f_7 = 11;
        optional int32 f_8 = 13;
        optional string f_9 = 14;
        optional int32 f_10 = 15;
        optional string f_11 = 19;
        optional fixed64 f_12 = 21;
        optional string f_13 = 22;
        optional string f_14 = 24;
        optional int32 f_15 = 28;
        optional int32 f_16 = 29;
        optional bool f_17 = 30;
        optional string f_18 = 32;
        optional string f_19 = 33;
        optional int32 f_20 = 35;
        optional fixed64 f_21 = 36;
        optional int32 f_22 = 37;
        message M37 {
          optional string f_0 = 1;
          optional bool f_1 = 3;
          optional fixed64 f_2 = 5;
          optional fixed64 f_3 = 7;
          optional fixed64 f_4 = 8;
        }
        optional M37 f_38 = 38;
      }
      optional M30 f_2 = 2;
    }
    optional M16 f_2 = 2;
    message M17 {
      optional fixed32 f_0 = 2;
      optional fixed64 f_1 = 3;
    }
    repeated M17 f_3 = 3;
  }
  optional M3 f_50 = 50;
  message M4 {
    optional string f_0 = 1;
    message M8 {
      optional string f_0 = 3;
      optional string f_1 = 4;
      optional string f_2 = 5;
      optional fixed64 f_3 = 6;
    }
    optional M8 f_2 = 2;
  }
  optional M4 f_52 = 52;
  message M5 {
    optional string f_0 = 1;
    optional int32 f_1 = 3;
    optional fixed32 f_2 = 5;
    message M13 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 5;
    }
    optional M13 f_6 = 6;
    message M20 {
      optional string f_0 = 2;
    }
    optional M20 f_8 = 8;
    message M21 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional string f_2 = 4;
      optional fixed64 f_3 = 6;
    }
    optional M21 f_9 = 9;
    message M23 {
      optional string f_0 = 2;
      message M28 {
        optional int32 f_0 = 1;
        optional string f_1 = 2;
        optional string f_2 = 4;
      }
      optional M28 f_3 = 3;
    }
    optional M23 f_12 = 12;
  }
  repeated M5 f_53 = 53;
  message M6 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 4;
    optional string f_2 = 5;
    optional string f_3 = 6;
    message M11 {
      optional fixed64 f_0 = 1;
    }
    optional M11 f_7 = 7;
    message M15 {
      optional string f_0 = 1;
      optional fixed32 f_1 = 2;
      message M33 {
        optional string f_0 = 1;
        optional bool f_1 = 4;
        optional fixed64 f_2 = 6;
        optional fixed64 f_3 = 8;
        message M36 {
          optional int32 f_0 = 3;
          optional string f_1 = 4;
          optional string f_2 = 5;
          optional fixed64 f_3 = 7;
          message M44 {
            optional fixed64 f_0 = 1;
          }
          optional M44 f_8 = 8;
        }
        optional M36 f_10 = 10;
        message M39 {
          optional string f_0 = 1;
          message M45 {
            optional bool f_0 = 1;
            optional fixed64 f_1 = 2;
            optional string f_2 = 3;
            optional double f_3 = 5;
          }
          optional M45 f_3 = 3;
        }
        optional M39 f_11 = 11;
      }
      repeated M33 f_3 = 3;
    }
    optional M15 f_8 = 8;
    message M18 {
      optional int32 f_0 = 1;
      message M29 {
        optional fixed32 f_0 = 1;
        optional fixed64 f_1 = 3;
        message M34 {
          optional fixed64 f_0 = 1;
          message M43 {
            optional double f_0 = 1;
          }
          optional M43 f_3 = 3;
        }
        repeated M34 f_4 = 4;
        message M35 {
          optional fixed64 f_0 = 1;
          message M41 {
            optional string f_0 = 1;
          }
          repeated M41 f_2 = 2;
          message M42 {
            optional string f_0 = 3;
            optional string f_1 = 5;
            optional string f_2 = 7;
          }
          repeated M42 f_3 = 3;
        }
        optional M35 f_5 = 5;
      }
      optional M29 f_2 = 2;
    }
    optional M18 f_10 = 10;
  }
  optional M6 f_54 = 54;
  message M7 {
    optional string f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 3;
    optional string f_3 = 6;
    optional fixed64 f_4 = 7;
    message M14 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 5;
      optional int32 f_3 = 6;
      optional string f_4 = 7;
    }
    repeated M14 f_8 = 8;
    message M25 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    repeated M25 f_9 = 9;
    message M26 {
      optional string f_0 = 1;
      optional int32 f_1 = 3;
      optional fixed32 f_2 = 5;
      optional fixed64 f_3 = 6;
      optional int32 f_4 = 8;
      optional fixed64 f_5 = 10;
      optional string f_6 = 11;
      optional string f_7 = 12;
      optional int32 f_8 = 13;
      optional string f_9 = 15;
      optional int32 f_10 = 17;
      optional int32 f_11 = 18;
      optional double f_12 = 20;
      optional int32 f_13 = 21;
      optional fixed64 f_14 = 22;
      optional int32 f_15 = 23;
      optional int32 f_16 = 24;
      optional fixed64 f_17 = 26;
      optional string f_18 = 27;
      optional bool f_19 = 28;
      optional fixed64 f_20 = 29;
      optional int32 f_21 = 30;
      optional int32 f_22 = 31;
      optional double f_23 = 32;
    }
    optional M26 f_12 = 12;
  }
  optional M7 f_55 = 55;
}
