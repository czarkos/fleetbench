// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.request.Message0;

message Message0 {
  optional fixed32 f_0 = 1;
  optional fixed64 f_1 = 3;
  optional int32 f_2 = 4;
  optional int32 f_3 = 6;
  optional string f_4 = 8;
  optional bool f_5 = 11;
  optional string f_6 = 13;
  optional bool f_7 = 15;
  optional fixed64 f_8 = 16;
  optional fixed64 f_9 = 17;
  optional int32 f_10 = 19;
  optional bool f_11 = 20;
  optional fixed64 f_12 = 21;
  optional string f_13 = 24;
  optional string f_14 = 26;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 38;
    E1_CONST_2 = 5;
    E1_CONST_3 = 105;
    E1_CONST_4 = 124;
    E1_CONST_5 = 73;
  }
  repeated E1 f_15 = 27 [packed = true];
  optional string f_16 = 28;
  optional int32 f_17 = 29;
  optional int32 f_18 = 31;
  optional string f_19 = 32;
  optional fixed64 f_20 = 33;
  optional string f_21 = 34;
  optional fixed64 f_22 = 35;
  optional fixed64 f_23 = 36;
  optional int32 f_24 = 38;
  optional string f_25 = 39;
  optional fixed64 f_26 = 40;
  optional fixed64 f_27 = 43;
  optional string f_28 = 44;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 22;
    E2_CONST_2 = 37;
    E2_CONST_3 = 71;
    E2_CONST_4 = 124;
    E2_CONST_5 = 81;
  }
  repeated E2 f_29 = 45 [packed = true];
  message M1 {
    optional double f_0 = 1;
    optional string f_1 = 2;
    optional int32 f_2 = 3;
    optional bytes f_3 = 4;
    message M14 {
      optional string f_0 = 1;
    }
    optional M14 f_5 = 5;
    message M17 {
      optional string f_0 = 2;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 42;
        E8_CONST_2 = 21;
        E8_CONST_3 = 60;
        E8_CONST_4 = 113;
        E8_CONST_5 = 63;
      }
      repeated E8 f_1 = 3 [packed = true];
      optional fixed64 f_2 = 4;
    }
    optional M17 f_6 = 6;
  }
  optional M1 f_46 = 46;
  message M2 {
    optional int32 f_0 = 1;
    optional bool f_1 = 3;
  }
  optional M2 f_48 = 48;
  message M3 {
    optional fixed32 f_0 = 1;
    message M11 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 3;
      optional fixed64 f_3 = 4;
      optional fixed64 f_4 = 5;
      optional fixed32 f_5 = 9;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 35;
        E5_CONST_2 = 112;
        E5_CONST_3 = 96;
        E5_CONST_4 = 51;
        E5_CONST_5 = 122;
      }
      optional E5 f_6 = 10;
      optional bool f_7 = 11;
      optional string f_8 = 14;
      optional fixed32 f_9 = 15;
      optional int32 f_10 = 16;
      optional string f_11 = 19;
      optional fixed32 f_12 = 22;
      optional fixed64 f_13 = 23;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 26;
        E6_CONST_2 = 30;
        E6_CONST_3 = 100;
        E6_CONST_4 = 68;
        E6_CONST_5 = 51;
      }
      repeated E6 f_14 = 24 [packed = true];
      optional string f_15 = 25;
      optional string f_16 = 26;
      optional int32 f_17 = 27;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 67;
        E7_CONST_2 = 20;
        E7_CONST_3 = 44;
        E7_CONST_4 = 40;
        E7_CONST_5 = 98;
      }
      repeated E7 f_18 = 28 [packed = true];
      optional string f_19 = 29;
      optional int32 f_20 = 30;
      optional double f_21 = 31;
      optional string f_22 = 33;
      message M34 {
        optional bool f_0 = 1;
        optional fixed64 f_1 = 3;
      }
      optional M34 f_34 = 34;
      message M38 {
        optional fixed32 f_0 = 1;
        message M40 {
          optional string f_0 = 1;
          message M44 {
            optional int32 f_0 = 1;
          }
          optional M44 f_2 = 2;
          message M46 {
            optional fixed64 f_0 = 1;
          }
          optional M46 f_3 = 3;
          message M47 {
            optional fixed64 f_0 = 2;
          }
          optional M47 f_4 = 4;
          message M48 {
            optional string f_0 = 1;
          }
          repeated M48 f_6 = 6;
          message M50 {
            optional fixed64 f_0 = 1;
            optional int64 f_1 = 2;
            optional fixed64 f_2 = 3;
            optional fixed64 f_3 = 4;
            optional string f_4 = 6;
            optional int32 f_5 = 7;
            optional string f_6 = 9;
            optional int32 f_7 = 13;
            optional int32 f_8 = 14;
            optional int32 f_9 = 15;
            optional fixed64 f_10 = 17;
            optional int64 f_11 = 20;
            enum E20 {
              E20_UNSPECIFIED = 0;
              E20_CONST_1 = 108;
              E20_CONST_2 = 87;
              E20_CONST_3 = 123;
              E20_CONST_4 = 116;
              E20_CONST_5 = 79;
            }
            optional E20 f_12 = 21;
            optional string f_13 = 23;
          }
          repeated M50 f_7 = 7;
        }
        repeated M40 f_3 = 3;
        message M41 {
          optional string f_0 = 2;
          optional bool f_1 = 4;
          optional string f_2 = 5;
          optional string f_3 = 6;
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 72;
            E15_CONST_2 = 4;
            E15_CONST_3 = 61;
            E15_CONST_4 = 70;
            E15_CONST_5 = 108;
          }
          optional E15 f_4 = 8;
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 123;
            E16_CONST_2 = 84;
            E16_CONST_3 = 104;
            E16_CONST_4 = 36;
            E16_CONST_5 = 59;
          }
          repeated E16 f_5 = 9 [packed = true];
          optional fixed32 f_6 = 12;
          optional string f_7 = 14;
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 105;
            E17_CONST_2 = 45;
            E17_CONST_3 = 99;
            E17_CONST_4 = 68;
            E17_CONST_5 = 113;
          }
          repeated E17 f_8 = 16 [packed = true];
          optional string f_9 = 17;
          optional string f_10 = 18;
          optional string f_11 = 19;
          optional string f_12 = 21;
          optional string f_13 = 24;
          optional fixed64 f_14 = 25;
          optional fixed64 f_15 = 26;
          optional fixed64 f_16 = 29;
          optional fixed64 f_17 = 30;
          optional fixed64 f_18 = 31;
          optional string f_19 = 33;
          optional fixed64 f_20 = 34;
          optional fixed64 f_21 = 36;
          optional fixed64 f_22 = 38;
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 96;
            E18_CONST_2 = 16;
            E18_CONST_3 = 21;
            E18_CONST_4 = 28;
            E18_CONST_5 = 12;
          }
          repeated E18 f_23 = 39 [packed = true];
          optional fixed64 f_24 = 40;
          optional string f_25 = 42;
          optional fixed64 f_26 = 43;
          optional string f_27 = 44;
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 113;
            E19_CONST_2 = 111;
            E19_CONST_3 = 62;
            E19_CONST_4 = 63;
            E19_CONST_5 = 121;
          }
          optional E19 f_28 = 45;
          optional double f_29 = 46;
          message M43 {
            optional fixed64 f_0 = 1;
          }
          repeated M43 f_47 = 47;
          message M45 {
            optional int32 f_0 = 1;
          }
          optional M45 f_48 = 48;
          message M49 {
            optional double f_0 = 1;
          }
          optional M49 f_49 = 49;
        }
        repeated M41 f_4 = 4;
      }
      optional M38 f_35 = 35;
    }
    repeated M11 f_2 = 2;
    message M13 {
      optional int32 f_0 = 1;
      message M28 {
        optional bool f_0 = 2;
        optional double f_1 = 3;
        optional fixed32 f_2 = 4;
        optional fixed64 f_3 = 6;
        optional string f_4 = 7;
        optional int32 f_5 = 9;
      }
      optional M28 f_2 = 2;
      message M37 {
        optional string f_0 = 2;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 5;
        optional int32 f_3 = 7;
        optional string f_4 = 8;
      }
      optional M37 f_3 = 3;
    }
    optional M13 f_3 = 3;
    message M19 {
      optional fixed64 f_0 = 1;
      message M31 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 5;
      }
      optional M31 f_3 = 3;
      message M32 {
        optional string f_0 = 1;
      }
      optional M32 f_4 = 4;
    }
    repeated M19 f_5 = 5;
  }
  optional M3 f_49 = 49;
  message M4 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 79;
      E3_CONST_2 = 30;
      E3_CONST_3 = 5;
      E3_CONST_4 = 120;
      E3_CONST_5 = 122;
    }
    repeated E3 f_0 = 1 [packed = true];
    optional fixed64 f_1 = 3;
    message M12 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      message M30 {
        optional uint64 f_0 = 2;
      }
      optional M30 f_6 = 6;
    }
    repeated M12 f_6 = 6;
    message M15 {
      optional string f_0 = 1;
    }
    optional M15 f_7 = 7;
    message M16 {
      repeated string f_0 = 1;
      message M25 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
        optional bool f_2 = 3;
      }
      optional M25 f_2 = 2;
    }
    optional M16 f_8 = 8;
    message M20 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 3;
      optional bool f_2 = 4;
      optional bool f_3 = 5;
      message M24 {
        optional fixed32 f_0 = 1;
      }
      repeated M24 f_8 = 8;
      message M29 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 5;
        optional fixed64 f_2 = 7;
      }
      optional M29 f_9 = 9;
    }
    optional M20 f_10 = 10;
    message M23 {
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 44;
        E11_CONST_2 = 2;
        E11_CONST_3 = 85;
        E11_CONST_4 = 6;
        E11_CONST_5 = 100;
      }
      optional E11 f_0 = 1;
      optional bool f_1 = 3;
      optional string f_2 = 4;
      optional string f_3 = 5;
      optional fixed64 f_4 = 6;
      optional int32 f_5 = 7;
    }
    optional M23 f_11 = 11;
  }
  optional M4 f_50 = 50;
  message M5 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 26;
      E4_CONST_2 = 69;
      E4_CONST_3 = 122;
      E4_CONST_4 = 89;
      E4_CONST_5 = 58;
    }
    optional E4 f_0 = 2;
    message M21 {
      optional fixed64 f_0 = 2;
      message M26 {
        optional string f_0 = 2;
      }
      optional M26 f_3 = 3;
      message M27 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 3;
        optional int32 f_2 = 4;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 102;
          E12_CONST_2 = 34;
          E12_CONST_3 = 125;
          E12_CONST_4 = 9;
          E12_CONST_5 = 45;
        }
        repeated E12 f_3 = 5 [packed = true];
        optional int32 f_4 = 6;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 65;
          E13_CONST_2 = 124;
          E13_CONST_3 = 15;
          E13_CONST_4 = 75;
          E13_CONST_5 = 86;
        }
        optional E13 f_5 = 7;
      }
      repeated M27 f_4 = 4;
      message M33 {
        optional bool f_0 = 1;
      }
      repeated M33 f_8 = 8;
      message M35 {
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 79;
          E14_CONST_2 = 124;
          E14_CONST_3 = 61;
          E14_CONST_4 = 99;
          E14_CONST_5 = 90;
        }
        repeated E14 f_0 = 2 [packed = true];
      }
      optional M35 f_10 = 10;
    }
    optional M21 f_3 = 3;
  }
  optional M5 f_52 = 52;
  message M6 {
    optional fixed64 f_0 = 1;
    optional string f_1 = 2;
    optional fixed64 f_2 = 5;
  }
  optional M6 f_53 = 53;
  message M7 {
    optional string f_0 = 1;
  }
  optional M7 f_54 = 54;
  message M8 {
    optional int32 f_0 = 1;
  }
  optional M8 f_55 = 55;
  message M9 {
    optional int32 f_0 = 1;
  }
  optional M9 f_58 = 58;
  message M10 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed64 f_2 = 5;
    message M18 {
      optional string f_0 = 2;
      optional string f_1 = 3;
      optional fixed64 f_2 = 4;
      optional fixed64 f_3 = 6;
    }
    optional M18 f_7 = 7;
    message M22 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 5;
      optional int32 f_3 = 8;
      optional bool f_4 = 9;
      optional string f_5 = 10;
      optional int32 f_6 = 11;
      optional string f_7 = 12;
      optional fixed64 f_8 = 13;
      optional string f_9 = 15;
      optional double f_10 = 16;
      optional fixed64 f_11 = 17;
      optional int32 f_12 = 18;
      optional fixed64 f_13 = 19;
      optional string f_14 = 21;
      optional fixed32 f_15 = 23;
      optional fixed64 f_16 = 24;
      optional fixed32 f_17 = 25;
      optional string f_18 = 26;
      optional fixed64 f_19 = 28;
      optional int32 f_20 = 29;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 16;
        E9_CONST_2 = 34;
        E9_CONST_3 = 110;
        E9_CONST_4 = 32;
        E9_CONST_5 = 77;
      }
      repeated E9 f_21 = 30 [packed = true];
      optional fixed64 f_22 = 31;
      optional string f_23 = 33;
      optional fixed64 f_24 = 34;
      optional string f_25 = 35;
      optional fixed32 f_26 = 36;
      optional int32 f_27 = 38;
      optional int32 f_28 = 39;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 117;
        E10_CONST_2 = 76;
        E10_CONST_3 = 24;
        E10_CONST_4 = 46;
        E10_CONST_5 = 109;
      }
      optional E10 f_29 = 40;
      message M36 {
        optional int32 f_0 = 2;
        message M39 {
          optional string f_0 = 1;
          optional string f_1 = 4;
          optional int32 f_2 = 5;
          optional int64 f_3 = 6;
          optional int32 f_4 = 8;
          message M42 {
            optional fixed64 f_0 = 2;
          }
          optional M42 f_10 = 10;
        }
        optional M39 f_4 = 4;
      }
      optional M36 f_41 = 41;
    }
    optional M22 f_8 = 8;
  }
  optional M10 f_59 = 59;
}
