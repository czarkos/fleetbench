// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.request.Message0;

message Message0 {
  optional int32 f_0 = 1;
  optional fixed32 f_1 = 3;
  optional string f_2 = 4;
  optional fixed64 f_3 = 6;
  optional string f_4 = 8;
  optional string f_5 = 11;
  optional string f_6 = 14;
  optional string f_7 = 15;
  optional string f_8 = 16;
  optional string f_9 = 17;
  optional string f_10 = 19;
  optional double f_11 = 20;
  optional string f_12 = 21;
  optional int32 f_13 = 24;
  optional fixed64 f_14 = 26;
  optional int32 f_15 = 27;
  optional int32 f_16 = 28;
  optional string f_17 = 29;
  optional fixed64 f_18 = 31;
  optional string f_19 = 32;
  optional fixed64 f_20 = 33;
  optional double f_21 = 34;
  optional string f_22 = 35;
  optional fixed64 f_23 = 36;
  optional fixed64 f_24 = 38;
  optional fixed64 f_25 = 39;
  optional double f_26 = 40;
  optional string f_27 = 43;
  optional string f_28 = 44;
  optional string f_29 = 45;
  message M1 {
    optional fixed64 f_0 = 1;
    message M11 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 4;
      optional int32 f_2 = 5;
      optional int32 f_3 = 6;
      optional fixed32 f_4 = 9;
      optional fixed64 f_5 = 12;
      message M25 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 5;
      }
      repeated M25 f_13 = 13;
      message M31 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 3;
        optional string f_2 = 4;
        optional string f_3 = 6;
        optional string f_4 = 7;
        optional fixed64 f_5 = 8;
        message M48 {
          optional bool f_0 = 2;
          optional bool f_1 = 4;
          optional fixed64 f_2 = 5;
          optional int32 f_3 = 6;
        }
        optional M48 f_9 = 9;
      }
      repeated M31 f_15 = 15;
    }
    repeated M11 f_2 = 2;
    message M14 {
      optional fixed32 f_0 = 2;
      message M32 {
        enum E3 {
          E3_UNSPECIFIED = 0;
          E3_CONST_1 = 43;
          E3_CONST_2 = 59;
          E3_CONST_3 = 36;
          E3_CONST_4 = 95;
          E3_CONST_5 = 102;
        }
        optional E3 f_0 = 1;
      }
      repeated M32 f_4 = 4;
    }
    optional M14 f_3 = 3;
  }
  optional M1 f_46 = 46;
  message M2 {
    optional double f_0 = 1;
    optional bool f_1 = 2;
    message M12 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    repeated M12 f_3 = 3;
    message M13 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed32 f_3 = 4;
      message M26 {
        optional fixed32 f_0 = 1;
      }
      optional M26 f_5 = 5;
    }
    repeated M13 f_4 = 4;
    message M22 {
      optional string f_0 = 1;
      message M36 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 3;
        optional string f_2 = 4;
        message M46 {
          optional bool f_0 = 2;
        }
        repeated M46 f_6 = 6;
      }
      optional M36 f_3 = 3;
    }
    optional M22 f_6 = 6;
  }
  optional M2 f_48 = 48;
  message M3 {
    optional fixed32 f_0 = 2;
    optional int32 f_1 = 4;
    optional int32 f_2 = 5;
    optional fixed64 f_3 = 6;
    message M10 {
      optional string f_0 = 4;
      message M41 {
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 55;
          E4_CONST_2 = 20;
          E4_CONST_3 = 46;
          E4_CONST_4 = 28;
          E4_CONST_5 = 12;
        }
        repeated E4 f_0 = 2 [packed = true];
        message M42 {
          optional bool f_0 = 1;
          optional string f_1 = 2;
          optional fixed32 f_2 = 3;
          optional int32 f_3 = 4;
        }
        repeated M42 f_5 = 5;
      }
      optional M41 f_5 = 5;
    }
    optional M10 f_7 = 7;
    message M20 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional string f_2 = 4;
      optional fixed64 f_3 = 5;
      optional double f_4 = 6;
      optional fixed64 f_5 = 8;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 84;
        E2_CONST_2 = 119;
        E2_CONST_3 = 18;
        E2_CONST_4 = 59;
        E2_CONST_5 = 112;
      }
      repeated E2 f_6 = 10 [packed = true];
      optional int32 f_7 = 11;
      optional int32 f_8 = 13;
      optional double f_9 = 14;
      optional fixed64 f_10 = 16;
      optional string f_11 = 17;
      optional double f_12 = 18;
      optional fixed32 f_13 = 20;
      optional bool f_14 = 22;
      optional double f_15 = 23;
      optional fixed64 f_16 = 25;
      optional int32 f_17 = 26;
      optional int32 f_18 = 28;
      optional fixed32 f_19 = 31;
      optional int32 f_20 = 32;
      optional fixed64 f_21 = 33;
      optional string f_22 = 34;
      optional string f_23 = 35;
      optional bool f_24 = 36;
      optional string f_25 = 38;
      optional bool f_26 = 39;
      optional int32 f_27 = 40;
      optional fixed64 f_28 = 41;
      optional int32 f_29 = 42;
      optional fixed64 f_30 = 44;
      message M27 {
        optional string f_0 = 3;
      }
      optional M27 f_45 = 45;
      message M37 {
        optional double f_0 = 1;
      }
      optional M37 f_46 = 46;
    }
    optional M20 f_9 = 9;
    message M23 {
      optional string f_0 = 1;
    }
    optional M23 f_10 = 10;
  }
  optional M3 f_49 = 49;
  message M4 {
    optional fixed64 f_0 = 2;
    message M17 {
      optional string f_0 = 1;
      message M34 {
        optional string f_0 = 4;
      }
      repeated M34 f_3 = 3;
    }
    optional M17 f_3 = 3;
    message M21 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 5;
      optional int32 f_3 = 6;
      optional int32 f_4 = 7;
      optional string f_5 = 8;
      optional string f_6 = 10;
      message M33 {
        optional fixed64 f_0 = 1;
        message M47 {
          optional int32 f_0 = 1;
          enum E5 {
            E5_UNSPECIFIED = 0;
            E5_CONST_1 = 53;
            E5_CONST_2 = 35;
            E5_CONST_3 = 69;
            E5_CONST_4 = 56;
            E5_CONST_5 = 83;
          }
          repeated E5 f_1 = 2 [packed = true];
          optional bool f_2 = 4;
          optional string f_3 = 5;
        }
        repeated M47 f_4 = 4;
      }
      optional M33 f_11 = 11;
      message M38 {
        optional string f_0 = 1;
        optional string f_1 = 6;
        optional fixed64 f_2 = 8;
        optional fixed32 f_3 = 9;
        message M43 {
          optional string f_0 = 1;
          message M52 {
            optional int32 f_0 = 1;
            optional double f_1 = 2;
            optional fixed64 f_2 = 4;
            optional fixed64 f_3 = 5;
            optional string f_4 = 6;
            optional string f_5 = 8;
            optional fixed64 f_6 = 9;
            optional fixed64 f_7 = 10;
            optional string f_8 = 11;
            optional double f_9 = 12;
            optional bool f_10 = 13;
            optional string f_11 = 14;
            optional fixed64 f_12 = 15;
            optional string f_13 = 17;
            optional bool f_14 = 18;
            optional string f_15 = 20;
            optional string f_16 = 24;
            optional fixed64 f_17 = 25;
            optional fixed64 f_18 = 26;
            optional fixed64 f_19 = 28;
            optional fixed64 f_20 = 31;
            optional string f_21 = 32;
            optional int32 f_22 = 34;
            optional string f_23 = 35;
            optional string f_24 = 36;
            optional fixed32 f_25 = 37;
            optional fixed64 f_26 = 38;
            optional fixed64 f_27 = 40;
            optional fixed64 f_28 = 41;
            enum E6 {
              E6_UNSPECIFIED = 0;
              E6_CONST_1 = 60;
              E6_CONST_2 = 48;
              E6_CONST_3 = 76;
              E6_CONST_4 = 116;
              E6_CONST_5 = 113;
            }
            optional E6 f_29 = 42;
            optional double f_30 = 44;
          }
          optional M52 f_2 = 2;
        }
        repeated M43 f_10 = 10;
        message M45 {
          optional int32 f_0 = 1;
          message M51 {
            optional int32 f_0 = 1;
          }
          optional M51 f_2 = 2;
        }
        repeated M45 f_12 = 12;
      }
      repeated M38 f_13 = 13;
    }
    optional M21 f_5 = 5;
  }
  repeated M4 f_50 = 50;
  message M5 {
    optional string f_0 = 2;
  }
  optional M5 f_52 = 52;
  message M6 {
    optional int32 f_0 = 1;
    optional string f_1 = 2;
    optional fixed32 f_2 = 5;
    optional int32 f_3 = 6;
    optional string f_4 = 7;
    optional int32 f_5 = 8;
    message M8 {
      optional string f_0 = 3;
      message M24 {
        optional string f_0 = 1;
      }
      repeated M24 f_4 = 4;
    }
    optional M8 f_9 = 9;
    message M18 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 3;
      message M40 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 4;
        message M50 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 2;
          optional int32 f_2 = 5;
          optional string f_3 = 6;
          optional int32 f_4 = 7;
          optional fixed64 f_5 = 10;
          optional fixed64 f_6 = 12;
          optional bool f_7 = 14;
          optional int32 f_8 = 15;
          optional fixed64 f_9 = 16;
          optional string f_10 = 18;
          optional string f_11 = 19;
          optional fixed64 f_12 = 20;
          optional fixed64 f_13 = 21;
          optional string f_14 = 22;
          optional double f_15 = 23;
          optional bool f_16 = 25;
          optional fixed64 f_17 = 27;
          optional string f_18 = 28;
          optional string f_19 = 29;
        }
        repeated M50 f_5 = 5;
      }
      optional M40 f_5 = 5;
    }
    optional M18 f_10 = 10;
    message M19 {
      optional string f_0 = 2;
    }
    optional M19 f_11 = 11;
  }
  repeated M6 f_53 = 53;
  message M7 {
    optional fixed64 f_0 = 1;
    optional fixed32 f_1 = 2;
    optional int32 f_2 = 5;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 99;
      E1_CONST_2 = 12;
      E1_CONST_3 = 55;
      E1_CONST_4 = 41;
      E1_CONST_5 = 71;
    }
    repeated E1 f_3 = 6 [packed = true];
    message M9 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional bool f_3 = 4;
      message M30 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 3;
      }
      repeated M30 f_5 = 5;
      message M35 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 3;
        optional double f_2 = 7;
        message M44 {
          optional int32 f_0 = 2;
        }
        optional M44 f_9 = 9;
      }
      optional M35 f_6 = 6;
    }
    repeated M9 f_7 = 7;
    message M15 {
      optional int32 f_0 = 1;
      message M39 {
        optional fixed64 f_0 = 2;
      }
      repeated M39 f_3 = 3;
    }
    optional M15 f_8 = 8;
    message M16 {
      optional fixed32 f_0 = 3;
      optional fixed64 f_1 = 4;
      message M28 {
        optional int32 f_0 = 1;
        message M49 {
          optional int32 f_0 = 2;
        }
        optional M49 f_4 = 4;
      }
      repeated M28 f_5 = 5;
      message M29 {
        optional bool f_0 = 1;
        optional double f_1 = 3;
      }
      repeated M29 f_6 = 6;
    }
    optional M16 f_9 = 9;
  }
  repeated M7 f_54 = 54;
}
