// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.request.Message1;

message Message1 {
  optional string f_0 = 1;
  optional bool f_1 = 2;
  optional int32 f_2 = 3;
  optional fixed32 f_3 = 5;
  optional string f_4 = 6;
  optional string f_5 = 7;
  optional fixed64 f_6 = 9;
  optional fixed32 f_7 = 10;
  optional int32 f_8 = 11;
  optional fixed32 f_9 = 13;
  optional fixed64 f_10 = 14;
  optional string f_11 = 18;
  optional string f_12 = 20;
  optional fixed32 f_13 = 21;
  optional double f_14 = 22;
  optional int32 f_15 = 23;
  optional int32 f_16 = 24;
  optional int32 f_17 = 26;
  optional fixed64 f_18 = 28;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 51;
    E1_CONST_2 = 93;
    E1_CONST_3 = 70;
    E1_CONST_4 = 121;
    E1_CONST_5 = 77;
  }
  optional E1 f_19 = 29;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 37;
    E2_CONST_2 = 57;
    E2_CONST_3 = 119;
    E2_CONST_4 = 27;
    E2_CONST_5 = 77;
  }
  repeated E2 f_20 = 32 [packed = true];
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 36;
    E3_CONST_2 = 27;
    E3_CONST_3 = 89;
    E3_CONST_4 = 86;
    E3_CONST_5 = 85;
  }
  optional E3 f_21 = 33;
  optional string f_22 = 34;
  optional int32 f_23 = 36;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 99;
    E4_CONST_2 = 5;
    E4_CONST_3 = 111;
    E4_CONST_4 = 78;
    E4_CONST_5 = 55;
  }
  optional E4 f_24 = 39;
  enum E5 {
    E5_UNSPECIFIED = 0;
    E5_CONST_1 = 78;
    E5_CONST_2 = 111;
    E5_CONST_3 = 47;
    E5_CONST_4 = 72;
    E5_CONST_5 = 101;
  }
  optional E5 f_25 = 42;
  optional string f_26 = 43;
  optional fixed64 f_27 = 44;
  optional fixed64 f_28 = 45;
  optional int32 f_29 = 47;
  message M1 {
    optional bool f_0 = 3;
    message M9 {
      optional fixed32 f_0 = 1;
      message M39 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 4;
        optional string f_2 = 6;
      }
      repeated M39 f_2 = 2;
      message M44 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 119;
          E18_CONST_2 = 98;
          E18_CONST_3 = 109;
          E18_CONST_4 = 114;
          E18_CONST_5 = 49;
        }
        repeated E18 f_3 = 4 [packed = true];
        message M55 {
          optional string f_0 = 2;
          optional fixed64 f_1 = 3;
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 46;
            E19_CONST_2 = 5;
            E19_CONST_3 = 82;
            E19_CONST_4 = 39;
            E19_CONST_5 = 102;
          }
          repeated E19 f_2 = 5 [packed = true];
          optional int32 f_3 = 8;
          optional int32 f_4 = 11;
          message M58 {
            optional string f_0 = 1;
            optional fixed64 f_1 = 2;
            optional string f_2 = 4;
            optional string f_3 = 5;
            optional fixed64 f_4 = 6;
            optional string f_5 = 7;
            optional int64 f_6 = 9;
          }
          optional M58 f_12 = 12;
        }
        optional M55 f_5 = 5;
      }
      optional M44 f_3 = 3;
    }
    repeated M9 f_4 = 4;
    message M10 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional string f_2 = 4;
      message M42 {
        optional int64 f_0 = 1;
      }
      optional M42 f_6 = 6;
    }
    optional M10 f_5 = 5;
    message M13 {
      optional fixed32 f_0 = 2;
    }
    repeated M13 f_6 = 6;
    message M15 {
      optional fixed64 f_0 = 3;
    }
    repeated M15 f_7 = 7;
    message M17 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 4;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 29;
        E8_CONST_2 = 97;
        E8_CONST_3 = 122;
        E8_CONST_4 = 123;
        E8_CONST_5 = 36;
      }
      repeated E8 f_3 = 6 [packed = true];
      optional fixed64 f_4 = 7;
      optional fixed32 f_5 = 8;
      optional int32 f_6 = 10;
    }
    repeated M17 f_8 = 8;
    message M28 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional bool f_2 = 4;
      optional string f_3 = 5;
    }
    optional M28 f_11 = 11;
  }
  optional M1 f_48 = 48;
  message M2 {
    optional fixed64 f_0 = 1;
    message M16 {
      optional fixed32 f_0 = 2;
    }
    optional M16 f_2 = 2;
    message M25 {
      optional string f_0 = 1;
      optional fixed32 f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 5;
    }
    optional M25 f_4 = 4;
  }
  repeated M2 f_51 = 51;
  message M3 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed32 f_2 = 4;
    optional string f_3 = 5;
    optional int32 f_4 = 6;
    message M12 {
      optional string f_0 = 2;
      message M40 {
        optional int32 f_0 = 1;
      }
      optional M40 f_3 = 3;
      message M41 {
        optional string f_0 = 1;
        optional string f_1 = 2;
        optional bool f_2 = 3;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 107;
          E17_CONST_2 = 114;
          E17_CONST_3 = 58;
          E17_CONST_4 = 32;
          E17_CONST_5 = 69;
        }
        repeated E17 f_3 = 4 [packed = true];
        optional fixed64 f_4 = 5;
        optional fixed64 f_5 = 6;
        message M51 {
          optional fixed64 f_0 = 1;
        }
        repeated M51 f_8 = 8;
      }
      optional M41 f_6 = 6;
    }
    repeated M12 f_7 = 7;
    message M31 {
      optional string f_0 = 1;
    }
    optional M31 f_8 = 8;
    message M34 {
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 61;
        E13_CONST_2 = 113;
        E13_CONST_3 = 58;
        E13_CONST_4 = 119;
        E13_CONST_5 = 54;
      }
      optional E13 f_0 = 2;
      optional string f_1 = 4;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 8;
        E14_CONST_2 = 88;
        E14_CONST_3 = 123;
        E14_CONST_4 = 47;
        E14_CONST_5 = 90;
      }
      optional E14 f_2 = 5;
      optional int32 f_3 = 7;
      optional fixed64 f_4 = 8;
      optional fixed64 f_5 = 9;
      optional int32 f_6 = 10;
      optional fixed32 f_7 = 11;
      optional int32 f_8 = 13;
      optional bool f_9 = 14;
      optional fixed64 f_10 = 15;
      optional string f_11 = 17;
      optional double f_12 = 18;
      optional string f_13 = 19;
      optional fixed64 f_14 = 22;
      optional fixed32 f_15 = 23;
      optional string f_16 = 24;
      optional string f_17 = 25;
      optional int32 f_18 = 27;
      optional string f_19 = 28;
      optional fixed64 f_20 = 29;
      optional string f_21 = 31;
      optional int32 f_22 = 32;
      optional bytes f_23 = 33;
      message M45 {
        optional int32 f_0 = 1;
        message M50 {
          optional fixed32 f_0 = 1;
          message M56 {
            optional fixed64 f_0 = 3;
          }
          optional M56 f_2 = 2;
        }
        repeated M50 f_2 = 2;
        message M53 {
          optional string f_0 = 3;
        }
        optional M53 f_3 = 3;
        message M54 {
          optional fixed64 f_0 = 3;
        }
        optional M54 f_5 = 5;
      }
      repeated M45 f_35 = 35;
    }
    repeated M34 f_9 = 9;
  }
  optional M3 f_53 = 53;
  message M4 {
    optional fixed64 f_0 = 1;
    optional bool f_1 = 4;
    optional double f_2 = 6;
    message M18 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 6;
      optional string f_4 = 7;
      optional int32 f_5 = 9;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 40;
        E9_CONST_2 = 71;
        E9_CONST_3 = 60;
        E9_CONST_4 = 12;
        E9_CONST_5 = 21;
      }
      repeated E9 f_6 = 10 [packed = true];
      optional fixed64 f_7 = 11;
      message M38 {
        optional string f_0 = 2;
        optional string f_1 = 3;
        optional fixed32 f_2 = 4;
        optional string f_3 = 6;
        optional fixed64 f_4 = 7;
      }
      optional M38 f_12 = 12;
    }
    optional M18 f_7 = 7;
    message M24 {
      optional string f_0 = 1;
      message M36 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 3;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 74;
          E15_CONST_2 = 95;
          E15_CONST_3 = 112;
          E15_CONST_4 = 3;
          E15_CONST_5 = 48;
        }
        repeated E15 f_2 = 5 [packed = true];
        optional string f_3 = 6;
      }
      optional M36 f_2 = 2;
    }
    optional M24 f_8 = 8;
    message M33 {
      optional fixed32 f_0 = 1;
    }
    optional M33 f_9 = 9;
  }
  repeated M4 f_55 = 55;
  message M5 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed64 f_2 = 3;
    message M11 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 90;
        E7_CONST_2 = 16;
        E7_CONST_3 = 54;
        E7_CONST_4 = 68;
        E7_CONST_5 = 4;
      }
      repeated E7 f_0 = 2 [packed = true];
    }
    optional M11 f_6 = 6;
    message M23 {
      optional fixed32 f_0 = 1;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 23;
        E11_CONST_2 = 124;
        E11_CONST_3 = 107;
        E11_CONST_4 = 52;
        E11_CONST_5 = 80;
      }
      optional E11 f_1 = 3;
      optional int32 f_2 = 4;
      message M46 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 3;
        message M49 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 2;
        }
        repeated M49 f_4 = 4;
        message M52 {
          optional fixed64 f_0 = 1;
        }
        optional M52 f_5 = 5;
      }
      optional M46 f_5 = 5;
    }
    optional M23 f_7 = 7;
    message M26 {
      optional fixed64 f_0 = 1;
    }
    repeated M26 f_8 = 8;
    message M27 {
      optional int32 f_0 = 1;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 119;
        E12_CONST_2 = 19;
        E12_CONST_3 = 46;
        E12_CONST_4 = 126;
        E12_CONST_5 = 87;
      }
      optional E12 f_1 = 3;
      optional int32 f_2 = 6;
      optional fixed64 f_3 = 7;
      optional fixed64 f_4 = 8;
    }
    optional M27 f_10 = 10;
    message M29 {
      optional int32 f_0 = 1;
    }
    optional M29 f_11 = 11;
  }
  optional M5 f_58 = 58;
  message M6 {
    optional string f_0 = 1;
    message M30 {
      optional int32 f_0 = 1;
    }
    optional M30 f_3 = 3;
    message M32 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 4;
    }
    optional M32 f_4 = 4;
  }
  optional M6 f_59 = 59;
  message M7 {
    optional fixed32 f_0 = 2;
    optional fixed64 f_1 = 3;
    message M14 {
      optional string f_0 = 1;
    }
    optional M14 f_4 = 4;
    message M19 {
      optional fixed64 f_0 = 1;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 5;
        E10_CONST_2 = 122;
        E10_CONST_3 = 63;
        E10_CONST_4 = 15;
        E10_CONST_5 = 109;
      }
      repeated E10 f_1 = 3 [packed = true];
      optional string f_2 = 4;
      optional int32 f_3 = 6;
      optional fixed64 f_4 = 7;
      optional string f_5 = 8;
      message M35 {
        optional int32 f_0 = 2;
        optional string f_1 = 4;
        optional double f_2 = 5;
        optional fixed64 f_3 = 6;
        optional string f_4 = 7;
        message M48 {
          optional int32 f_0 = 1;
          optional string f_1 = 2;
        }
        repeated M48 f_9 = 9;
      }
      optional M35 f_10 = 10;
    }
    optional M19 f_5 = 5;
    message M22 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 4;
      message M37 {
        optional fixed32 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional string f_2 = 4;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 30;
          E16_CONST_2 = 8;
          E16_CONST_3 = 75;
          E16_CONST_4 = 48;
          E16_CONST_5 = 78;
        }
        repeated E16 f_3 = 6 [packed = true];
        message M47 {
          optional fixed64 f_0 = 2;
          optional int32 f_1 = 3;
          optional double f_2 = 4;
          optional bool f_3 = 5;
          optional bool f_4 = 6;
          optional int32 f_5 = 8;
          optional fixed64 f_6 = 9;
          optional int32 f_7 = 12;
          message M57 {
            optional string f_0 = 1;
            optional string f_1 = 2;
            optional double f_2 = 4;
            optional string f_3 = 5;
            optional string f_4 = 6;
          }
          optional M57 f_14 = 14;
        }
        optional M47 f_7 = 7;
      }
      repeated M37 f_5 = 5;
    }
    optional M22 f_6 = 6;
  }
  repeated M7 f_60 = 60;
  message M8 {
    optional int32 f_0 = 2;
    optional fixed32 f_1 = 3;
    optional int32 f_2 = 4;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 58;
      E6_CONST_2 = 71;
      E6_CONST_3 = 30;
      E6_CONST_4 = 43;
      E6_CONST_5 = 18;
    }
    optional E6 f_3 = 5;
    message M20 {
      optional int32 f_0 = 2;
      optional bool f_1 = 3;
      optional bytes f_2 = 4;
      message M43 {
        optional int32 f_0 = 4;
        optional fixed64 f_1 = 5;
      }
      optional M43 f_5 = 5;
    }
    optional M20 f_7 = 7;
    message M21 {
      optional int32 f_0 = 1;
    }
    optional M21 f_8 = 8;
  }
  repeated M8 f_62 = 62;
}
