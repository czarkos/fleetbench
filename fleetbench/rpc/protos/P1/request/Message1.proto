// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.request.Message1;

message Message1 {
  optional fixed64 f_0 = 3;
  optional bool f_1 = 5;
  optional fixed64 f_2 = 6;
  optional string f_3 = 7;
  optional int32 f_4 = 8;
  optional int32 f_5 = 10;
  optional string f_6 = 11;
  optional int32 f_7 = 12;
  optional string f_8 = 13;
  optional int32 f_9 = 14;
  optional double f_10 = 15;
  optional string f_11 = 17;
  optional int32 f_12 = 19;
  optional fixed64 f_13 = 21;
  optional string f_14 = 23;
  optional string f_15 = 24;
  optional string f_16 = 25;
  optional bool f_17 = 27;
  optional string f_18 = 28;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 47;
    E1_CONST_2 = 49;
    E1_CONST_3 = 56;
    E1_CONST_4 = 10;
    E1_CONST_5 = 46;
  }
  optional E1 f_19 = 30;
  optional int32 f_20 = 31;
  optional int32 f_21 = 33;
  optional bool f_22 = 35;
  optional int32 f_23 = 36;
  optional fixed64 f_24 = 38;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 79;
    E2_CONST_2 = 81;
    E2_CONST_3 = 43;
    E2_CONST_4 = 63;
    E2_CONST_5 = 39;
  }
  repeated E2 f_25 = 40 [packed = true];
  optional fixed64 f_26 = 41;
  optional int32 f_27 = 42;
  optional string f_28 = 44;
  optional fixed64 f_29 = 45;
  message M1 {
    optional string f_0 = 1;
    optional double f_1 = 2;
    optional int32 f_2 = 3;
    optional fixed64 f_3 = 4;
    optional fixed64 f_4 = 6;
    optional fixed64 f_5 = 7;
    optional fixed32 f_6 = 9;
    optional bool f_7 = 10;
    optional fixed32 f_8 = 12;
    optional string f_9 = 13;
    optional fixed64 f_10 = 14;
    optional string f_11 = 15;
    optional int32 f_12 = 19;
    optional fixed32 f_13 = 20;
    optional fixed64 f_14 = 21;
    optional string f_15 = 23;
    optional string f_16 = 24;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 111;
      E3_CONST_2 = 63;
      E3_CONST_3 = 109;
      E3_CONST_4 = 108;
      E3_CONST_5 = 97;
    }
    optional E3 f_17 = 26;
    optional fixed64 f_18 = 28;
    optional bool f_19 = 30;
    optional fixed64 f_20 = 32;
    optional fixed32 f_21 = 34;
    optional fixed64 f_22 = 35;
    optional fixed32 f_23 = 38;
    optional fixed64 f_24 = 39;
    optional fixed64 f_25 = 41;
    optional int32 f_26 = 42;
    optional fixed32 f_27 = 44;
    optional fixed64 f_28 = 46;
    optional string f_29 = 48;
    optional int32 f_30 = 50;
    optional int32 f_31 = 51;
    message M2 {
      optional fixed64 f_0 = 1;
      message M31 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 53;
          E8_CONST_2 = 88;
          E8_CONST_3 = 46;
          E8_CONST_4 = 125;
          E8_CONST_5 = 118;
        }
        optional E8 f_0 = 1;
        message M39 {
          optional fixed64 f_0 = 1;
        }
        optional M39 f_2 = 2;
      }
      optional M31 f_2 = 2;
      message M36 {
        optional double f_0 = 1;
        message M45 {
          enum E10 {
            E10_UNSPECIFIED = 0;
            E10_CONST_1 = 108;
            E10_CONST_2 = 125;
            E10_CONST_3 = 32;
            E10_CONST_4 = 72;
            E10_CONST_5 = 38;
          }
          repeated E10 f_0 = 2 [packed = true];
        }
        optional M45 f_2 = 2;
      }
      optional M36 f_4 = 4;
    }
    optional M2 f_52 = 52;
    message M3 {
      optional fixed32 f_0 = 1;
      message M29 {
        optional int32 f_0 = 1;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 37;
          E7_CONST_2 = 100;
          E7_CONST_3 = 84;
          E7_CONST_4 = 115;
          E7_CONST_5 = 58;
        }
        repeated E7 f_1 = 2 [packed = true];
        optional string f_2 = 3;
        optional bool f_3 = 5;
        optional int32 f_4 = 7;
        message M47 {
          optional int32 f_0 = 1;
          optional bool f_1 = 2;
          optional fixed32 f_2 = 4;
          optional int32 f_3 = 6;
          optional fixed32 f_4 = 7;
          optional bool f_5 = 10;
          optional int32 f_6 = 11;
        }
        optional M47 f_8 = 8;
      }
      optional M29 f_2 = 2;
    }
    optional M3 f_53 = 53;
    message M4 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 27;
        E4_CONST_2 = 35;
        E4_CONST_3 = 68;
        E4_CONST_4 = 83;
        E4_CONST_5 = 76;
      }
      repeated E4 f_0 = 1 [packed = true];
    }
    optional M4 f_54 = 54;
    message M5 {
      optional string f_0 = 2;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional string f_3 = 5;
      optional fixed64 f_4 = 6;
      optional fixed64 f_5 = 7;
      optional int32 f_6 = 8;
      optional int32 f_7 = 10;
      optional int32 f_8 = 11;
      optional fixed64 f_9 = 13;
      optional string f_10 = 14;
      optional double f_11 = 15;
      optional string f_12 = 17;
      optional string f_13 = 18;
      optional int32 f_14 = 19;
      optional int32 f_15 = 20;
      optional bool f_16 = 21;
      optional fixed32 f_17 = 22;
    }
    optional M5 f_55 = 55;
    message M6 {
      optional fixed64 f_0 = 1;
      message M24 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 3;
      }
      optional M24 f_2 = 2;
    }
    optional M6 f_56 = 56;
    message M7 {
      optional int32 f_0 = 2;
      message M33 {
        optional string f_0 = 1;
        message M46 {
          enum E11 {
            E11_UNSPECIFIED = 0;
            E11_CONST_1 = 120;
            E11_CONST_2 = 125;
            E11_CONST_3 = 49;
            E11_CONST_4 = 46;
            E11_CONST_5 = 1;
          }
          repeated E11 f_0 = 1 [packed = true];
          optional fixed64 f_1 = 3;
          optional int32 f_2 = 4;
          optional string f_3 = 5;
          optional string f_4 = 6;
          enum E12 {
            E12_UNSPECIFIED = 0;
            E12_CONST_1 = 33;
            E12_CONST_2 = 39;
            E12_CONST_3 = 5;
            E12_CONST_4 = 97;
            E12_CONST_5 = 26;
          }
          repeated E12 f_5 = 7 [packed = true];
        }
        optional M46 f_3 = 3;
      }
      optional M33 f_3 = 3;
    }
    optional M7 f_57 = 57;
    message M8 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 4;
      optional bool f_2 = 6;
      optional bool f_3 = 8;
      message M23 {
        optional string f_0 = 2;
      }
      optional M23 f_9 = 9;
    }
    optional M8 f_58 = 58;
    message M9 {
      optional fixed64 f_0 = 1;
    }
    optional M9 f_59 = 59;
    message M10 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional bool f_2 = 5;
      optional fixed32 f_3 = 6;
      message M25 {
        optional int32 f_0 = 1;
        message M37 {
          enum E9 {
            E9_UNSPECIFIED = 0;
            E9_CONST_1 = 69;
            E9_CONST_2 = 103;
            E9_CONST_3 = 41;
            E9_CONST_4 = 56;
            E9_CONST_5 = 63;
          }
          repeated E9 f_0 = 1 [packed = true];
        }
        optional M37 f_4 = 4;
        message M42 {
          optional fixed64 f_0 = 2;
        }
        optional M42 f_5 = 5;
        message M44 {
          optional double f_0 = 2;
        }
        optional M44 f_7 = 7;
      }
      optional M25 f_7 = 7;
    }
    optional M10 f_60 = 60;
    message M11 {
      optional string f_0 = 2;
    }
    optional M11 f_62 = 62;
    message M12 {
      optional fixed64 f_0 = 1;
    }
    optional M12 f_63 = 63;
    message M13 {
      optional bool f_0 = 4;
      message M35 {
        optional int32 f_0 = 2;
      }
      optional M35 f_5 = 5;
    }
    optional M13 f_64 = 64;
    message M14 {
      optional fixed64 f_0 = 3;
      message M34 {
        optional fixed64 f_0 = 3;
        message M38 {
          optional fixed64 f_0 = 1;
        }
        optional M38 f_4 = 4;
      }
      optional M34 f_5 = 5;
    }
    optional M14 f_65 = 65;
    message M15 {
      optional bool f_0 = 3;
    }
    optional M15 f_66 = 66;
    message M16 {
      optional string f_0 = 3;
    }
    optional M16 f_67 = 67;
    message M17 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional bool f_2 = 3;
      optional bool f_3 = 4;
      optional fixed64 f_4 = 6;
      optional int32 f_5 = 9;
      optional fixed64 f_6 = 11;
    }
    optional M17 f_69 = 69;
    message M18 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 48;
        E5_CONST_2 = 18;
        E5_CONST_3 = 90;
        E5_CONST_4 = 34;
        E5_CONST_5 = 58;
      }
      optional E5 f_0 = 1;
      optional int32 f_1 = 4;
      optional fixed64 f_2 = 6;
      optional fixed64 f_3 = 7;
    }
    optional M18 f_71 = 71;
    message M19 {
      optional string f_0 = 1;
      message M27 {
        optional int32 f_0 = 1;
        optional string f_1 = 3;
        message M40 {
          optional int32 f_0 = 1;
        }
        optional M40 f_4 = 4;
      }
      optional M27 f_2 = 2;
      message M28 {
        optional fixed64 f_0 = 3;
        optional double f_1 = 4;
        optional int32 f_2 = 7;
      }
      optional M28 f_4 = 4;
    }
    optional M19 f_72 = 72;
    message M20 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 99;
        E6_CONST_2 = 18;
        E6_CONST_3 = 15;
        E6_CONST_4 = 67;
        E6_CONST_5 = 112;
      }
      repeated E6 f_0 = 2 [packed = true];
      optional string f_1 = 3;
      optional string f_2 = 5;
      optional fixed64 f_3 = 7;
    }
    optional M20 f_73 = 73;
    message M21 {
      optional int32 f_0 = 2;
      optional string f_1 = 4;
      message M32 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 3;
        optional fixed64 f_2 = 6;
        message M41 {
          optional int32 f_0 = 1;
        }
        optional M41 f_7 = 7;
      }
      optional M32 f_5 = 5;
    }
    optional M21 f_74 = 74;
    message M22 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      message M26 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 5;
        message M43 {
          optional int32 f_0 = 1;
          message M48 {
            optional bool f_0 = 2;
            enum E13 {
              E13_UNSPECIFIED = 0;
              E13_CONST_1 = 12;
              E13_CONST_2 = 71;
              E13_CONST_3 = 101;
              E13_CONST_4 = 72;
              E13_CONST_5 = 11;
            }
            repeated E13 f_1 = 4 [packed = true];
            optional string f_2 = 6;
            optional string f_3 = 7;
            optional fixed64 f_4 = 8;
            optional fixed64 f_5 = 9;
            enum E14 {
              E14_UNSPECIFIED = 0;
              E14_CONST_1 = 75;
              E14_CONST_2 = 5;
              E14_CONST_3 = 94;
              E14_CONST_4 = 15;
              E14_CONST_5 = 83;
            }
            repeated E14 f_6 = 10 [packed = true];
            optional string f_7 = 11;
            optional fixed32 f_8 = 12;
            optional int32 f_9 = 13;
            optional string f_10 = 15;
            optional fixed64 f_11 = 17;
          }
          optional M48 f_3 = 3;
        }
        optional M43 f_6 = 6;
      }
      optional M26 f_3 = 3;
      message M30 {
        optional int32 f_0 = 1;
      }
      optional M30 f_4 = 4;
    }
    optional M22 f_76 = 76;
  }
  optional M1 f_46 = 46;
}
