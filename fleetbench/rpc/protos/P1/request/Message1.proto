// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.request.Message1;

message Message1 {
  optional int32 f_0 = 1;
  optional bool f_1 = 2;
  optional fixed64 f_2 = 3;
  optional bool f_3 = 4;
  optional fixed64 f_4 = 5;
  optional string f_5 = 6;
  optional fixed64 f_6 = 7;
  optional fixed64 f_7 = 9;
  optional string f_8 = 10;
  optional fixed64 f_9 = 11;
  optional fixed64 f_10 = 13;
  optional int32 f_11 = 14;
  optional bool f_12 = 15;
  optional fixed32 f_13 = 16;
  optional string f_14 = 17;
  optional bytes f_15 = 18;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 42;
    E1_CONST_2 = 89;
    E1_CONST_3 = 84;
    E1_CONST_4 = 66;
    E1_CONST_5 = 102;
  }
  repeated E1 f_16 = 19 [packed = true];
  optional string f_17 = 20;
  optional fixed64 f_18 = 22;
  optional int32 f_19 = 23;
  optional int32 f_20 = 25;
  optional fixed32 f_21 = 29;
  optional fixed64 f_22 = 30;
  optional int32 f_23 = 31;
  optional fixed64 f_24 = 33;
  optional int32 f_25 = 36;
  optional double f_26 = 37;
  optional fixed64 f_27 = 39;
  optional string f_28 = 40;
  optional fixed64 f_29 = 41;
  message M1 {
    optional fixed64 f_0 = 1;
    message M16 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 5;
      optional bool f_4 = 7;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 61;
        E4_CONST_2 = 12;
        E4_CONST_3 = 89;
        E4_CONST_4 = 100;
        E4_CONST_5 = 126;
      }
      repeated E4 f_5 = 8 [packed = true];
      optional fixed64 f_6 = 9;
      optional int32 f_7 = 11;
      optional string f_8 = 12;
      optional string f_9 = 14;
      optional fixed32 f_10 = 15;
      optional fixed64 f_11 = 16;
      optional double f_12 = 18;
      optional int32 f_13 = 20;
      optional int32 f_14 = 21;
      optional string f_15 = 22;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 109;
        E5_CONST_2 = 50;
        E5_CONST_3 = 75;
        E5_CONST_4 = 120;
        E5_CONST_5 = 91;
      }
      repeated E5 f_16 = 23 [packed = true];
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 76;
        E6_CONST_2 = 4;
        E6_CONST_3 = 66;
        E6_CONST_4 = 102;
        E6_CONST_5 = 16;
      }
      optional E6 f_17 = 24;
      optional string f_18 = 25;
      optional fixed64 f_19 = 27;
      optional fixed64 f_20 = 28;
      optional double f_21 = 30;
      optional fixed32 f_22 = 31;
      optional fixed64 f_23 = 32;
      optional string f_24 = 33;
      optional string f_25 = 35;
      optional fixed64 f_26 = 36;
      optional string f_27 = 37;
      optional int64 f_28 = 39;
      optional string f_29 = 40;
      optional fixed64 f_30 = 41;
      message M23 {
        optional int32 f_0 = 2;
      }
      repeated M23 f_42 = 42;
      message M26 {
        optional bool f_0 = 1;
        optional string f_1 = 2;
        optional fixed64 f_2 = 4;
      }
      optional M26 f_43 = 43;
      message M30 {
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 99;
          E9_CONST_2 = 25;
          E9_CONST_3 = 84;
          E9_CONST_4 = 102;
          E9_CONST_5 = 107;
        }
        repeated E9 f_0 = 2 [packed = true];
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 122;
          E10_CONST_2 = 91;
          E10_CONST_3 = 4;
          E10_CONST_4 = 26;
          E10_CONST_5 = 55;
        }
        repeated E10 f_1 = 3 [packed = true];
        optional int32 f_2 = 5;
        optional int32 f_3 = 6;
        optional bytes f_4 = 7;
        optional int32 f_5 = 8;
        optional fixed64 f_6 = 9;
        optional fixed64 f_7 = 11;
        optional fixed64 f_8 = 12;
        optional bool f_9 = 13;
        optional bool f_10 = 15;
        optional fixed64 f_11 = 16;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 107;
          E11_CONST_2 = 119;
          E11_CONST_3 = 42;
          E11_CONST_4 = 51;
          E11_CONST_5 = 61;
        }
        repeated E11 f_12 = 17 [packed = true];
        optional int32 f_13 = 21;
        optional fixed32 f_14 = 22;
        optional int32 f_15 = 23;
        optional bool f_16 = 25;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 125;
          E12_CONST_2 = 16;
          E12_CONST_3 = 26;
          E12_CONST_4 = 75;
          E12_CONST_5 = 4;
        }
        repeated E12 f_17 = 26 [packed = true];
        optional int32 f_18 = 27;
        repeated string f_19 = 29;
        optional int32 f_20 = 30;
        optional string f_21 = 31;
        optional fixed32 f_22 = 32;
        optional int32 f_23 = 34;
        optional fixed64 f_24 = 36;
        optional int32 f_25 = 37;
        optional fixed64 f_26 = 38;
        optional fixed64 f_27 = 39;
        optional fixed64 f_28 = 42;
        optional int32 f_29 = 44;
        optional int32 f_30 = 46;
        optional int32 f_31 = 47;
      }
      repeated M30 f_44 = 44;
    }
    optional M16 f_2 = 2;
  }
  repeated M1 f_42 = 42;
  message M2 {
    optional fixed64 f_0 = 2;
  }
  optional M2 f_43 = 43;
  message M3 {
    optional fixed64 f_0 = 1;
    optional bool f_1 = 3;
    message M12 {
      optional fixed32 f_0 = 2;
      message M27 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
        optional fixed64 f_2 = 3;
      }
      optional M27 f_3 = 3;
    }
    repeated M12 f_4 = 4;
  }
  optional M3 f_44 = 44;
  message M4 {
    optional double f_0 = 1;
    optional string f_1 = 3;
    message M15 {
      optional string f_0 = 1;
    }
    optional M15 f_5 = 5;
  }
  repeated M4 f_45 = 45;
  message M5 {
    optional double f_0 = 4;
    optional int32 f_1 = 6;
    optional int32 f_2 = 7;
    message M11 {
      optional double f_0 = 1;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 124;
        E3_CONST_2 = 52;
        E3_CONST_3 = 101;
        E3_CONST_4 = 126;
        E3_CONST_5 = 81;
      }
      repeated E3 f_1 = 2 [packed = true];
      optional bytes f_2 = 6;
      message M21 {
        optional double f_0 = 1;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 64;
          E8_CONST_2 = 117;
          E8_CONST_3 = 100;
          E8_CONST_4 = 69;
          E8_CONST_5 = 115;
        }
        repeated E8 f_1 = 2 [packed = true];
      }
      repeated M21 f_7 = 7;
      message M24 {
        optional fixed64 f_0 = 1;
      }
      optional M24 f_9 = 9;
    }
    repeated M11 f_8 = 8;
  }
  optional M5 f_46 = 46;
  message M6 {
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 6;
      E2_CONST_2 = 62;
      E2_CONST_3 = 88;
      E2_CONST_4 = 125;
      E2_CONST_5 = 9;
    }
    repeated E2 f_0 = 1 [packed = true];
    optional string f_1 = 3;
  }
  repeated M6 f_47 = 47;
  message M7 {
    optional fixed64 f_0 = 2;
    message M14 {
      optional string f_0 = 1;
      message M18 {
        optional fixed64 f_0 = 1;
        message M31 {
          optional int64 f_0 = 2;
          optional fixed32 f_1 = 3;
          optional bool f_2 = 4;
          optional fixed64 f_3 = 6;
          optional fixed32 f_4 = 7;
          message M34 {
            optional string f_0 = 1;
          }
          repeated M34 f_9 = 9;
          message M35 {
            optional int32 f_0 = 1;
          }
          repeated M35 f_12 = 12;
          message M36 {
            optional fixed64 f_0 = 1;
            optional fixed64 f_1 = 2;
          }
          optional M36 f_13 = 13;
        }
        optional M31 f_3 = 3;
      }
      optional M18 f_2 = 2;
      message M19 {
        optional double f_0 = 2;
        optional string f_1 = 4;
        optional string f_2 = 5;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 41;
          E7_CONST_2 = 1;
          E7_CONST_3 = 11;
          E7_CONST_4 = 44;
          E7_CONST_5 = 82;
        }
        repeated E7 f_3 = 6 [packed = true];
      }
      optional M19 f_3 = 3;
      message M25 {
        optional fixed64 f_0 = 3;
        optional bool f_1 = 4;
      }
      optional M25 f_4 = 4;
      message M28 {
        optional string f_0 = 1;
      }
      optional M28 f_5 = 5;
      message M29 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
      }
      optional M29 f_7 = 7;
    }
    optional M14 f_5 = 5;
  }
  repeated M7 f_48 = 48;
  message M8 {
    optional int32 f_0 = 3;
    message M13 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional bool f_2 = 4;
      optional fixed32 f_3 = 7;
      optional double f_4 = 9;
      optional string f_5 = 12;
      optional fixed64 f_6 = 13;
      optional double f_7 = 14;
      optional int32 f_8 = 17;
      optional fixed64 f_9 = 18;
      optional string f_10 = 19;
      optional fixed64 f_11 = 21;
      optional string f_12 = 22;
      optional fixed64 f_13 = 23;
      optional bool f_14 = 25;
      optional int32 f_15 = 26;
      optional fixed64 f_16 = 27;
      optional string f_17 = 28;
      optional double f_18 = 30;
      optional fixed32 f_19 = 31;
      optional bool f_20 = 32;
      optional fixed32 f_21 = 33;
      optional int32 f_22 = 35;
      optional string f_23 = 36;
      optional string f_24 = 38;
      optional bool f_25 = 39;
      optional string f_26 = 42;
      optional fixed64 f_27 = 44;
      optional fixed64 f_28 = 45;
      optional string f_29 = 47;
      optional fixed32 f_30 = 48;
      message M17 {
        optional int32 f_0 = 1;
        message M32 {
          optional string f_0 = 1;
          optional int32 f_1 = 2;
          optional fixed64 f_2 = 4;
          optional fixed64 f_3 = 5;
          optional fixed64 f_4 = 6;
          optional fixed64 f_5 = 8;
          optional fixed32 f_6 = 10;
          optional fixed64 f_7 = 12;
          optional int32 f_8 = 13;
          optional fixed64 f_9 = 14;
          optional fixed64 f_10 = 15;
          optional string f_11 = 16;
          optional int32 f_12 = 17;
          optional bool f_13 = 18;
          optional string f_14 = 19;
          optional fixed64 f_15 = 20;
          optional int32 f_16 = 21;
          optional string f_17 = 24;
          optional fixed64 f_18 = 25;
          optional fixed32 f_19 = 27;
          optional int32 f_20 = 31;
          optional fixed64 f_21 = 32;
          optional int32 f_22 = 33;
          optional double f_23 = 34;
          optional string f_24 = 35;
          optional string f_25 = 36;
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 12;
            E13_CONST_2 = 59;
            E13_CONST_3 = 100;
            E13_CONST_4 = 111;
            E13_CONST_5 = 38;
          }
          repeated E13 f_26 = 37 [packed = true];
          optional string f_27 = 38;
          optional bool f_28 = 39;
          optional double f_29 = 41;
          optional fixed32 f_30 = 42;
          optional string f_31 = 43;
          message M33 {
            optional string f_0 = 1;
            optional bool f_1 = 3;
            optional string f_2 = 4;
            enum E14 {
              E14_UNSPECIFIED = 0;
              E14_CONST_1 = 4;
              E14_CONST_2 = 101;
              E14_CONST_3 = 79;
              E14_CONST_4 = 78;
              E14_CONST_5 = 62;
            }
            repeated E14 f_3 = 5 [packed = true];
          }
          repeated M33 f_44 = 44;
        }
        repeated M32 f_2 = 2;
      }
      optional M17 f_50 = 50;
      message M20 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
        optional int32 f_2 = 4;
      }
      optional M20 f_52 = 52;
      message M22 {
        optional bool f_0 = 2;
        optional fixed64 f_1 = 5;
        optional fixed64 f_2 = 6;
      }
      repeated M22 f_53 = 53;
    }
    repeated M13 f_4 = 4;
  }
  optional M8 f_49 = 49;
  message M9 {
    optional int32 f_0 = 1;
  }
  repeated M9 f_51 = 51;
  message M10 {
    optional string f_0 = 3;
    optional bytes f_1 = 6;
    optional string f_2 = 7;
    optional int32 f_3 = 8;
    optional fixed64 f_4 = 9;
    optional string f_5 = 11;
  }
  optional M10 f_54 = 54;
}
