// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.request.Message2;

message Message2 {
  optional int32 f_0 = 1;
  optional int32 f_1 = 2;
  optional fixed64 f_2 = 3;
  optional string f_3 = 4;
  optional string f_4 = 5;
  optional fixed64 f_5 = 6;
  optional bool f_6 = 10;
  optional fixed64 f_7 = 12;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 110;
    E1_CONST_2 = 60;
    E1_CONST_3 = 105;
    E1_CONST_4 = 64;
    E1_CONST_5 = 65;
  }
  repeated E1 f_8 = 13 [packed = true];
  optional string f_9 = 14;
  optional string f_10 = 16;
  optional string f_11 = 17;
  optional fixed64 f_12 = 19;
  optional fixed64 f_13 = 20;
  optional string f_14 = 24;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 8;
    E2_CONST_2 = 118;
    E2_CONST_3 = 41;
    E2_CONST_4 = 92;
    E2_CONST_5 = 4;
  }
  optional E2 f_15 = 26;
  optional string f_16 = 27;
  optional fixed64 f_17 = 30;
  optional string f_18 = 31;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 108;
    E3_CONST_2 = 102;
    E3_CONST_3 = 79;
    E3_CONST_4 = 34;
    E3_CONST_5 = 8;
  }
  repeated E3 f_19 = 34 [packed = true];
  optional fixed64 f_20 = 37;
  optional int32 f_21 = 38;
  optional fixed64 f_22 = 40;
  optional fixed32 f_23 = 41;
  optional string f_24 = 42;
  optional fixed64 f_25 = 44;
  optional int32 f_26 = 46;
  optional fixed64 f_27 = 48;
  optional string f_28 = 49;
  optional string f_29 = 50;
  message M1 {
    optional string f_0 = 2;
    message M20 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 47;
        E7_CONST_2 = 43;
        E7_CONST_3 = 55;
        E7_CONST_4 = 114;
        E7_CONST_5 = 86;
      }
      repeated E7 f_0 = 2 [packed = true];
      message M28 {
        optional string f_0 = 4;
      }
      optional M28 f_4 = 4;
    }
    optional M20 f_3 = 3;
  }
  optional M1 f_51 = 51;
  message M2 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 116;
      E4_CONST_2 = 47;
      E4_CONST_3 = 63;
      E4_CONST_4 = 76;
      E4_CONST_5 = 87;
    }
    repeated E4 f_0 = 1 [packed = true];
  }
  optional M2 f_52 = 52;
  message M3 {
    optional bool f_0 = 1;
    message M16 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 4;
      message M24 {
        optional fixed64 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 6;
        message M36 {
          optional int32 f_0 = 2;
        }
        optional M36 f_9 = 9;
      }
      optional M24 f_5 = 5;
      message M25 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 6;
        optional int32 f_3 = 8;
      }
      optional M25 f_6 = 6;
      message M27 {
        optional fixed32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional string f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed64 f_4 = 5;
      }
      optional M27 f_9 = 9;
      message M31 {
        optional fixed64 f_0 = 2;
      }
      optional M31 f_10 = 10;
    }
    optional M16 f_4 = 4;
  }
  optional M3 f_54 = 54;
  message M4 {
    optional bool f_0 = 2;
    message M15 {
      optional fixed64 f_0 = 2;
      message M26 {
        optional int32 f_0 = 2;
        optional string f_1 = 4;
        optional fixed64 f_2 = 6;
        message M38 {
          optional double f_0 = 1;
          optional fixed32 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional string f_3 = 4;
          enum E10 {
            E10_UNSPECIFIED = 0;
            E10_CONST_1 = 56;
            E10_CONST_2 = 41;
            E10_CONST_3 = 71;
            E10_CONST_4 = 32;
            E10_CONST_5 = 120;
          }
          optional E10 f_4 = 6;
          optional fixed32 f_5 = 7;
        }
        optional M38 f_8 = 8;
      }
      optional M26 f_3 = 3;
      message M29 {
        optional int32 f_0 = 3;
        optional int32 f_1 = 4;
        message M35 {
          enum E9 {
            E9_UNSPECIFIED = 0;
            E9_CONST_1 = 94;
            E9_CONST_2 = 98;
            E9_CONST_3 = 74;
            E9_CONST_4 = 63;
            E9_CONST_5 = 5;
          }
          repeated E9 f_0 = 1 [packed = true];
          optional int32 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional string f_3 = 5;
          message M40 {
            optional int32 f_0 = 1;
          }
          optional M40 f_6 = 6;
          message M44 {
            optional bool f_0 = 2;
            optional fixed64 f_1 = 3;
          }
          optional M44 f_9 = 9;
          message M45 {
            optional bool f_0 = 3;
          }
          optional M45 f_10 = 10;
        }
        optional M35 f_5 = 5;
        message M37 {
          optional int32 f_0 = 2;
          optional fixed64 f_1 = 3;
          optional int32 f_2 = 4;
          optional int32 f_3 = 6;
          optional fixed64 f_4 = 7;
          optional string f_5 = 8;
          message M41 {
            optional string f_0 = 1;
            enum E11 {
              E11_UNSPECIFIED = 0;
              E11_CONST_1 = 85;
              E11_CONST_2 = 49;
              E11_CONST_3 = 73;
              E11_CONST_4 = 117;
              E11_CONST_5 = 76;
            }
            repeated E11 f_1 = 2 [packed = true];
            optional bool f_2 = 3;
            optional fixed64 f_3 = 4;
          }
          optional M41 f_9 = 9;
          message M42 {
            optional string f_0 = 2;
          }
          optional M42 f_11 = 11;
        }
        optional M37 f_6 = 6;
      }
      optional M29 f_4 = 4;
    }
    optional M15 f_4 = 4;
  }
  optional M4 f_56 = 56;
  message M5 {
    optional string f_0 = 2;
    message M14 {
      optional int32 f_0 = 1;
    }
    optional M14 f_3 = 3;
  }
  optional M5 f_57 = 57;
  message M6 {
    optional string f_0 = 1;
  }
  optional M6 f_58 = 58;
  message M7 {
    optional fixed32 f_0 = 1;
  }
  optional M7 f_59 = 59;
  message M8 {
    optional fixed32 f_0 = 1;
    message M23 {
      optional fixed32 f_0 = 2;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 5;
      optional string f_3 = 6;
      optional fixed64 f_4 = 7;
      optional fixed64 f_5 = 10;
      optional fixed64 f_6 = 11;
      optional fixed64 f_7 = 12;
      optional fixed64 f_8 = 14;
      optional string f_9 = 15;
      optional double f_10 = 19;
      optional fixed64 f_11 = 20;
      optional string f_12 = 21;
      optional bool f_13 = 22;
      optional bool f_14 = 23;
      optional int32 f_15 = 26;
      optional fixed64 f_16 = 27;
      optional string f_17 = 29;
    }
    optional M23 f_2 = 2;
  }
  optional M8 f_62 = 62;
  message M9 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional string f_2 = 3;
    optional fixed64 f_3 = 5;
  }
  optional M9 f_64 = 64;
  message M10 {
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 116;
      E5_CONST_2 = 21;
      E5_CONST_3 = 19;
      E5_CONST_4 = 15;
      E5_CONST_5 = 29;
    }
    repeated E5 f_0 = 2 [packed = true];
    message M21 {
      optional int32 f_0 = 1;
      message M32 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 7;
          E8_CONST_2 = 107;
          E8_CONST_3 = 34;
          E8_CONST_4 = 31;
          E8_CONST_5 = 82;
        }
        repeated E8 f_0 = 1 [packed = true];
        message M39 {
          optional string f_0 = 1;
          optional int32 f_1 = 2;
          message M43 {
            optional int32 f_0 = 1;
          }
          optional M43 f_3 = 3;
        }
        optional M39 f_2 = 2;
      }
      optional M32 f_3 = 3;
      message M33 {
        optional int32 f_0 = 2;
        optional fixed32 f_1 = 4;
        optional bool f_2 = 7;
        optional bool f_3 = 9;
        optional string f_4 = 10;
        message M34 {
          optional fixed64 f_0 = 2;
        }
        optional M34 f_11 = 11;
      }
      optional M33 f_4 = 4;
    }
    optional M21 f_3 = 3;
    message M22 {
      optional double f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional double f_3 = 5;
      optional string f_4 = 9;
      optional fixed32 f_5 = 11;
      optional string f_6 = 13;
    }
    optional M22 f_4 = 4;
  }
  optional M10 f_66 = 66;
  message M11 {
    optional fixed64 f_0 = 2;
    message M13 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 6;
      optional bool f_3 = 7;
      optional fixed64 f_4 = 9;
      optional fixed64 f_5 = 10;
      optional int32 f_6 = 11;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 23;
        E6_CONST_2 = 110;
        E6_CONST_3 = 125;
        E6_CONST_4 = 96;
        E6_CONST_5 = 97;
      }
      repeated E6 f_7 = 14 [packed = true];
      optional fixed64 f_8 = 15;
      optional fixed64 f_9 = 16;
      optional string f_10 = 18;
      optional int32 f_11 = 22;
      optional fixed64 f_12 = 24;
      optional string f_13 = 25;
      optional fixed32 f_14 = 27;
      repeated int32 f_15 = 28 [packed = true];
      optional string f_16 = 29;
      optional int32 f_17 = 30;
      optional bool f_18 = 31;
      optional fixed64 f_19 = 32;
      optional string f_20 = 33;
      optional bool f_21 = 34;
      optional fixed64 f_22 = 35;
      optional int32 f_23 = 37;
      optional bool f_24 = 39;
      optional string f_25 = 41;
      optional fixed32 f_26 = 42;
      optional int32 f_27 = 43;
      optional fixed64 f_28 = 45;
      optional int32 f_29 = 47;
      optional string f_30 = 51;
      optional string f_31 = 52;
    }
    optional M13 f_3 = 3;
    message M17 {
      optional fixed64 f_0 = 2;
      optional double f_1 = 3;
      optional fixed64 f_2 = 5;
      optional string f_3 = 6;
    }
    optional M17 f_4 = 4;
    message M18 {
      optional fixed64 f_0 = 1;
      message M30 {
        optional int32 f_0 = 1;
        optional string f_1 = 2;
      }
      optional M30 f_2 = 2;
    }
    optional M18 f_6 = 6;
  }
  optional M11 f_68 = 68;
  message M12 {
    optional fixed64 f_0 = 3;
    optional int32 f_1 = 6;
    optional string f_2 = 8;
    optional int32 f_3 = 9;
    optional fixed32 f_4 = 10;
    message M19 {
      optional string f_0 = 1;
    }
    optional M19 f_12 = 12;
  }
  optional M12 f_70 = 70;
}
