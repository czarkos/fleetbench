// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P1.request.Message2;

message Message2 {
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 6;
    E1_CONST_2 = 19;
    E1_CONST_3 = 123;
    E1_CONST_4 = 18;
    E1_CONST_5 = 53;
  }
  optional E1 f_0 = 3;
  optional fixed64 f_1 = 5;
  optional string f_2 = 6;
  optional string f_3 = 7;
  optional int32 f_4 = 8;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 43;
    E2_CONST_2 = 83;
    E2_CONST_3 = 1;
    E2_CONST_4 = 46;
    E2_CONST_5 = 10;
  }
  optional E2 f_5 = 11;
  optional double f_6 = 13;
  optional string f_7 = 15;
  optional string f_8 = 16;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 40;
    E3_CONST_2 = 80;
    E3_CONST_3 = 28;
    E3_CONST_4 = 95;
    E3_CONST_5 = 56;
  }
  optional E3 f_9 = 18;
  optional double f_10 = 19;
  optional fixed64 f_11 = 20;
  optional fixed64 f_12 = 21;
  optional fixed64 f_13 = 22;
  optional int32 f_14 = 23;
  optional int32 f_15 = 24;
  optional fixed64 f_16 = 26;
  optional string f_17 = 28;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 106;
    E4_CONST_2 = 50;
    E4_CONST_3 = 15;
    E4_CONST_4 = 87;
    E4_CONST_5 = 105;
  }
  repeated E4 f_18 = 30 [packed = true];
  optional fixed64 f_19 = 32;
  optional int32 f_20 = 33;
  optional fixed32 f_21 = 34;
  optional int32 f_22 = 35;
  optional int32 f_23 = 36;
  optional int32 f_24 = 37;
  enum E5 {
    E5_UNSPECIFIED = 0;
    E5_CONST_1 = 46;
    E5_CONST_2 = 57;
    E5_CONST_3 = 3;
    E5_CONST_4 = 54;
    E5_CONST_5 = 87;
  }
  optional E5 f_25 = 38;
  optional string f_26 = 39;
  optional fixed64 f_27 = 42;
  optional bool f_28 = 43;
  enum E6 {
    E6_UNSPECIFIED = 0;
    E6_CONST_1 = 20;
    E6_CONST_2 = 86;
    E6_CONST_3 = 101;
    E6_CONST_4 = 3;
    E6_CONST_5 = 77;
  }
  repeated E6 f_29 = 46 [packed = true];
  message M1 {
    optional fixed64 f_0 = 1;
    message M13 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional string f_2 = 3;
      optional fixed64 f_3 = 5;
      optional string f_4 = 7;
      optional fixed64 f_5 = 8;
      optional int32 f_6 = 9;
      optional fixed32 f_7 = 10;
      optional string f_8 = 11;
      optional fixed64 f_9 = 12;
      optional bool f_10 = 14;
      optional string f_11 = 15;
      message M38 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
        optional int32 f_2 = 3;
        optional fixed64 f_3 = 4;
      }
      repeated M38 f_16 = 16;
    }
    optional M13 f_2 = 2;
    message M21 {
      optional string f_0 = 1;
    }
    optional M21 f_3 = 3;
    message M34 {
      optional int64 f_0 = 1;
      optional string f_1 = 3;
      optional string f_2 = 4;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 85;
        E12_CONST_2 = 55;
        E12_CONST_3 = 72;
        E12_CONST_4 = 7;
        E12_CONST_5 = 67;
      }
      optional E12 f_3 = 7;
      optional bool f_4 = 8;
      optional int32 f_5 = 9;
      optional string f_6 = 10;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 65;
        E13_CONST_2 = 81;
        E13_CONST_3 = 16;
        E13_CONST_4 = 3;
        E13_CONST_5 = 13;
      }
      repeated E13 f_7 = 11 [packed = true];
      optional double f_8 = 13;
      optional int32 f_9 = 14;
      optional int32 f_10 = 15;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 1;
        E14_CONST_2 = 38;
        E14_CONST_3 = 123;
        E14_CONST_4 = 70;
        E14_CONST_5 = 45;
      }
      repeated E14 f_11 = 16 [packed = true];
      optional string f_12 = 17;
    }
    optional M34 f_4 = 4;
  }
  optional M1 f_47 = 47;
  message M2 {
    optional fixed64 f_0 = 2;
    optional fixed64 f_1 = 3;
    message M18 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional bool f_2 = 4;
      optional bool f_3 = 5;
      message M47 {
        optional bool f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 4;
        optional fixed64 f_3 = 5;
        optional string f_4 = 6;
        optional fixed64 f_5 = 7;
        message M51 {
          optional int32 f_0 = 1;
          message M56 {
            optional string f_0 = 1;
          }
          optional M56 f_4 = 4;
          message M57 {
            optional int64 f_0 = 2;
            optional fixed64 f_1 = 3;
            optional string f_2 = 5;
          }
          optional M57 f_6 = 6;
          message M58 {
            optional int32 f_0 = 1;
          }
          repeated M58 f_8 = 8;
        }
        repeated M51 f_9 = 9;
        message M53 {
          optional string f_0 = 2;
          optional bool f_1 = 4;
          optional int32 f_2 = 5;
          optional string f_3 = 6;
          optional string f_4 = 7;
          optional int32 f_5 = 8;
          optional int32 f_6 = 9;
          optional string f_7 = 10;
          optional fixed32 f_8 = 11;
          optional int32 f_9 = 13;
          optional fixed32 f_10 = 16;
          optional fixed64 f_11 = 17;
          repeated int32 f_12 = 18 [packed = true];
          optional fixed32 f_13 = 19;
          optional string f_14 = 20;
          optional string f_15 = 22;
          optional bool f_16 = 23;
          optional int32 f_17 = 25;
          optional int64 f_18 = 28;
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 66;
            E18_CONST_2 = 65;
            E18_CONST_3 = 17;
            E18_CONST_4 = 1;
            E18_CONST_5 = 78;
          }
          repeated E18 f_19 = 29 [packed = true];
          optional string f_20 = 31;
          optional fixed64 f_21 = 33;
          message M55 {
            optional string f_0 = 1;
          }
          optional M55 f_34 = 34;
        }
        optional M53 f_13 = 13;
      }
      repeated M47 f_7 = 7;
    }
    optional M18 f_4 = 4;
    message M20 {
      optional fixed64 f_0 = 2;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 117;
        E10_CONST_2 = 49;
        E10_CONST_3 = 47;
        E10_CONST_4 = 66;
        E10_CONST_5 = 14;
      }
      repeated E10 f_1 = 3 [packed = true];
      optional int32 f_2 = 5;
      message M35 {
        optional fixed64 f_0 = 1;
        message M48 {
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 25;
            E17_CONST_2 = 65;
            E17_CONST_3 = 121;
            E17_CONST_4 = 49;
            E17_CONST_5 = 72;
          }
          repeated E17 f_0 = 1 [packed = true];
          optional fixed32 f_1 = 4;
          optional int32 f_2 = 5;
          optional int64 f_3 = 7;
          message M60 {
            optional string f_0 = 1;
          }
          optional M60 f_8 = 8;
        }
        repeated M48 f_4 = 4;
        message M50 {
          optional fixed64 f_0 = 2;
          optional fixed64 f_1 = 3;
          optional fixed64 f_2 = 4;
        }
        optional M50 f_5 = 5;
        message M52 {
          optional fixed64 f_0 = 1;
          optional bool f_1 = 3;
          optional bool f_2 = 5;
          message M61 {
            optional int32 f_0 = 2;
            optional string f_1 = 5;
            enum E19 {
              E19_UNSPECIFIED = 0;
              E19_CONST_1 = 47;
              E19_CONST_2 = 107;
              E19_CONST_3 = 100;
              E19_CONST_4 = 17;
              E19_CONST_5 = 98;
            }
            repeated E19 f_2 = 6 [packed = true];
            optional string f_3 = 7;
            optional int32 f_4 = 8;
          }
          optional M61 f_6 = 6;
        }
        optional M52 f_7 = 7;
      }
      optional M35 f_8 = 8;
      message M46 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 3;
        optional fixed32 f_2 = 5;
        optional fixed64 f_3 = 6;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 50;
          E16_CONST_2 = 89;
          E16_CONST_3 = 91;
          E16_CONST_4 = 10;
          E16_CONST_5 = 65;
        }
        repeated E16 f_4 = 7 [packed = true];
      }
      optional M46 f_9 = 9;
    }
    optional M20 f_5 = 5;
    message M22 {
      optional string f_0 = 1;
    }
    repeated M22 f_6 = 6;
    message M23 {
      optional fixed64 f_0 = 1;
    }
    optional M23 f_8 = 8;
    message M25 {
      optional string f_0 = 1;
      optional double f_1 = 2;
    }
    optional M25 f_10 = 10;
    message M27 {
      optional fixed32 f_0 = 2;
      message M37 {
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 7;
          E15_CONST_2 = 110;
          E15_CONST_3 = 60;
          E15_CONST_4 = 120;
          E15_CONST_5 = 42;
        }
        repeated E15 f_0 = 1 [packed = true];
        optional bool f_1 = 2;
        optional string f_2 = 4;
      }
      optional M37 f_3 = 3;
    }
    optional M27 f_12 = 12;
  }
  optional M2 f_48 = 48;
  message M3 {
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 6;
      E7_CONST_2 = 83;
      E7_CONST_3 = 44;
      E7_CONST_4 = 110;
      E7_CONST_5 = 21;
    }
    optional E7 f_0 = 2;
    optional string f_1 = 5;
    optional fixed32 f_2 = 8;
    optional double f_3 = 9;
    message M10 {
      optional int32 f_0 = 4;
    }
    repeated M10 f_13 = 13;
    message M14 {
      optional fixed64 f_0 = 1;
      message M36 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional fixed32 f_3 = 5;
        optional int32 f_4 = 7;
        optional int32 f_5 = 8;
        optional fixed32 f_6 = 9;
        message M49 {
          optional int32 f_0 = 1;
          optional int32 f_1 = 2;
          optional int32 f_2 = 3;
          optional fixed64 f_3 = 4;
          message M54 {
            optional string f_0 = 1;
          }
          repeated M54 f_6 = 6;
          message M59 {
            optional fixed64 f_0 = 3;
          }
          optional M59 f_7 = 7;
        }
        repeated M49 f_11 = 11;
      }
      repeated M36 f_3 = 3;
    }
    repeated M14 f_14 = 14;
    message M15 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 4;
      optional fixed64 f_4 = 5;
    }
    optional M15 f_15 = 15;
    message M24 {
      optional fixed64 f_0 = 2;
    }
    optional M24 f_18 = 18;
    message M28 {
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 88;
        E11_CONST_2 = 1;
        E11_CONST_3 = 41;
        E11_CONST_4 = 80;
        E11_CONST_5 = 107;
      }
      optional E11 f_0 = 1;
      optional bool f_1 = 2;
      optional string f_2 = 4;
      optional fixed64 f_3 = 6;
      optional string f_4 = 7;
      optional int32 f_5 = 9;
      optional double f_6 = 11;
    }
    optional M28 f_20 = 20;
    message M29 {
      optional fixed32 f_0 = 1;
    }
    optional M29 f_21 = 21;
    message M30 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 3;
    }
    repeated M30 f_22 = 22;
  }
  optional M3 f_49 = 49;
  message M4 {
    optional int32 f_0 = 3;
    optional fixed64 f_1 = 5;
    message M8 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 23;
        E8_CONST_2 = 125;
        E8_CONST_3 = 17;
        E8_CONST_4 = 102;
        E8_CONST_5 = 26;
      }
      optional E8 f_0 = 2;
      optional string f_1 = 3;
      message M39 {
        optional string f_0 = 1;
        optional fixed32 f_1 = 2;
      }
      optional M39 f_6 = 6;
    }
    optional M8 f_6 = 6;
    message M16 {
      optional string f_0 = 1;
      message M41 {
        optional int32 f_0 = 2;
        optional fixed64 f_1 = 3;
      }
      optional M41 f_4 = 4;
      message M45 {
        optional double f_0 = 1;
      }
      repeated M45 f_5 = 5;
    }
    optional M16 f_7 = 7;
    message M26 {
      optional fixed64 f_0 = 1;
    }
    optional M26 f_8 = 8;
    message M31 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 4;
      message M42 {
        optional int64 f_0 = 1;
      }
      optional M42 f_9 = 9;
    }
    optional M31 f_9 = 9;
    message M32 {
      optional fixed64 f_0 = 1;
    }
    optional M32 f_10 = 10;
  }
  optional M4 f_50 = 50;
  message M5 {
    optional fixed64 f_0 = 4;
    optional fixed64 f_1 = 6;
    optional fixed64 f_2 = 7;
    optional int64 f_3 = 9;
    optional fixed64 f_4 = 11;
    message M11 {
      optional bool f_0 = 1;
      optional fixed32 f_1 = 2;
      optional fixed32 f_2 = 3;
      optional int32 f_3 = 6;
      message M43 {
        optional string f_0 = 1;
      }
      optional M43 f_7 = 7;
      message M44 {
        optional fixed32 f_0 = 1;
      }
      optional M44 f_9 = 9;
    }
    optional M11 f_12 = 12;
    message M17 {
      optional fixed64 f_0 = 2;
      message M40 {
        optional bool f_0 = 2;
        optional string f_1 = 3;
        optional fixed32 f_2 = 4;
        optional fixed64 f_3 = 5;
        optional string f_4 = 7;
        optional int32 f_5 = 9;
        optional fixed32 f_6 = 10;
        optional string f_7 = 13;
      }
      repeated M40 f_4 = 4;
    }
    optional M17 f_14 = 14;
    message M33 {
      optional fixed32 f_0 = 1;
    }
    optional M33 f_15 = 15;
  }
  repeated M5 f_52 = 52;
  message M6 {
    optional string f_0 = 2;
    optional int32 f_1 = 3;
    optional int32 f_2 = 4;
    message M7 {
      optional int32 f_0 = 1;
      optional string f_1 = 4;
    }
    optional M7 f_5 = 5;
    message M9 {
      optional fixed32 f_0 = 2;
    }
    optional M9 f_6 = 6;
    message M12 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 3;
      optional fixed32 f_3 = 4;
      optional string f_4 = 7;
      repeated string f_5 = 8;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 119;
        E9_CONST_2 = 32;
        E9_CONST_3 = 74;
        E9_CONST_4 = 99;
        E9_CONST_5 = 76;
      }
      repeated E9 f_6 = 9 [packed = true];
    }
    optional M12 f_9 = 9;
    message M19 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional fixed64 f_3 = 6;
    }
    repeated M19 f_10 = 10;
  }
  repeated M6 f_54 = 54;
}
