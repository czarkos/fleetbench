// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message2;

message Message2 {
  optional string f_0 = 2;
  optional fixed64 f_1 = 3;
  optional int32 f_2 = 5;
  optional int32 f_3 = 6;
  optional int32 f_4 = 7;
  optional int64 f_5 = 9;
  optional fixed64 f_6 = 10;
  optional fixed64 f_7 = 11;
  optional int32 f_8 = 13;
  optional bool f_9 = 14;
  optional int32 f_10 = 15;
  optional fixed64 f_11 = 17;
  optional double f_12 = 19;
  optional int32 f_13 = 20;
  optional int32 f_14 = 22;
  optional string f_15 = 24;
  optional fixed64 f_16 = 25;
  optional fixed32 f_17 = 26;
  optional int32 f_18 = 27;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 61;
    E1_CONST_2 = 105;
    E1_CONST_3 = 52;
    E1_CONST_4 = 107;
    E1_CONST_5 = 67;
  }
  repeated E1 f_19 = 28 [packed = true];
  optional bool f_20 = 30;
  optional double f_21 = 32;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 7;
    E2_CONST_2 = 113;
    E2_CONST_3 = 6;
    E2_CONST_4 = 37;
    E2_CONST_5 = 92;
  }
  optional E2 f_22 = 35;
  optional int32 f_23 = 37;
  optional int32 f_24 = 39;
  optional int32 f_25 = 40;
  optional int32 f_26 = 41;
  optional string f_27 = 43;
  optional string f_28 = 44;
  optional bytes f_29 = 48;
  message M1 {
    optional bool f_0 = 1;
    message M12 {
      optional fixed64 f_0 = 1;
      message M26 {
        optional int32 f_0 = 1;
      }
      optional M26 f_3 = 3;
    }
    optional M12 f_2 = 2;
    message M15 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 4;
    }
    repeated M15 f_5 = 5;
    message M20 {
      optional bool f_0 = 2;
      optional string f_1 = 4;
      optional string f_2 = 5;
      optional uint64 f_3 = 6;
      optional fixed64 f_4 = 8;
      optional string f_5 = 9;
      optional string f_6 = 10;
      optional fixed64 f_7 = 13;
      optional fixed64 f_8 = 14;
      optional fixed32 f_9 = 15;
      optional double f_10 = 18;
      optional string f_11 = 19;
      optional int32 f_12 = 20;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 75;
        E7_CONST_2 = 10;
        E7_CONST_3 = 89;
        E7_CONST_4 = 60;
        E7_CONST_5 = 65;
      }
      repeated E7 f_13 = 21 [packed = true];
      optional int32 f_14 = 22;
      optional string f_15 = 23;
      optional fixed32 f_16 = 27;
      optional fixed64 f_17 = 28;
      optional fixed64 f_18 = 32;
      optional string f_19 = 34;
      optional string f_20 = 35;
      optional int32 f_21 = 36;
      optional fixed32 f_22 = 37;
      optional int32 f_23 = 39;
      optional double f_24 = 40;
      optional string f_25 = 43;
      optional string f_26 = 44;
      optional string f_27 = 47;
      optional bool f_28 = 48;
      optional string f_29 = 51;
      optional fixed64 f_30 = 53;
      optional fixed32 f_31 = 54;
      optional int32 f_32 = 56;
      message M21 {
        optional fixed64 f_0 = 2;
        message M28 {
          optional string f_0 = 2;
          enum E12 {
            E12_UNSPECIFIED = 0;
            E12_CONST_1 = 112;
            E12_CONST_2 = 30;
            E12_CONST_3 = 59;
            E12_CONST_4 = 41;
            E12_CONST_5 = 96;
          }
          repeated E12 f_1 = 3 [packed = true];
          optional int32 f_2 = 5;
          optional int32 f_3 = 7;
        }
        optional M28 f_6 = 6;
        message M32 {
          optional int32 f_0 = 2;
        }
        optional M32 f_7 = 7;
        message M36 {
          optional string f_0 = 1;
        }
        optional M36 f_10 = 10;
      }
      optional M21 f_57 = 57;
      message M23 {
        optional bool f_0 = 2;
        optional int32 f_1 = 4;
        optional int32 f_2 = 5;
        optional fixed64 f_3 = 6;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 21;
          E9_CONST_2 = 62;
          E9_CONST_3 = 84;
          E9_CONST_4 = 5;
          E9_CONST_5 = 57;
        }
        repeated E9 f_4 = 8 [packed = true];
        optional fixed64 f_5 = 10;
        optional string f_6 = 11;
        optional string f_7 = 12;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 123;
          E10_CONST_2 = 26;
          E10_CONST_3 = 77;
          E10_CONST_4 = 24;
          E10_CONST_5 = 75;
        }
        repeated E10 f_8 = 14 [packed = true];
        optional int32 f_9 = 15;
        optional int32 f_10 = 16;
        optional string f_11 = 19;
        optional fixed64 f_12 = 22;
        optional string f_13 = 25;
        optional fixed32 f_14 = 27;
        optional fixed64 f_15 = 28;
        optional bool f_16 = 29;
        optional int32 f_17 = 30;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 112;
          E11_CONST_2 = 124;
          E11_CONST_3 = 100;
          E11_CONST_4 = 106;
          E11_CONST_5 = 56;
        }
        optional E11 f_18 = 31;
        optional fixed64 f_19 = 33;
        optional fixed64 f_20 = 35;
        optional string f_21 = 39;
        optional fixed64 f_22 = 41;
        optional int32 f_23 = 43;
        optional string f_24 = 45;
        optional string f_25 = 48;
        optional int32 f_26 = 49;
        optional fixed64 f_27 = 51;
        optional int32 f_28 = 52;
        optional string f_29 = 54;
        optional string f_30 = 55;
        optional bool f_31 = 57;
        message M33 {
          optional fixed64 f_0 = 2;
          optional fixed64 f_1 = 6;
          optional fixed64 f_2 = 7;
          optional string f_3 = 9;
          optional int32 f_4 = 11;
          optional fixed64 f_5 = 13;
          optional fixed64 f_6 = 14;
          optional fixed64 f_7 = 16;
          optional fixed32 f_8 = 17;
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 97;
            E13_CONST_2 = 7;
            E13_CONST_3 = 92;
            E13_CONST_4 = 25;
            E13_CONST_5 = 88;
          }
          repeated E13 f_9 = 18 [packed = true];
          optional string f_10 = 22;
          optional double f_11 = 24;
          optional string f_12 = 25;
        }
        optional M33 f_58 = 58;
      }
      optional M23 f_58 = 58;
    }
    repeated M20 f_7 = 7;
  }
  optional M1 f_50 = 50;
  message M2 {
    optional fixed32 f_0 = 3;
    optional bool f_1 = 5;
    optional fixed64 f_2 = 7;
    optional fixed32 f_3 = 10;
    optional string f_4 = 12;
    optional string f_5 = 13;
  }
  optional M2 f_51 = 51;
  message M3 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 75;
      E3_CONST_2 = 61;
      E3_CONST_3 = 124;
      E3_CONST_4 = 19;
      E3_CONST_5 = 28;
    }
    optional E3 f_0 = 1;
    optional int32 f_1 = 2;
    optional string f_2 = 4;
    optional fixed64 f_3 = 5;
    message M13 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional string f_2 = 6;
      optional string f_3 = 7;
      optional fixed32 f_4 = 9;
      optional double f_5 = 10;
      optional int32 f_6 = 11;
      optional int32 f_7 = 13;
      message M24 {
        optional int32 f_0 = 2;
        message M30 {
          optional string f_0 = 1;
        }
        repeated M30 f_4 = 4;
        message M34 {
          optional string f_0 = 2;
          optional fixed64 f_1 = 4;
          optional string f_2 = 5;
        }
        optional M34 f_6 = 6;
      }
      optional M24 f_17 = 17;
    }
    repeated M13 f_6 = 6;
  }
  optional M3 f_52 = 52;
  message M4 {
    optional double f_0 = 1;
    optional fixed32 f_1 = 2;
  }
  optional M4 f_53 = 53;
  message M5 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 3;
    optional int32 f_2 = 4;
    optional int32 f_3 = 5;
    optional int32 f_4 = 6;
    message M16 {
      optional string f_0 = 2;
      message M25 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed32 f_4 = 6;
        message M37 {
          optional string f_0 = 1;
          optional int32 f_1 = 2;
        }
        optional M37 f_7 = 7;
        message M39 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 3;
          optional int32 f_2 = 4;
          optional int32 f_3 = 5;
          optional string f_4 = 7;
          optional string f_5 = 10;
        }
        optional M39 f_8 = 8;
      }
      repeated M25 f_5 = 5;
    }
    optional M16 f_7 = 7;
    message M18 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 4;
      optional int32 f_3 = 6;
      optional fixed64 f_4 = 7;
      optional fixed64 f_5 = 8;
    }
    optional M18 f_8 = 8;
  }
  repeated M5 f_54 = 54;
  message M6 {
    optional string f_0 = 1;
    message M11 {
      optional fixed32 f_0 = 2;
    }
    repeated M11 f_3 = 3;
  }
  optional M6 f_56 = 56;
  message M7 {
    optional fixed64 f_0 = 2;
    message M14 {
      optional int32 f_0 = 1;
    }
    repeated M14 f_4 = 4;
    message M17 {
      optional string f_0 = 1;
    }
    optional M17 f_5 = 5;
    message M19 {
      optional string f_0 = 4;
      optional int32 f_1 = 6;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 55;
        E6_CONST_2 = 69;
        E6_CONST_3 = 40;
        E6_CONST_4 = 116;
        E6_CONST_5 = 114;
      }
      repeated E6 f_2 = 9 [packed = true];
      optional int32 f_3 = 12;
      optional double f_4 = 13;
      optional int32 f_5 = 15;
      optional double f_6 = 17;
      message M22 {
        optional string f_0 = 2;
        optional int32 f_1 = 3;
        optional bool f_2 = 6;
        optional int32 f_3 = 7;
        optional string f_4 = 8;
        optional int32 f_5 = 10;
        optional fixed64 f_6 = 11;
        optional uint64 f_7 = 13;
        optional int32 f_8 = 14;
        optional fixed64 f_9 = 15;
        optional bytes f_10 = 16;
        optional bool f_11 = 18;
        optional fixed64 f_12 = 19;
        optional fixed64 f_13 = 21;
        optional int32 f_14 = 24;
        optional int32 f_15 = 28;
        optional fixed64 f_16 = 30;
        optional int32 f_17 = 33;
        optional string f_18 = 35;
        optional string f_19 = 37;
        optional string f_20 = 39;
        optional int32 f_21 = 41;
        optional fixed64 f_22 = 44;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 24;
          E8_CONST_2 = 89;
          E8_CONST_3 = 38;
          E8_CONST_4 = 112;
          E8_CONST_5 = 82;
        }
        repeated E8 f_23 = 45 [packed = true];
        optional fixed64 f_24 = 46;
        optional string f_25 = 47;
        optional fixed64 f_26 = 48;
        optional string f_27 = 49;
        optional string f_28 = 50;
        optional string f_29 = 51;
        optional int32 f_30 = 52;
        message M31 {
          optional double f_0 = 1;
        }
        optional M31 f_53 = 53;
      }
      optional M22 f_19 = 19;
      message M27 {
        optional double f_0 = 2;
        message M29 {
          optional fixed32 f_0 = 2;
        }
        optional M29 f_3 = 3;
        message M35 {
          optional int32 f_0 = 4;
          optional int32 f_1 = 5;
          optional bool f_2 = 6;
          message M40 {
            optional fixed64 f_0 = 1;
            optional string f_1 = 2;
            optional int32 f_2 = 4;
            enum E14 {
              E14_UNSPECIFIED = 0;
              E14_CONST_1 = 23;
              E14_CONST_2 = 117;
              E14_CONST_3 = 110;
              E14_CONST_4 = 82;
              E14_CONST_5 = 97;
            }
            optional E14 f_3 = 6;
            optional int32 f_4 = 8;
            optional int32 f_5 = 10;
            optional fixed64 f_6 = 12;
            optional int32 f_7 = 15;
            optional bool f_8 = 17;
            optional int32 f_9 = 18;
            optional bytes f_10 = 19;
            optional fixed64 f_11 = 21;
            optional int32 f_12 = 22;
            optional int32 f_13 = 23;
            optional bool f_14 = 24;
            optional int32 f_15 = 27;
            optional int32 f_16 = 28;
            optional int32 f_17 = 30;
            optional fixed64 f_18 = 31;
            optional int32 f_19 = 33;
            enum E15 {
              E15_UNSPECIFIED = 0;
              E15_CONST_1 = 110;
              E15_CONST_2 = 54;
              E15_CONST_3 = 18;
              E15_CONST_4 = 111;
              E15_CONST_5 = 68;
            }
            repeated E15 f_20 = 35 [packed = true];
            optional int32 f_21 = 36;
            optional string f_22 = 38;
            enum E16 {
              E16_UNSPECIFIED = 0;
              E16_CONST_1 = 90;
              E16_CONST_2 = 87;
              E16_CONST_3 = 34;
              E16_CONST_4 = 95;
              E16_CONST_5 = 44;
            }
            repeated E16 f_23 = 39 [packed = true];
            optional int32 f_24 = 40;
            optional fixed32 f_25 = 42;
            optional fixed64 f_26 = 44;
            optional fixed64 f_27 = 47;
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 75;
              E17_CONST_2 = 84;
              E17_CONST_3 = 43;
              E17_CONST_4 = 103;
              E17_CONST_5 = 73;
            }
            repeated E17 f_28 = 48 [packed = true];
            optional double f_29 = 49;
          }
          optional M40 f_8 = 8;
        }
        repeated M35 f_6 = 6;
        message M38 {
          optional string f_0 = 2;
        }
        repeated M38 f_7 = 7;
      }
      optional M27 f_21 = 21;
    }
    repeated M19 f_6 = 6;
  }
  optional M7 f_58 = 58;
  message M8 {
    optional int32 f_0 = 1;
    message M10 {
      optional bool f_0 = 2;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 7;
      optional string f_3 = 10;
      optional int32 f_4 = 11;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 78;
        E5_CONST_2 = 59;
        E5_CONST_3 = 114;
        E5_CONST_4 = 50;
        E5_CONST_5 = 60;
      }
      optional E5 f_5 = 14;
    }
    optional M10 f_2 = 2;
  }
  optional M8 f_59 = 59;
  message M9 {
    optional fixed64 f_0 = 3;
    optional string f_1 = 6;
    optional bool f_2 = 9;
    optional int32 f_3 = 12;
    optional int32 f_4 = 14;
    optional string f_5 = 15;
    optional int32 f_6 = 17;
    optional int32 f_7 = 18;
    optional double f_8 = 20;
    optional string f_9 = 21;
    optional int32 f_10 = 22;
    optional int32 f_11 = 24;
    optional string f_12 = 27;
    optional int32 f_13 = 28;
    optional fixed32 f_14 = 30;
    optional fixed64 f_15 = 32;
    optional int32 f_16 = 33;
    optional double f_17 = 34;
    optional bool f_18 = 35;
    optional fixed64 f_19 = 37;
    optional int32 f_20 = 38;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 52;
      E4_CONST_2 = 78;
      E4_CONST_3 = 32;
      E4_CONST_4 = 119;
      E4_CONST_5 = 67;
    }
    repeated E4 f_21 = 39 [packed = true];
    optional bool f_22 = 41;
    optional string f_23 = 42;
    optional int32 f_24 = 43;
    optional string f_25 = 44;
    optional string f_26 = 47;
    optional int32 f_27 = 49;
    optional string f_28 = 50;
    optional fixed64 f_29 = 52;
    optional fixed64 f_30 = 53;
    optional fixed64 f_31 = 54;
  }
  repeated M9 f_60 = 60;
}
