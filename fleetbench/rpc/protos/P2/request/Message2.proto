// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message2;

message Message2 {
  optional string f_0 = 1;
  optional fixed64 f_1 = 2;
  optional string f_2 = 3;
  optional bool f_3 = 5;
  optional int32 f_4 = 6;
  optional fixed64 f_5 = 7;
  optional uint64 f_6 = 9;
  optional string f_7 = 10;
  optional fixed64 f_8 = 11;
  optional int32 f_9 = 13;
  optional int32 f_10 = 14;
  optional fixed64 f_11 = 15;
  optional fixed64 f_12 = 16;
  optional string f_13 = 18;
  optional int32 f_14 = 19;
  optional string f_15 = 22;
  optional int32 f_16 = 24;
  optional fixed64 f_17 = 25;
  optional string f_18 = 26;
  optional fixed32 f_19 = 27;
  optional fixed64 f_20 = 30;
  optional bool f_21 = 32;
  optional int32 f_22 = 34;
  optional fixed32 f_23 = 35;
  optional string f_24 = 37;
  optional fixed32 f_25 = 38;
  optional int64 f_26 = 39;
  optional string f_27 = 40;
  optional string f_28 = 41;
  optional int32 f_29 = 42;
  message M1 {
    optional string f_0 = 1;
    optional bool f_1 = 3;
    optional string f_2 = 5;
    optional bool f_3 = 7;
    optional bool f_4 = 9;
    message M27 {
      optional int32 f_0 = 2;
    }
    optional M27 f_11 = 11;
  }
  optional M1 f_43 = 43;
  message M2 {
    optional string f_0 = 2;
    optional bool f_1 = 3;
    optional fixed64 f_2 = 4;
    message M11 {
      optional string f_0 = 2;
      optional string f_1 = 3;
      message M39 {
        optional string f_0 = 1;
        optional double f_1 = 3;
        optional fixed64 f_2 = 4;
        message M44 {
          optional fixed32 f_0 = 3;
          optional string f_1 = 5;
          optional fixed64 f_2 = 8;
          optional int32 f_3 = 9;
          optional fixed64 f_4 = 14;
        }
        optional M44 f_5 = 5;
        message M49 {
          optional string f_0 = 1;
        }
        repeated M49 f_6 = 6;
      }
      optional M39 f_4 = 4;
    }
    optional M11 f_5 = 5;
    message M16 {
      optional int32 f_0 = 1;
    }
    optional M16 f_6 = 6;
    message M23 {
      optional fixed32 f_0 = 1;
      optional string f_1 = 3;
    }
    optional M23 f_9 = 9;
    message M30 {
      optional int32 f_0 = 1;
    }
    repeated M30 f_10 = 10;
  }
  optional M2 f_44 = 44;
  message M3 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 4;
    optional int32 f_2 = 5;
    optional string f_3 = 8;
    message M8 {
      optional int32 f_0 = 1;
      optional fixed32 f_1 = 5;
    }
    optional M8 f_10 = 10;
    message M17 {
      optional int32 f_0 = 1;
    }
    repeated M17 f_11 = 11;
    message M21 {
      optional fixed32 f_0 = 2;
      optional string f_1 = 3;
      optional fixed64 f_2 = 4;
      message M34 {
        optional int32 f_0 = 2;
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 107;
          E4_CONST_2 = 126;
          E4_CONST_3 = 113;
          E4_CONST_4 = 35;
          E4_CONST_5 = 52;
        }
        repeated E4 f_1 = 3 [packed = true];
        optional fixed32 f_2 = 6;
        optional fixed32 f_3 = 7;
        optional fixed32 f_4 = 8;
        optional int32 f_5 = 9;
        optional uint64 f_6 = 10;
      }
      repeated M34 f_6 = 6;
    }
    repeated M21 f_12 = 12;
    message M22 {
      optional int32 f_0 = 1;
      message M37 {
        optional fixed64 f_0 = 1;
        message M46 {
          optional fixed32 f_0 = 1;
        }
        optional M46 f_2 = 2;
        message M47 {
          optional bool f_0 = 1;
        }
        repeated M47 f_3 = 3;
      }
      optional M37 f_3 = 3;
      message M40 {
        optional fixed32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional string f_3 = 4;
        optional int32 f_4 = 5;
        optional int32 f_5 = 6;
      }
      optional M40 f_6 = 6;
    }
    optional M22 f_13 = 13;
  }
  optional M3 f_45 = 45;
  message M4 {
    optional fixed64 f_0 = 1;
    message M14 {
      optional fixed64 f_0 = 1;
    }
    optional M14 f_2 = 2;
  }
  optional M4 f_47 = 47;
  message M5 {
    optional string f_0 = 1;
    message M12 {
      optional fixed64 f_0 = 2;
    }
    optional M12 f_2 = 2;
    message M15 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 4;
    }
    optional M15 f_3 = 3;
    message M18 {
      optional double f_0 = 3;
      optional bool f_1 = 4;
      optional int32 f_2 = 5;
      optional fixed64 f_3 = 8;
      optional int32 f_4 = 9;
      optional fixed64 f_5 = 10;
      optional bool f_6 = 11;
      optional fixed64 f_7 = 13;
      optional fixed64 f_8 = 15;
      optional int32 f_9 = 16;
      optional string f_10 = 17;
      optional fixed64 f_11 = 18;
      optional int32 f_12 = 19;
      optional int32 f_13 = 20;
      optional fixed64 f_14 = 22;
      optional int32 f_15 = 23;
      optional fixed64 f_16 = 24;
      optional uint64 f_17 = 25;
      optional int32 f_18 = 26;
      optional int32 f_19 = 28;
      optional fixed64 f_20 = 29;
      optional string f_21 = 30;
      optional int32 f_22 = 31;
      optional int32 f_23 = 32;
      optional bool f_24 = 33;
      optional bool f_25 = 34;
      optional bool f_26 = 36;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 123;
        E2_CONST_2 = 86;
        E2_CONST_3 = 34;
        E2_CONST_4 = 101;
        E2_CONST_5 = 2;
      }
      repeated E2 f_27 = 38 [packed = true];
      optional int32 f_28 = 40;
      optional fixed64 f_29 = 42;
      optional string f_30 = 43;
      optional fixed32 f_31 = 44;
    }
    optional M18 f_4 = 4;
    message M24 {
      optional string f_0 = 2;
    }
    optional M24 f_5 = 5;
    message M25 {
      optional double f_0 = 1;
      optional int32 f_1 = 3;
      message M38 {
        optional string f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 4;
      }
      optional M38 f_4 = 4;
    }
    optional M25 f_6 = 6;
    message M26 {
      optional fixed32 f_0 = 1;
      optional bool f_1 = 3;
      optional string f_2 = 5;
      optional bool f_3 = 6;
      message M35 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional bool f_2 = 3;
        optional fixed32 f_3 = 4;
      }
      optional M35 f_7 = 7;
    }
    optional M26 f_7 = 7;
    message M32 {
      optional fixed64 f_0 = 3;
    }
    optional M32 f_8 = 8;
  }
  optional M5 f_48 = 48;
  message M6 {
    optional string f_0 = 2;
    message M10 {
      optional string f_0 = 3;
    }
    repeated M10 f_3 = 3;
    message M19 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional fixed32 f_2 = 5;
      message M41 {
        optional int32 f_0 = 2;
        optional string f_1 = 3;
        message M43 {
          optional double f_0 = 2;
          optional string f_1 = 3;
        }
        optional M43 f_6 = 6;
        message M45 {
          optional int32 f_0 = 1;
          optional int32 f_1 = 2;
          enum E5 {
            E5_UNSPECIFIED = 0;
            E5_CONST_1 = 43;
            E5_CONST_2 = 100;
            E5_CONST_3 = 112;
            E5_CONST_4 = 124;
            E5_CONST_5 = 28;
          }
          repeated E5 f_2 = 5 [packed = true];
          optional int32 f_3 = 6;
          optional int64 f_4 = 8;
          optional string f_5 = 9;
          optional fixed32 f_6 = 11;
          message M50 {
            optional int32 f_0 = 2;
            optional double f_1 = 3;
            optional fixed64 f_2 = 6;
            optional fixed64 f_3 = 7;
          }
          optional M50 f_13 = 13;
        }
        repeated M45 f_7 = 7;
        message M48 {
          optional bool f_0 = 2;
          message M51 {
            optional fixed32 f_0 = 3;
          }
          optional M51 f_3 = 3;
        }
        optional M48 f_8 = 8;
      }
      optional M41 f_6 = 6;
    }
    repeated M19 f_4 = 4;
  }
  optional M6 f_51 = 51;
  message M7 {
    optional int32 f_0 = 3;
    optional int32 f_1 = 4;
    optional double f_2 = 5;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 45;
      E1_CONST_2 = 18;
      E1_CONST_3 = 17;
      E1_CONST_4 = 27;
      E1_CONST_5 = 115;
    }
    repeated E1 f_3 = 8 [packed = true];
    message M9 {
      optional string f_0 = 1;
      optional int32 f_1 = 3;
      optional string f_2 = 5;
      optional int32 f_3 = 7;
      optional double f_4 = 9;
      optional int32 f_5 = 10;
      optional int32 f_6 = 11;
      optional string f_7 = 13;
    }
    optional M9 f_9 = 9;
    message M13 {
      optional double f_0 = 4;
      message M36 {
        optional bool f_0 = 1;
        optional bool f_1 = 4;
        optional string f_2 = 5;
        optional fixed64 f_3 = 7;
        message M42 {
          optional fixed32 f_0 = 1;
          message M52 {
            optional double f_0 = 1;
            optional fixed32 f_1 = 2;
            optional string f_2 = 3;
            optional double f_3 = 5;
            optional fixed64 f_4 = 7;
            optional fixed32 f_5 = 8;
            optional double f_6 = 9;
            optional double f_7 = 10;
            optional string f_8 = 11;
            optional bool f_9 = 13;
            optional int64 f_10 = 14;
            optional fixed64 f_11 = 16;
            optional int32 f_12 = 18;
            optional string f_13 = 20;
            optional string f_14 = 22;
            optional string f_15 = 24;
            optional int32 f_16 = 25;
            optional bool f_17 = 26;
            optional string f_18 = 27;
            optional fixed64 f_19 = 28;
            optional string f_20 = 29;
            optional string f_21 = 30;
            optional int32 f_22 = 31;
            optional string f_23 = 33;
            optional int32 f_24 = 36;
            enum E6 {
              E6_UNSPECIFIED = 0;
              E6_CONST_1 = 89;
              E6_CONST_2 = 94;
              E6_CONST_3 = 96;
              E6_CONST_4 = 61;
              E6_CONST_5 = 84;
            }
            repeated E6 f_25 = 37 [packed = true];
            enum E7 {
              E7_UNSPECIFIED = 0;
              E7_CONST_1 = 43;
              E7_CONST_2 = 32;
              E7_CONST_3 = 85;
              E7_CONST_4 = 39;
              E7_CONST_5 = 7;
            }
            optional E7 f_26 = 38;
            optional fixed64 f_27 = 39;
            message M53 {
              optional bool f_0 = 2;
              optional string f_1 = 3;
              enum E8 {
                E8_UNSPECIFIED = 0;
                E8_CONST_1 = 57;
                E8_CONST_2 = 92;
                E8_CONST_3 = 97;
                E8_CONST_4 = 77;
                E8_CONST_5 = 123;
              }
              optional E8 f_2 = 5;
              optional int32 f_3 = 8;
            }
            optional M53 f_40 = 40;
          }
          optional M52 f_2 = 2;
        }
        repeated M42 f_9 = 9;
      }
      repeated M36 f_5 = 5;
    }
    optional M13 f_13 = 13;
    message M20 {
      optional int32 f_0 = 2;
    }
    repeated M20 f_14 = 14;
    message M28 {
      optional int32 f_0 = 1;
    }
    optional M28 f_16 = 16;
    message M29 {
      optional int32 f_0 = 2;
    }
    repeated M29 f_18 = 18;
    message M31 {
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 105;
        E3_CONST_2 = 71;
        E3_CONST_3 = 82;
        E3_CONST_4 = 64;
        E3_CONST_5 = 80;
      }
      optional E3 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 4;
    }
    optional M31 f_19 = 19;
    message M33 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional string f_2 = 3;
      optional int32 f_3 = 4;
    }
    repeated M33 f_20 = 20;
  }
  optional M7 f_53 = 53;
}
