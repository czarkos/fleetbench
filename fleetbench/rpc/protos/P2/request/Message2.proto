// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message2;

message Message2 {
  optional fixed64 f_0 = 5;
  optional uint64 f_1 = 8;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 95;
    E1_CONST_2 = 61;
    E1_CONST_3 = 121;
    E1_CONST_4 = 79;
    E1_CONST_5 = 15;
  }
  optional E1 f_2 = 9;
  optional string f_3 = 12;
  optional string f_4 = 15;
  optional fixed64 f_5 = 19;
  optional int64 f_6 = 21;
  optional fixed64 f_7 = 27;
  optional bytes f_8 = 31;
  optional fixed64 f_9 = 33;
  repeated int32 f_10 = 36 [packed = true];
  optional bytes f_11 = 37 [ctype = CORD];
  optional bytes f_12 = 44;
  repeated int32 f_13 = 47 [packed = true];
  optional bytes f_14 = 49;
  optional int32 f_15 = 54;
  optional bytes f_16 = 60;
  optional fixed64 f_17 = 64;
  optional int32 f_18 = 67;
  optional bytes f_19 = 73;
  optional string f_20 = 77;
  optional int64 f_21 = 81;
  optional int64 f_22 = 85;
  message M1 {
    optional uint64 f_0 = 5;
    optional int32 f_1 = 8;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 3;
      E2_CONST_2 = 60;
      E2_CONST_3 = 109;
      E2_CONST_4 = 59;
      E2_CONST_5 = 84;
    }
    optional E2 f_2 = 10;
    optional fixed32 f_3 = 13;
    optional string f_4 = 16;
    optional bool f_5 = 18;
    optional bytes f_6 = 20;
    optional fixed64 f_7 = 24;
    message M12 {
      optional bytes f_0 = 3;
      optional int32 f_1 = 6;
      optional bytes f_2 = 10;
      message M20 {
        optional int64 f_0 = 2;
        repeated bytes f_1 = 5;
        optional fixed64 f_2 = 8;
        optional uint64 f_3 = 13;
        optional bytes f_4 = 19;
        optional bytes f_5 = 20;
      }
      repeated M20 f_14 = 14;
    }
    repeated M12 f_25 = 25;
    message M14 {
      optional int32 f_0 = 4;
    }
    optional M14 f_28 = 28;
    message M16 {
      optional bool f_0 = 4;
    }
    repeated M16 f_30 = 30;
    message M17 {
      optional int64 f_0 = 6;
    }
    optional M17 f_32 = 32;
  }
  optional M1 f_88 = 88;
  message M2 {
    repeated int32 f_0 = 4 [packed = true];
    message M15 {
      optional int64 f_0 = 5;
      repeated bytes f_1 = 10;
    }
    optional M15 f_7 = 7;
  }
  repeated M2 f_92 = 92;
  message M3 {
    optional uint64 f_0 = 3;
    message M13 {
      optional int64 f_0 = 4;
    }
    optional M13 f_5 = 5;
    message M18 {
      optional int32 f_0 = 3;
    }
    optional M18 f_10 = 10;
  }
  optional M3 f_97 = 97;
  message M4 {
    optional int32 f_0 = 4;
    optional uint64 f_1 = 9;
    optional int32 f_2 = 15;
    optional int64 f_3 = 17;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 3;
      E3_CONST_2 = 119;
      E3_CONST_3 = 92;
      E3_CONST_4 = 24;
      E3_CONST_5 = 17;
    }
    optional E3 f_4 = 19;
    optional string f_5 = 27;
    repeated bytes f_6 = 29;
    optional fixed32 f_7 = 34;
    optional bytes f_8 = 36 [ctype = CORD];
    optional bytes f_9 = 37;
    optional bytes f_10 = 39;
    optional int64 f_11 = 44;
    optional int64 f_12 = 46;
    optional int32 f_13 = 50;
    optional fixed32 f_14 = 53;
    optional bytes f_15 = 57 [ctype = CORD];
    message M11 {
      optional int64 f_0 = 2;
    }
    repeated M11 f_59 = 59;
  }
  repeated M4 f_98 = 98;
  message M5 {
    optional uint64 f_0 = 2;
    message M10 {
      optional bytes f_0 = 3 [ctype = CORD];
    }
    repeated M10 f_10 = 10;
  }
  optional M5 f_100 = 100;
  message M6 {
    repeated int32 f_0 = 1 [packed = true];
    optional int64 f_1 = 8;
    optional int64 f_2 = 13;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 14;
      E4_CONST_2 = 9;
      E4_CONST_3 = 75;
      E4_CONST_4 = 112;
      E4_CONST_5 = 29;
    }
    optional E4 f_3 = 16;
    repeated bytes f_4 = 19;
    optional int32 f_5 = 22;
    optional uint64 f_6 = 31;
    repeated bytes f_7 = 33;
    optional fixed64 f_8 = 41;
    repeated bytes f_9 = 47;
    optional bytes f_10 = 54;
    optional fixed64 f_11 = 59;
    optional int64 f_12 = 63;
    optional int32 f_13 = 65;
    optional int64 f_14 = 68;
    repeated bytes f_15 = 70;
    optional bytes f_16 = 72 [ctype = CORD];
  }
  repeated M6 f_103 = 103;
  message M7 {
    optional int32 f_0 = 3;
  }
  optional M7 f_107 = 107;
  message M8 {
    optional int64 f_0 = 3;
  }
  repeated M8 f_110 = 110;
  message M9 {
    optional int64 f_0 = 5;
    optional int32 f_1 = 10;
    message M19 {
      optional string f_0 = 5;
      optional int32 f_1 = 8;
      optional bytes f_2 = 11;
      optional bytes f_3 = 16;
      optional int64 f_4 = 19;
      optional uint64 f_5 = 26;
      optional int32 f_6 = 31;
      optional string f_7 = 35;
      optional int64 f_8 = 37;
      optional int32 f_9 = 40;
      optional bytes f_10 = 43 [ctype = CORD];
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 87;
        E5_CONST_2 = 81;
        E5_CONST_3 = 7;
        E5_CONST_4 = 104;
        E5_CONST_5 = 75;
      }
      optional E5 f_11 = 46;
      optional int64 f_12 = 49;
      optional bool f_13 = 54;
      message M21 {
        optional bool f_0 = 4;
        message M22 {
          optional bytes f_0 = 5 [ctype = CORD];
        }
        optional M22 f_7 = 7;
        message M23 {
          optional uint64 f_0 = 3;
          optional bytes f_1 = 7;
          optional string f_2 = 10;
          optional int64 f_3 = 13;
          optional fixed32 f_4 = 21;
          optional int64 f_5 = 22;
          optional string f_6 = 23;
          optional bytes f_7 = 26;
          repeated bytes f_8 = 29;
          optional int64 f_9 = 34;
          message M24 {
            optional bool f_0 = 1;
          }
          optional M24 f_37 = 37;
          message M25 {
            optional int32 f_0 = 4;
          }
          optional M25 f_43 = 43;
          message M26 {
            optional bytes f_0 = 3;
            optional uint64 f_1 = 5;
            repeated int32 f_2 = 9 [packed = true];
            optional fixed64 f_3 = 10;
            optional uint64 f_4 = 11;
            optional int64 f_5 = 14;
            optional string f_6 = 17;
            optional int64 f_7 = 18;
            optional bytes f_8 = 20 [ctype = CORD];
            optional fixed32 f_9 = 24;
            optional fixed32 f_10 = 27;
            repeated int32 f_11 = 30 [packed = true];
            optional bool f_12 = 36;
            optional int32 f_13 = 39;
            optional bytes f_14 = 42;
          }
          repeated M26 f_47 = 47;
        }
        optional M23 f_11 = 11;
      }
      optional M21 f_60 = 60;
    }
    repeated M19 f_13 = 13;
  }
  repeated M9 f_115 = 115;
}
