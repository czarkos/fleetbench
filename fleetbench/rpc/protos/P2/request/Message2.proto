// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message2;

message Message2 {
  optional fixed32 f_0 = 2;
  optional bool f_1 = 3;
  optional fixed64 f_2 = 4;
  optional fixed32 f_3 = 6;
  optional int32 f_4 = 7;
  optional int32 f_5 = 8;
  optional fixed32 f_6 = 10;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 80;
    E1_CONST_2 = 93;
    E1_CONST_3 = 120;
    E1_CONST_4 = 15;
    E1_CONST_5 = 105;
  }
  optional E1 f_7 = 11;
  optional fixed64 f_8 = 12;
  optional fixed64 f_9 = 13;
  optional fixed64 f_10 = 15;
  optional fixed64 f_11 = 16;
  optional string f_12 = 19;
  optional fixed64 f_13 = 21;
  optional fixed64 f_14 = 22;
  optional fixed64 f_15 = 23;
  optional fixed64 f_16 = 24;
  optional fixed64 f_17 = 27;
  optional int32 f_18 = 29;
  optional bool f_19 = 31;
  optional int32 f_20 = 32;
  optional int32 f_21 = 34;
  optional int32 f_22 = 35;
  optional string f_23 = 36;
  optional fixed32 f_24 = 37;
  optional int32 f_25 = 38;
  optional string f_26 = 39;
  optional string f_27 = 40;
  optional fixed64 f_28 = 42;
  optional string f_29 = 44;
  optional fixed64 f_30 = 46;
  message M1 {
    optional int32 f_0 = 2;
    message M8 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 5;
    }
    optional M8 f_4 = 4;
    message M9 {
      optional string f_0 = 2;
    }
    optional M9 f_5 = 5;
    message M17 {
      optional bool f_0 = 2;
    }
    optional M17 f_8 = 8;
    message M19 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 3;
    }
    optional M19 f_9 = 9;
    message M23 {
      optional string f_0 = 1;
      optional string f_1 = 3;
      optional int32 f_2 = 5;
      optional int32 f_3 = 7;
      optional string f_4 = 9;
    }
    optional M23 f_10 = 10;
    message M27 {
      optional fixed64 f_0 = 4;
      optional int64 f_1 = 5;
    }
    optional M27 f_12 = 12;
    message M32 {
      optional fixed64 f_0 = 3;
      message M35 {
        optional bool f_0 = 1;
        optional fixed32 f_1 = 2;
        optional fixed64 f_2 = 4;
        optional fixed32 f_3 = 5;
        optional int32 f_4 = 6;
      }
      optional M35 f_4 = 4;
      message M39 {
        optional int32 f_0 = 2;
        optional fixed64 f_1 = 4;
        optional fixed64 f_2 = 5;
      }
      repeated M39 f_7 = 7;
    }
    repeated M32 f_13 = 13;
    message M34 {
      optional bool f_0 = 1;
      optional int32 f_1 = 4;
      optional int32 f_2 = 5;
      optional fixed64 f_3 = 6;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 33;
        E6_CONST_2 = 92;
        E6_CONST_3 = 73;
        E6_CONST_4 = 110;
        E6_CONST_5 = 27;
      }
      repeated E6 f_4 = 7 [packed = true];
      optional fixed64 f_5 = 8;
      optional double f_6 = 10;
      optional int32 f_7 = 11;
      optional double f_8 = 12;
      optional fixed64 f_9 = 13;
      optional string f_10 = 14;
      optional int32 f_11 = 15;
      optional fixed64 f_12 = 16;
      optional bool f_13 = 19;
      optional double f_14 = 20;
      optional int32 f_15 = 22;
      optional fixed64 f_16 = 23;
      optional bool f_17 = 24;
      optional fixed64 f_18 = 26;
      optional fixed64 f_19 = 27;
      optional bool f_20 = 28;
    }
    repeated M34 f_15 = 15;
  }
  repeated M1 f_47 = 47;
  message M2 {
    optional string f_0 = 2;
    optional fixed64 f_1 = 3;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 40;
      E2_CONST_2 = 103;
      E2_CONST_3 = 122;
      E2_CONST_4 = 115;
      E2_CONST_5 = 2;
    }
    optional E2 f_2 = 4;
    message M7 {
      optional string f_0 = 4;
    }
    repeated M7 f_6 = 6;
    message M12 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 5;
      optional bool f_2 = 9;
      message M38 {
        optional string f_0 = 1;
        message M44 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 2;
          optional string f_2 = 3;
          optional string f_3 = 5;
          message M51 {
            optional fixed64 f_0 = 2;
            optional int32 f_1 = 4;
          }
          repeated M51 f_7 = 7;
        }
        repeated M44 f_2 = 2;
        message M45 {
          optional int32 f_0 = 1;
        }
        optional M45 f_3 = 3;
      }
      optional M38 f_10 = 10;
    }
    optional M12 f_7 = 7;
    message M15 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 4;
      optional fixed64 f_2 = 5;
      optional bool f_3 = 6;
      optional int32 f_4 = 9;
    }
    optional M15 f_8 = 8;
    message M16 {
      optional int32 f_0 = 1;
    }
    optional M16 f_9 = 9;
    message M20 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 112;
        E5_CONST_2 = 75;
        E5_CONST_3 = 105;
        E5_CONST_4 = 89;
        E5_CONST_5 = 67;
      }
      repeated E5 f_0 = 1 [packed = true];
      message M40 {
        optional fixed64 f_0 = 3;
        message M49 {
          optional string f_0 = 1;
          optional string f_1 = 2;
          optional string f_2 = 4;
          optional fixed64 f_3 = 6;
        }
        optional M49 f_4 = 4;
        message M50 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 2;
          optional int32 f_2 = 3;
          optional int32 f_3 = 5;
          optional int32 f_4 = 6;
          optional fixed64 f_5 = 8;
        }
        repeated M50 f_6 = 6;
      }
      optional M40 f_3 = 3;
    }
    optional M20 f_10 = 10;
    message M22 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 3;
      optional string f_3 = 4;
      message M37 {
        optional fixed64 f_0 = 2;
        message M46 {
          optional fixed64 f_0 = 2;
          message M52 {
            optional string f_0 = 1;
            optional string f_1 = 2;
            enum E10 {
              E10_UNSPECIFIED = 0;
              E10_CONST_1 = 22;
              E10_CONST_2 = 67;
              E10_CONST_3 = 103;
              E10_CONST_4 = 30;
              E10_CONST_5 = 7;
            }
            repeated E10 f_2 = 3 [packed = true];
            optional fixed64 f_3 = 4;
            optional string f_4 = 5;
          }
          optional M52 f_3 = 3;
        }
        optional M46 f_3 = 3;
        message M48 {
          optional fixed32 f_0 = 2;
          optional double f_1 = 5;
          optional fixed64 f_2 = 6;
        }
        repeated M48 f_4 = 4;
      }
      optional M37 f_5 = 5;
    }
    optional M22 f_11 = 11;
    message M25 {
      optional int32 f_0 = 1;
      optional bool f_1 = 3;
      optional bool f_2 = 4;
      optional int32 f_3 = 6;
      optional fixed64 f_4 = 7;
    }
    optional M25 f_12 = 12;
    message M29 {
      optional fixed32 f_0 = 2;
    }
    repeated M29 f_13 = 13;
  }
  repeated M2 f_48 = 48;
  message M3 {
    optional fixed64 f_0 = 1;
    optional bool f_1 = 4;
    optional fixed64 f_2 = 5;
    optional fixed32 f_3 = 8;
    optional fixed32 f_4 = 9;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 34;
      E3_CONST_2 = 87;
      E3_CONST_3 = 30;
      E3_CONST_4 = 65;
      E3_CONST_5 = 63;
    }
    repeated E3 f_5 = 10 [packed = true];
    optional int32 f_6 = 12;
    optional int32 f_7 = 13;
    message M13 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      message M36 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
        optional int32 f_4 = 5;
      }
      repeated M36 f_5 = 5;
    }
    optional M13 f_16 = 16;
    message M24 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 4;
      optional int32 f_3 = 5;
    }
    repeated M24 f_18 = 18;
  }
  optional M3 f_49 = 49;
  message M4 {
    optional fixed64 f_0 = 2;
    optional string f_1 = 5;
    message M10 {
      optional string f_0 = 1;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 4;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 41;
        E4_CONST_2 = 125;
        E4_CONST_3 = 66;
        E4_CONST_4 = 62;
        E4_CONST_5 = 57;
      }
      repeated E4 f_3 = 7 [packed = true];
      optional int32 f_4 = 8;
    }
    optional M10 f_7 = 7;
    message M26 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      message M41 {
        optional int32 f_0 = 3;
        optional fixed64 f_1 = 4;
        optional string f_2 = 9;
        optional string f_3 = 10;
        optional fixed64 f_4 = 11;
        message M47 {
          enum E9 {
            E9_UNSPECIFIED = 0;
            E9_CONST_1 = 33;
            E9_CONST_2 = 25;
            E9_CONST_3 = 8;
            E9_CONST_4 = 96;
            E9_CONST_5 = 81;
          }
          optional E9 f_0 = 3;
        }
        optional M47 f_12 = 12;
      }
      optional M41 f_5 = 5;
    }
    repeated M26 f_9 = 9;
    message M28 {
      optional string f_0 = 2;
      optional string f_1 = 3;
      optional bool f_2 = 4;
      optional int32 f_3 = 6;
      optional bool f_4 = 8;
      optional fixed64 f_5 = 9;
      optional fixed64 f_6 = 10;
    }
    repeated M28 f_11 = 11;
    message M31 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
    }
    optional M31 f_12 = 12;
    message M33 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional double f_2 = 3;
      optional fixed64 f_3 = 4;
      optional string f_4 = 5;
    }
    repeated M33 f_14 = 14;
  }
  repeated M4 f_52 = 52;
  message M5 {
    optional fixed32 f_0 = 1;
    optional int32 f_1 = 3;
    message M11 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
    }
    optional M11 f_5 = 5;
    message M21 {
      optional fixed64 f_0 = 1;
    }
    optional M21 f_7 = 7;
    message M30 {
      optional bool f_0 = 2;
      optional string f_1 = 4;
      optional bool f_2 = 6;
      optional fixed64 f_3 = 7;
    }
    optional M30 f_8 = 8;
  }
  optional M5 f_54 = 54;
  message M6 {
    optional int32 f_0 = 2;
    message M14 {
      optional bool f_0 = 2;
      optional int32 f_1 = 3;
    }
    optional M14 f_3 = 3;
    message M18 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      message M42 {
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 38;
          E7_CONST_2 = 8;
          E7_CONST_3 = 96;
          E7_CONST_4 = 75;
          E7_CONST_5 = 90;
        }
        repeated E7 f_0 = 3 [packed = true];
      }
      repeated M42 f_3 = 3;
      message M43 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 115;
          E8_CONST_2 = 118;
          E8_CONST_3 = 15;
          E8_CONST_4 = 28;
          E8_CONST_5 = 44;
        }
        repeated E8 f_0 = 2 [packed = true];
        optional fixed64 f_1 = 3;
        optional string f_2 = 5;
        optional fixed64 f_3 = 6;
      }
      optional M43 f_4 = 4;
    }
    repeated M18 f_4 = 4;
  }
  optional M6 f_55 = 55;
}
