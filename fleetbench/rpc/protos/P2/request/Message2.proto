// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message2;

message Message2 {
  optional bool f_0 = 2;
  optional int32 f_1 = 6;
  optional fixed64 f_2 = 7;
  optional int64 f_3 = 9;
  optional string f_4 = 11;
  optional fixed64 f_5 = 12;
  optional fixed64 f_6 = 15;
  optional fixed32 f_7 = 17;
  optional int32 f_8 = 18;
  optional int64 f_9 = 20;
  optional fixed64 f_10 = 23;
  optional string f_11 = 26;
  optional int64 f_12 = 28;
  optional string f_13 = 30;
  optional fixed64 f_14 = 31;
  optional int32 f_15 = 33;
  optional fixed64 f_16 = 36;
  optional fixed64 f_17 = 37;
  optional fixed64 f_18 = 38;
  optional int32 f_19 = 39;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 27;
    E1_CONST_2 = 26;
    E1_CONST_3 = 79;
    E1_CONST_4 = 11;
    E1_CONST_5 = 118;
  }
  repeated E1 f_20 = 40 [packed = true];
  optional fixed64 f_21 = 42;
  optional int32 f_22 = 43;
  optional string f_23 = 44;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 92;
    E2_CONST_2 = 85;
    E2_CONST_3 = 63;
    E2_CONST_4 = 56;
    E2_CONST_5 = 45;
  }
  optional E2 f_24 = 46;
  optional fixed64 f_25 = 47;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 41;
    E3_CONST_2 = 18;
    E3_CONST_3 = 52;
    E3_CONST_4 = 6;
    E3_CONST_5 = 110;
  }
  optional E3 f_26 = 48;
  optional string f_27 = 50;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 86;
    E4_CONST_2 = 20;
    E4_CONST_3 = 6;
    E4_CONST_4 = 82;
    E4_CONST_5 = 63;
  }
  repeated E4 f_28 = 51 [packed = true];
  optional double f_29 = 55;
  message M1 {
    optional double f_0 = 1;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 86;
      E5_CONST_2 = 91;
      E5_CONST_3 = 34;
      E5_CONST_4 = 112;
      E5_CONST_5 = 121;
    }
    repeated E5 f_1 = 2 [packed = true];
    message M8 {
      optional int32 f_0 = 1;
    }
    optional M8 f_3 = 3;
    message M13 {
      optional fixed64 f_0 = 1;
      message M19 {
        optional double f_0 = 1;
        optional string f_1 = 3;
        optional string f_2 = 4;
        optional string f_3 = 6;
        optional fixed64 f_4 = 7;
        message M37 {
          optional fixed64 f_0 = 1;
          optional fixed64 f_1 = 5;
          optional fixed64 f_2 = 7;
          optional string f_3 = 10;
          optional fixed64 f_4 = 12;
          message M44 {
            optional string f_0 = 1;
            optional fixed64 f_1 = 2;
            optional fixed32 f_2 = 3;
            optional bool f_3 = 5;
          }
          optional M44 f_14 = 14;
        }
        optional M37 f_9 = 9;
      }
      optional M19 f_2 = 2;
      message M20 {
        optional string f_0 = 3;
        optional fixed64 f_1 = 5;
        optional int32 f_2 = 6;
      }
      optional M20 f_3 = 3;
      message M27 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 4;
        optional fixed64 f_2 = 5;
      }
      optional M27 f_4 = 4;
      message M34 {
        optional bool f_0 = 4;
        optional fixed32 f_1 = 6;
        optional int64 f_2 = 7;
        optional fixed64 f_3 = 8;
        optional fixed64 f_4 = 11;
        optional int32 f_5 = 12;
        optional int32 f_6 = 13;
      }
      optional M34 f_5 = 5;
    }
    optional M13 f_4 = 4;
  }
  optional M1 f_56 = 56;
  message M2 {
    optional bool f_0 = 2;
    optional int32 f_1 = 4;
    optional string f_2 = 6;
    optional fixed64 f_3 = 7;
    optional fixed32 f_4 = 8;
    optional int32 f_5 = 12;
    optional string f_6 = 14;
    message M9 {
      optional bool f_0 = 2;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional int64 f_3 = 6;
      optional fixed64 f_4 = 9;
      optional bool f_5 = 11;
      optional int32 f_6 = 12;
      optional string f_7 = 15;
      optional fixed32 f_8 = 17;
      optional fixed64 f_9 = 19;
      optional int32 f_10 = 23;
      optional double f_11 = 24;
      optional fixed64 f_12 = 25;
      optional fixed64 f_13 = 26;
      optional int32 f_14 = 27;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 49;
        E7_CONST_2 = 29;
        E7_CONST_3 = 50;
        E7_CONST_4 = 51;
        E7_CONST_5 = 32;
      }
      repeated E7 f_15 = 28 [packed = true];
      optional int32 f_16 = 30;
      optional fixed32 f_17 = 34;
      optional double f_18 = 36;
      optional double f_19 = 37;
      optional bool f_20 = 38;
      optional int32 f_21 = 41;
      optional string f_22 = 42;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 103;
        E8_CONST_2 = 44;
        E8_CONST_3 = 20;
        E8_CONST_4 = 109;
        E8_CONST_5 = 23;
      }
      optional E8 f_23 = 44;
      optional fixed64 f_24 = 46;
      optional string f_25 = 47;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 117;
        E9_CONST_2 = 85;
        E9_CONST_3 = 93;
        E9_CONST_4 = 124;
        E9_CONST_5 = 24;
      }
      optional E9 f_26 = 50;
      optional string f_27 = 51;
      optional int32 f_28 = 52;
      optional fixed64 f_29 = 54;
      optional fixed64 f_30 = 55;
      message M36 {
        optional bool f_0 = 1;
      }
      optional M36 f_57 = 57;
    }
    optional M9 f_16 = 16;
  }
  optional M2 f_58 = 58;
  message M3 {
    optional fixed64 f_0 = 1;
    message M10 {
      optional string f_0 = 2;
      optional int32 f_1 = 3;
      message M29 {
        optional bool f_0 = 2;
      }
      optional M29 f_5 = 5;
    }
    optional M10 f_2 = 2;
    message M11 {
      optional string f_0 = 2;
      optional int32 f_1 = 4;
      optional double f_2 = 5;
      optional string f_3 = 8;
      optional string f_4 = 9;
      message M26 {
        optional string f_0 = 2;
        optional string f_1 = 3;
        optional string f_2 = 5;
        optional string f_3 = 7;
        optional bool f_4 = 9;
        optional int32 f_5 = 10;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 76;
          E14_CONST_2 = 22;
          E14_CONST_3 = 60;
          E14_CONST_4 = 6;
          E14_CONST_5 = 74;
        }
        repeated E14 f_6 = 14 [packed = true];
        optional fixed64 f_7 = 15;
        optional fixed64 f_8 = 16;
        optional string f_9 = 17;
        optional string f_10 = 18;
        optional int32 f_11 = 19;
        optional fixed64 f_12 = 21;
        optional string f_13 = 25;
        optional fixed32 f_14 = 26;
        optional double f_15 = 29;
        optional string f_16 = 31;
        optional fixed64 f_17 = 33;
        optional fixed64 f_18 = 34;
        optional int32 f_19 = 37;
        optional double f_20 = 38;
        optional int32 f_21 = 40;
        optional fixed64 f_22 = 42;
        optional fixed64 f_23 = 43;
        optional fixed32 f_24 = 46;
        optional double f_25 = 48;
        repeated int32 f_26 = 49 [packed = true];
        optional fixed64 f_27 = 53;
        optional string f_28 = 54;
        optional int32 f_29 = 56;
        optional int32 f_30 = 57;
        optional fixed32 f_31 = 58;
      }
      optional M26 f_11 = 11;
    }
    repeated M11 f_3 = 3;
  }
  repeated M3 f_61 = 61;
  message M4 {
    optional bool f_0 = 1;
  }
  optional M4 f_62 = 62;
  message M5 {
    optional bool f_0 = 2;
    message M16 {
      optional string f_0 = 2;
      message M25 {
        optional string f_0 = 1;
      }
      optional M25 f_3 = 3;
      message M30 {
        optional int64 f_0 = 1;
      }
      optional M30 f_5 = 5;
      message M33 {
        optional double f_0 = 1;
      }
      optional M33 f_6 = 6;
    }
    optional M16 f_3 = 3;
  }
  optional M5 f_64 = 64;
  message M6 {
    optional string f_0 = 2;
    message M12 {
      optional bool f_0 = 1;
      optional string f_1 = 3;
      optional fixed64 f_2 = 4;
      message M28 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 4;
        optional string f_2 = 5;
        optional string f_3 = 8;
        optional fixed64 f_4 = 9;
        optional fixed64 f_5 = 11;
      }
      optional M28 f_5 = 5;
      message M32 {
        optional fixed64 f_0 = 4;
        optional bool f_1 = 5;
        optional bool f_2 = 7;
        optional int32 f_3 = 8;
        optional string f_4 = 10;
      }
      repeated M32 f_6 = 6;
    }
    repeated M12 f_5 = 5;
    message M14 {
      optional int32 f_0 = 2;
      optional string f_1 = 3;
      optional fixed32 f_2 = 4;
      optional fixed64 f_3 = 6;
      optional bool f_4 = 7;
    }
    optional M14 f_7 = 7;
    message M15 {
      optional int32 f_0 = 3;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 6;
      optional int32 f_3 = 8;
      optional fixed64 f_4 = 9;
      optional bool f_5 = 10;
      optional string f_6 = 12;
      optional fixed32 f_7 = 13;
      optional string f_8 = 15;
      optional fixed64 f_9 = 17;
      optional string f_10 = 19;
      optional fixed64 f_11 = 21;
      optional fixed64 f_12 = 23;
      optional string f_13 = 25;
      optional int32 f_14 = 26;
      optional string f_15 = 28;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 27;
        E10_CONST_2 = 9;
        E10_CONST_3 = 40;
        E10_CONST_4 = 47;
        E10_CONST_5 = 66;
      }
      optional E10 f_16 = 29;
      optional fixed64 f_17 = 30;
      optional fixed64 f_18 = 31;
      optional double f_19 = 32;
      optional fixed64 f_20 = 34;
      message M24 {
        optional fixed32 f_0 = 3;
      }
      repeated M24 f_35 = 35;
    }
    optional M15 f_9 = 9;
  }
  optional M6 f_65 = 65;
  message M7 {
    optional int32 f_0 = 2;
    optional fixed64 f_1 = 4;
    optional string f_2 = 5;
    optional fixed64 f_3 = 6;
    optional string f_4 = 7;
    optional bool f_5 = 8;
    optional int32 f_6 = 9;
    optional fixed64 f_7 = 10;
    optional fixed64 f_8 = 11;
    optional int32 f_9 = 12;
    optional fixed32 f_10 = 13;
    optional bool f_11 = 15;
    optional int32 f_12 = 17;
    optional string f_13 = 18;
    optional fixed64 f_14 = 20;
    optional string f_15 = 21;
    optional bool f_16 = 23;
    optional fixed64 f_17 = 26;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 117;
      E6_CONST_2 = 84;
      E6_CONST_3 = 90;
      E6_CONST_4 = 74;
      E6_CONST_5 = 107;
    }
    optional E6 f_18 = 27;
    optional double f_19 = 28;
    optional bool f_20 = 29;
    optional bool f_21 = 32;
    optional fixed64 f_22 = 34;
    optional int32 f_23 = 36;
    optional int32 f_24 = 37;
    optional string f_25 = 39;
    optional string f_26 = 40;
    optional fixed64 f_27 = 41;
    optional string f_28 = 42;
    optional string f_29 = 43;
    optional fixed64 f_30 = 45;
    optional string f_31 = 46;
    message M17 {
      optional string f_0 = 2;
      message M21 {
        optional string f_0 = 1;
        optional fixed32 f_1 = 3;
        optional fixed32 f_2 = 5;
        optional string f_3 = 6;
        message M39 {
          optional int32 f_0 = 2;
          optional fixed64 f_1 = 3;
          optional string f_2 = 4;
          optional fixed64 f_3 = 6;
          optional double f_4 = 9;
          optional int32 f_5 = 12;
          optional bool f_6 = 14;
          optional string f_7 = 15;
          optional fixed64 f_8 = 18;
          optional fixed64 f_9 = 20;
          optional int32 f_10 = 22;
          optional fixed64 f_11 = 25;
          optional bool f_12 = 26;
          optional int32 f_13 = 28;
          optional fixed64 f_14 = 30;
          optional bool f_15 = 31;
          optional int32 f_16 = 32;
          optional int32 f_17 = 36;
          optional double f_18 = 40;
          optional string f_19 = 41;
          optional int32 f_20 = 44;
          optional int32 f_21 = 46;
          optional fixed64 f_22 = 47;
          optional bool f_23 = 49;
          optional string f_24 = 50;
          optional fixed64 f_25 = 51;
          optional int32 f_26 = 54;
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 40;
            E16_CONST_2 = 95;
            E16_CONST_3 = 45;
            E16_CONST_4 = 90;
            E16_CONST_5 = 25;
          }
          optional E16 f_27 = 55;
          optional int32 f_28 = 57;
          optional fixed64 f_29 = 58;
          optional int32 f_30 = 59;
          message M40 {
            optional int32 f_0 = 1;
            optional int32 f_1 = 2;
            optional string f_2 = 4;
            optional int32 f_3 = 5;
          }
          optional M40 f_60 = 60;
          message M42 {
            optional fixed64 f_0 = 1;
          }
          optional M42 f_62 = 62;
        }
        repeated M39 f_9 = 9;
      }
      optional M21 f_3 = 3;
      message M31 {
        optional int32 f_0 = 2;
        message M38 {
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 24;
            E15_CONST_2 = 43;
            E15_CONST_3 = 94;
            E15_CONST_4 = 47;
            E15_CONST_5 = 3;
          }
          repeated E15 f_0 = 1 [packed = true];
          message M41 {
            optional fixed64 f_0 = 1;
            optional fixed64 f_1 = 3;
          }
          repeated M41 f_2 = 2;
          message M43 {
            optional int32 f_0 = 1;
            message M45 {
              optional bool f_0 = 2;
            }
            repeated M45 f_2 = 2;
          }
          optional M43 f_3 = 3;
        }
        optional M38 f_3 = 3;
      }
      repeated M31 f_4 = 4;
      message M35 {
        optional bool f_0 = 1;
      }
      optional M35 f_5 = 5;
    }
    repeated M17 f_48 = 48;
    message M18 {
      optional string f_0 = 3;
      optional fixed64 f_1 = 5;
      optional fixed64 f_2 = 6;
      optional fixed64 f_3 = 8;
      optional int32 f_4 = 9;
      optional string f_5 = 11;
      optional fixed64 f_6 = 12;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 16;
        E11_CONST_2 = 44;
        E11_CONST_3 = 22;
        E11_CONST_4 = 104;
        E11_CONST_5 = 70;
      }
      repeated E11 f_7 = 13 [packed = true];
      optional string f_8 = 15;
      optional fixed32 f_9 = 16;
      optional fixed64 f_10 = 17;
      optional string f_11 = 18;
      optional int32 f_12 = 20;
      optional fixed64 f_13 = 23;
      optional string f_14 = 25;
      optional int32 f_15 = 26;
      optional int32 f_16 = 27;
      optional int32 f_17 = 28;
      optional bool f_18 = 29;
      optional int32 f_19 = 30;
      optional double f_20 = 32;
      optional fixed64 f_21 = 33;
      optional fixed32 f_22 = 35;
      optional int32 f_23 = 38;
      optional int32 f_24 = 39;
      optional double f_25 = 40;
      optional int64 f_26 = 41;
      optional fixed64 f_27 = 43;
      optional fixed64 f_28 = 44;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 17;
        E12_CONST_2 = 37;
        E12_CONST_3 = 91;
        E12_CONST_4 = 41;
        E12_CONST_5 = 121;
      }
      optional E12 f_29 = 46;
      optional int32 f_30 = 47;
      optional bool f_31 = 51;
      message M22 {
        optional fixed32 f_0 = 2;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 108;
          E13_CONST_2 = 93;
          E13_CONST_3 = 56;
          E13_CONST_4 = 36;
          E13_CONST_5 = 106;
        }
        optional E13 f_1 = 3;
        optional int32 f_2 = 4;
      }
      optional M22 f_52 = 52;
      message M23 {
        optional string f_0 = 3;
      }
      optional M23 f_54 = 54;
    }
    repeated M18 f_51 = 51;
  }
  repeated M7 f_66 = 66;
}
