// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message0;

message Message0 {
  optional fixed32 f_0 = 1;
  optional string f_1 = 3;
  optional bool f_2 = 4;
  optional string f_3 = 6;
  optional fixed64 f_4 = 8;
  optional int32 f_5 = 11;
  optional int32 f_6 = 14;
  optional int32 f_7 = 15;
  optional int32 f_8 = 16;
  optional int32 f_9 = 17;
  optional string f_10 = 19;
  optional int32 f_11 = 20;
  optional string f_12 = 21;
  optional bool f_13 = 24;
  optional string f_14 = 26;
  optional fixed64 f_15 = 27;
  optional int32 f_16 = 28;
  optional int32 f_17 = 29;
  optional fixed64 f_18 = 31;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 2;
    E1_CONST_2 = 111;
    E1_CONST_3 = 62;
    E1_CONST_4 = 107;
    E1_CONST_5 = 87;
  }
  optional E1 f_19 = 32;
  optional int32 f_20 = 33;
  optional fixed64 f_21 = 34;
  optional fixed64 f_22 = 35;
  optional fixed32 f_23 = 36;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 47;
    E2_CONST_2 = 71;
    E2_CONST_3 = 2;
    E2_CONST_4 = 115;
    E2_CONST_5 = 55;
  }
  optional E2 f_24 = 38;
  optional int32 f_25 = 39;
  optional fixed32 f_26 = 40;
  optional fixed64 f_27 = 43;
  optional fixed32 f_28 = 44;
  optional string f_29 = 45;
  optional string f_30 = 46;
  message M1 {
    optional string f_0 = 1;
    optional int32 f_1 = 2;
    optional string f_2 = 3;
    optional string f_3 = 5;
    optional int32 f_4 = 7;
    optional bool f_5 = 9;
    message M16 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
    }
    repeated M16 f_10 = 10;
    message M22 {
      optional fixed32 f_0 = 2;
      optional fixed32 f_1 = 4;
      optional fixed64 f_2 = 5;
      optional int32 f_3 = 7;
    }
    optional M22 f_11 = 11;
  }
  optional M1 f_47 = 47;
  message M2 {
    optional fixed64 f_0 = 1;
    message M7 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 21;
        E5_CONST_2 = 7;
        E5_CONST_3 = 1;
        E5_CONST_4 = 43;
        E5_CONST_5 = 32;
      }
      repeated E5 f_0 = 1 [packed = true];
    }
    optional M7 f_4 = 4;
    message M15 {
      optional string f_0 = 1;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 42;
        E7_CONST_2 = 34;
        E7_CONST_3 = 93;
        E7_CONST_4 = 87;
        E7_CONST_5 = 13;
      }
      repeated E7 f_1 = 2 [packed = true];
      optional fixed64 f_2 = 3;
      optional fixed32 f_3 = 6;
      optional bool f_4 = 7;
    }
    optional M15 f_5 = 5;
    message M18 {
      optional string f_0 = 1;
    }
    optional M18 f_7 = 7;
    message M21 {
      optional fixed64 f_0 = 1;
    }
    optional M21 f_8 = 8;
    message M31 {
      optional fixed32 f_0 = 2;
      optional string f_1 = 4;
      optional bool f_2 = 5;
    }
    optional M31 f_9 = 9;
    message M35 {
      optional fixed64 f_0 = 2;
      message M41 {
        optional bool f_0 = 4;
        message M45 {
          optional string f_0 = 1;
          optional uint64 f_1 = 2;
        }
        optional M45 f_5 = 5;
        message M46 {
          optional string f_0 = 2;
          optional int32 f_1 = 5;
        }
        optional M46 f_6 = 6;
        message M47 {
          optional int32 f_0 = 1;
        }
        repeated M47 f_9 = 9;
      }
      optional M41 f_3 = 3;
    }
    optional M35 f_10 = 10;
  }
  optional M2 f_48 = 48;
  message M3 {
    optional int64 f_0 = 2;
    message M8 {
      optional int32 f_0 = 1;
    }
    optional M8 f_3 = 3;
    message M14 {
      optional string f_0 = 1;
    }
    optional M14 f_5 = 5;
    message M19 {
      optional fixed64 f_0 = 1;
    }
    optional M19 f_6 = 6;
    message M26 {
      optional string f_0 = 1;
      message M42 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 3;
        optional fixed32 f_2 = 4;
        optional fixed64 f_3 = 6;
        optional double f_4 = 7;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 75;
          E11_CONST_2 = 106;
          E11_CONST_3 = 18;
          E11_CONST_4 = 82;
          E11_CONST_5 = 80;
        }
        repeated E11 f_5 = 8 [packed = true];
        optional int32 f_6 = 9;
        optional fixed64 f_7 = 14;
        optional fixed64 f_8 = 16;
        optional double f_9 = 17;
        optional int32 f_10 = 19;
        optional fixed64 f_11 = 21;
        optional string f_12 = 23;
        optional int32 f_13 = 24;
        optional int64 f_14 = 27;
        optional string f_15 = 29;
        optional int32 f_16 = 31;
        optional string f_17 = 32;
        optional fixed64 f_18 = 33;
        optional fixed32 f_19 = 34;
        optional int32 f_20 = 35;
        optional int32 f_21 = 36;
        optional fixed64 f_22 = 39;
        optional int32 f_23 = 40;
        optional int32 f_24 = 41;
        optional string f_25 = 43;
        optional bytes f_26 = 45;
        optional bool f_27 = 46;
        optional fixed64 f_28 = 48;
        optional bytes f_29 = 50;
        message M43 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 2;
          optional string f_2 = 4;
          optional fixed64 f_3 = 5;
          message M53 {
            optional int32 f_0 = 1;
            optional fixed64 f_1 = 2;
            optional string f_2 = 3;
          }
          optional M53 f_6 = 6;
        }
        optional M43 f_53 = 53;
        message M44 {
          optional int32 f_0 = 2;
        }
        optional M44 f_55 = 55;
      }
      optional M42 f_3 = 3;
    }
    optional M26 f_7 = 7;
    message M27 {
      optional fixed64 f_0 = 2;
    }
    optional M27 f_8 = 8;
    message M29 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 26;
        E8_CONST_2 = 87;
        E8_CONST_3 = 1;
        E8_CONST_4 = 12;
        E8_CONST_5 = 74;
      }
      optional E8 f_0 = 1;
    }
    optional M29 f_10 = 10;
    message M32 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 3;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 105;
        E9_CONST_2 = 103;
        E9_CONST_3 = 75;
        E9_CONST_4 = 9;
        E9_CONST_5 = 74;
      }
      repeated E9 f_2 = 5 [packed = true];
    }
    repeated M32 f_11 = 11;
    message M33 {
      optional int32 f_0 = 2;
    }
    optional M33 f_12 = 12;
    message M36 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
    }
    optional M36 f_13 = 13;
    message M37 {
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 111;
        E10_CONST_2 = 60;
        E10_CONST_3 = 76;
        E10_CONST_4 = 42;
        E10_CONST_5 = 11;
      }
      optional E10 f_0 = 3;
      optional string f_1 = 4;
      optional bool f_2 = 5;
      optional string f_3 = 6;
      optional int32 f_4 = 7;
      optional string f_5 = 9;
      optional int32 f_6 = 10;
      optional bool f_7 = 11;
      optional int32 f_8 = 13;
      optional fixed32 f_9 = 14;
      optional string f_10 = 15;
      optional int32 f_11 = 17;
      optional fixed64 f_12 = 18;
      optional string f_13 = 20;
      optional bool f_14 = 21;
      optional int32 f_15 = 22;
      optional string f_16 = 24;
    }
    optional M37 f_14 = 14;
  }
  optional M3 f_49 = 49;
  message M4 {
    optional fixed64 f_0 = 2;
    optional int32 f_1 = 4;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 89;
      E3_CONST_2 = 22;
      E3_CONST_3 = 107;
      E3_CONST_4 = 34;
      E3_CONST_5 = 52;
    }
    optional E3 f_2 = 5;
    optional fixed32 f_3 = 6;
    message M9 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      optional string f_4 = 8;
    }
    optional M9 f_7 = 7;
    message M24 {
      optional fixed32 f_0 = 2;
    }
    optional M24 f_9 = 9;
    message M25 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      optional string f_2 = 4;
      optional fixed32 f_3 = 6;
      optional int32 f_4 = 9;
      optional bytes f_5 = 10;
      optional bool f_6 = 11;
    }
    optional M25 f_10 = 10;
    message M30 {
      optional fixed64 f_0 = 2;
    }
    repeated M30 f_11 = 11;
    message M34 {
      optional string f_0 = 2;
    }
    optional M34 f_12 = 12;
  }
  optional M4 f_52 = 52;
  message M5 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 121;
      E4_CONST_2 = 9;
      E4_CONST_3 = 72;
      E4_CONST_4 = 96;
      E4_CONST_5 = 109;
    }
    optional E4 f_0 = 1;
    optional string f_1 = 2;
    optional fixed64 f_2 = 3;
    message M13 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 3;
    }
    optional M13 f_4 = 4;
    message M17 {
      optional int32 f_0 = 1;
    }
    optional M17 f_5 = 5;
    message M23 {
      optional double f_0 = 2;
      optional int32 f_1 = 3;
    }
    optional M23 f_6 = 6;
    message M38 {
      optional int32 f_0 = 2;
    }
    repeated M38 f_7 = 7;
  }
  optional M5 f_53 = 53;
  message M6 {
    optional int32 f_0 = 1;
    optional bool f_1 = 2;
    optional int32 f_2 = 5;
    message M10 {
      optional int32 f_0 = 1;
      message M40 {
        optional fixed32 f_0 = 2;
        optional bool f_1 = 3;
        message M48 {
          optional string f_0 = 1;
        }
        repeated M48 f_4 = 4;
        message M49 {
          optional bool f_0 = 3;
        }
        optional M49 f_6 = 6;
        message M50 {
          optional bool f_0 = 2;
        }
        optional M50 f_7 = 7;
        message M51 {
          optional int32 f_0 = 1;
          optional fixed32 f_1 = 3;
          optional string f_2 = 4;
          optional int32 f_3 = 5;
          message M55 {
            optional int32 f_0 = 2;
          }
          optional M55 f_6 = 6;
        }
        repeated M51 f_8 = 8;
        message M52 {
          optional int32 f_0 = 1;
          optional int32 f_1 = 2;
          optional int32 f_2 = 4;
          optional string f_3 = 6;
          optional fixed64 f_4 = 7;
          message M54 {
            optional int32 f_0 = 1;
            optional string f_1 = 3;
            optional fixed64 f_2 = 4;
          }
          optional M54 f_8 = 8;
        }
        repeated M52 f_9 = 9;
      }
      optional M40 f_3 = 3;
    }
    optional M10 f_8 = 8;
    message M11 {
      optional int32 f_0 = 1;
      optional fixed32 f_1 = 2;
      optional fixed64 f_2 = 5;
      optional int64 f_3 = 8;
      optional fixed32 f_4 = 9;
    }
    optional M11 f_9 = 9;
    message M12 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 74;
        E6_CONST_2 = 69;
        E6_CONST_3 = 85;
        E6_CONST_4 = 40;
        E6_CONST_5 = 106;
      }
      repeated E6 f_0 = 1 [packed = true];
    }
    optional M12 f_10 = 10;
    message M20 {
      optional string f_0 = 1;
    }
    optional M20 f_12 = 12;
    message M28 {
      optional string f_0 = 1;
    }
    optional M28 f_13 = 13;
    message M39 {
      optional double f_0 = 1;
    }
    optional M39 f_17 = 17;
  }
  optional M6 f_54 = 54;
}
