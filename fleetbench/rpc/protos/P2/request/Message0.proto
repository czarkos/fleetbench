// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message0;

message Message0 {
  repeated int32 f_0 = 1 [packed = true];
  optional bytes f_1 = 2 [ctype = CORD];
  optional bytes f_2 = 8;
  optional bytes f_3 = 11;
  optional string f_4 = 14;
  repeated bytes f_5 = 18;
  repeated bytes f_6 = 20;
  optional string f_7 = 21;
  optional bytes f_8 = 25;
  optional bytes f_9 = 27;
  message M1 {
    optional bytes f_0 = 3;
    optional bytes f_1 = 9 [ctype = CORD];
    optional int64 f_2 = 12;
    optional int64 f_3 = 18;
    repeated int32 f_4 = 20 [packed = true];
    optional int64 f_5 = 23;
    repeated bytes f_6 = 30;
    optional bool f_7 = 38;
    message M4 {
      optional int32 f_0 = 1;
      optional bytes f_1 = 5;
      optional int64 f_2 = 9;
      optional int32 f_3 = 14;
      repeated int32 f_4 = 22 [packed = true];
      optional bytes f_5 = 25;
      optional bytes f_6 = 29;
      enum E1 {
        E1_UNSPECIFIED = 0;
        E1_CONST_1 = 115;
        E1_CONST_2 = 62;
        E1_CONST_3 = 121;
        E1_CONST_4 = 9;
        E1_CONST_5 = 96;
      }
      optional E1 f_7 = 37;
      optional bytes f_8 = 44;
      repeated bytes f_9 = 46;
      optional int32 f_10 = 48;
      message M6 {
        optional uint64 f_0 = 2;
        optional uint64 f_1 = 6;
        message M7 {
          optional fixed64 f_0 = 4;
          optional bool f_1 = 8;
          optional int64 f_2 = 10;
          optional bytes f_3 = 15;
          optional bytes f_4 = 17;
          optional fixed64 f_5 = 21;
          optional int32 f_6 = 26;
          optional bytes f_7 = 31 [ctype = CORD];
          optional bytes f_8 = 37;
          repeated int32 f_9 = 40 [packed = true];
          optional bool f_10 = 48;
          repeated int32 f_11 = 49 [packed = true];
          message M8 {
            optional int64 f_0 = 3;
            optional int64 f_1 = 7;
            optional int64 f_2 = 11;
            optional uint64 f_3 = 14;
            repeated bytes f_4 = 21;
            optional int64 f_5 = 23;
            optional int32 f_6 = 24;
            optional int64 f_7 = 27;
            optional int32 f_8 = 30;
            optional bytes f_9 = 36;
            optional fixed32 f_10 = 38;
            optional uint64 f_11 = 41;
            optional int64 f_12 = 45;
            optional fixed32 f_13 = 48;
            optional int32 f_14 = 52;
            optional int32 f_15 = 57;
            optional bytes f_16 = 61;
            message M9 {
              optional bytes f_0 = 2 [ctype = CORD];
            }
            repeated M9 f_66 = 66;
            message M10 {
              optional uint64 f_0 = 3;
              optional int64 f_1 = 6;
              enum E2 {
                E2_UNSPECIFIED = 0;
                E2_CONST_1 = 114;
                E2_CONST_2 = 81;
                E2_CONST_3 = 41;
                E2_CONST_4 = 72;
                E2_CONST_5 = 75;
              }
              optional E2 f_2 = 9;
            }
            optional M10 f_69 = 69;
          }
          repeated M8 f_51 = 51;
        }
        optional M7 f_10 = 10;
      }
      optional M6 f_50 = 50;
    }
    optional M4 f_41 = 41;
  }
  repeated M1 f_32 = 32;
  message M2 {
    optional bool f_0 = 4;
    optional fixed64 f_1 = 7;
    optional fixed64 f_2 = 10;
    optional bytes f_3 = 15;
    optional bytes f_4 = 20 [ctype = CORD];
    optional int32 f_5 = 24;
    optional bytes f_6 = 26;
    optional string f_7 = 29;
    optional int64 f_8 = 31;
    optional uint64 f_9 = 34;
    optional bytes f_10 = 39 [ctype = CORD];
    optional bool f_11 = 41;
    optional int64 f_12 = 44;
    message M3 {
      optional int32 f_0 = 5;
      optional bytes f_1 = 6 [ctype = CORD];
      repeated bytes f_2 = 7;
      message M5 {
        repeated int32 f_0 = 1 [packed = true];
      }
      repeated M5 f_12 = 12;
    }
    optional M3 f_46 = 46;
  }
  optional M2 f_39 = 39;
}
