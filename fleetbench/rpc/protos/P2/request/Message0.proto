// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message0;

message Message0 {
  optional fixed32 f_0 = 1;
  optional fixed64 f_1 = 3;
  optional fixed64 f_2 = 4;
  optional string f_3 = 6;
  optional fixed32 f_4 = 8;
  optional int32 f_5 = 11;
  optional string f_6 = 14;
  optional int64 f_7 = 15;
  optional bool f_8 = 16;
  optional fixed64 f_9 = 17;
  optional fixed64 f_10 = 19;
  optional int64 f_11 = 20;
  optional string f_12 = 21;
  optional string f_13 = 24;
  optional fixed64 f_14 = 26;
  optional double f_15 = 28;
  optional fixed64 f_16 = 29;
  optional string f_17 = 31;
  optional double f_18 = 32;
  optional string f_19 = 33;
  optional int32 f_20 = 34;
  optional fixed64 f_21 = 35;
  optional fixed32 f_22 = 36;
  optional fixed64 f_23 = 38;
  optional int32 f_24 = 39;
  optional int32 f_25 = 40;
  optional fixed64 f_26 = 44;
  optional bool f_27 = 45;
  repeated int32 f_28 = 47 [packed = true];
  optional string f_29 = 48;
  message M1 {
    optional string f_0 = 1;
    message M9 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional string f_3 = 5;
      optional string f_4 = 9;
      optional fixed64 f_5 = 10;
      optional bytes f_6 = 11;
      optional bool f_7 = 12;
      optional int32 f_8 = 13;
      message M35 {
        optional string f_0 = 2;
        message M55 {
          enum E10 {
            E10_UNSPECIFIED = 0;
            E10_CONST_1 = 8;
            E10_CONST_2 = 84;
            E10_CONST_3 = 24;
            E10_CONST_4 = 110;
            E10_CONST_5 = 59;
          }
          repeated E10 f_0 = 1 [packed = true];
          optional bool f_1 = 3;
          optional int32 f_2 = 4;
          optional int32 f_3 = 5;
          optional double f_4 = 6;
          optional bool f_5 = 8;
          optional int32 f_6 = 9;
          optional string f_7 = 11;
        }
        optional M55 f_4 = 4;
        message M63 {
          optional string f_0 = 1;
        }
        repeated M63 f_6 = 6;
      }
      optional M35 f_16 = 16;
      message M45 {
        optional int32 f_0 = 4;
      }
      repeated M45 f_17 = 17;
      message M46 {
        optional string f_0 = 1;
        message M59 {
          optional bool f_0 = 4;
        }
        optional M59 f_3 = 3;
      }
      optional M46 f_20 = 20;
    }
    optional M9 f_2 = 2;
    message M20 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 4;
      optional string f_2 = 5;
      message M51 {
        optional bool f_0 = 2;
        optional fixed64 f_1 = 3;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 115;
          E8_CONST_2 = 126;
          E8_CONST_3 = 93;
          E8_CONST_4 = 117;
          E8_CONST_5 = 21;
        }
        optional E8 f_2 = 6;
        message M60 {
          optional bool f_0 = 1;
          message M67 {
            optional string f_0 = 1;
          }
          repeated M67 f_3 = 3;
          message M68 {
            optional string f_0 = 1;
          }
          repeated M68 f_6 = 6;
        }
        optional M60 f_7 = 7;
      }
      optional M51 f_7 = 7;
    }
    optional M20 f_3 = 3;
    message M26 {
      optional fixed64 f_0 = 1;
      message M31 {
        optional int32 f_0 = 2;
      }
      repeated M31 f_2 = 2;
      message M44 {
        optional double f_0 = 1;
        optional int32 f_1 = 4;
        message M64 {
          optional bool f_0 = 1;
          message M72 {
            optional string f_0 = 1;
            optional int32 f_1 = 4;
            optional string f_2 = 6;
          }
          optional M72 f_2 = 2;
        }
        optional M64 f_6 = 6;
      }
      repeated M44 f_4 = 4;
    }
    optional M26 f_5 = 5;
    message M29 {
      optional int32 f_0 = 1;
      message M32 {
        optional string f_0 = 4;
        optional fixed64 f_1 = 6;
        optional string f_2 = 7;
      }
      repeated M32 f_2 = 2;
      message M34 {
        optional string f_0 = 1;
        enum E2 {
          E2_UNSPECIFIED = 0;
          E2_CONST_1 = 116;
          E2_CONST_2 = 113;
          E2_CONST_3 = 9;
          E2_CONST_4 = 24;
          E2_CONST_5 = 43;
        }
        repeated E2 f_1 = 2 [packed = true];
        optional string f_2 = 3;
        optional fixed32 f_3 = 6;
        message M53 {
          optional bool f_0 = 3;
          optional int32 f_1 = 4;
        }
        optional M53 f_7 = 7;
        message M54 {
          optional int32 f_0 = 2;
        }
        repeated M54 f_8 = 8;
      }
      optional M34 f_4 = 4;
    }
    optional M29 f_6 = 6;
  }
  optional M1 f_50 = 50;
  message M2 {
    optional string f_0 = 2;
    message M10 {
      optional int32 f_0 = 1;
    }
    optional M10 f_3 = 3;
    message M15 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 5;
      optional string f_3 = 6;
      optional int32 f_4 = 8;
      message M43 {
        optional int32 f_0 = 1;
        optional bytes f_1 = 3;
        optional string f_2 = 4;
        optional fixed32 f_3 = 5;
        optional int32 f_4 = 7;
        optional string f_5 = 8;
      }
      optional M43 f_9 = 9;
    }
    optional M15 f_6 = 6;
    message M19 {
      optional string f_0 = 2;
    }
    repeated M19 f_7 = 7;
  }
  optional M2 f_52 = 52;
  message M3 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 3;
    optional int32 f_2 = 5;
    optional bool f_3 = 6;
    optional int32 f_4 = 9;
    optional string f_5 = 10;
    optional fixed32 f_6 = 11;
    optional string f_7 = 12;
    optional string f_8 = 16;
    optional fixed32 f_9 = 17;
    optional string f_10 = 18;
    message M24 {
      optional double f_0 = 4;
    }
    optional M24 f_19 = 19;
  }
  optional M3 f_53 = 53;
  message M4 {
    optional int32 f_0 = 1;
    message M17 {
      optional fixed64 f_0 = 2;
      optional bool f_1 = 4;
    }
    optional M17 f_2 = 2;
    message M18 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 2;
    }
    optional M18 f_4 = 4;
    message M21 {
      optional bool f_0 = 1;
      optional string f_1 = 3;
      optional int32 f_2 = 5;
      message M40 {
        optional bool f_0 = 3;
      }
      optional M40 f_6 = 6;
    }
    repeated M21 f_7 = 7;
  }
  optional M4 f_54 = 54;
  message M5 {
    optional string f_0 = 3;
    message M30 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 4;
      optional bool f_2 = 5;
      optional int32 f_3 = 6;
      message M48 {
        optional int32 f_0 = 1;
        message M56 {
          optional string f_0 = 1;
        }
        repeated M56 f_3 = 3;
      }
      optional M48 f_7 = 7;
    }
    repeated M30 f_5 = 5;
  }
  repeated M5 f_55 = 55;
  message M6 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 4;
    optional fixed64 f_2 = 5;
    optional fixed64 f_3 = 6;
    optional fixed64 f_4 = 7;
  }
  optional M6 f_56 = 56;
  message M7 {
    optional string f_0 = 1;
    message M11 {
      optional fixed64 f_0 = 2;
      optional bool f_1 = 3;
      optional fixed64 f_2 = 4;
      message M41 {
        optional string f_0 = 2;
        message M57 {
          optional double f_0 = 1;
          message M69 {
            optional fixed64 f_0 = 1;
            optional fixed32 f_1 = 2;
            optional int64 f_2 = 4;
            message M73 {
              optional fixed64 f_0 = 1;
            }
            optional M73 f_5 = 5;
          }
          optional M69 f_2 = 2;
        }
        optional M57 f_5 = 5;
      }
      repeated M41 f_5 = 5;
    }
    repeated M11 f_2 = 2;
    message M12 {
      optional int32 f_0 = 2;
      repeated int32 f_1 = 3 [packed = true];
      optional fixed32 f_2 = 4;
      optional string f_3 = 6;
      message M50 {
        optional bool f_0 = 2;
        optional string f_1 = 4;
        optional fixed64 f_2 = 6;
        optional bytes f_3 = 8;
        optional string f_4 = 11;
        optional int32 f_5 = 13;
        optional bool f_6 = 14;
        enum E5 {
          E5_UNSPECIFIED = 0;
          E5_CONST_1 = 8;
          E5_CONST_2 = 15;
          E5_CONST_3 = 49;
          E5_CONST_4 = 77;
          E5_CONST_5 = 35;
        }
        repeated E5 f_7 = 15 [packed = true];
        optional string f_8 = 16;
        optional string f_9 = 19;
        optional fixed64 f_10 = 21;
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 106;
          E6_CONST_2 = 85;
          E6_CONST_3 = 94;
          E6_CONST_4 = 90;
          E6_CONST_5 = 95;
        }
        repeated E6 f_11 = 22 [packed = true];
        optional int64 f_12 = 25;
        optional fixed64 f_13 = 26;
        optional int32 f_14 = 27;
        optional fixed32 f_15 = 29;
        optional int64 f_16 = 33;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 27;
          E7_CONST_2 = 116;
          E7_CONST_3 = 106;
          E7_CONST_4 = 112;
          E7_CONST_5 = 31;
        }
        repeated E7 f_17 = 35 [packed = true];
        optional fixed64 f_18 = 36;
        optional int32 f_19 = 37;
        optional fixed64 f_20 = 38;
        optional fixed64 f_21 = 40;
        optional fixed64 f_22 = 43;
        optional int64 f_23 = 44;
        optional bool f_24 = 45;
        optional fixed64 f_25 = 49;
        optional string f_26 = 50;
        optional string f_27 = 52;
        optional fixed64 f_28 = 53;
      }
      optional M50 f_7 = 7;
    }
    repeated M12 f_5 = 5;
    message M14 {
      optional int32 f_0 = 2;
      message M38 {
        optional string f_0 = 1;
      }
      optional M38 f_4 = 4;
      message M42 {
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 90;
          E4_CONST_2 = 31;
          E4_CONST_3 = 32;
          E4_CONST_4 = 7;
          E4_CONST_5 = 72;
        }
        repeated E4 f_0 = 1 [packed = true];
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 4;
      }
      optional M42 f_5 = 5;
    }
    repeated M14 f_6 = 6;
    message M16 {
      optional bool f_0 = 1;
      enum E1 {
        E1_UNSPECIFIED = 0;
        E1_CONST_1 = 70;
        E1_CONST_2 = 66;
        E1_CONST_3 = 47;
        E1_CONST_4 = 40;
        E1_CONST_5 = 24;
      }
      optional E1 f_1 = 2;
      optional string f_2 = 3;
      message M39 {
        enum E3 {
          E3_UNSPECIFIED = 0;
          E3_CONST_1 = 34;
          E3_CONST_2 = 31;
          E3_CONST_3 = 109;
          E3_CONST_4 = 116;
          E3_CONST_5 = 55;
        }
        optional E3 f_0 = 1;
        optional string f_1 = 2;
        optional bool f_2 = 3;
        optional int32 f_3 = 4;
        optional double f_4 = 5;
        message M61 {
          enum E11 {
            E11_UNSPECIFIED = 0;
            E11_CONST_1 = 6;
            E11_CONST_2 = 64;
            E11_CONST_3 = 125;
            E11_CONST_4 = 72;
            E11_CONST_5 = 23;
          }
          repeated E11 f_0 = 1 [packed = true];
          optional fixed32 f_1 = 3;
          optional int32 f_2 = 5;
          optional string f_3 = 6;
          optional fixed64 f_4 = 7;
          message M70 {
            optional int32 f_0 = 1;
            optional fixed64 f_1 = 4;
            optional string f_2 = 5;
          }
          repeated M70 f_8 = 8;
          message M71 {
            optional int32 f_0 = 1;
            optional bytes f_1 = 3;
          }
          optional M71 f_9 = 9;
        }
        optional M61 f_7 = 7;
      }
      optional M39 f_5 = 5;
    }
    repeated M16 f_7 = 7;
    message M25 {
      optional int32 f_0 = 1;
      message M36 {
        optional int64 f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 5;
      }
      optional M36 f_3 = 3;
      message M47 {
        optional bool f_0 = 2;
        optional string f_1 = 3;
        optional bool f_2 = 5;
      }
      optional M47 f_4 = 4;
    }
    optional M25 f_9 = 9;
    message M28 {
      optional int32 f_0 = 1;
      message M33 {
        optional string f_0 = 2;
        optional int32 f_1 = 3;
        optional string f_2 = 6;
        optional string f_3 = 8;
        message M52 {
          optional bool f_0 = 3;
          enum E9 {
            E9_UNSPECIFIED = 0;
            E9_CONST_1 = 10;
            E9_CONST_2 = 30;
            E9_CONST_3 = 19;
            E9_CONST_4 = 58;
            E9_CONST_5 = 75;
          }
          repeated E9 f_1 = 4 [packed = true];
          message M66 {
            optional double f_0 = 1;
          }
          optional M66 f_5 = 5;
        }
        optional M52 f_9 = 9;
        message M62 {
          optional fixed64 f_0 = 1;
        }
        repeated M62 f_11 = 11;
        message M65 {
          optional int32 f_0 = 1;
        }
        optional M65 f_12 = 12;
      }
      repeated M33 f_3 = 3;
      message M37 {
        optional int32 f_0 = 2;
      }
      optional M37 f_4 = 4;
    }
    repeated M28 f_10 = 10;
  }
  optional M7 f_57 = 57;
  message M8 {
    optional string f_0 = 4;
    optional int32 f_1 = 6;
    optional int32 f_2 = 9;
    optional fixed64 f_3 = 10;
    optional int32 f_4 = 12;
    optional fixed32 f_5 = 14;
    optional bool f_6 = 17;
    optional fixed64 f_7 = 19;
    optional string f_8 = 20;
    optional string f_9 = 21;
    optional bool f_10 = 22;
    optional bool f_11 = 23;
    optional int32 f_12 = 25;
    message M13 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 5;
      message M49 {
        optional string f_0 = 1;
        optional int32 f_1 = 3;
        optional string f_2 = 4;
        message M58 {
          optional string f_0 = 2;
          optional int32 f_1 = 4;
          optional bool f_2 = 5;
          optional string f_3 = 6;
          optional int32 f_4 = 7;
        }
        optional M58 f_5 = 5;
      }
      optional M49 f_6 = 6;
    }
    optional M13 f_26 = 26;
    message M22 {
      optional int32 f_0 = 1;
      optional bool f_1 = 3;
      optional bool f_2 = 4;
      optional fixed64 f_3 = 6;
      optional bool f_4 = 7;
      optional fixed64 f_5 = 8;
      optional int32 f_6 = 9;
      optional fixed64 f_7 = 10;
      optional int32 f_8 = 11;
      optional int64 f_9 = 12;
      optional fixed64 f_10 = 15;
      optional string f_11 = 16;
      optional int32 f_12 = 17;
      optional int32 f_13 = 18;
      optional fixed64 f_14 = 19;
      optional string f_15 = 21;
      optional string f_16 = 22;
      optional string f_17 = 23;
      optional fixed64 f_18 = 25;
      optional int32 f_19 = 26;
      optional string f_20 = 27;
      optional string f_21 = 29;
      optional double f_22 = 30;
      optional int32 f_23 = 32;
      optional int32 f_24 = 33;
      optional bool f_25 = 35;
      optional double f_26 = 37;
      optional fixed64 f_27 = 39;
      optional int32 f_28 = 40;
      optional fixed64 f_29 = 41;
      optional fixed64 f_30 = 45;
    }
    repeated M22 f_28 = 28;
    message M23 {
      optional fixed64 f_0 = 1;
    }
    optional M23 f_30 = 30;
    message M27 {
      optional int32 f_0 = 1;
      optional bool f_1 = 2;
      optional string f_2 = 3;
      optional string f_3 = 8;
      optional int32 f_4 = 10;
      optional fixed64 f_5 = 11;
      optional fixed64 f_6 = 13;
      optional string f_7 = 16;
      optional int32 f_8 = 17;
      optional fixed64 f_9 = 18;
      optional string f_10 = 21;
      optional string f_11 = 23;
    }
    repeated M27 f_32 = 32;
  }
  optional M8 f_58 = 58;
}
