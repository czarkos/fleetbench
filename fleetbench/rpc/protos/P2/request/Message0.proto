// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message0;

message Message0 {
  optional int32 f_0 = 2;
  optional double f_1 = 4;
  optional int32 f_2 = 6;
  optional fixed64 f_3 = 7;
  optional bool f_4 = 9;
  optional int32 f_5 = 11;
  optional string f_6 = 13;
  optional int32 f_7 = 14;
  optional int32 f_8 = 17;
  optional fixed64 f_9 = 18;
  optional string f_10 = 20;
  optional fixed64 f_11 = 21;
  optional bytes f_12 = 22;
  optional int32 f_13 = 26;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 60;
    E1_CONST_2 = 106;
    E1_CONST_3 = 26;
    E1_CONST_4 = 100;
    E1_CONST_5 = 12;
  }
  optional E1 f_14 = 27;
  optional fixed64 f_15 = 28;
  optional string f_16 = 30;
  optional bool f_17 = 33;
  optional fixed32 f_18 = 35;
  optional int32 f_19 = 36;
  optional int32 f_20 = 38;
  optional string f_21 = 42;
  optional string f_22 = 43;
  optional fixed64 f_23 = 44;
  optional string f_24 = 45;
  optional int32 f_25 = 46;
  optional int32 f_26 = 47;
  optional bool f_27 = 48;
  optional int32 f_28 = 49;
  optional double f_29 = 50;
  message M1 {
    optional fixed64 f_0 = 1;
    message M11 {
      optional string f_0 = 1;
      message M36 {
        optional int32 f_0 = 1;
        optional bool f_1 = 2;
      }
      optional M36 f_4 = 4;
    }
    optional M11 f_3 = 3;
    message M12 {
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 19;
        E3_CONST_2 = 48;
        E3_CONST_3 = 11;
        E3_CONST_4 = 4;
        E3_CONST_5 = 14;
      }
      repeated E3 f_0 = 2 [packed = true];
      optional int32 f_1 = 4;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 120;
        E4_CONST_2 = 22;
        E4_CONST_3 = 63;
        E4_CONST_4 = 20;
        E4_CONST_5 = 121;
      }
      repeated E4 f_2 = 8 [packed = true];
      optional fixed64 f_3 = 10;
      optional string f_4 = 11;
    }
    optional M12 f_4 = 4;
    message M13 {
      optional int32 f_0 = 2;
    }
    optional M13 f_5 = 5;
    message M16 {
      optional double f_0 = 3;
      message M32 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 4;
        optional string f_2 = 6;
      }
      optional M32 f_5 = 5;
      message M44 {
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 4;
          E12_CONST_2 = 105;
          E12_CONST_3 = 115;
          E12_CONST_4 = 38;
          E12_CONST_5 = 111;
        }
        repeated E12 f_0 = 2 [packed = true];
      }
      optional M44 f_6 = 6;
      message M49 {
        optional fixed64 f_0 = 3;
        optional int64 f_1 = 4;
        optional int32 f_2 = 5;
        optional string f_3 = 7;
        message M63 {
          optional fixed32 f_0 = 2;
          optional fixed64 f_1 = 3;
          optional fixed64 f_2 = 4;
          optional int32 f_3 = 5;
          optional fixed64 f_4 = 7;
          optional bool f_5 = 10;
          optional int32 f_6 = 11;
          optional fixed64 f_7 = 13;
          optional string f_8 = 18;
          optional string f_9 = 19;
          optional fixed64 f_10 = 22;
          optional string f_11 = 23;
          optional string f_12 = 25;
          optional fixed64 f_13 = 26;
          optional string f_14 = 29;
          enum E20 {
            E20_UNSPECIFIED = 0;
            E20_CONST_1 = 21;
            E20_CONST_2 = 71;
            E20_CONST_3 = 89;
            E20_CONST_4 = 28;
            E20_CONST_5 = 121;
          }
          optional E20 f_15 = 32;
          optional fixed64 f_16 = 34;
          optional bool f_17 = 35;
          optional string f_18 = 36;
          optional fixed32 f_19 = 37;
          optional fixed64 f_20 = 40;
          optional fixed64 f_21 = 42;
          optional double f_22 = 43;
          repeated string f_23 = 44;
          optional string f_24 = 45;
          optional string f_25 = 47;
          optional fixed64 f_26 = 49;
          optional fixed64 f_27 = 52;
          optional int32 f_28 = 54;
          enum E21 {
            E21_UNSPECIFIED = 0;
            E21_CONST_1 = 15;
            E21_CONST_2 = 106;
            E21_CONST_3 = 14;
            E21_CONST_4 = 120;
            E21_CONST_5 = 37;
          }
          optional E21 f_29 = 56;
          optional int32 f_30 = 57;
          message M67 {
            optional int32 f_0 = 2;
            optional string f_1 = 5;
            optional int32 f_2 = 7;
            optional int32 f_3 = 8;
          }
          repeated M67 f_59 = 59;
          message M69 {
            optional int32 f_0 = 2;
          }
          repeated M69 f_60 = 60;
        }
        optional M63 f_9 = 9;
      }
      repeated M49 f_8 = 8;
    }
    optional M16 f_6 = 6;
  }
  optional M1 f_53 = 53;
  message M2 {
    optional fixed64 f_0 = 3;
    optional int32 f_1 = 5;
    optional string f_2 = 8;
    optional fixed64 f_3 = 9;
    optional int32 f_4 = 12;
    message M19 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 4;
      optional string f_2 = 5;
      message M42 {
        optional int32 f_0 = 4;
        message M57 {
          optional fixed64 f_0 = 2;
          message M71 {
            optional string f_0 = 1;
            enum E23 {
              E23_UNSPECIFIED = 0;
              E23_CONST_1 = 69;
              E23_CONST_2 = 15;
              E23_CONST_3 = 110;
              E23_CONST_4 = 88;
              E23_CONST_5 = 24;
            }
            optional E23 f_1 = 3;
            optional int32 f_2 = 4;
            optional double f_3 = 6;
            optional string f_4 = 8;
            optional string f_5 = 9;
            optional string f_6 = 10;
            optional string f_7 = 11;
            optional fixed64 f_8 = 12;
            optional int32 f_9 = 14;
            optional int64 f_10 = 15;
            optional string f_11 = 16;
            optional string f_12 = 17;
            optional string f_13 = 19;
            optional string f_14 = 23;
            optional int32 f_15 = 24;
            optional fixed64 f_16 = 26;
            optional string f_17 = 27;
            optional string f_18 = 28;
            optional fixed64 f_19 = 29;
            optional int32 f_20 = 31;
            optional fixed64 f_21 = 32;
            optional string f_22 = 33;
            optional double f_23 = 34;
            optional string f_24 = 36;
            optional bool f_25 = 38;
            optional fixed64 f_26 = 40;
            optional fixed64 f_27 = 41;
            optional fixed64 f_28 = 42;
            optional double f_29 = 43;
            enum E24 {
              E24_UNSPECIFIED = 0;
              E24_CONST_1 = 25;
              E24_CONST_2 = 37;
              E24_CONST_3 = 77;
              E24_CONST_4 = 16;
              E24_CONST_5 = 8;
            }
            repeated E24 f_30 = 44 [packed = true];
            optional string f_31 = 46;
            optional double f_32 = 47;
          }
          repeated M71 f_5 = 5;
        }
        optional M57 f_6 = 6;
      }
      optional M42 f_7 = 7;
    }
    optional M19 f_13 = 13;
    message M23 {
      optional string f_0 = 1;
      optional bool f_1 = 3;
      optional string f_2 = 5;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 6;
        E7_CONST_2 = 112;
        E7_CONST_3 = 69;
        E7_CONST_4 = 44;
        E7_CONST_5 = 38;
      }
      repeated E7 f_3 = 6 [packed = true];
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 11;
        E8_CONST_2 = 122;
        E8_CONST_3 = 110;
        E8_CONST_4 = 90;
        E8_CONST_5 = 5;
      }
      repeated E8 f_4 = 7 [packed = true];
      optional int32 f_5 = 9;
      optional string f_6 = 12;
    }
    optional M23 f_15 = 15;
  }
  repeated M2 f_55 = 55;
  message M3 {
    optional fixed64 f_0 = 1;
    message M8 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 3;
      optional double f_2 = 4;
      optional string f_3 = 7;
      optional bool f_4 = 10;
    }
    optional M8 f_3 = 3;
    message M18 {
      optional string f_0 = 1;
      message M27 {
        optional int32 f_0 = 1;
        optional string f_1 = 3;
        optional bytes f_2 = 5;
        message M59 {
          optional fixed32 f_0 = 1;
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 92;
            E17_CONST_2 = 83;
            E17_CONST_3 = 81;
            E17_CONST_4 = 15;
            E17_CONST_5 = 113;
          }
          optional E17 f_1 = 2;
          optional double f_2 = 4;
          message M66 {
            optional fixed64 f_0 = 1;
          }
          repeated M66 f_6 = 6;
        }
        repeated M59 f_6 = 6;
      }
      repeated M27 f_2 = 2;
      message M50 {
        optional fixed32 f_0 = 4;
        message M54 {
          optional fixed64 f_0 = 2;
          message M64 {
            optional int32 f_0 = 1;
          }
          optional M64 f_3 = 3;
        }
        repeated M54 f_5 = 5;
        message M58 {
          optional fixed64 f_0 = 1;
          message M68 {
            optional fixed64 f_0 = 2;
          }
          optional M68 f_2 = 2;
        }
        repeated M58 f_6 = 6;
      }
      repeated M50 f_3 = 3;
    }
    optional M18 f_4 = 4;
  }
  optional M3 f_57 = 57;
  message M4 {
    optional fixed64 f_0 = 2;
    optional int32 f_1 = 4;
    optional int32 f_2 = 5;
    optional bool f_3 = 6;
    optional int32 f_4 = 8;
    optional string f_5 = 9;
    optional string f_6 = 10;
    optional int32 f_7 = 12;
    optional string f_8 = 13;
    optional string f_9 = 14;
    optional fixed64 f_10 = 15;
    optional double f_11 = 16;
    optional bool f_12 = 17;
    optional string f_13 = 18;
    optional int32 f_14 = 19;
    optional fixed64 f_15 = 21;
    optional fixed64 f_16 = 23;
    optional string f_17 = 25;
    optional bool f_18 = 27;
    optional string f_19 = 28;
    message M7 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 4;
      optional int32 f_2 = 6;
      optional string f_3 = 8;
      optional bool f_4 = 9;
      optional int32 f_5 = 10;
      optional int32 f_6 = 12;
      message M39 {
        optional int32 f_0 = 1;
        message M55 {
          optional double f_0 = 3;
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 98;
            E16_CONST_2 = 88;
            E16_CONST_3 = 11;
            E16_CONST_4 = 85;
            E16_CONST_5 = 102;
          }
          repeated E16 f_1 = 4 [packed = true];
          optional double f_2 = 6;
          optional double f_3 = 7;
          message M65 {
            enum E22 {
              E22_UNSPECIFIED = 0;
              E22_CONST_1 = 110;
              E22_CONST_2 = 68;
              E22_CONST_3 = 59;
              E22_CONST_4 = 5;
              E22_CONST_5 = 111;
            }
            optional E22 f_0 = 3;
          }
          optional M65 f_8 = 8;
        }
        optional M55 f_3 = 3;
        message M62 {
          optional double f_0 = 1;
          optional fixed64 f_1 = 2;
          optional bool f_2 = 5;
          optional int32 f_3 = 6;
        }
        repeated M62 f_4 = 4;
      }
      optional M39 f_13 = 13;
      message M40 {
        optional double f_0 = 1;
      }
      optional M40 f_14 = 14;
    }
    optional M7 f_32 = 32;
    message M9 {
      optional string f_0 = 1;
      message M48 {
        optional fixed64 f_0 = 3;
      }
      optional M48 f_2 = 2;
    }
    optional M9 f_33 = 33;
    message M15 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 4;
      optional fixed32 f_2 = 6;
      optional fixed32 f_3 = 7;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 57;
        E5_CONST_2 = 109;
        E5_CONST_3 = 81;
        E5_CONST_4 = 21;
        E5_CONST_5 = 120;
      }
      optional E5 f_4 = 8;
      message M28 {
        optional fixed32 f_0 = 1;
      }
      repeated M28 f_11 = 11;
    }
    optional M15 f_35 = 35;
    message M21 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 4;
      optional string f_2 = 6;
      optional int32 f_3 = 7;
      message M31 {
        optional fixed64 f_0 = 1;
      }
      optional M31 f_9 = 9;
      message M45 {
        optional bool f_0 = 1;
        optional double f_1 = 2;
        optional fixed32 f_2 = 4;
      }
      optional M45 f_11 = 11;
      message M47 {
        optional string f_0 = 2;
        optional fixed64 f_1 = 4;
        optional bool f_2 = 5;
        optional uint64 f_3 = 6;
        optional double f_4 = 8;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 125;
          E13_CONST_2 = 108;
          E13_CONST_3 = 24;
          E13_CONST_4 = 102;
          E13_CONST_5 = 120;
        }
        repeated E13 f_5 = 10 [packed = true];
      }
      optional M47 f_13 = 13;
    }
    repeated M21 f_36 = 36;
    message M24 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 4;
      message M37 {
        optional fixed32 f_0 = 1;
        message M60 {
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 15;
            E18_CONST_2 = 116;
            E18_CONST_3 = 67;
            E18_CONST_4 = 24;
            E18_CONST_5 = 82;
          }
          repeated E18 f_0 = 3 [packed = true];
          message M70 {
            optional fixed64 f_0 = 1;
          }
          optional M70 f_4 = 4;
        }
        optional M60 f_3 = 3;
      }
      optional M37 f_7 = 7;
      message M43 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
      }
      repeated M43 f_8 = 8;
    }
    repeated M24 f_37 = 37;
    message M26 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      optional string f_2 = 5;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 9;
        E9_CONST_2 = 83;
        E9_CONST_3 = 35;
        E9_CONST_4 = 70;
        E9_CONST_5 = 18;
      }
      optional E9 f_3 = 7;
      optional fixed64 f_4 = 9;
    }
    optional M26 f_40 = 40;
  }
  optional M4 f_59 = 59;
  message M5 {
    optional fixed64 f_0 = 1;
    optional bool f_1 = 3;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 96;
      E2_CONST_2 = 23;
      E2_CONST_3 = 124;
      E2_CONST_4 = 41;
      E2_CONST_5 = 31;
    }
    optional E2 f_2 = 5;
    message M10 {
      optional fixed64 f_0 = 2;
      message M30 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 4;
        optional fixed32 f_2 = 5;
        optional fixed64 f_3 = 6;
      }
      optional M30 f_6 = 6;
      message M33 {
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 4;
          E10_CONST_2 = 119;
          E10_CONST_3 = 90;
          E10_CONST_4 = 27;
          E10_CONST_5 = 81;
        }
        repeated E10 f_0 = 4 [packed = true];
        optional string f_1 = 5;
        optional fixed32 f_2 = 6;
        optional string f_3 = 8;
        optional string f_4 = 9;
        optional int32 f_5 = 10;
        optional string f_6 = 12;
        optional fixed64 f_7 = 13;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 41;
          E11_CONST_2 = 80;
          E11_CONST_3 = 38;
          E11_CONST_4 = 21;
          E11_CONST_5 = 23;
        }
        optional E11 f_8 = 14;
      }
      repeated M33 f_10 = 10;
      message M41 {
        optional fixed64 f_0 = 1;
        optional fixed32 f_1 = 3;
        optional string f_2 = 5;
      }
      optional M41 f_11 = 11;
    }
    optional M10 f_7 = 7;
    message M14 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional fixed64 f_2 = 5;
      optional fixed64 f_3 = 6;
      optional fixed64 f_4 = 7;
      optional fixed64 f_5 = 9;
      message M29 {
        optional fixed64 f_0 = 1;
        message M61 {
          optional int32 f_0 = 1;
          optional bool f_1 = 4;
          optional int32 f_2 = 6;
          optional string f_3 = 8;
          optional int32 f_4 = 10;
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 79;
            E19_CONST_2 = 116;
            E19_CONST_3 = 123;
            E19_CONST_4 = 114;
            E19_CONST_5 = 101;
          }
          optional E19 f_5 = 11;
        }
        optional M61 f_2 = 2;
      }
      optional M29 f_10 = 10;
      message M34 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 4;
      }
      optional M34 f_13 = 13;
      message M35 {
        optional string f_0 = 1;
      }
      repeated M35 f_14 = 14;
      message M51 {
        optional int32 f_0 = 1;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 86;
          E14_CONST_2 = 75;
          E14_CONST_3 = 29;
          E14_CONST_4 = 39;
          E14_CONST_5 = 61;
        }
        repeated E14 f_1 = 2 [packed = true];
        optional bool f_2 = 4;
      }
      optional M51 f_17 = 17;
    }
    repeated M14 f_9 = 9;
    message M20 {
      optional int32 f_0 = 1;
      optional bool f_1 = 4;
      optional int32 f_2 = 6;
    }
    repeated M20 f_10 = 10;
    message M22 {
      optional bool f_0 = 1;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 23;
        E6_CONST_2 = 101;
        E6_CONST_3 = 50;
        E6_CONST_4 = 5;
        E6_CONST_5 = 83;
      }
      optional E6 f_1 = 2;
      optional fixed64 f_2 = 4;
      message M38 {
        optional int32 f_0 = 2;
        message M53 {
          optional int32 f_0 = 1;
          optional bool f_1 = 2;
          optional fixed64 f_2 = 3;
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 26;
            E15_CONST_2 = 98;
            E15_CONST_3 = 29;
            E15_CONST_4 = 71;
            E15_CONST_5 = 4;
          }
          repeated E15 f_3 = 7 [packed = true];
          optional fixed64 f_4 = 8;
          optional string f_5 = 9;
        }
        repeated M53 f_4 = 4;
        message M56 {
          optional int32 f_0 = 3;
          optional fixed32 f_1 = 4;
          optional string f_2 = 5;
          optional fixed32 f_3 = 6;
        }
        optional M56 f_6 = 6;
      }
      repeated M38 f_6 = 6;
      message M52 {
        optional fixed64 f_0 = 2;
        optional fixed64 f_1 = 5;
        optional fixed64 f_2 = 7;
        optional int32 f_3 = 8;
        optional int64 f_4 = 9;
        optional int32 f_5 = 11;
        optional bool f_6 = 12;
        optional int32 f_7 = 14;
        optional int32 f_8 = 15;
        optional string f_9 = 16;
        optional string f_10 = 18;
        optional int32 f_11 = 19;
        optional int32 f_12 = 20;
        optional string f_13 = 21;
      }
      optional M52 f_8 = 8;
    }
    optional M22 f_12 = 12;
    message M25 {
      optional string f_0 = 2;
      message M46 {
        optional string f_0 = 2;
      }
      optional M46 f_4 = 4;
    }
    optional M25 f_13 = 13;
  }
  optional M5 f_61 = 61;
  message M6 {
    optional bool f_0 = 1;
    message M17 {
      optional string f_0 = 1;
    }
    optional M17 f_2 = 2;
  }
  repeated M6 f_63 = 63;
}
