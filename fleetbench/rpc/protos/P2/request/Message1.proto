// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message1;

message Message1 {
  optional string f_0 = 4;
  optional int64 f_1 = 5;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 102;
    E1_CONST_2 = 64;
    E1_CONST_3 = 50;
    E1_CONST_4 = 18;
    E1_CONST_5 = 60;
  }
  optional E1 f_2 = 7;
  optional int64 f_3 = 8;
  optional int64 f_4 = 14;
  optional bytes f_5 = 16;
  message M1 {
    optional int64 f_0 = 4;
    repeated int32 f_1 = 8 [packed = true];
  }
  optional M1 f_20 = 20;
  message M2 {
    optional bytes f_0 = 3 [ctype = CORD];
    optional bool f_1 = 5;
    message M5 {
      optional int32 f_0 = 5;
      optional fixed64 f_1 = 7;
      message M7 {
        optional bytes f_0 = 2 [ctype = CORD];
        optional fixed64 f_1 = 4;
        optional bytes f_2 = 9;
        optional bytes f_3 = 10;
        optional int32 f_4 = 13;
        optional fixed64 f_5 = 18;
        optional bytes f_6 = 22 [ctype = CORD];
        optional int64 f_7 = 25;
        optional int32 f_8 = 32;
        repeated bytes f_9 = 35;
        optional fixed64 f_10 = 39;
        optional string f_11 = 44;
        message M8 {
          repeated bytes f_0 = 3;
          enum E3 {
            E3_UNSPECIFIED = 0;
            E3_CONST_1 = 28;
            E3_CONST_2 = 67;
            E3_CONST_3 = 5;
            E3_CONST_4 = 33;
            E3_CONST_5 = 19;
          }
          optional E3 f_1 = 7;
          optional bool f_2 = 13;
          repeated int32 f_3 = 16 [packed = true];
          optional bytes f_4 = 18;
          optional fixed64 f_5 = 21;
          optional uint64 f_6 = 26;
          optional fixed64 f_7 = 30;
          optional bool f_8 = 35;
          optional bytes f_9 = 37;
          optional bytes f_10 = 40;
          optional int64 f_11 = 43;
          optional bytes f_12 = 44;
          optional bytes f_13 = 48;
          optional string f_14 = 51;
          optional uint64 f_15 = 57;
          optional int64 f_16 = 59;
          message M9 {
            optional int32 f_0 = 4;
            optional uint64 f_1 = 7;
            optional int32 f_2 = 13;
            repeated int32 f_3 = 19 [packed = true];
            optional fixed64 f_4 = 24;
            optional bytes f_5 = 28 [ctype = CORD];
            optional int64 f_6 = 34;
            optional fixed64 f_7 = 38;
            enum E4 {
              E4_UNSPECIFIED = 0;
              E4_CONST_1 = 64;
              E4_CONST_2 = 76;
              E4_CONST_3 = 8;
              E4_CONST_4 = 74;
              E4_CONST_5 = 14;
            }
            optional E4 f_8 = 41;
            optional int64 f_9 = 44;
            optional string f_10 = 50;
            optional fixed32 f_11 = 54;
            optional string f_12 = 58;
            optional int32 f_13 = 60;
          }
          optional M9 f_62 = 62;
        }
        repeated M8 f_45 = 45;
      }
      optional M7 f_10 = 10;
    }
    optional M5 f_6 = 6;
  }
  optional M2 f_26 = 26;
  message M3 {
    optional int64 f_0 = 3;
    optional fixed64 f_1 = 5;
    optional int64 f_2 = 6;
    optional int32 f_3 = 9;
    repeated bytes f_4 = 11;
    optional fixed64 f_5 = 13;
    message M6 {
      repeated bytes f_0 = 5;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 47;
        E2_CONST_2 = 46;
        E2_CONST_3 = 62;
        E2_CONST_4 = 84;
        E2_CONST_5 = 100;
      }
      optional E2 f_1 = 8;
      optional fixed32 f_2 = 11;
      optional fixed64 f_3 = 14;
      optional fixed64 f_4 = 18;
      optional int64 f_5 = 20;
      optional int32 f_6 = 25;
      optional bytes f_7 = 27;
      optional bytes f_8 = 33;
      optional int32 f_9 = 36;
    }
    optional M6 f_21 = 21;
  }
  optional M3 f_33 = 33;
  message M4 {
    optional fixed32 f_0 = 2;
    repeated int32 f_1 = 6 [packed = true];
    optional bytes f_2 = 10 [ctype = CORD];
    optional int32 f_3 = 13;
    optional int32 f_4 = 15;
    optional string f_5 = 19;
    optional int32 f_6 = 25;
    optional int64 f_7 = 32;
    optional bytes f_8 = 40;
  }
  optional M4 f_36 = 36;
}
