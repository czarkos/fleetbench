// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message1;

message Message1 {
  optional string f_0 = 1;
  optional fixed64 f_1 = 3;
  optional bool f_2 = 4;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 102;
    E1_CONST_2 = 105;
    E1_CONST_3 = 88;
    E1_CONST_4 = 9;
    E1_CONST_5 = 23;
  }
  repeated E1 f_3 = 5 [packed = true];
  optional int32 f_4 = 7;
  optional string f_5 = 8;
  optional string f_6 = 9;
  optional bytes f_7 = 11;
  optional fixed64 f_8 = 12;
  optional fixed64 f_9 = 16;
  optional fixed32 f_10 = 18;
  optional int32 f_11 = 19;
  optional string f_12 = 20;
  optional bool f_13 = 21;
  optional fixed64 f_14 = 23;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 42;
    E2_CONST_2 = 12;
    E2_CONST_3 = 37;
    E2_CONST_4 = 28;
    E2_CONST_5 = 79;
  }
  repeated E2 f_15 = 24 [packed = true];
  optional fixed64 f_16 = 26;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 93;
    E3_CONST_2 = 49;
    E3_CONST_3 = 101;
    E3_CONST_4 = 25;
    E3_CONST_5 = 9;
  }
  optional E3 f_17 = 27;
  optional fixed64 f_18 = 30;
  optional fixed64 f_19 = 31;
  optional string f_20 = 32;
  optional fixed64 f_21 = 34;
  optional bytes f_22 = 37;
  optional int32 f_23 = 40;
  optional bool f_24 = 41;
  optional string f_25 = 42;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 48;
    E4_CONST_2 = 13;
    E4_CONST_3 = 97;
    E4_CONST_4 = 126;
    E4_CONST_5 = 120;
  }
  optional E4 f_26 = 43;
  optional bool f_27 = 45;
  optional int32 f_28 = 48;
  optional fixed64 f_29 = 49;
  message M1 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 5;
    optional string f_2 = 6;
    optional double f_3 = 8;
    message M7 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 113;
        E6_CONST_2 = 89;
        E6_CONST_3 = 32;
        E6_CONST_4 = 104;
        E6_CONST_5 = 18;
      }
      repeated E6 f_0 = 1 [packed = true];
      message M28 {
        optional string f_0 = 1;
        optional string f_1 = 2;
        optional int32 f_2 = 3;
        message M38 {
          optional string f_0 = 1;
          optional int64 f_1 = 2;
          message M53 {
            optional fixed32 f_0 = 1;
          }
          optional M53 f_4 = 4;
        }
        optional M38 f_6 = 6;
      }
      repeated M28 f_3 = 3;
    }
    optional M7 f_11 = 11;
    message M18 {
      optional bool f_0 = 1;
      optional string f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 5;
    }
    optional M18 f_12 = 12;
    message M20 {
      optional fixed32 f_0 = 2;
    }
    optional M20 f_13 = 13;
    message M22 {
      optional string f_0 = 1;
      optional double f_1 = 2;
    }
    repeated M22 f_15 = 15;
    message M23 {
      optional bool f_0 = 2;
    }
    repeated M23 f_16 = 16;
  }
  optional M1 f_50 = 50;
  message M2 {
    optional string f_0 = 1;
    optional string f_1 = 3;
    optional fixed64 f_2 = 4;
    message M6 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 4;
      optional double f_3 = 5;
      message M29 {
        optional string f_0 = 2;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 10;
          E8_CONST_2 = 12;
          E8_CONST_3 = 17;
          E8_CONST_4 = 47;
          E8_CONST_5 = 25;
        }
        optional E8 f_1 = 3;
        optional int32 f_2 = 4;
        message M40 {
          optional fixed32 f_0 = 4;
          message M55 {
            optional fixed64 f_0 = 3;
            message M59 {
              optional int32 f_0 = 3;
              optional fixed64 f_1 = 4;
            }
            optional M59 f_6 = 6;
          }
          repeated M55 f_5 = 5;
        }
        repeated M40 f_5 = 5;
        message M42 {
          optional int32 f_0 = 1;
          message M52 {
            optional string f_0 = 2;
          }
          repeated M52 f_2 = 2;
        }
        optional M42 f_6 = 6;
        message M49 {
          optional fixed64 f_0 = 2;
        }
        optional M49 f_7 = 7;
        message M50 {
          optional fixed64 f_0 = 3;
          message M54 {
            optional fixed64 f_0 = 1;
          }
          optional M54 f_4 = 4;
          message M57 {
            optional int32 f_0 = 2;
          }
          optional M57 f_5 = 5;
          message M58 {
            optional fixed64 f_0 = 2;
          }
          optional M58 f_8 = 8;
        }
        optional M50 f_8 = 8;
      }
      optional M29 f_6 = 6;
      message M30 {
        optional double f_0 = 3;
      }
      repeated M30 f_8 = 8;
      message M31 {
        optional string f_0 = 2;
        message M51 {
          optional string f_0 = 1;
          optional bool f_1 = 2;
          optional int32 f_2 = 4;
          enum E12 {
            E12_UNSPECIFIED = 0;
            E12_CONST_1 = 98;
            E12_CONST_2 = 69;
            E12_CONST_3 = 65;
            E12_CONST_4 = 72;
            E12_CONST_5 = 45;
          }
          repeated E12 f_3 = 5 [packed = true];
        }
        repeated M51 f_3 = 3;
      }
      optional M31 f_9 = 9;
    }
    optional M6 f_6 = 6;
    message M10 {
      optional bool f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 5;
      optional fixed32 f_3 = 6;
      optional double f_4 = 8;
      optional string f_5 = 9;
      optional string f_6 = 10;
    }
    repeated M10 f_7 = 7;
    message M11 {
      optional int32 f_0 = 2;
    }
    repeated M11 f_9 = 9;
    message M16 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 4;
      message M32 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 3;
        optional string f_2 = 4;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 70;
          E9_CONST_2 = 106;
          E9_CONST_3 = 43;
          E9_CONST_4 = 55;
          E9_CONST_5 = 20;
        }
        repeated E9 f_3 = 5 [packed = true];
        message M39 {
          optional fixed64 f_0 = 1;
          message M56 {
            enum E13 {
              E13_UNSPECIFIED = 0;
              E13_CONST_1 = 103;
              E13_CONST_2 = 116;
              E13_CONST_3 = 26;
              E13_CONST_4 = 42;
              E13_CONST_5 = 117;
            }
            optional E13 f_0 = 3;
          }
          optional M56 f_3 = 3;
        }
        repeated M39 f_7 = 7;
        message M48 {
          optional string f_0 = 1;
        }
        repeated M48 f_8 = 8;
      }
      optional M32 f_6 = 6;
    }
    optional M16 f_10 = 10;
    message M21 {
      optional fixed64 f_0 = 1;
      message M33 {
        optional string f_0 = 1;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 89;
          E10_CONST_2 = 56;
          E10_CONST_3 = 34;
          E10_CONST_4 = 114;
          E10_CONST_5 = 112;
        }
        repeated E10 f_1 = 3 [packed = true];
        optional string f_2 = 4;
        optional fixed64 f_3 = 5;
        optional bool f_4 = 7;
        optional int32 f_5 = 8;
        optional fixed64 f_6 = 9;
        optional string f_7 = 11;
        message M36 {
          optional int32 f_0 = 1;
        }
        optional M36 f_12 = 12;
        message M44 {
          enum E11 {
            E11_UNSPECIFIED = 0;
            E11_CONST_1 = 110;
            E11_CONST_2 = 36;
            E11_CONST_3 = 27;
            E11_CONST_4 = 30;
            E11_CONST_5 = 59;
          }
          optional E11 f_0 = 1;
        }
        optional M44 f_14 = 14;
      }
      optional M33 f_3 = 3;
      message M35 {
        optional fixed64 f_0 = 1;
        message M45 {
          optional fixed32 f_0 = 1;
          optional string f_1 = 2;
        }
        optional M45 f_2 = 2;
        message M47 {
          optional fixed64 f_0 = 1;
        }
        optional M47 f_3 = 3;
      }
      optional M35 f_4 = 4;
    }
    optional M21 f_11 = 11;
    message M25 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      message M27 {
        optional fixed32 f_0 = 1;
        optional bool f_1 = 5;
        optional string f_2 = 6;
        optional fixed64 f_3 = 7;
        optional string f_4 = 9;
        optional bool f_5 = 10;
        optional string f_6 = 11;
      }
      optional M27 f_6 = 6;
    }
    repeated M25 f_12 = 12;
  }
  repeated M2 f_53 = 53;
  message M3 {
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 72;
      E5_CONST_2 = 53;
      E5_CONST_3 = 121;
      E5_CONST_4 = 55;
      E5_CONST_5 = 68;
    }
    optional E5 f_0 = 2;
    message M5 {
      optional fixed32 f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed32 f_3 = 5;
    }
    optional M5 f_3 = 3;
    message M9 {
      optional fixed64 f_0 = 2;
    }
    optional M9 f_4 = 4;
    message M12 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 4;
      optional string f_3 = 5;
      optional fixed64 f_4 = 7;
      message M26 {
        optional fixed64 f_0 = 2;
        message M41 {
          optional string f_0 = 1;
        }
        optional M41 f_3 = 3;
        message M43 {
          optional fixed32 f_0 = 1;
        }
        optional M43 f_4 = 4;
      }
      optional M26 f_8 = 8;
      message M34 {
        optional fixed64 f_0 = 2;
        message M37 {
          optional fixed64 f_0 = 1;
        }
        optional M37 f_3 = 3;
        message M46 {
          optional fixed64 f_0 = 1;
        }
        optional M46 f_5 = 5;
      }
      optional M34 f_9 = 9;
    }
    repeated M12 f_5 = 5;
    message M15 {
      optional int32 f_0 = 2;
      optional string f_1 = 3;
    }
    repeated M15 f_6 = 6;
    message M17 {
      optional string f_0 = 2;
    }
    optional M17 f_7 = 7;
    message M24 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional string f_2 = 4;
      optional int32 f_3 = 7;
      optional string f_4 = 8;
      optional int32 f_5 = 9;
      optional bool f_6 = 11;
      optional int32 f_7 = 12;
      optional fixed64 f_8 = 13;
      optional int32 f_9 = 15;
      optional string f_10 = 18;
      optional int32 f_11 = 19;
      optional bool f_12 = 20;
      optional int64 f_13 = 21;
      optional fixed64 f_14 = 22;
      optional int32 f_15 = 24;
      optional fixed64 f_16 = 25;
      optional fixed64 f_17 = 26;
      optional string f_18 = 27;
      optional int32 f_19 = 28;
      optional int32 f_20 = 29;
      optional string f_21 = 30;
      optional bool f_22 = 31;
      optional bool f_23 = 32;
      optional string f_24 = 33;
      optional fixed64 f_25 = 35;
      optional double f_26 = 37;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 125;
        E7_CONST_2 = 95;
        E7_CONST_3 = 79;
        E7_CONST_4 = 42;
        E7_CONST_5 = 57;
      }
      optional E7 f_27 = 38;
      optional bool f_28 = 40;
      optional int32 f_29 = 41;
      optional string f_30 = 42;
    }
    optional M24 f_8 = 8;
  }
  optional M3 f_55 = 55;
  message M4 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed32 f_2 = 3;
    optional string f_3 = 6;
    optional fixed64 f_4 = 7;
    optional int32 f_5 = 8;
    optional fixed64 f_6 = 10;
    optional fixed64 f_7 = 11;
    optional string f_8 = 12;
    message M8 {
      optional fixed32 f_0 = 2;
    }
    optional M8 f_13 = 13;
    message M13 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 3;
      optional string f_2 = 5;
      optional fixed64 f_3 = 6;
      optional int32 f_4 = 7;
    }
    optional M13 f_14 = 14;
    message M14 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 2;
      optional fixed64 f_2 = 4;
    }
    optional M14 f_15 = 15;
    message M19 {
      optional string f_0 = 1;
    }
    repeated M19 f_17 = 17;
  }
  repeated M4 f_57 = 57;
}
