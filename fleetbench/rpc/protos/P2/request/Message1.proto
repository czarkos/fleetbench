// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.request.Message1;

message Message1 {
  optional string f_0 = 1;
  optional string f_1 = 3;
  optional double f_2 = 5;
  optional fixed64 f_3 = 6;
  optional int32 f_4 = 7;
  optional fixed64 f_5 = 8;
  optional fixed64 f_6 = 10;
  optional int32 f_7 = 13;
  optional int32 f_8 = 14;
  optional fixed64 f_9 = 15;
  optional int64 f_10 = 17;
  optional fixed64 f_11 = 18;
  optional string f_12 = 19;
  optional fixed64 f_13 = 22;
  optional string f_14 = 25;
  optional fixed64 f_15 = 26;
  optional int32 f_16 = 28;
  optional int32 f_17 = 30;
  optional int32 f_18 = 31;
  optional string f_19 = 32;
  optional double f_20 = 34;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 49;
    E1_CONST_2 = 5;
    E1_CONST_3 = 121;
    E1_CONST_4 = 27;
    E1_CONST_5 = 113;
  }
  optional E1 f_21 = 35;
  optional fixed64 f_22 = 36;
  optional int64 f_23 = 37;
  optional int32 f_24 = 38;
  optional int32 f_25 = 39;
  optional fixed64 f_26 = 41;
  optional bool f_27 = 43;
  optional double f_28 = 44;
  optional string f_29 = 46;
  message M1 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 2;
    optional int64 f_2 = 3;
    optional bool f_3 = 4;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 45;
      E2_CONST_2 = 71;
      E2_CONST_3 = 60;
      E2_CONST_4 = 77;
      E2_CONST_5 = 99;
    }
    repeated E2 f_4 = 6 [packed = true];
    optional fixed32 f_5 = 7;
    optional bool f_6 = 8;
    optional int32 f_7 = 10;
    optional fixed64 f_8 = 11;
    optional fixed64 f_9 = 12;
    optional int32 f_10 = 16;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 119;
      E3_CONST_2 = 78;
      E3_CONST_3 = 33;
      E3_CONST_4 = 101;
      E3_CONST_5 = 14;
    }
    repeated E3 f_11 = 17 [packed = true];
    optional fixed64 f_12 = 19;
    optional bool f_13 = 20;
    optional fixed64 f_14 = 21;
    optional int32 f_15 = 22;
    optional bool f_16 = 24;
    optional string f_17 = 25;
    optional string f_18 = 26;
    optional int32 f_19 = 28;
    optional string f_20 = 31;
    optional fixed32 f_21 = 32;
    optional fixed64 f_22 = 33;
    optional int32 f_23 = 34;
    optional int32 f_24 = 37;
    optional string f_25 = 39;
    optional int32 f_26 = 41;
    optional fixed32 f_27 = 42;
    optional fixed64 f_28 = 43;
    optional string f_29 = 46;
    optional string f_30 = 47;
    message M2 {
      optional string f_0 = 1;
      message M30 {
        optional fixed64 f_0 = 1;
        optional fixed32 f_1 = 4;
        message M54 {
          optional bool f_0 = 1;
          message M67 {
            optional fixed64 f_0 = 1;
          }
          optional M67 f_2 = 2;
        }
        optional M54 f_7 = 7;
        message M63 {
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 67;
            E16_CONST_2 = 9;
            E16_CONST_3 = 1;
            E16_CONST_4 = 12;
            E16_CONST_5 = 41;
          }
          repeated E16 f_0 = 1 [packed = true];
          optional fixed64 f_1 = 2;
          optional string f_2 = 5;
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 67;
            E17_CONST_2 = 104;
            E17_CONST_3 = 95;
            E17_CONST_4 = 109;
            E17_CONST_5 = 68;
          }
          repeated E17 f_3 = 6 [packed = true];
          optional int32 f_4 = 8;
          optional string f_5 = 9;
          optional int32 f_6 = 11;
          optional string f_7 = 12;
          optional string f_8 = 13;
          optional fixed64 f_9 = 14;
          optional fixed64 f_10 = 15;
          optional string f_11 = 16;
          optional int32 f_12 = 18;
          optional fixed64 f_13 = 19;
          optional bool f_14 = 20;
          optional fixed64 f_15 = 21;
          optional fixed64 f_16 = 23;
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 95;
            E18_CONST_2 = 38;
            E18_CONST_3 = 2;
            E18_CONST_4 = 64;
            E18_CONST_5 = 61;
          }
          repeated E18 f_17 = 24 [packed = true];
          optional int32 f_18 = 27;
          optional double f_19 = 28;
          optional bool f_20 = 30;
          optional fixed64 f_21 = 33;
          optional fixed64 f_22 = 34;
          optional string f_23 = 35;
          optional string f_24 = 36;
          optional string f_25 = 38;
          optional double f_26 = 39;
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 56;
            E19_CONST_2 = 17;
            E19_CONST_3 = 125;
            E19_CONST_4 = 50;
            E19_CONST_5 = 30;
          }
          repeated E19 f_27 = 41 [packed = true];
          optional int32 f_28 = 42;
          optional bool f_29 = 43;
          optional int32 f_30 = 44;
          optional fixed64 f_31 = 46;
        }
        optional M63 f_9 = 9;
      }
      optional M30 f_2 = 2;
    }
    repeated M2 f_50 = 50;
    message M3 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional bool f_2 = 4;
      optional string f_3 = 5;
      optional fixed64 f_4 = 7;
      optional int32 f_5 = 9;
      optional int32 f_6 = 11;
      optional string f_7 = 13;
      optional int32 f_8 = 14;
      optional int32 f_9 = 16;
      optional bool f_10 = 17;
      optional bool f_11 = 18;
      optional fixed64 f_12 = 19;
      optional string f_13 = 20;
      optional int32 f_14 = 23;
      optional fixed64 f_15 = 24;
      optional int32 f_16 = 26;
      optional fixed64 f_17 = 30;
      optional int32 f_18 = 31;
      optional int32 f_19 = 32;
      optional string f_20 = 33;
      optional double f_21 = 34;
      optional fixed64 f_22 = 35;
      optional string f_23 = 36;
      optional bool f_24 = 37;
      optional int32 f_25 = 38;
      optional fixed32 f_26 = 40;
      optional fixed32 f_27 = 41;
      optional bool f_28 = 42;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 70;
        E4_CONST_2 = 42;
        E4_CONST_3 = 124;
        E4_CONST_4 = 125;
        E4_CONST_5 = 66;
      }
      optional E4 f_29 = 43;
      message M24 {
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 81;
          E11_CONST_2 = 77;
          E11_CONST_3 = 93;
          E11_CONST_4 = 94;
          E11_CONST_5 = 115;
        }
        repeated E11 f_0 = 2 [packed = true];
      }
      optional M24 f_45 = 45;
      message M27 {
        optional bool f_0 = 1;
      }
      optional M27 f_46 = 46;
    }
    repeated M3 f_51 = 51;
    message M4 {
      optional bool f_0 = 2;
      message M23 {
        optional fixed64 f_0 = 1;
      }
      optional M23 f_3 = 3;
      message M35 {
        optional int32 f_0 = 2;
        optional string f_1 = 3;
        optional int64 f_2 = 4;
      }
      optional M35 f_5 = 5;
      message M41 {
        optional fixed64 f_0 = 1;
        message M60 {
          optional int32 f_0 = 1;
          message M69 {
            optional int32 f_0 = 4;
            optional uint64 f_1 = 6;
            optional int32 f_2 = 8;
            optional fixed64 f_3 = 10;
          }
          optional M69 f_2 = 2;
        }
        repeated M60 f_2 = 2;
        message M62 {
          optional double f_0 = 1;
          optional string f_1 = 6;
        }
        optional M62 f_3 = 3;
      }
      repeated M41 f_6 = 6;
    }
    optional M4 f_52 = 52;
    message M5 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 42;
        E5_CONST_2 = 38;
        E5_CONST_3 = 90;
        E5_CONST_4 = 118;
        E5_CONST_5 = 117;
      }
      repeated E5 f_3 = 5 [packed = true];
      message M47 {
        optional string f_0 = 1;
      }
      repeated M47 f_7 = 7;
    }
    repeated M5 f_53 = 53;
    message M6 {
      optional string f_0 = 3;
      optional int32 f_1 = 4;
      optional fixed32 f_2 = 5;
      optional int32 f_3 = 7;
      optional bool f_4 = 9;
      optional int32 f_5 = 10;
      optional double f_6 = 12;
      message M22 {
        optional string f_0 = 2;
        optional double f_1 = 4;
        optional string f_2 = 5;
      }
      repeated M22 f_14 = 14;
      message M37 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 4;
        optional fixed64 f_2 = 6;
        optional double f_3 = 8;
        optional bool f_4 = 9;
        optional fixed64 f_5 = 10;
      }
      optional M37 f_15 = 15;
      message M38 {
        optional int32 f_0 = 2;
      }
      optional M38 f_16 = 16;
    }
    repeated M6 f_54 = 54;
    message M7 {
      optional fixed64 f_0 = 1;
      message M28 {
        optional string f_0 = 3;
        message M56 {
          optional int32 f_0 = 2;
        }
        optional M56 f_4 = 4;
      }
      repeated M28 f_2 = 2;
      message M42 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 3;
        optional bool f_2 = 5;
      }
      optional M42 f_6 = 6;
    }
    optional M7 f_56 = 56;
    message M8 {
      optional int32 f_0 = 2;
      optional string f_1 = 6;
      optional string f_2 = 9;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 12;
        E6_CONST_2 = 93;
        E6_CONST_3 = 61;
        E6_CONST_4 = 13;
        E6_CONST_5 = 89;
      }
      optional E6 f_3 = 11;
      message M52 {
        optional fixed32 f_0 = 1;
        optional string f_1 = 2;
        optional int32 f_2 = 3;
        optional fixed64 f_3 = 4;
        optional int32 f_4 = 5;
        optional int32 f_5 = 8;
        optional int32 f_6 = 9;
        optional int32 f_7 = 11;
      }
      repeated M52 f_12 = 12;
    }
    repeated M8 f_59 = 59;
    message M9 {
      optional int32 f_0 = 3;
      optional int32 f_1 = 8;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 58;
        E7_CONST_2 = 62;
        E7_CONST_3 = 60;
        E7_CONST_4 = 1;
        E7_CONST_5 = 93;
      }
      optional E7 f_2 = 9;
      optional fixed64 f_3 = 12;
      optional fixed64 f_4 = 13;
      message M26 {
        optional int32 f_0 = 1;
      }
      optional M26 f_16 = 16;
    }
    repeated M9 f_60 = 60;
    message M10 {
      optional string f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional bool f_3 = 5;
      optional double f_4 = 7;
      optional int32 f_5 = 8;
      message M31 {
        optional int32 f_0 = 1;
      }
      optional M31 f_9 = 9;
    }
    repeated M10 f_61 = 61;
    message M11 {
      optional string f_0 = 2;
      optional int32 f_1 = 3;
      optional bool f_2 = 4;
      message M46 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 3;
        optional string f_2 = 4;
        message M57 {
          optional bool f_0 = 1;
          message M64 {
            optional fixed64 f_0 = 2;
          }
          optional M64 f_3 = 3;
          message M70 {
            enum E20 {
              E20_UNSPECIFIED = 0;
              E20_CONST_1 = 126;
              E20_CONST_2 = 64;
              E20_CONST_3 = 59;
              E20_CONST_4 = 120;
              E20_CONST_5 = 15;
            }
            optional E20 f_0 = 2;
          }
          repeated M70 f_6 = 6;
        }
        optional M57 f_5 = 5;
      }
      optional M46 f_6 = 6;
      message M50 {
        optional string f_0 = 1;
        optional fixed32 f_1 = 2;
        optional string f_2 = 3;
        optional int32 f_3 = 4;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 57;
          E14_CONST_2 = 119;
          E14_CONST_3 = 60;
          E14_CONST_4 = 35;
          E14_CONST_5 = 99;
        }
        repeated E14 f_4 = 5 [packed = true];
        optional string f_5 = 6;
        optional bool f_6 = 8;
        optional bool f_7 = 9;
        optional int32 f_8 = 12;
        optional fixed32 f_9 = 13;
        optional fixed32 f_10 = 14;
        optional fixed64 f_11 = 15;
        message M58 {
          optional int32 f_0 = 1;
          repeated string f_1 = 2;
          optional string f_2 = 3;
          optional int32 f_3 = 4;
          message M65 {
            optional fixed64 f_0 = 2;
          }
          optional M65 f_6 = 6;
          message M66 {
            optional fixed32 f_0 = 2;
            optional int32 f_1 = 3;
            optional fixed64 f_2 = 4;
          }
          optional M66 f_7 = 7;
          message M68 {
            optional string f_0 = 1;
            message M71 {
              optional int32 f_0 = 1;
            }
            optional M71 f_3 = 3;
          }
          optional M68 f_9 = 9;
        }
        repeated M58 f_16 = 16;
      }
      optional M50 f_7 = 7;
    }
    optional M11 f_62 = 62;
    message M12 {
      optional int32 f_0 = 2;
      message M25 {
        optional int32 f_0 = 3;
        optional fixed64 f_1 = 7;
        optional string f_2 = 8;
        optional int32 f_3 = 9;
        optional int32 f_4 = 10;
        optional fixed64 f_5 = 14;
        optional fixed32 f_6 = 15;
      }
      optional M25 f_4 = 4;
    }
    optional M12 f_63 = 63;
    message M13 {
      optional string f_0 = 3;
      message M32 {
        optional string f_0 = 1;
      }
      optional M32 f_5 = 5;
      message M45 {
        optional double f_0 = 2;
        message M59 {
          optional int32 f_0 = 3;
        }
        repeated M59 f_4 = 4;
        message M61 {
          optional int32 f_0 = 1;
          optional int32 f_1 = 3;
          optional bool f_2 = 5;
          optional double f_3 = 7;
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 85;
            E15_CONST_2 = 26;
            E15_CONST_3 = 91;
            E15_CONST_4 = 33;
            E15_CONST_5 = 5;
          }
          optional E15 f_4 = 9;
          optional int32 f_5 = 12;
          optional string f_6 = 14;
        }
        optional M61 f_7 = 7;
      }
      repeated M45 f_7 = 7;
      message M53 {
        optional double f_0 = 1;
      }
      repeated M53 f_9 = 9;
    }
    optional M13 f_65 = 65;
    message M14 {
      optional fixed64 f_0 = 1;
      message M43 {
        optional double f_0 = 1;
      }
      optional M43 f_3 = 3;
      message M49 {
        optional string f_0 = 1;
        optional double f_1 = 3;
        optional int32 f_2 = 5;
        optional int32 f_3 = 6;
        optional fixed64 f_4 = 8;
      }
      repeated M49 f_5 = 5;
    }
    optional M14 f_66 = 66;
    message M15 {
      optional string f_0 = 1;
    }
    repeated M15 f_69 = 69;
    message M16 {
      optional bool f_0 = 2;
      message M40 {
        optional bool f_0 = 2;
      }
      repeated M40 f_3 = 3;
      message M44 {
        optional bool f_0 = 2;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 87;
          E13_CONST_2 = 69;
          E13_CONST_3 = 45;
          E13_CONST_4 = 1;
          E13_CONST_5 = 46;
        }
        optional E13 f_1 = 3;
      }
      optional M44 f_4 = 4;
      message M51 {
        optional string f_0 = 2;
      }
      optional M51 f_5 = 5;
    }
    optional M16 f_71 = 71;
    message M17 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional string f_3 = 5;
      optional int32 f_4 = 6;
      optional string f_5 = 7;
      optional fixed64 f_6 = 8;
    }
    optional M17 f_72 = 72;
    message M18 {
      optional bytes f_0 = 2;
      optional int32 f_1 = 4;
      optional fixed64 f_2 = 6;
      message M29 {
        optional fixed64 f_0 = 1;
      }
      optional M29 f_8 = 8;
      message M33 {
        optional int32 f_0 = 1;
      }
      optional M33 f_9 = 9;
      message M34 {
        optional fixed64 f_0 = 1;
      }
      optional M34 f_10 = 10;
    }
    repeated M18 f_74 = 74;
    message M19 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 93;
        E8_CONST_2 = 48;
        E8_CONST_3 = 75;
        E8_CONST_4 = 89;
        E8_CONST_5 = 117;
      }
      optional E8 f_0 = 1;
    }
    optional M19 f_76 = 76;
    message M20 {
      optional fixed32 f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 3;
      optional string f_3 = 4;
      optional fixed32 f_4 = 7;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 86;
        E9_CONST_2 = 45;
        E9_CONST_3 = 53;
        E9_CONST_4 = 87;
        E9_CONST_5 = 89;
      }
      repeated E9 f_5 = 9 [packed = true];
      optional bool f_6 = 11;
      optional fixed64 f_7 = 12;
      optional bool f_8 = 13;
      message M36 {
        optional int32 f_0 = 1;
      }
      optional M36 f_14 = 14;
      message M39 {
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 109;
          E12_CONST_2 = 60;
          E12_CONST_3 = 62;
          E12_CONST_4 = 120;
          E12_CONST_5 = 75;
        }
        repeated E12 f_0 = 2 [packed = true];
        optional int32 f_1 = 3;
        optional bool f_2 = 5;
        message M55 {
          optional string f_0 = 1;
        }
        repeated M55 f_6 = 6;
      }
      repeated M39 f_15 = 15;
    }
    optional M20 f_78 = 78;
    message M21 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 4;
      optional fixed64 f_3 = 7;
      optional fixed64 f_4 = 10;
      optional bool f_5 = 11;
      optional int32 f_6 = 14;
      optional fixed64 f_7 = 17;
      optional fixed32 f_8 = 18;
      optional fixed64 f_9 = 22;
      optional bytes f_10 = 24;
      optional int32 f_11 = 25;
      optional string f_12 = 27;
      optional int32 f_13 = 29;
      optional string f_14 = 31;
      optional fixed64 f_15 = 33;
      optional string f_16 = 34;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 50;
        E10_CONST_2 = 121;
        E10_CONST_3 = 103;
        E10_CONST_4 = 57;
        E10_CONST_5 = 43;
      }
      optional E10 f_17 = 35;
      message M48 {
        optional fixed32 f_0 = 2;
      }
      optional M48 f_37 = 37;
    }
    optional M21 f_80 = 80;
  }
  repeated M1 f_48 = 48;
}
