// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.response.Message2;

message Message2 {
  optional double f_0 = 1;
  optional int32 f_1 = 2;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 123;
    E1_CONST_2 = 93;
    E1_CONST_3 = 68;
    E1_CONST_4 = 73;
    E1_CONST_5 = 109;
  }
  optional E1 f_2 = 3;
  optional double f_3 = 4;
  optional int64 f_4 = 5;
  optional int32 f_5 = 6;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 6;
    E2_CONST_2 = 92;
    E2_CONST_3 = 94;
    E2_CONST_4 = 40;
    E2_CONST_5 = 13;
  }
  optional E2 f_6 = 9;
  optional bool f_7 = 10;
  optional string f_8 = 11;
  optional int32 f_9 = 13;
  optional double f_10 = 15;
  optional double f_11 = 16;
  optional double f_12 = 18;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 18;
    E3_CONST_2 = 67;
    E3_CONST_3 = 78;
    E3_CONST_4 = 91;
    E3_CONST_5 = 25;
  }
  optional E3 f_13 = 20;
  optional double f_14 = 21;
  optional int32 f_15 = 24;
  optional int64 f_16 = 26;
  optional fixed64 f_17 = 27;
  optional int32 f_18 = 28;
  optional double f_19 = 30;
  optional int64 f_20 = 31;
  optional double f_21 = 32;
  optional int32 f_22 = 33;
  optional double f_23 = 35;
  optional int32 f_24 = 36;
  message M1 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 113;
      E4_CONST_2 = 27;
      E4_CONST_3 = 122;
      E4_CONST_4 = 80;
      E4_CONST_5 = 52;
    }
    optional E4 f_0 = 1;
    optional int32 f_1 = 3;
    optional int32 f_2 = 4;
    optional fixed64 f_3 = 5;
    optional int32 f_4 = 6;
    optional int32 f_5 = 7;
    optional fixed64 f_6 = 8;
    optional int64 f_7 = 9;
    optional fixed64 f_8 = 10;
    message M20 {
      optional double f_0 = 3;
      message M34 {
        optional double f_0 = 3;
      }
      repeated M34 f_4 = 4;
    }
    optional M20 f_11 = 11;
    message M22 {
      optional int32 f_0 = 1;
    }
    optional M22 f_12 = 12;
    message M28 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int64 f_2 = 3;
      optional double f_3 = 5;
      message M35 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional double f_2 = 3;
      }
      repeated M35 f_6 = 6;
      message M38 {
        optional double f_0 = 1;
      }
      optional M38 f_7 = 7;
    }
    optional M28 f_14 = 14;
    message M29 {
      optional int64 f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 4;
      optional double f_4 = 5;
      optional double f_5 = 6;
      optional int64 f_6 = 7;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 39;
        E13_CONST_2 = 102;
        E13_CONST_3 = 2;
        E13_CONST_4 = 109;
        E13_CONST_5 = 93;
      }
      optional E13 f_7 = 9;
    }
    repeated M29 f_15 = 15;
  }
  optional M1 f_38 = 38;
  message M2 {
    optional double f_0 = 1;
    optional fixed64 f_1 = 4;
    optional int32 f_2 = 6;
    optional bool f_3 = 7;
    optional double f_4 = 8;
    message M31 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      message M41 {
        optional fixed64 f_0 = 2;
        message M63 {
          enum E20 {
            E20_UNSPECIFIED = 0;
            E20_CONST_1 = 91;
            E20_CONST_2 = 81;
            E20_CONST_3 = 14;
            E20_CONST_4 = 18;
            E20_CONST_5 = 33;
          }
          optional E20 f_0 = 1;
        }
        optional M63 f_4 = 4;
      }
      optional M41 f_5 = 5;
      message M50 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
        message M61 {
          optional bool f_0 = 1;
          optional double f_1 = 3;
          optional fixed64 f_2 = 5;
          message M65 {
            optional double f_0 = 1;
            optional fixed64 f_1 = 3;
            optional double f_2 = 5;
          }
          repeated M65 f_6 = 6;
        }
        optional M61 f_3 = 3;
      }
      optional M50 f_8 = 8;
      message M53 {
        optional int32 f_0 = 2;
      }
      repeated M53 f_9 = 9;
    }
    optional M31 f_9 = 9;
  }
  optional M2 f_39 = 39;
  message M3 {
    optional fixed64 f_0 = 3;
    message M11 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 80;
        E10_CONST_2 = 85;
        E10_CONST_3 = 63;
        E10_CONST_4 = 43;
        E10_CONST_5 = 94;
      }
      optional E10 f_2 = 4;
      optional double f_3 = 6;
      optional double f_4 = 8;
    }
    repeated M11 f_4 = 4;
    message M16 {
      optional double f_0 = 1;
    }
    optional M16 f_7 = 7;
    message M18 {
      optional int64 f_0 = 2;
      message M44 {
        optional int32 f_0 = 1;
        optional double f_1 = 4;
        optional int32 f_2 = 5;
        optional int32 f_3 = 6;
        optional double f_4 = 7;
        message M59 {
          optional int32 f_0 = 1;
          message M66 {
            optional double f_0 = 1;
            optional int64 f_1 = 2;
            optional double f_2 = 3;
            optional fixed64 f_3 = 4;
            optional double f_4 = 6;
            optional double f_5 = 8;
            optional int32 f_6 = 10;
            optional double f_7 = 11;
            optional double f_8 = 12;
          }
          optional M66 f_2 = 2;
        }
        repeated M59 f_8 = 8;
      }
      repeated M44 f_3 = 3;
    }
    repeated M18 f_8 = 8;
    message M26 {
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 97;
        E12_CONST_2 = 25;
        E12_CONST_3 = 2;
        E12_CONST_4 = 4;
        E12_CONST_5 = 113;
      }
      optional E12 f_0 = 1;
      message M36 {
        optional double f_0 = 1;
        message M62 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 5;
          optional double f_2 = 6;
          optional double f_3 = 7;
        }
        optional M62 f_2 = 2;
      }
      optional M36 f_2 = 2;
    }
    repeated M26 f_9 = 9;
  }
  optional M3 f_41 = 41;
  message M4 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 2;
    optional double f_2 = 3;
    optional int64 f_3 = 5;
    message M8 {
      optional string f_0 = 1;
    }
    repeated M8 f_6 = 6;
    message M13 {
      optional int64 f_0 = 1;
      message M43 {
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 1;
          E16_CONST_2 = 33;
          E16_CONST_3 = 75;
          E16_CONST_4 = 25;
          E16_CONST_5 = 123;
        }
        repeated E16 f_0 = 1 [packed = true];
        optional int32 f_1 = 2;
        optional string f_2 = 3;
        optional int32 f_3 = 4;
      }
      optional M43 f_2 = 2;
      message M49 {
        optional int32 f_0 = 1;
        message M58 {
          optional double f_0 = 2;
        }
        optional M58 f_2 = 2;
      }
      repeated M49 f_3 = 3;
    }
    optional M13 f_8 = 8;
    message M25 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 3;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 96;
        E11_CONST_2 = 53;
        E11_CONST_3 = 51;
        E11_CONST_4 = 111;
        E11_CONST_5 = 59;
      }
      optional E11 f_2 = 5;
      optional bool f_3 = 6;
      message M42 {
        optional double f_0 = 2;
      }
      optional M42 f_7 = 7;
      message M51 {
        optional int32 f_0 = 1;
      }
      optional M51 f_9 = 9;
      message M56 {
        optional fixed64 f_0 = 1;
      }
      optional M56 f_10 = 10;
    }
    optional M25 f_9 = 9;
    message M27 {
      optional double f_0 = 1;
      optional double f_1 = 3;
      optional int32 f_2 = 4;
      optional double f_3 = 5;
      optional double f_4 = 6;
      optional double f_5 = 7;
      optional double f_6 = 8;
      optional double f_7 = 9;
      optional int32 f_8 = 10;
      optional fixed64 f_9 = 11;
    }
    repeated M27 f_10 = 10;
  }
  repeated M4 f_42 = 42;
  message M5 {
    optional double f_0 = 1;
    message M9 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional double f_5 = 7;
      optional double f_6 = 8;
      optional double f_7 = 10;
      message M54 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 3;
        optional int32 f_2 = 4;
        optional double f_3 = 5;
        optional double f_4 = 7;
        optional double f_5 = 8;
        optional int32 f_6 = 9;
        optional double f_7 = 10;
      }
      optional M54 f_11 = 11;
    }
    optional M9 f_2 = 2;
    message M10 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 4;
      optional fixed64 f_4 = 5;
      optional double f_5 = 7;
      optional double f_6 = 9;
      optional fixed64 f_7 = 10;
      optional int32 f_8 = 12;
      optional double f_9 = 13;
      optional fixed64 f_10 = 14;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 63;
        E8_CONST_2 = 90;
        E8_CONST_3 = 60;
        E8_CONST_4 = 23;
        E8_CONST_5 = 49;
      }
      optional E8 f_11 = 15;
      optional fixed64 f_12 = 17;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 93;
        E9_CONST_2 = 7;
        E9_CONST_3 = 60;
        E9_CONST_4 = 81;
        E9_CONST_5 = 48;
      }
      repeated E9 f_13 = 18 [packed = true];
      optional fixed64 f_14 = 20;
      optional double f_15 = 21;
      optional string f_16 = 24;
      optional int32 f_17 = 25;
      optional fixed64 f_18 = 26;
      optional double f_19 = 27;
      message M33 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
        optional int32 f_4 = 6;
      }
      repeated M33 f_28 = 28;
      message M55 {
        optional int32 f_0 = 1;
      }
      repeated M55 f_29 = 29;
    }
    repeated M10 f_3 = 3;
    message M14 {
      optional bool f_0 = 1;
      message M47 {
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 4;
          E18_CONST_2 = 120;
          E18_CONST_3 = 38;
          E18_CONST_4 = 110;
          E18_CONST_5 = 123;
        }
        optional E18 f_0 = 1;
      }
      optional M47 f_3 = 3;
      message M52 {
        optional fixed64 f_0 = 1;
      }
      optional M52 f_4 = 4;
    }
    repeated M14 f_4 = 4;
    message M19 {
      optional int32 f_0 = 1;
      message M46 {
        optional double f_0 = 3;
        optional fixed64 f_1 = 4;
        optional double f_2 = 5;
        message M64 {
          optional int32 f_0 = 1;
          optional double f_1 = 2;
          optional int32 f_2 = 4;
          optional double f_3 = 5;
          enum E21 {
            E21_UNSPECIFIED = 0;
            E21_CONST_1 = 80;
            E21_CONST_2 = 7;
            E21_CONST_3 = 106;
            E21_CONST_4 = 100;
            E21_CONST_5 = 124;
          }
          repeated E21 f_4 = 7 [packed = true];
          optional int32 f_5 = 8;
          optional double f_6 = 9;
          optional double f_7 = 10;
          optional double f_8 = 11;
          optional int32 f_9 = 12;
          optional fixed64 f_10 = 13;
          optional int64 f_11 = 15;
          optional int32 f_12 = 16;
          enum E22 {
            E22_UNSPECIFIED = 0;
            E22_CONST_1 = 7;
            E22_CONST_2 = 2;
            E22_CONST_3 = 65;
            E22_CONST_4 = 73;
            E22_CONST_5 = 104;
          }
          optional E22 f_13 = 17;
          optional fixed64 f_14 = 19;
          optional double f_15 = 20;
          optional double f_16 = 21;
          optional string f_17 = 23;
          optional double f_18 = 24;
          enum E23 {
            E23_UNSPECIFIED = 0;
            E23_CONST_1 = 60;
            E23_CONST_2 = 23;
            E23_CONST_3 = 79;
            E23_CONST_4 = 72;
            E23_CONST_5 = 115;
          }
          optional E23 f_19 = 26;
          optional fixed64 f_20 = 29;
          optional int32 f_21 = 30;
          optional double f_22 = 31;
        }
        optional M64 f_6 = 6;
      }
      optional M46 f_2 = 2;
      message M57 {
        optional int64 f_0 = 3;
        optional int32 f_1 = 4;
        optional double f_2 = 5;
        optional int32 f_3 = 6;
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 88;
          E19_CONST_2 = 23;
          E19_CONST_3 = 93;
          E19_CONST_4 = 33;
          E19_CONST_5 = 72;
        }
        optional E19 f_4 = 7;
      }
      optional M57 f_3 = 3;
    }
    optional M19 f_5 = 5;
    message M23 {
      optional double f_0 = 2;
      optional int64 f_1 = 3;
      optional int64 f_2 = 4;
      optional double f_3 = 5;
      message M40 {
        optional int32 f_0 = 2;
      }
      optional M40 f_6 = 6;
      message M45 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 110;
          E17_CONST_2 = 87;
          E17_CONST_3 = 93;
          E17_CONST_4 = 24;
          E17_CONST_5 = 90;
        }
        optional E17 f_2 = 4;
        message M60 {
          optional double f_0 = 3;
        }
        optional M60 f_6 = 6;
      }
      repeated M45 f_7 = 7;
    }
    optional M23 f_8 = 8;
  }
  optional M5 f_43 = 43;
  message M6 {
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 25;
      E5_CONST_2 = 5;
      E5_CONST_3 = 67;
      E5_CONST_4 = 91;
      E5_CONST_5 = 78;
    }
    repeated E5 f_0 = 1 [packed = true];
    optional fixed64 f_1 = 2;
    message M12 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
    }
    optional M12 f_5 = 5;
    message M15 {
      optional double f_0 = 1;
    }
    optional M15 f_6 = 6;
    message M17 {
      optional double f_0 = 1;
    }
    repeated M17 f_8 = 8;
    message M24 {
      optional double f_0 = 1;
      message M39 {
        optional fixed64 f_0 = 1;
      }
      optional M39 f_3 = 3;
      message M48 {
        optional fixed64 f_0 = 1;
      }
      repeated M48 f_4 = 4;
    }
    optional M24 f_9 = 9;
  }
  optional M6 f_44 = 44;
  message M7 {
    optional int32 f_0 = 2;
    optional fixed64 f_1 = 4;
    optional fixed64 f_2 = 6;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 47;
      E6_CONST_2 = 55;
      E6_CONST_3 = 91;
      E6_CONST_4 = 33;
      E6_CONST_5 = 88;
    }
    repeated E6 f_3 = 8 [packed = true];
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 56;
      E7_CONST_2 = 35;
      E7_CONST_3 = 47;
      E7_CONST_4 = 72;
      E7_CONST_5 = 67;
    }
    optional E7 f_4 = 9;
    message M21 {
      optional int64 f_0 = 1;
      message M37 {
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 82;
          E15_CONST_2 = 31;
          E15_CONST_3 = 55;
          E15_CONST_4 = 88;
          E15_CONST_5 = 28;
        }
        optional E15 f_0 = 2;
      }
      optional M37 f_2 = 2;
    }
    optional M21 f_10 = 10;
    message M30 {
      optional uint64 f_0 = 1;
    }
    optional M30 f_12 = 12;
    message M32 {
      optional int32 f_0 = 1;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 90;
        E14_CONST_2 = 9;
        E14_CONST_3 = 46;
        E14_CONST_4 = 113;
        E14_CONST_5 = 45;
      }
      repeated E14 f_1 = 2 [packed = true];
    }
    optional M32 f_13 = 13;
  }
  optional M7 f_45 = 45;
}
