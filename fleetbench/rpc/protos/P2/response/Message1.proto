// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.response.Message1;

message Message1 {
  optional fixed64 f_0 = 1;
  optional double f_1 = 2;
  optional double f_2 = 4;
  optional string f_3 = 5;
  optional bytes f_4 = 6;
  optional int32 f_5 = 8;
  optional fixed64 f_6 = 9;
  optional string f_7 = 11;
  optional int32 f_8 = 13;
  optional fixed64 f_9 = 14;
  optional double f_10 = 15;
  optional fixed64 f_11 = 16;
  optional double f_12 = 17;
  optional int32 f_13 = 18;
  optional int32 f_14 = 19;
  optional double f_15 = 20;
  optional fixed64 f_16 = 21;
  optional double f_17 = 22;
  optional double f_18 = 24;
  optional int32 f_19 = 25;
  optional double f_20 = 27;
  optional int32 f_21 = 28;
  optional double f_22 = 29;
  optional bool f_23 = 30;
  optional double f_24 = 31;
  message M1 {
    optional double f_0 = 1;
    message M24 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional double f_3 = 6;
      optional int32 f_4 = 7;
      optional double f_5 = 8;
      message M45 {
        optional fixed64 f_0 = 2;
      }
      optional M45 f_9 = 9;
    }
    repeated M24 f_2 = 2;
    message M29 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 5;
      message M39 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional float f_3 = 5;
        message M48 {
          optional double f_0 = 1;
        }
        optional M48 f_6 = 6;
      }
      optional M39 f_6 = 6;
    }
    optional M29 f_3 = 3;
  }
  repeated M1 f_32 = 32;
  message M2 {
    optional double f_0 = 1;
    optional fixed64 f_1 = 2;
  }
  optional M2 f_33 = 33;
  message M3 {
    optional double f_0 = 1;
    message M28 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 4;
      optional int64 f_4 = 5;
      optional double f_5 = 6;
      optional fixed64 f_6 = 8;
      optional int32 f_7 = 9;
      optional int32 f_8 = 10;
      optional double f_9 = 12;
      optional double f_10 = 13;
      optional double f_11 = 15;
      optional int32 f_12 = 16;
    }
    repeated M28 f_2 = 2;
  }
  repeated M3 f_34 = 34;
  message M4 {
    optional int32 f_0 = 1;
    message M14 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional int64 f_2 = 3;
      optional double f_3 = 4;
      optional fixed64 f_4 = 5;
      optional fixed64 f_5 = 6;
      optional double f_6 = 8;
      optional double f_7 = 9;
      optional fixed64 f_8 = 10;
      message M35 {
        optional bool f_0 = 3;
      }
      optional M35 f_11 = 11;
    }
    repeated M14 f_2 = 2;
  }
  optional M4 f_35 = 35;
  message M5 {
    optional double f_0 = 1;
  }
  optional M5 f_36 = 36;
  message M6 {
    optional int64 f_0 = 1;
    optional double f_1 = 2;
    optional double f_2 = 3;
    optional double f_3 = 4;
  }
  repeated M6 f_38 = 38;
  message M7 {
    optional double f_0 = 1;
    optional double f_1 = 2;
    optional string f_2 = 3;
    optional double f_3 = 5;
    message M19 {
      optional float f_0 = 3;
      optional fixed64 f_1 = 4;
      optional double f_2 = 5;
      optional int32 f_3 = 7;
      optional double f_4 = 8;
      optional double f_5 = 9;
      message M40 {
        optional double f_0 = 1;
      }
      optional M40 f_10 = 10;
    }
    optional M19 f_6 = 6;
    message M21 {
      optional double f_0 = 1;
      message M33 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional int32 f_3 = 4;
      }
      optional M33 f_2 = 2;
      message M34 {
        optional fixed64 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 4;
        optional fixed64 f_3 = 5;
        optional double f_4 = 6;
        optional fixed64 f_5 = 7;
      }
      optional M34 f_4 = 4;
      message M36 {
        optional int64 f_0 = 1;
      }
      optional M36 f_5 = 5;
      message M42 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 4;
      }
      repeated M42 f_7 = 7;
      message M44 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 3;
        optional double f_3 = 4;
        optional fixed64 f_4 = 6;
        optional fixed64 f_5 = 7;
      }
      optional M44 f_8 = 8;
    }
    optional M21 f_7 = 7;
    message M25 {
      optional double f_0 = 2;
    }
    optional M25 f_9 = 9;
    message M27 {
      optional int32 f_0 = 2;
    }
    optional M27 f_10 = 10;
  }
  optional M7 f_41 = 41;
  message M8 {
    optional int64 f_0 = 1;
    optional double f_1 = 2;
    optional int32 f_2 = 4;
    optional bool f_3 = 6;
    message M13 {
      optional int64 f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      optional bool f_3 = 4;
      optional bool f_4 = 5;
      optional int32 f_5 = 8;
      message M43 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        message M50 {
          optional double f_0 = 2;
          optional fixed64 f_1 = 3;
          optional double f_2 = 4;
        }
        optional M50 f_3 = 3;
      }
      optional M43 f_9 = 9;
    }
    repeated M13 f_7 = 7;
  }
  optional M8 f_42 = 42;
  message M9 {
    optional fixed64 f_0 = 2;
    message M16 {
      optional int32 f_0 = 2;
      optional double f_1 = 4;
      optional int32 f_2 = 5;
      optional double f_3 = 6;
      optional double f_4 = 7;
      optional double f_5 = 8;
      optional fixed64 f_6 = 9;
      message M46 {
        optional double f_0 = 1;
      }
      repeated M46 f_10 = 10;
    }
    optional M16 f_4 = 4;
    message M18 {
      optional int32 f_0 = 1;
    }
    repeated M18 f_5 = 5;
    message M26 {
      optional string f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional fixed64 f_3 = 4;
      message M31 {
        optional int32 f_0 = 1;
        optional double f_1 = 3;
        optional int32 f_2 = 4;
        optional int32 f_3 = 5;
        optional int32 f_4 = 6;
        message M47 {
          optional fixed64 f_0 = 3;
          optional string f_1 = 4;
        }
        optional M47 f_7 = 7;
      }
      repeated M31 f_6 = 6;
    }
    optional M26 f_6 = 6;
  }
  optional M9 f_43 = 43;
  message M10 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    optional int64 f_2 = 3;
    optional fixed64 f_3 = 4;
    message M15 {
      optional double f_0 = 3;
      optional int32 f_1 = 4;
      optional double f_2 = 5;
      optional fixed64 f_3 = 6;
      message M37 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional int64 f_3 = 4;
      }
      optional M37 f_7 = 7;
    }
    optional M15 f_5 = 5;
    message M17 {
      optional int32 f_0 = 2;
      message M30 {
        optional fixed64 f_0 = 2;
      }
      optional M30 f_3 = 3;
      message M38 {
        optional int64 f_0 = 1;
      }
      optional M38 f_6 = 6;
    }
    optional M17 f_6 = 6;
    message M20 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      message M32 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 3;
        enum E1 {
          E1_UNSPECIFIED = 0;
          E1_CONST_1 = 66;
          E1_CONST_2 = 39;
          E1_CONST_3 = 110;
          E1_CONST_4 = 8;
          E1_CONST_5 = 14;
        }
        optional E1 f_3 = 5;
        optional double f_4 = 6;
        optional double f_5 = 7;
        optional int32 f_6 = 9;
        optional double f_7 = 10;
      }
      optional M32 f_3 = 3;
      message M41 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        repeated bool f_2 = 3 [packed = true];
        message M49 {
          optional fixed64 f_0 = 1;
          optional double f_1 = 2;
          optional string f_2 = 4;
          optional fixed64 f_3 = 5;
          optional fixed64 f_4 = 6;
          optional int32 f_5 = 7;
        }
        optional M49 f_4 = 4;
      }
      repeated M41 f_4 = 4;
    }
    optional M20 f_9 = 9;
  }
  repeated M10 f_44 = 44;
  message M11 {
    optional double f_0 = 1;
  }
  optional M11 f_45 = 45;
  message M12 {
    optional double f_0 = 1;
    message M22 {
      optional double f_0 = 2;
      optional int32 f_1 = 3;
      optional int64 f_2 = 4;
      optional double f_3 = 5;
      optional double f_4 = 7;
      optional double f_5 = 8;
      optional int32 f_6 = 9;
      optional double f_7 = 10;
      optional fixed64 f_8 = 11;
      optional int64 f_9 = 12;
      optional bytes f_10 = 13;
      optional fixed64 f_11 = 14;
      optional double f_12 = 16;
      optional int32 f_13 = 17;
      optional fixed64 f_14 = 18;
      optional bytes f_15 = 19;
      optional fixed64 f_16 = 20;
      optional double f_17 = 21;
      optional int32 f_18 = 22;
      optional int64 f_19 = 23;
      optional double f_20 = 24;
    }
    repeated M22 f_2 = 2;
    message M23 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional int32 f_4 = 5;
    }
    optional M23 f_4 = 4;
  }
  optional M12 f_46 = 46;
}
