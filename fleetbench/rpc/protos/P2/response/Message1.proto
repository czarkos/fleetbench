// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.response.Message1;

message Message1 {
  optional double f_0 = 1;
  optional int32 f_1 = 3;
  optional fixed64 f_2 = 6;
  optional fixed64 f_3 = 7;
  optional float f_4 = 8;
  optional double f_5 = 10;
  optional int32 f_6 = 12;
  optional double f_7 = 13;
  optional double f_8 = 15;
  optional double f_9 = 16;
  optional fixed64 f_10 = 17;
  optional int32 f_11 = 18;
  optional int32 f_12 = 19;
  optional int32 f_13 = 20;
  optional double f_14 = 21;
  optional double f_15 = 22;
  optional int32 f_16 = 23;
  optional double f_17 = 24;
  optional double f_18 = 25;
  optional bool f_19 = 26;
  optional int32 f_20 = 27;
  optional int32 f_21 = 28;
  optional fixed64 f_22 = 29;
  optional fixed64 f_23 = 30;
  optional int32 f_24 = 33;
  message M1 {
    optional double f_0 = 1;
    message M11 {
      optional double f_0 = 2;
    }
    optional M11 f_2 = 2;
    message M18 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      message M37 {
        optional double f_0 = 1;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 24;
          E8_CONST_2 = 123;
          E8_CONST_3 = 70;
          E8_CONST_4 = 54;
          E8_CONST_5 = 29;
        }
        repeated E8 f_1 = 2 [packed = true];
        optional double f_2 = 3;
        optional fixed64 f_3 = 4;
        optional double f_4 = 6;
        optional bool f_5 = 7;
        optional bytes f_6 = 9;
        optional double f_7 = 11;
        optional int32 f_8 = 12;
      }
      optional M37 f_3 = 3;
      message M42 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 4;
      }
      optional M42 f_4 = 4;
      message M43 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
        optional int64 f_2 = 3;
        optional double f_3 = 4;
        optional int32 f_4 = 5;
      }
      optional M43 f_5 = 5;
    }
    optional M18 f_4 = 4;
    message M20 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 4;
      optional double f_3 = 5;
      optional int32 f_4 = 6;
      optional fixed64 f_5 = 7;
      optional double f_6 = 9;
      optional int32 f_7 = 10;
      optional bool f_8 = 11;
      optional int32 f_9 = 13;
      optional double f_10 = 14;
      optional fixed64 f_11 = 15;
      optional double f_12 = 16;
      optional double f_13 = 17;
      optional fixed64 f_14 = 18;
      message M36 {
        optional int32 f_0 = 1;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 18;
          E7_CONST_2 = 103;
          E7_CONST_3 = 53;
          E7_CONST_4 = 32;
          E7_CONST_5 = 87;
        }
        repeated E7 f_1 = 2 [packed = true];
      }
      repeated M36 f_20 = 20;
    }
    optional M20 f_5 = 5;
    message M22 {
      optional fixed64 f_0 = 1;
    }
    optional M22 f_6 = 6;
    message M23 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 88;
        E5_CONST_2 = 28;
        E5_CONST_3 = 73;
        E5_CONST_4 = 110;
        E5_CONST_5 = 56;
      }
      repeated E5 f_2 = 3 [packed = true];
      optional int32 f_3 = 5;
      optional float f_4 = 8;
    }
    optional M23 f_7 = 7;
  }
  repeated M1 f_34 = 34;
  message M2 {
    optional double f_0 = 1;
    optional int32 f_1 = 2;
    optional double f_2 = 3;
    optional double f_3 = 4;
    optional int64 f_4 = 5;
    optional fixed64 f_5 = 7;
    optional double f_6 = 8;
    optional double f_7 = 9;
    optional int32 f_8 = 10;
    optional int32 f_9 = 13;
    optional int64 f_10 = 14;
    optional int32 f_11 = 15;
    message M14 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional fixed64 f_2 = 3;
      message M32 {
        optional bytes f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional fixed64 f_3 = 5;
      }
      optional M32 f_4 = 4;
    }
    repeated M14 f_16 = 16;
    message M15 {
      optional double f_0 = 2;
      optional double f_1 = 3;
      optional fixed64 f_2 = 4;
      optional int32 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional int32 f_5 = 7;
      message M30 {
        optional double f_0 = 1;
        message M47 {
          optional fixed64 f_0 = 2;
        }
        optional M47 f_2 = 2;
      }
      optional M30 f_8 = 8;
    }
    optional M15 f_17 = 17;
    message M24 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      message M29 {
        optional int64 f_0 = 2;
      }
      optional M29 f_5 = 5;
      message M31 {
        optional int32 f_0 = 1;
      }
      optional M31 f_6 = 6;
      message M38 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 3;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 19;
          E9_CONST_2 = 55;
          E9_CONST_3 = 56;
          E9_CONST_4 = 64;
          E9_CONST_5 = 60;
        }
        optional E9 f_2 = 4;
        message M48 {
          optional double f_0 = 1;
          optional fixed64 f_1 = 2;
          optional string f_2 = 3;
          optional int32 f_3 = 5;
          optional double f_4 = 6;
          message M49 {
            optional int32 f_0 = 1;
          }
          repeated M49 f_7 = 7;
          message M53 {
            optional int32 f_0 = 1;
            optional double f_1 = 2;
            optional int32 f_2 = 3;
            optional fixed64 f_3 = 4;
          }
          optional M53 f_8 = 8;
        }
        repeated M48 f_5 = 5;
      }
      repeated M38 f_7 = 7;
      message M39 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
      }
      repeated M39 f_9 = 9;
    }
    optional M24 f_18 = 18;
    message M25 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 4;
    }
    optional M25 f_21 = 21;
  }
  optional M2 f_35 = 35;
  message M3 {
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 116;
      E1_CONST_2 = 121;
      E1_CONST_3 = 14;
      E1_CONST_4 = 3;
      E1_CONST_5 = 84;
    }
    repeated E1 f_0 = 1 [packed = true];
    message M9 {
      optional double f_0 = 2;
      optional uint64 f_1 = 3;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 78;
        E2_CONST_2 = 83;
        E2_CONST_3 = 18;
        E2_CONST_4 = 97;
        E2_CONST_5 = 22;
      }
      repeated E2 f_2 = 4 [packed = true];
      optional double f_3 = 5;
      message M41 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
      }
      optional M41 f_7 = 7;
    }
    repeated M9 f_2 = 2;
    message M16 {
      optional double f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional double f_3 = 5;
      optional int32 f_4 = 7;
      optional fixed64 f_5 = 8;
    }
    optional M16 f_4 = 4;
    message M17 {
      optional fixed64 f_0 = 1;
      message M28 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional int32 f_3 = 4;
      }
      repeated M28 f_2 = 2;
      message M35 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 4;
        optional fixed64 f_3 = 5;
      }
      optional M35 f_3 = 3;
    }
    optional M17 f_5 = 5;
    message M21 {
      optional double f_0 = 1;
    }
    optional M21 f_7 = 7;
  }
  optional M3 f_37 = 37;
  message M4 {
    optional int32 f_0 = 2;
    message M10 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
    }
    repeated M10 f_3 = 3;
    message M13 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional uint64 f_3 = 4;
      optional double f_4 = 5;
      optional int32 f_5 = 6;
      optional double f_6 = 8;
      optional int64 f_7 = 10;
      optional double f_8 = 11;
      optional double f_9 = 13;
      optional double f_10 = 14;
      optional int32 f_11 = 16;
      optional fixed64 f_12 = 17;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 126;
        E3_CONST_2 = 83;
        E3_CONST_3 = 61;
        E3_CONST_4 = 62;
        E3_CONST_5 = 93;
      }
      optional E3 f_13 = 18;
      optional double f_14 = 19;
      optional double f_15 = 21;
      optional double f_16 = 23;
    }
    optional M13 f_4 = 4;
    message M19 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 4;
      optional int32 f_3 = 5;
      optional int32 f_4 = 6;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 6;
        E4_CONST_2 = 89;
        E4_CONST_3 = 41;
        E4_CONST_4 = 28;
        E4_CONST_5 = 46;
      }
      optional E4 f_5 = 8;
    }
    optional M19 f_5 = 5;
  }
  repeated M4 f_38 = 38;
  message M5 {
    optional fixed64 f_0 = 1;
    message M7 {
      optional fixed64 f_0 = 2;
      message M34 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 98;
          E6_CONST_2 = 46;
          E6_CONST_3 = 27;
          E6_CONST_4 = 33;
          E6_CONST_5 = 110;
        }
        optional E6 f_2 = 5;
        optional double f_3 = 6;
        optional int32 f_4 = 7;
        optional int32 f_5 = 8;
      }
      optional M34 f_3 = 3;
    }
    optional M7 f_2 = 2;
    message M12 {
      optional double f_0 = 1;
      optional int64 f_1 = 2;
      optional double f_2 = 3;
      optional fixed64 f_3 = 4;
      message M33 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 3;
        message M44 {
          optional double f_0 = 1;
          optional fixed64 f_1 = 2;
          optional double f_2 = 4;
          optional int32 f_3 = 5;
          enum E11 {
            E11_UNSPECIFIED = 0;
            E11_CONST_1 = 89;
            E11_CONST_2 = 34;
            E11_CONST_3 = 43;
            E11_CONST_4 = 98;
            E11_CONST_5 = 22;
          }
          optional E11 f_4 = 6;
          optional fixed64 f_5 = 8;
          optional fixed64 f_6 = 10;
          message M52 {
            optional int64 f_0 = 1;
            optional double f_1 = 2;
            optional fixed64 f_2 = 3;
          }
          optional M52 f_11 = 11;
        }
        repeated M44 f_5 = 5;
        message M45 {
          optional int32 f_0 = 1;
        }
        repeated M45 f_6 = 6;
        message M46 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 2;
          optional double f_2 = 3;
          optional double f_3 = 4;
          optional double f_4 = 5;
          message M50 {
            optional fixed64 f_0 = 1;
          }
          optional M50 f_6 = 6;
          message M51 {
            optional int32 f_0 = 1;
          }
          optional M51 f_9 = 9;
        }
        optional M46 f_7 = 7;
      }
      optional M33 f_5 = 5;
    }
    optional M12 f_3 = 3;
  }
  optional M5 f_39 = 39;
  message M6 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional int32 f_2 = 4;
    optional double f_3 = 6;
    optional int32 f_4 = 7;
    optional double f_5 = 8;
    optional double f_6 = 9;
    optional int32 f_7 = 12;
    optional double f_8 = 13;
    optional double f_9 = 14;
    optional int32 f_10 = 16;
    optional double f_11 = 17;
    optional bool f_12 = 18;
    optional int32 f_13 = 19;
    optional fixed64 f_14 = 20;
    optional fixed64 f_15 = 21;
    optional int32 f_16 = 24;
    optional fixed64 f_17 = 25;
    message M8 {
      optional int64 f_0 = 1;
      message M40 {
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 108;
          E10_CONST_2 = 92;
          E10_CONST_3 = 63;
          E10_CONST_4 = 122;
          E10_CONST_5 = 58;
        }
        optional E10 f_0 = 1;
      }
      repeated M40 f_3 = 3;
    }
    optional M8 f_26 = 26;
    message M26 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      message M27 {
        optional double f_0 = 2;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 4;
        optional double f_3 = 5;
      }
      optional M27 f_3 = 3;
    }
    optional M26 f_27 = 27;
  }
  optional M6 f_40 = 40;
}
