// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P2.response.Message1;

message Message1 {
  optional int64 f_0 = 2;
  message M1 {
    optional bool f_0 = 1;
    optional string f_1 = 3;
    message M3 {
      optional string f_0 = 1;
      optional int64 f_1 = 3;
      optional string f_2 = 4;
      optional int32 f_3 = 6;
      optional uint64 f_4 = 7;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 40;
        E6_CONST_2 = 50;
        E6_CONST_3 = 100;
        E6_CONST_4 = 87;
        E6_CONST_5 = 56;
      }
      optional E6 f_5 = 9;
      optional string f_6 = 10;
      optional bytes f_7 = 11;
      repeated string f_8 = 14;
      optional uint32 f_9 = 16;
      optional int32 f_10 = 18;
      optional bool f_11 = 19;
      optional string f_12 = 23;
      message M4 {
        repeated string f_0 = 1;
        optional string f_1 = 2;
        optional int64 f_2 = 4;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 40;
          E7_CONST_2 = 48;
          E7_CONST_3 = 68;
          E7_CONST_4 = 111;
          E7_CONST_5 = 44;
        }
        optional E7 f_3 = 6;
        message M6 {
          optional int32 f_0 = 1;
          message M8 {
            optional string f_0 = 1;
            optional int32 f_1 = 2;
            optional int64 f_2 = 3;
            optional string f_3 = 5;
            optional string f_4 = 6;
            optional uint64 f_5 = 8;
            message M9 {
              enum E8 {
                E8_UNSPECIFIED = 0;
                E8_CONST_1 = 49;
                E8_CONST_2 = 66;
                E8_CONST_3 = 92;
                E8_CONST_4 = 27;
                E8_CONST_5 = 30;
              }
              optional E8 f_0 = 2;
            }
            optional M9 f_9 = 9;
            message M10 {
              optional bytes f_0 = 2;
            }
            optional M10 f_11 = 11;
          }
          optional M8 f_4 = 4;
        }
        repeated M6 f_7 = 7;
        message M7 {
          optional int64 f_0 = 1;
          optional int64 f_1 = 2;
          optional bytes f_2 = 3;
        }
        optional M7 f_9 = 9;
      }
      optional M4 f_25 = 25;
      message M5 {
        optional string f_0 = 1;
        optional string f_1 = 2;
      }
      optional M5 f_28 = 28;
    }
    repeated M3 f_4 = 4;
  }
  repeated M1 f_3 = 3;
  message M2 {
    optional uint64 f_0 = 4;
    optional string f_1 = 6;
    optional string f_2 = 7;
    optional int64 f_3 = 8;
    optional string f_4 = 9;
    optional bool f_5 = 11;
    optional int64 f_6 = 14;
    optional string f_7 = 16;
    optional float f_8 = 17;
    optional int32 f_9 = 18;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 52;
      E1_CONST_2 = 123;
      E1_CONST_3 = 79;
      E1_CONST_4 = 36;
      E1_CONST_5 = 16;
    }
    repeated E1 f_10 = 19 [packed = true];
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 11;
      E2_CONST_2 = 117;
      E2_CONST_3 = 105;
      E2_CONST_4 = 53;
      E2_CONST_5 = 1;
    }
    optional E2 f_11 = 22;
    repeated bytes f_12 = 24;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 126;
      E3_CONST_2 = 90;
      E3_CONST_3 = 64;
      E3_CONST_4 = 106;
      E3_CONST_5 = 56;
    }
    optional E3 f_13 = 26;
    optional int64 f_14 = 27;
    optional string f_15 = 28;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 28;
      E4_CONST_2 = 107;
      E4_CONST_3 = 105;
      E4_CONST_4 = 16;
      E4_CONST_5 = 64;
    }
    optional E4 f_16 = 30;
    repeated string f_17 = 32;
    optional int64 f_18 = 34;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 33;
      E5_CONST_2 = 83;
      E5_CONST_3 = 25;
      E5_CONST_4 = 85;
      E5_CONST_5 = 66;
    }
    optional E5 f_19 = 35;
    optional float f_20 = 36;
    optional int64 f_21 = 39;
    optional int64 f_22 = 42;
    optional int32 f_23 = 43;
    optional string f_24 = 44;
    optional int64 f_25 = 45;
  }
  repeated M2 f_4 = 4;
}
