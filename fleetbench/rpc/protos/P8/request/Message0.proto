// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.request.Message0;

message Message0 {
  optional bool f_0 = 2;
  optional double f_1 = 3;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 1;
    E1_CONST_2 = 73;
    E1_CONST_3 = 23;
    E1_CONST_4 = 39;
    E1_CONST_5 = 61;
  }
  optional E1 f_2 = 6;
  optional string f_3 = 7;
  optional fixed64 f_4 = 8;
  optional fixed64 f_5 = 10;
  optional fixed64 f_6 = 11;
  optional double f_7 = 12;
  optional int32 f_8 = 13;
  optional int32 f_9 = 15;
  optional int32 f_10 = 17;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 69;
    E2_CONST_2 = 18;
    E2_CONST_3 = 89;
    E2_CONST_4 = 36;
    E2_CONST_5 = 101;
  }
  repeated E2 f_11 = 20 [packed = true];
  optional fixed64 f_12 = 21;
  optional fixed64 f_13 = 22;
  optional string f_14 = 24;
  optional int32 f_15 = 27;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 2;
    E3_CONST_2 = 60;
    E3_CONST_3 = 80;
    E3_CONST_4 = 50;
    E3_CONST_5 = 25;
  }
  optional E3 f_16 = 28;
  optional string f_17 = 29;
  optional string f_18 = 30;
  optional fixed64 f_19 = 33;
  optional int32 f_20 = 35;
  optional int32 f_21 = 37;
  optional fixed64 f_22 = 38;
  optional fixed32 f_23 = 39;
  optional string f_24 = 40;
  optional fixed64 f_25 = 42;
  optional int32 f_26 = 43;
  optional fixed64 f_27 = 44;
  optional fixed32 f_28 = 46;
  optional fixed64 f_29 = 47;
  message M1 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 114;
      E4_CONST_2 = 49;
      E4_CONST_3 = 59;
      E4_CONST_4 = 82;
      E4_CONST_5 = 92;
    }
    repeated E4 f_0 = 1 [packed = true];
    message M16 {
      optional int32 f_0 = 1;
      message M38 {
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 102;
          E9_CONST_2 = 111;
          E9_CONST_3 = 22;
          E9_CONST_4 = 104;
          E9_CONST_5 = 58;
        }
        optional E9 f_0 = 1;
        message M47 {
          enum E11 {
            E11_UNSPECIFIED = 0;
            E11_CONST_1 = 6;
            E11_CONST_2 = 36;
            E11_CONST_3 = 59;
            E11_CONST_4 = 50;
            E11_CONST_5 = 35;
          }
          repeated E11 f_0 = 1 [packed = true];
          optional fixed32 f_1 = 3;
          optional int32 f_2 = 4;
          optional fixed64 f_3 = 5;
        }
        repeated M47 f_2 = 2;
      }
      repeated M38 f_2 = 2;
    }
    optional M16 f_2 = 2;
    message M29 {
      optional fixed64 f_0 = 3;
    }
    repeated M29 f_3 = 3;
  }
  repeated M1 f_48 = 48;
  message M2 {
    optional string f_0 = 1;
    message M15 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 3;
      optional int32 f_3 = 4;
      optional string f_4 = 5;
      optional fixed64 f_5 = 6;
      message M40 {
        optional bool f_0 = 1;
      }
      optional M40 f_7 = 7;
    }
    repeated M15 f_2 = 2;
  }
  repeated M2 f_49 = 49;
  message M3 {
    optional int32 f_0 = 1;
    message M11 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 2;
      optional string f_2 = 3;
      message M44 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 2;
        optional uint64 f_2 = 3;
      }
      repeated M44 f_6 = 6;
    }
    repeated M11 f_3 = 3;
    message M17 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 4;
      optional fixed64 f_3 = 6;
      optional string f_4 = 7;
      optional fixed32 f_5 = 8;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 14;
        E5_CONST_2 = 75;
        E5_CONST_3 = 112;
        E5_CONST_4 = 67;
        E5_CONST_5 = 118;
      }
      optional E5 f_6 = 11;
    }
    repeated M17 f_4 = 4;
    message M22 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 112;
        E7_CONST_2 = 100;
        E7_CONST_3 = 63;
        E7_CONST_4 = 78;
        E7_CONST_5 = 64;
      }
      repeated E7 f_0 = 1 [packed = true];
    }
    optional M22 f_7 = 7;
    message M26 {
      optional uint64 f_0 = 1;
      message M37 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional string f_2 = 4;
        optional string f_3 = 6;
        message M48 {
          optional fixed64 f_0 = 1;
          message M50 {
            optional string f_0 = 1;
          }
          optional M50 f_2 = 2;
        }
        repeated M48 f_7 = 7;
      }
      optional M37 f_3 = 3;
      message M46 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 2;
        optional fixed64 f_2 = 4;
        optional fixed64 f_3 = 6;
        optional double f_4 = 7;
        optional int32 f_5 = 8;
      }
      optional M46 f_4 = 4;
    }
    optional M26 f_8 = 8;
  }
  repeated M3 f_51 = 51;
  message M4 {
    optional int32 f_0 = 2;
    message M23 {
      optional fixed64 f_0 = 2;
    }
    repeated M23 f_4 = 4;
    message M27 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 6;
      optional string f_3 = 7;
      optional fixed64 f_4 = 8;
      message M42 {
        optional string f_0 = 1;
        optional string f_1 = 2;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 44;
          E10_CONST_2 = 92;
          E10_CONST_3 = 22;
          E10_CONST_4 = 68;
          E10_CONST_5 = 87;
        }
        optional E10 f_2 = 4;
        optional int32 f_3 = 5;
        optional bool f_4 = 7;
        optional fixed64 f_5 = 8;
        message M49 {
          optional fixed32 f_0 = 2;
          optional fixed64 f_1 = 4;
          optional fixed32 f_2 = 5;
          optional fixed64 f_3 = 8;
          optional fixed64 f_4 = 10;
          optional string f_5 = 11;
          optional string f_6 = 12;
          optional string f_7 = 14;
          optional fixed64 f_8 = 15;
          optional double f_9 = 16;
          optional int32 f_10 = 17;
          enum E12 {
            E12_UNSPECIFIED = 0;
            E12_CONST_1 = 96;
            E12_CONST_2 = 53;
            E12_CONST_3 = 19;
            E12_CONST_4 = 27;
            E12_CONST_5 = 94;
          }
          optional E12 f_11 = 18;
          optional string f_12 = 19;
          optional string f_13 = 20;
          optional int32 f_14 = 21;
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 57;
            E13_CONST_2 = 98;
            E13_CONST_3 = 120;
            E13_CONST_4 = 71;
            E13_CONST_5 = 114;
          }
          repeated E13 f_15 = 22 [packed = true];
          optional string f_16 = 23;
          optional fixed64 f_17 = 24;
          optional fixed32 f_18 = 25;
          optional string f_19 = 26;
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 3;
            E14_CONST_2 = 74;
            E14_CONST_3 = 125;
            E14_CONST_4 = 15;
            E14_CONST_5 = 9;
          }
          repeated E14 f_20 = 27 [packed = true];
          message M51 {
            optional fixed64 f_0 = 2;
            optional fixed64 f_1 = 5;
            optional uint64 f_2 = 7;
            enum E15 {
              E15_UNSPECIFIED = 0;
              E15_CONST_1 = 29;
              E15_CONST_2 = 26;
              E15_CONST_3 = 39;
              E15_CONST_4 = 28;
              E15_CONST_5 = 61;
            }
            repeated E15 f_3 = 8 [packed = true];
            optional bool f_4 = 9;
            optional fixed64 f_5 = 11;
            optional int32 f_6 = 12;
            optional fixed64 f_7 = 14;
            optional bool f_8 = 16;
            optional bool f_9 = 17;
            optional string f_10 = 18;
            optional fixed32 f_11 = 19;
          }
          optional M51 f_29 = 29;
        }
        repeated M49 f_9 = 9;
      }
      optional M42 f_12 = 12;
    }
    optional M27 f_6 = 6;
  }
  optional M4 f_52 = 52;
  message M5 {
    optional int32 f_0 = 2;
    optional string f_1 = 3;
  }
  repeated M5 f_53 = 53;
  message M6 {
    optional fixed32 f_0 = 1;
    optional int32 f_1 = 5;
    optional string f_2 = 6;
    optional fixed64 f_3 = 7;
    message M18 {
      optional fixed64 f_0 = 3;
      optional fixed64 f_1 = 4;
      message M36 {
        optional fixed64 f_0 = 2;
      }
      optional M36 f_5 = 5;
    }
    optional M18 f_8 = 8;
    message M20 {
      optional uint64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional bool f_2 = 3;
      optional fixed64 f_3 = 4;
      optional bool f_4 = 5;
      optional fixed64 f_5 = 6;
      optional string f_6 = 7;
      message M41 {
        optional int32 f_0 = 2;
        optional fixed64 f_1 = 4;
        optional int32 f_2 = 7;
        optional fixed64 f_3 = 9;
      }
      optional M41 f_8 = 8;
    }
    optional M20 f_9 = 9;
    message M21 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 67;
        E6_CONST_2 = 84;
        E6_CONST_3 = 87;
        E6_CONST_4 = 36;
        E6_CONST_5 = 121;
      }
      repeated E6 f_0 = 1 [packed = true];
      optional int32 f_1 = 2;
    }
    repeated M21 f_10 = 10;
    message M25 {
      optional int32 f_0 = 1;
      message M35 {
        optional fixed64 f_0 = 3;
      }
      optional M35 f_2 = 2;
      message M39 {
        optional string f_0 = 1;
      }
      repeated M39 f_3 = 3;
    }
    repeated M25 f_12 = 12;
    message M31 {
      optional bool f_0 = 2;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 30;
        E8_CONST_2 = 76;
        E8_CONST_3 = 69;
        E8_CONST_4 = 88;
        E8_CONST_5 = 83;
      }
      optional E8 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional int64 f_3 = 5;
      optional fixed64 f_4 = 6;
    }
    optional M31 f_15 = 15;
    message M32 {
      optional string f_0 = 1;
      message M43 {
        optional fixed32 f_0 = 1;
        optional fixed32 f_1 = 2;
        optional bool f_2 = 3;
      }
      optional M43 f_3 = 3;
    }
    repeated M32 f_16 = 16;
  }
  optional M6 f_54 = 54;
  message M7 {
    optional int32 f_0 = 1;
  }
  optional M7 f_55 = 55;
  message M8 {
    optional int32 f_0 = 1;
    message M12 {
      optional string f_0 = 1;
    }
    optional M12 f_2 = 2;
    message M30 {
      optional string f_0 = 2;
    }
    optional M30 f_3 = 3;
  }
  optional M8 f_56 = 56;
  message M9 {
    optional double f_0 = 1;
    message M14 {
      optional int32 f_0 = 2;
      message M34 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 4;
        optional fixed32 f_2 = 5;
      }
      optional M34 f_3 = 3;
    }
    optional M14 f_2 = 2;
  }
  optional M9 f_57 = 57;
  message M10 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 3;
    optional string f_3 = 5;
    optional fixed64 f_4 = 6;
    optional int32 f_5 = 8;
    optional fixed64 f_6 = 9;
    optional int32 f_7 = 10;
    optional fixed32 f_8 = 11;
    optional fixed32 f_9 = 13;
    optional string f_10 = 14;
    optional fixed64 f_11 = 15;
    optional int32 f_12 = 17;
    optional string f_13 = 18;
    optional string f_14 = 20;
    optional fixed64 f_15 = 22;
    optional string f_16 = 24;
    optional int32 f_17 = 25;
    optional fixed64 f_18 = 26;
    optional string f_19 = 27;
    optional string f_20 = 30;
    optional int32 f_21 = 31;
    optional fixed64 f_22 = 32;
    optional double f_23 = 34;
    optional string f_24 = 37;
    optional fixed32 f_25 = 39;
    optional fixed64 f_26 = 40;
    optional fixed64 f_27 = 42;
    optional string f_28 = 43;
    optional fixed32 f_29 = 45;
    message M13 {
      optional fixed64 f_0 = 1;
    }
    optional M13 f_46 = 46;
    message M19 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional int32 f_3 = 5;
      optional string f_4 = 6;
    }
    optional M19 f_47 = 47;
    message M24 {
      optional uint64 f_0 = 2;
    }
    optional M24 f_48 = 48;
    message M28 {
      optional string f_0 = 3;
      optional fixed64 f_1 = 5;
      message M45 {
        optional fixed64 f_0 = 1;
      }
      repeated M45 f_6 = 6;
    }
    optional M28 f_49 = 49;
    message M33 {
      optional int32 f_0 = 1;
      optional bool f_1 = 2;
      optional string f_2 = 3;
      optional fixed32 f_3 = 4;
      optional bool f_4 = 5;
      optional bool f_5 = 6;
      optional string f_6 = 7;
    }
    optional M33 f_50 = 50;
  }
  optional M10 f_59 = 59;
}
