// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.request.Message0;

message Message0 {
  optional fixed32 f_0 = 1;
  optional string f_1 = 3;
  optional int32 f_2 = 4;
  optional fixed64 f_3 = 6;
  optional fixed32 f_4 = 8;
  optional fixed64 f_5 = 11;
  optional int32 f_6 = 13;
  optional int32 f_7 = 15;
  optional fixed64 f_8 = 16;
  optional double f_9 = 17;
  optional fixed64 f_10 = 19;
  optional fixed64 f_11 = 20;
  optional fixed64 f_12 = 21;
  optional fixed64 f_13 = 24;
  optional int32 f_14 = 26;
  optional fixed64 f_15 = 27;
  optional fixed64 f_16 = 28;
  optional string f_17 = 29;
  optional fixed64 f_18 = 31;
  optional string f_19 = 32;
  optional fixed32 f_20 = 33;
  optional int32 f_21 = 34;
  optional int32 f_22 = 35;
  optional int32 f_23 = 36;
  optional fixed64 f_24 = 38;
  optional fixed64 f_25 = 39;
  optional fixed32 f_26 = 40;
  optional string f_27 = 43;
  optional string f_28 = 44;
  optional int32 f_29 = 45;
  message M1 {
    optional fixed64 f_0 = 1;
    message M13 {
      optional string f_0 = 1;
      optional string f_1 = 2;
    }
    repeated M13 f_2 = 2;
    message M32 {
      optional int32 f_0 = 2;
      optional string f_1 = 3;
      message M50 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 4;
        message M59 {
          optional string f_0 = 1;
          optional double f_1 = 2;
          optional int32 f_2 = 3;
          message M66 {
            optional int32 f_0 = 1;
            optional double f_1 = 2;
            optional int32 f_2 = 4;
          }
          repeated M66 f_4 = 4;
        }
        optional M59 f_5 = 5;
        message M60 {
          optional fixed64 f_0 = 1;
        }
        repeated M60 f_7 = 7;
        message M62 {
          optional int32 f_0 = 1;
        }
        repeated M62 f_8 = 8;
      }
      optional M50 f_4 = 4;
    }
    repeated M32 f_3 = 3;
    message M44 {
      optional int32 f_0 = 2;
    }
    optional M44 f_4 = 4;
  }
  optional M1 f_46 = 46;
  message M2 {
    optional bool f_0 = 1;
    optional string f_1 = 2;
    optional int32 f_2 = 3;
    optional fixed32 f_3 = 4;
    message M17 {
      optional fixed64 f_0 = 3;
    }
    optional M17 f_5 = 5;
    message M23 {
      optional string f_0 = 1;
      message M48 {
        optional int32 f_0 = 4;
        optional double f_1 = 5;
        optional bool f_2 = 7;
        optional int32 f_3 = 8;
        optional fixed64 f_4 = 10;
        optional fixed64 f_5 = 12;
        message M63 {
          optional double f_0 = 1;
          optional int32 f_1 = 2;
          optional fixed32 f_2 = 4;
        }
        optional M63 f_13 = 13;
      }
      optional M48 f_3 = 3;
    }
    repeated M23 f_7 = 7;
  }
  optional M2 f_48 = 48;
  message M3 {
    optional string f_0 = 2;
    optional int32 f_1 = 3;
    message M14 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
    }
    optional M14 f_4 = 4;
    message M15 {
      optional double f_0 = 2;
    }
    optional M15 f_5 = 5;
    message M45 {
      optional string f_0 = 1;
      optional string f_1 = 5;
      optional string f_2 = 7;
      optional string f_3 = 8;
    }
    optional M45 f_7 = 7;
  }
  repeated M3 f_49 = 49;
  message M4 {
    optional int32 f_0 = 1;
    message M22 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      message M49 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 3;
        message M56 {
          optional uint64 f_0 = 1;
          message M65 {
            enum E7 {
              E7_UNSPECIFIED = 0;
              E7_CONST_1 = 92;
              E7_CONST_2 = 83;
              E7_CONST_3 = 109;
              E7_CONST_4 = 34;
              E7_CONST_5 = 65;
            }
            repeated E7 f_0 = 1 [packed = true];
          }
          optional M65 f_2 = 2;
        }
        optional M56 f_4 = 4;
      }
      optional M49 f_4 = 4;
    }
    optional M22 f_3 = 3;
    message M24 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional bool f_2 = 4;
    }
    optional M24 f_5 = 5;
    message M43 {
      optional fixed64 f_0 = 2;
      message M51 {
        optional int32 f_0 = 1;
        message M61 {
          optional int32 f_0 = 2;
          enum E6 {
            E6_UNSPECIFIED = 0;
            E6_CONST_1 = 84;
            E6_CONST_2 = 5;
            E6_CONST_3 = 94;
            E6_CONST_4 = 26;
            E6_CONST_5 = 95;
          }
          repeated E6 f_1 = 3 [packed = true];
          optional int32 f_2 = 4;
          optional fixed64 f_3 = 5;
        }
        repeated M61 f_2 = 2;
      }
      optional M51 f_3 = 3;
    }
    optional M43 f_6 = 6;
  }
  optional M4 f_51 = 51;
  message M5 {
    optional fixed64 f_0 = 1;
    message M20 {
      optional int32 f_0 = 2;
      optional fixed32 f_1 = 3;
      optional double f_2 = 4;
      optional fixed32 f_3 = 5;
      optional fixed32 f_4 = 7;
      message M52 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
      }
      optional M52 f_10 = 10;
    }
    optional M20 f_2 = 2;
    message M37 {
      optional int32 f_0 = 3;
    }
    optional M37 f_3 = 3;
  }
  repeated M5 f_53 = 53;
  message M6 {
    optional fixed64 f_0 = 2;
    optional string f_1 = 3;
    optional fixed64 f_2 = 4;
    optional fixed64 f_3 = 7;
    message M29 {
      optional fixed64 f_0 = 1;
    }
    optional M29 f_9 = 9;
    message M31 {
      optional fixed64 f_0 = 1;
    }
    repeated M31 f_10 = 10;
    message M41 {
      optional fixed64 f_0 = 1;
    }
    optional M41 f_11 = 11;
  }
  optional M6 f_54 = 54;
  message M7 {
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 47;
      E1_CONST_2 = 39;
      E1_CONST_3 = 120;
      E1_CONST_4 = 38;
      E1_CONST_5 = 87;
    }
    optional E1 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed32 f_2 = 3;
    optional uint64 f_3 = 4;
    optional fixed64 f_4 = 5;
    optional fixed64 f_5 = 8;
    message M25 {
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 23;
        E3_CONST_2 = 35;
        E3_CONST_3 = 30;
        E3_CONST_4 = 57;
        E3_CONST_5 = 33;
      }
      repeated E3 f_0 = 1 [packed = true];
      optional int32 f_1 = 3;
    }
    optional M25 f_9 = 9;
    message M34 {
      optional int32 f_0 = 2;
    }
    repeated M34 f_10 = 10;
    message M36 {
      optional fixed64 f_0 = 1;
      message M53 {
        optional double f_0 = 1;
        message M57 {
          optional fixed32 f_0 = 3;
          optional int32 f_1 = 4;
          optional int32 f_2 = 5;
          optional fixed64 f_3 = 7;
          message M64 {
            optional fixed64 f_0 = 1;
            optional string f_1 = 3;
            optional double f_2 = 4;
          }
          optional M64 f_8 = 8;
        }
        optional M57 f_2 = 2;
        message M58 {
          optional fixed64 f_0 = 2;
          optional int32 f_1 = 4;
          optional string f_2 = 5;
          optional fixed64 f_3 = 6;
        }
        optional M58 f_4 = 4;
      }
      optional M53 f_2 = 2;
    }
    optional M36 f_11 = 11;
  }
  optional M7 f_55 = 55;
  message M8 {
    optional string f_0 = 1;
    optional fixed32 f_1 = 4;
    optional int64 f_2 = 5;
    optional double f_3 = 6;
    optional fixed64 f_4 = 7;
    optional int32 f_5 = 8;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 99;
      E2_CONST_2 = 27;
      E2_CONST_3 = 81;
      E2_CONST_4 = 94;
      E2_CONST_5 = 78;
    }
    repeated E2 f_6 = 9 [packed = true];
    message M16 {
      optional fixed64 f_0 = 1;
    }
    optional M16 f_10 = 10;
    message M28 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 4;
      optional string f_3 = 5;
      optional string f_4 = 6;
    }
    optional M28 f_11 = 11;
    message M42 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 4;
      optional string f_3 = 5;
    }
    optional M42 f_12 = 12;
  }
  repeated M8 f_56 = 56;
  message M9 {
    optional fixed64 f_0 = 4;
    optional fixed64 f_1 = 5;
    message M19 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    optional M19 f_6 = 6;
    message M21 {
      optional fixed64 f_0 = 1;
    }
    optional M21 f_8 = 8;
    message M39 {
      optional fixed64 f_0 = 1;
      message M54 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 4;
        optional fixed32 f_2 = 5;
        optional bool f_3 = 7;
      }
      optional M54 f_3 = 3;
    }
    optional M39 f_9 = 9;
    message M47 {
      optional fixed64 f_0 = 1;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 73;
        E4_CONST_2 = 112;
        E4_CONST_3 = 92;
        E4_CONST_4 = 3;
        E4_CONST_5 = 123;
      }
      repeated E4 f_1 = 3 [packed = true];
      optional fixed32 f_2 = 4;
      optional string f_3 = 6;
      optional int32 f_4 = 7;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 85;
        E5_CONST_2 = 9;
        E5_CONST_3 = 124;
        E5_CONST_4 = 102;
        E5_CONST_5 = 20;
      }
      optional E5 f_5 = 8;
    }
    repeated M47 f_10 = 10;
  }
  optional M9 f_57 = 57;
  message M10 {
    optional uint64 f_0 = 3;
    message M27 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    optional M27 f_4 = 4;
    message M40 {
      optional fixed64 f_0 = 2;
    }
    optional M40 f_5 = 5;
    message M46 {
      optional fixed64 f_0 = 4;
    }
    optional M46 f_6 = 6;
  }
  optional M10 f_58 = 58;
  message M11 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 4;
    message M26 {
      optional fixed64 f_0 = 2;
    }
    repeated M26 f_7 = 7;
  }
  repeated M11 f_61 = 61;
  message M12 {
    optional string f_0 = 1;
    message M18 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 3;
    }
    optional M18 f_2 = 2;
    message M30 {
      optional string f_0 = 2;
      message M55 {
        optional int32 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 6;
        optional fixed64 f_4 = 7;
        optional fixed32 f_5 = 10;
        optional fixed64 f_6 = 12;
        optional string f_7 = 14;
        optional fixed64 f_8 = 15;
        optional bool f_9 = 16;
        optional string f_10 = 17;
        optional int32 f_11 = 19;
      }
      optional M55 f_5 = 5;
    }
    optional M30 f_3 = 3;
    message M33 {
      optional double f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional int32 f_3 = 5;
    }
    repeated M33 f_4 = 4;
    message M35 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional string f_5 = 7;
      optional int32 f_6 = 8;
    }
    optional M35 f_5 = 5;
    message M38 {
      optional int32 f_0 = 1;
      optional bool f_1 = 2;
      optional string f_2 = 3;
    }
    optional M38 f_7 = 7;
  }
  repeated M12 f_62 = 62;
}
