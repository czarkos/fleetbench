// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.request.Message0;

message Message0 {
  optional string f_0 = 1;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 70;
    E1_CONST_2 = 28;
    E1_CONST_3 = 123;
    E1_CONST_4 = 40;
    E1_CONST_5 = 107;
  }
  optional E1 f_1 = 2;
  optional int32 f_2 = 3;
  optional string f_3 = 4;
  optional string f_4 = 5;
  optional int32 f_5 = 6;
  optional int64 f_6 = 7;
  optional int32 f_7 = 8;
  optional string f_8 = 9;
  optional int64 f_9 = 10;
  message M1 {
    optional string f_0 = 2;
    optional string f_1 = 3;
    optional string f_2 = 4;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 51;
      E2_CONST_2 = 28;
      E2_CONST_3 = 2;
      E2_CONST_4 = 114;
      E2_CONST_5 = 21;
    }
    optional E2 f_3 = 5;
    optional string f_4 = 6;
    optional string f_5 = 7;
    optional bool f_6 = 8;
    optional string f_7 = 9;
    optional bytes f_8 = 10;
  }
  repeated M1 f_13 = 13;
  message M2 {
    optional string f_0 = 1;
    optional string f_1 = 2;
    optional int64 f_2 = 3;
  }
  repeated M2 f_15 = 15;
  message M3 {
    optional int64 f_0 = 1;
    message M22 {
      optional string f_0 = 1;
      message M27 {
        optional uint64 f_0 = 1;
      }
      optional M27 f_2 = 2;
      message M29 {
        optional bool f_0 = 1;
      }
      optional M29 f_3 = 3;
    }
    repeated M22 f_2 = 2;
  }
  repeated M3 f_16 = 16;
  message M4 {
    optional uint64 f_0 = 2;
    optional string f_1 = 3;
  }
  repeated M4 f_17 = 17;
  message M5 {
    optional int64 f_0 = 1;
  }
  repeated M5 f_19 = 19;
  message M6 {
    optional int32 f_0 = 2;
    message M21 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 36;
        E4_CONST_2 = 96;
        E4_CONST_3 = 110;
        E4_CONST_4 = 46;
        E4_CONST_5 = 28;
      }
      optional E4 f_0 = 2;
      optional string f_1 = 3;
      optional int64 f_2 = 5;
      optional string f_3 = 8;
      optional int64 f_4 = 9;
      optional bool f_5 = 10;
      optional string f_6 = 11;
      optional int64 f_7 = 13;
      optional string f_8 = 15;
      optional string f_9 = 16;
      optional int64 f_10 = 17;
      optional int32 f_11 = 18;
      optional string f_12 = 20;
      optional string f_13 = 21;
      optional string f_14 = 22;
      optional string f_15 = 23;
      optional string f_16 = 24;
      optional string f_17 = 25;
      optional int64 f_18 = 26;
      optional string f_19 = 27;
      optional int32 f_20 = 28;
      optional string f_21 = 29;
      optional string f_22 = 30;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 49;
        E5_CONST_2 = 119;
        E5_CONST_3 = 72;
        E5_CONST_4 = 88;
        E5_CONST_5 = 108;
      }
      optional E5 f_23 = 31;
      optional int64 f_24 = 32;
      optional string f_25 = 34;
      optional int32 f_26 = 35;
      optional string f_27 = 36;
      optional int64 f_28 = 38;
      optional string f_29 = 39;
      message M26 {
        optional bytes f_0 = 1;
      }
      repeated M26 f_40 = 40;
      message M28 {
        repeated fixed32 f_0 = 2 [packed = true];
        message M32 {
          optional int64 f_0 = 1;
          optional uint64 f_1 = 2;
          optional int64 f_2 = 3;
          optional string f_3 = 5;
          optional string f_4 = 6;
        }
        optional M32 f_3 = 3;
      }
      optional M28 f_41 = 41;
      message M30 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 18;
          E8_CONST_2 = 61;
          E8_CONST_3 = 37;
          E8_CONST_4 = 14;
          E8_CONST_5 = 25;
        }
        optional E8 f_0 = 1;
      }
      optional M30 f_43 = 43;
    }
    optional M21 f_4 = 4;
  }
  optional M6 f_21 = 21;
  message M7 {
    optional int32 f_0 = 1;
  }
  optional M7 f_22 = 22;
  message M8 {
    optional int64 f_0 = 1;
  }
  optional M8 f_24 = 24;
  message M9 {
    optional int64 f_0 = 1;
  }
  optional M9 f_25 = 25;
  message M10 {
    optional bytes f_0 = 1;
  }
  optional M10 f_27 = 27;
  message M11 {
    optional int32 f_0 = 2;
    optional string f_1 = 3;
    optional string f_2 = 4;
    optional string f_3 = 5;
    optional int64 f_4 = 6;
    optional int64 f_5 = 8;
    optional string f_6 = 11;
    optional int64 f_7 = 12;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 113;
      E3_CONST_2 = 98;
      E3_CONST_3 = 83;
      E3_CONST_4 = 63;
      E3_CONST_5 = 93;
    }
    optional E3 f_8 = 14;
    optional string f_9 = 15;
    optional string f_10 = 16;
    optional int64 f_11 = 18;
    optional uint64 f_12 = 19;
    optional int64 f_13 = 20;
  }
  optional M11 f_28 = 28;
  message M12 {
    optional string f_0 = 1;
  }
  repeated M12 f_29 = 29;
  message M13 {
    optional int32 f_0 = 1;
  }
  optional M13 f_30 = 30;
  message M14 {
    optional int64 f_0 = 1;
  }
  optional M14 f_31 = 31;
  message M15 {
    optional int32 f_0 = 1;
    optional string f_1 = 2;
    optional string f_2 = 3;
    optional string f_3 = 4;
    optional string f_4 = 5;
    optional bool f_5 = 7;
    optional string f_6 = 8;
    message M24 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 3;
      optional int32 f_3 = 4;
      optional bool f_4 = 5;
    }
    optional M24 f_9 = 9;
  }
  optional M15 f_32 = 32;
  message M16 {
    optional uint64 f_0 = 1;
  }
  optional M16 f_34 = 34;
  message M17 {
    optional int32 f_0 = 2;
    message M23 {
      optional string f_0 = 1;
      message M25 {
        optional string f_0 = 1;
        optional bytes f_1 = 2;
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 19;
          E6_CONST_2 = 8;
          E6_CONST_3 = 65;
          E6_CONST_4 = 72;
          E6_CONST_5 = 20;
        }
        optional E6 f_2 = 3;
        optional string f_3 = 4;
        repeated string f_4 = 6;
        optional int64 f_5 = 7;
        optional int64 f_6 = 8;
        optional int64 f_7 = 9;
        optional bool f_8 = 10;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 103;
          E7_CONST_2 = 2;
          E7_CONST_3 = 89;
          E7_CONST_4 = 119;
          E7_CONST_5 = 74;
        }
        optional E7 f_9 = 11;
      }
      optional M25 f_2 = 2;
      message M31 {
        optional string f_0 = 1;
        optional fixed32 f_1 = 2;
        optional int64 f_2 = 3;
        optional int64 f_3 = 4;
        optional uint64 f_4 = 6;
        optional string f_5 = 7;
        optional bytes f_6 = 8;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 14;
          E9_CONST_2 = 57;
          E9_CONST_3 = 51;
          E9_CONST_4 = 61;
          E9_CONST_5 = 64;
        }
        optional E9 f_7 = 9;
        optional string f_8 = 10;
        optional string f_9 = 11;
        optional bytes f_10 = 12;
        optional string f_11 = 13;
        optional int32 f_12 = 14;
        optional int64 f_13 = 15;
        optional bool f_14 = 16;
        optional string f_15 = 18;
        optional bool f_16 = 19;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 35;
          E10_CONST_2 = 124;
          E10_CONST_3 = 110;
          E10_CONST_4 = 90;
          E10_CONST_5 = 100;
        }
        optional E10 f_17 = 20;
        repeated fixed32 f_18 = 22 [packed = true];
        optional int32 f_19 = 23;
        optional string f_20 = 24;
        optional string f_21 = 26;
        optional int32 f_22 = 27;
        optional fixed32 f_23 = 28;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 3;
          E11_CONST_2 = 44;
          E11_CONST_3 = 68;
          E11_CONST_4 = 15;
          E11_CONST_5 = 62;
        }
        optional E11 f_24 = 29;
        optional string f_25 = 30;
        optional string f_26 = 31;
        optional string f_27 = 32;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 15;
          E12_CONST_2 = 51;
          E12_CONST_3 = 97;
          E12_CONST_4 = 53;
          E12_CONST_5 = 122;
        }
        optional E12 f_28 = 33;
      }
      optional M31 f_4 = 4;
    }
    optional M23 f_3 = 3;
  }
  optional M17 f_35 = 35;
  message M18 {
    optional bytes f_0 = 1;
  }
  optional M18 f_36 = 36;
  message M19 {
    optional string f_0 = 2;
  }
  optional M19 f_37 = 37;
  message M20 {
    optional string f_0 = 1;
    optional string f_1 = 2;
  }
  optional M20 f_39 = 39;
}
