// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.request.Message0;

message Message0 {
  optional bool f_0 = 1;
  optional string f_1 = 3;
  optional fixed64 f_2 = 4;
  optional int32 f_3 = 6;
  optional fixed64 f_4 = 8;
  optional string f_5 = 11;
  optional double f_6 = 12;
  optional fixed64 f_7 = 15;
  optional int32 f_8 = 16;
  optional fixed64 f_9 = 17;
  optional fixed64 f_10 = 19;
  optional fixed64 f_11 = 20;
  optional int32 f_12 = 21;
  repeated string f_13 = 23;
  optional string f_14 = 24;
  optional uint64 f_15 = 26;
  optional fixed64 f_16 = 27;
  optional fixed32 f_17 = 28;
  optional string f_18 = 29;
  optional int32 f_19 = 31;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 18;
    E1_CONST_2 = 42;
    E1_CONST_3 = 117;
    E1_CONST_4 = 43;
    E1_CONST_5 = 121;
  }
  optional E1 f_20 = 32;
  optional int32 f_21 = 33;
  optional string f_22 = 34;
  optional fixed64 f_23 = 35;
  optional int32 f_24 = 36;
  optional string f_25 = 38;
  optional fixed64 f_26 = 39;
  optional fixed32 f_27 = 40;
  optional fixed64 f_28 = 43;
  optional fixed64 f_29 = 44;
  message M1 {
    optional double f_0 = 1;
    message M18 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 4;
      optional string f_2 = 5;
      optional fixed64 f_3 = 6;
      optional int32 f_4 = 7;
      optional int32 f_5 = 8;
      optional string f_6 = 9;
      optional int32 f_7 = 10;
    }
    optional M18 f_2 = 2;
    message M25 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    repeated M25 f_3 = 3;
    message M40 {
      optional bool f_0 = 1;
    }
    repeated M40 f_4 = 4;
  }
  repeated M1 f_45 = 45;
  message M2 {
    optional int32 f_0 = 1;
    message M39 {
      optional fixed64 f_0 = 2;
    }
    optional M39 f_2 = 2;
    message M44 {
      optional string f_0 = 2;
      optional int32 f_1 = 3;
      optional string f_2 = 5;
      optional double f_3 = 8;
      message M58 {
        optional bool f_0 = 1;
        optional int32 f_1 = 4;
        optional string f_2 = 5;
        optional int32 f_3 = 6;
        optional uint64 f_4 = 8;
        optional int32 f_5 = 9;
        optional int32 f_6 = 11;
        optional int32 f_7 = 13;
        optional fixed64 f_8 = 14;
        optional fixed64 f_9 = 15;
        optional fixed32 f_10 = 17;
        optional string f_11 = 18;
        optional int32 f_12 = 19;
        optional int32 f_13 = 20;
        optional fixed64 f_14 = 21;
        optional fixed64 f_15 = 22;
        optional string f_16 = 24;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 49;
          E13_CONST_2 = 47;
          E13_CONST_3 = 35;
          E13_CONST_4 = 13;
          E13_CONST_5 = 120;
        }
        optional E13 f_17 = 26;
        optional bool f_18 = 27;
        optional fixed32 f_19 = 28;
        optional string f_20 = 29;
        optional fixed64 f_21 = 30;
        optional fixed64 f_22 = 31;
        optional fixed64 f_23 = 32;
        optional string f_24 = 33;
        optional int32 f_25 = 34;
        optional fixed64 f_26 = 36;
        optional int32 f_27 = 37;
        optional string f_28 = 38;
        optional uint64 f_29 = 39;
        optional fixed32 f_30 = 40;
      }
      optional M58 f_9 = 9;
    }
    optional M44 f_4 = 4;
  }
  optional M2 f_46 = 46;
  message M3 {
    optional fixed64 f_0 = 1;
    message M35 {
      optional int32 f_0 = 1;
    }
    optional M35 f_2 = 2;
  }
  optional M3 f_47 = 47;
  message M4 {
    optional int32 f_0 = 1;
    message M15 {
      optional double f_0 = 1;
    }
    repeated M15 f_2 = 2;
  }
  optional M4 f_49 = 49;
  message M5 {
    optional fixed64 f_0 = 2;
    optional fixed64 f_1 = 3;
    optional fixed64 f_2 = 4;
    optional fixed64 f_3 = 5;
    optional int32 f_4 = 7;
    message M16 {
      optional fixed32 f_0 = 1;
      optional fixed64 f_1 = 2;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 118;
        E5_CONST_2 = 9;
        E5_CONST_3 = 77;
        E5_CONST_4 = 52;
        E5_CONST_5 = 108;
      }
      repeated E5 f_2 = 3 [packed = true];
    }
    repeated M16 f_9 = 9;
    message M42 {
      optional string f_0 = 1;
    }
    optional M42 f_10 = 10;
  }
  optional M5 f_50 = 50;
  message M6 {
    optional fixed64 f_0 = 2;
    optional string f_1 = 4;
    optional bool f_2 = 5;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 69;
      E2_CONST_2 = 22;
      E2_CONST_3 = 94;
      E2_CONST_4 = 58;
      E2_CONST_5 = 43;
    }
    repeated E2 f_3 = 6 [packed = true];
    optional string f_4 = 9;
    optional bool f_5 = 10;
    message M19 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 57;
        E6_CONST_2 = 115;
        E6_CONST_3 = 59;
        E6_CONST_4 = 118;
        E6_CONST_5 = 32;
      }
      repeated E6 f_0 = 1 [packed = true];
      optional fixed32 f_1 = 3;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 119;
        E7_CONST_2 = 96;
        E7_CONST_3 = 92;
        E7_CONST_4 = 85;
        E7_CONST_5 = 68;
      }
      optional E7 f_2 = 4;
      optional string f_3 = 5;
      optional fixed64 f_4 = 6;
      optional bool f_5 = 8;
      optional uint64 f_6 = 9;
      message M49 {
        optional fixed32 f_0 = 2;
        message M64 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 3;
          optional string f_2 = 4;
          message M68 {
            optional fixed64 f_0 = 1;
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 55;
              E17_CONST_2 = 89;
              E17_CONST_3 = 97;
              E17_CONST_4 = 51;
              E17_CONST_5 = 2;
            }
            repeated E17 f_1 = 2 [packed = true];
            optional fixed64 f_2 = 3;
          }
          optional M68 f_5 = 5;
          message M70 {
            optional string f_0 = 1;
            optional bool f_1 = 4;
            optional fixed64 f_2 = 5;
            enum E18 {
              E18_UNSPECIFIED = 0;
              E18_CONST_1 = 3;
              E18_CONST_2 = 58;
              E18_CONST_3 = 118;
              E18_CONST_4 = 44;
              E18_CONST_5 = 105;
            }
            optional E18 f_3 = 6;
            optional fixed64 f_4 = 7;
            optional bool f_5 = 10;
          }
          optional M70 f_8 = 8;
        }
        repeated M64 f_3 = 3;
        message M65 {
          optional string f_0 = 1;
        }
        optional M65 f_4 = 4;
      }
      optional M49 f_10 = 10;
    }
    optional M19 f_11 = 11;
    message M28 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 109;
        E8_CONST_2 = 37;
        E8_CONST_3 = 63;
        E8_CONST_4 = 92;
        E8_CONST_5 = 52;
      }
      repeated E8 f_0 = 1 [packed = true];
      message M52 {
        optional string f_0 = 1;
        message M60 {
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 15;
            E14_CONST_2 = 108;
            E14_CONST_3 = 76;
            E14_CONST_4 = 19;
            E14_CONST_5 = 73;
          }
          repeated E14 f_0 = 1 [packed = true];
          optional string f_1 = 3;
        }
        optional M60 f_2 = 2;
      }
      optional M52 f_2 = 2;
    }
    optional M28 f_12 = 12;
    message M36 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 4;
    }
    optional M36 f_13 = 13;
    message M46 {
      optional string f_0 = 1;
      message M56 {
        optional string f_0 = 1;
        optional int32 f_1 = 4;
        optional bool f_2 = 6;
        optional fixed32 f_3 = 8;
        optional string f_4 = 9;
        optional fixed32 f_5 = 10;
        message M62 {
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 41;
            E16_CONST_2 = 18;
            E16_CONST_3 = 116;
            E16_CONST_4 = 30;
            E16_CONST_5 = 14;
          }
          repeated E16 f_0 = 2 [packed = true];
        }
        optional M62 f_11 = 11;
      }
      optional M56 f_2 = 2;
    }
    repeated M46 f_15 = 15;
  }
  optional M6 f_51 = 51;
  message M7 {
    optional double f_0 = 1;
    optional fixed64 f_1 = 2;
    message M22 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 4;
      optional string f_3 = 6;
    }
    repeated M22 f_3 = 3;
    message M29 {
      optional string f_0 = 1;
    }
    optional M29 f_5 = 5;
    message M30 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 3;
    }
    optional M30 f_6 = 6;
    message M38 {
      optional string f_0 = 1;
    }
    optional M38 f_7 = 7;
    message M41 {
      optional fixed64 f_0 = 2;
      message M53 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 4;
        optional int32 f_2 = 5;
        optional int32 f_3 = 6;
        optional int32 f_4 = 8;
      }
      optional M53 f_4 = 4;
    }
    optional M41 f_8 = 8;
    message M48 {
      optional bool f_0 = 1;
      optional string f_1 = 3;
      optional fixed32 f_2 = 4;
      optional uint64 f_3 = 6;
    }
    optional M48 f_10 = 10;
  }
  optional M7 f_52 = 52;
  message M8 {
    optional fixed64 f_0 = 1;
    message M27 {
      optional fixed32 f_0 = 1;
    }
    repeated M27 f_2 = 2;
    message M47 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional bool f_2 = 3;
      message M50 {
        optional fixed64 f_0 = 2;
        message M59 {
          optional string f_0 = 1;
          optional string f_1 = 2;
          optional double f_2 = 3;
        }
        optional M59 f_3 = 3;
      }
      repeated M50 f_4 = 4;
    }
    repeated M47 f_6 = 6;
  }
  optional M8 f_55 = 55;
  message M9 {
    optional string f_0 = 1;
  }
  repeated M9 f_56 = 56;
  message M10 {
    optional int32 f_0 = 3;
  }
  optional M10 f_57 = 57;
  message M11 {
    optional fixed32 f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 3;
    optional int32 f_3 = 4;
    optional fixed64 f_4 = 5;
    message M24 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 4;
      optional fixed64 f_2 = 5;
    }
    optional M24 f_6 = 6;
    message M33 {
      optional fixed64 f_0 = 1;
      message M54 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 5;
        message M61 {
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 59;
            E15_CONST_2 = 68;
            E15_CONST_3 = 20;
            E15_CONST_4 = 19;
            E15_CONST_5 = 80;
          }
          repeated E15 f_0 = 2 [packed = true];
        }
        optional M61 f_8 = 8;
      }
      repeated M54 f_3 = 3;
      message M57 {
        optional fixed64 f_0 = 2;
        optional double f_1 = 5;
        message M63 {
          optional fixed64 f_0 = 2;
          message M67 {
            optional string f_0 = 4;
          }
          optional M67 f_4 = 4;
          message M69 {
            optional int32 f_0 = 2;
            optional int32 f_1 = 3;
            message M71 {
              optional string f_0 = 1;
              enum E19 {
                E19_UNSPECIFIED = 0;
                E19_CONST_1 = 67;
                E19_CONST_2 = 106;
                E19_CONST_3 = 51;
                E19_CONST_4 = 84;
                E19_CONST_5 = 83;
              }
              optional E19 f_1 = 2;
              optional int32 f_2 = 3;
              optional int32 f_3 = 4;
              optional double f_4 = 6;
              optional string f_5 = 9;
            }
            optional M71 f_4 = 4;
          }
          optional M69 f_5 = 5;
        }
        optional M63 f_8 = 8;
      }
      optional M57 f_4 = 4;
    }
    optional M33 f_7 = 7;
  }
  optional M11 f_61 = 61;
  message M12 {
    optional bool f_0 = 1;
    message M17 {
      optional fixed64 f_0 = 1;
    }
    optional M17 f_2 = 2;
    message M23 {
      optional fixed64 f_0 = 2;
      message M51 {
        optional int32 f_0 = 2;
        optional fixed32 f_1 = 4;
        optional int32 f_2 = 5;
        message M66 {
          optional string f_0 = 2;
          optional fixed64 f_1 = 3;
          optional int64 f_2 = 4;
          optional fixed64 f_3 = 6;
          optional fixed64 f_4 = 7;
          optional fixed64 f_5 = 8;
          optional bool f_6 = 10;
        }
        optional M66 f_6 = 6;
      }
      repeated M51 f_3 = 3;
    }
    optional M23 f_3 = 3;
    message M31 {
      optional int32 f_0 = 2;
      optional string f_1 = 3;
      optional fixed64 f_2 = 4;
    }
    repeated M31 f_4 = 4;
    message M32 {
      optional fixed32 f_0 = 2;
    }
    optional M32 f_5 = 5;
    message M45 {
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 69;
        E11_CONST_2 = 82;
        E11_CONST_3 = 12;
        E11_CONST_4 = 89;
        E11_CONST_5 = 26;
      }
      repeated E11 f_0 = 1 [packed = true];
    }
    optional M45 f_7 = 7;
  }
  optional M12 f_62 = 62;
  message M13 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 98;
      E3_CONST_2 = 65;
      E3_CONST_3 = 64;
      E3_CONST_4 = 116;
      E3_CONST_5 = 81;
    }
    optional E3 f_0 = 3;
    optional string f_1 = 4;
    optional int32 f_2 = 5;
    message M20 {
      optional int32 f_0 = 2;
      message M55 {
        optional double f_0 = 1;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 68;
          E12_CONST_2 = 118;
          E12_CONST_3 = 89;
          E12_CONST_4 = 11;
          E12_CONST_5 = 40;
        }
        repeated E12 f_1 = 2 [packed = true];
      }
      repeated M55 f_4 = 4;
    }
    optional M20 f_6 = 6;
    message M26 {
      optional fixed64 f_0 = 1;
    }
    optional M26 f_8 = 8;
    message M37 {
      optional fixed32 f_0 = 2;
      optional double f_1 = 3;
      optional bool f_2 = 4;
    }
    repeated M37 f_9 = 9;
  }
  optional M13 f_65 = 65;
  message M14 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 65;
      E4_CONST_2 = 96;
      E4_CONST_3 = 80;
      E4_CONST_4 = 33;
      E4_CONST_5 = 103;
    }
    repeated E4 f_0 = 3 [packed = true];
    optional string f_1 = 4;
    optional string f_2 = 5;
    optional fixed64 f_3 = 6;
    message M21 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 5;
    }
    optional M21 f_8 = 8;
    message M34 {
      optional string f_0 = 2;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 119;
        E9_CONST_2 = 69;
        E9_CONST_3 = 11;
        E9_CONST_4 = 60;
        E9_CONST_5 = 125;
      }
      optional E9 f_3 = 5;
      optional string f_4 = 6;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 36;
        E10_CONST_2 = 93;
        E10_CONST_3 = 100;
        E10_CONST_4 = 90;
        E10_CONST_5 = 119;
      }
      repeated E10 f_5 = 8 [packed = true];
      optional string f_6 = 9;
      optional fixed64 f_7 = 10;
      optional string f_8 = 11;
      optional bool f_9 = 12;
      optional fixed64 f_10 = 13;
      optional fixed64 f_11 = 14;
      optional fixed64 f_12 = 17;
    }
    optional M34 f_9 = 9;
    message M43 {
      optional fixed64 f_0 = 1;
    }
    optional M43 f_13 = 13;
  }
  optional M14 f_66 = 66;
}
