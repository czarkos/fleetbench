// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.request.Message2;

message Message2 {
  optional string f_0 = 2;
  optional bool f_1 = 3;
  optional bool f_2 = 5;
  optional string f_3 = 8;
  optional string f_4 = 9;
  optional string f_5 = 10;
  optional string f_6 = 11;
  optional string f_7 = 12;
  optional string f_8 = 13;
  message M1 {
    optional string f_0 = 1;
    optional string f_1 = 2;
  }
  optional M1 f_14 = 14;
  message M2 {
    optional string f_0 = 2;
    optional string f_1 = 3;
  }
  repeated M2 f_15 = 15;
  message M3 {
    optional int32 f_0 = 1;
    optional uint64 f_1 = 2;
    optional int32 f_2 = 3;
    optional bytes f_3 = 5;
    optional int64 f_4 = 6;
    optional string f_5 = 7;
    optional int64 f_6 = 8;
    optional int32 f_7 = 9;
  }
  optional M3 f_16 = 16;
  message M4 {
    optional int64 f_0 = 2;
    optional bytes f_1 = 4;
    optional string f_2 = 5;
    optional int32 f_3 = 6;
    optional string f_4 = 7;
    optional int64 f_5 = 8;
    optional int32 f_6 = 9;
    optional string f_7 = 10;
    optional string f_8 = 12;
  }
  repeated M4 f_17 = 17;
  message M5 {
    optional int64 f_0 = 1;
    optional int64 f_1 = 2;
    optional int64 f_2 = 3;
    optional string f_3 = 4;
    optional string f_4 = 6;
    message M13 {
      optional string f_0 = 1;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 61;
        E4_CONST_2 = 79;
        E4_CONST_3 = 18;
        E4_CONST_4 = 116;
        E4_CONST_5 = 42;
      }
      optional E4 f_1 = 2;
    }
    optional M13 f_8 = 8;
  }
  optional M5 f_18 = 18;
  message M6 {
    optional int32 f_0 = 1;
    optional bool f_1 = 2;
    optional int64 f_2 = 3;
  }
  optional M6 f_19 = 19;
  message M7 {
    optional string f_0 = 1;
    message M14 {
      optional string f_0 = 1;
      optional string f_1 = 2;
    }
    optional M14 f_2 = 2;
    message M15 {
      optional string f_0 = 1;
      optional bytes f_1 = 3;
      optional string f_2 = 4;
      optional string f_3 = 5;
      optional int32 f_4 = 6;
      optional string f_5 = 7;
      optional string f_6 = 8;
      message M19 {
        optional int32 f_0 = 1;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 44;
          E9_CONST_2 = 117;
          E9_CONST_3 = 109;
          E9_CONST_4 = 61;
          E9_CONST_5 = 21;
        }
        optional E9 f_1 = 3;
        optional int32 f_2 = 4;
        optional string f_3 = 6;
        optional int64 f_4 = 7;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 46;
          E10_CONST_2 = 71;
          E10_CONST_3 = 101;
          E10_CONST_4 = 94;
          E10_CONST_5 = 102;
        }
        optional E10 f_5 = 8;
        optional string f_6 = 9;
        optional int64 f_7 = 10;
        optional string f_8 = 11;
        optional int64 f_9 = 12;
        optional int64 f_10 = 14;
        optional int64 f_11 = 15;
        optional string f_12 = 17;
        optional string f_13 = 18;
        message M21 {
          optional int64 f_0 = 1;
        }
        optional M21 f_19 = 19;
      }
      repeated M19 f_9 = 9;
    }
    optional M15 f_3 = 3;
  }
  repeated M7 f_21 = 21;
  message M8 {
    optional int64 f_0 = 2;
    optional bool f_1 = 3;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 58;
      E1_CONST_2 = 53;
      E1_CONST_3 = 69;
      E1_CONST_4 = 40;
      E1_CONST_5 = 24;
    }
    optional E1 f_2 = 4;
    optional sfixed64 f_3 = 5;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 63;
      E2_CONST_2 = 37;
      E2_CONST_3 = 95;
      E2_CONST_4 = 110;
      E2_CONST_5 = 100;
    }
    optional E2 f_4 = 7;
    optional string f_5 = 8;
    optional int32 f_6 = 9;
    optional string f_7 = 11;
    optional int64 f_8 = 13;
    optional bool f_9 = 14;
    message M17 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional string f_2 = 4;
      optional int32 f_3 = 5;
      optional uint64 f_4 = 6;
      optional sfixed64 f_5 = 7;
      optional bool f_6 = 8;
      optional string f_7 = 9;
      optional int32 f_8 = 10;
      optional string f_9 = 11;
      optional int64 f_10 = 12;
      optional string f_11 = 13;
      optional bool f_12 = 15;
      optional uint64 f_13 = 16;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 8;
        E6_CONST_2 = 108;
        E6_CONST_3 = 121;
        E6_CONST_4 = 111;
        E6_CONST_5 = 30;
      }
      optional E6 f_14 = 17;
      optional int64 f_15 = 18;
      optional int64 f_16 = 19;
      optional string f_17 = 20;
      optional int64 f_18 = 22;
      optional int64 f_19 = 23;
      optional int64 f_20 = 24;
      optional bool f_21 = 25;
      optional int64 f_22 = 26;
      optional string f_23 = 27;
      optional int32 f_24 = 28;
    }
    optional M17 f_15 = 15;
  }
  optional M8 f_22 = 22;
  message M9 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 71;
      E3_CONST_2 = 17;
      E3_CONST_3 = 90;
      E3_CONST_4 = 95;
      E3_CONST_5 = 22;
    }
    optional E3 f_0 = 1;
    optional int64 f_1 = 2;
  }
  repeated M9 f_23 = 23;
  message M10 {
    optional string f_0 = 1;
  }
  optional M10 f_24 = 24;
  message M11 {
    optional string f_0 = 2;
    message M16 {
      optional uint64 f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 3;
      optional string f_3 = 5;
      optional int64 f_4 = 6;
      optional string f_5 = 7;
      optional bool f_6 = 9;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 95;
        E5_CONST_2 = 15;
        E5_CONST_3 = 102;
        E5_CONST_4 = 38;
        E5_CONST_5 = 89;
      }
      optional E5 f_7 = 11;
      optional int64 f_8 = 12;
      message M18 {
        optional bytes f_0 = 1;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 25;
          E7_CONST_2 = 38;
          E7_CONST_3 = 119;
          E7_CONST_4 = 89;
          E7_CONST_5 = 3;
        }
        optional E7 f_1 = 2;
        optional fixed32 f_2 = 3;
        optional int32 f_3 = 4;
        optional int32 f_4 = 6;
        optional string f_5 = 8;
        optional string f_6 = 9;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 72;
          E8_CONST_2 = 109;
          E8_CONST_3 = 104;
          E8_CONST_4 = 90;
          E8_CONST_5 = 73;
        }
        optional E8 f_7 = 10;
        optional string f_8 = 11;
        message M20 {
          optional bool f_0 = 1;
        }
        repeated M20 f_12 = 12;
        message M22 {
          optional string f_0 = 2;
          enum E11 {
            E11_UNSPECIFIED = 0;
            E11_CONST_1 = 122;
            E11_CONST_2 = 82;
            E11_CONST_3 = 44;
            E11_CONST_4 = 72;
            E11_CONST_5 = 47;
          }
          optional E11 f_1 = 3;
          optional int32 f_2 = 4;
        }
        repeated M22 f_13 = 13;
      }
      optional M18 f_13 = 13;
    }
    optional M16 f_4 = 4;
  }
  optional M11 f_25 = 25;
  message M12 {
    optional string f_0 = 1;
    optional int32 f_1 = 2;
  }
  repeated M12 f_27 = 27;
}
