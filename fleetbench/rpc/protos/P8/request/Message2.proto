// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.request.Message2;

message Message2 {
  optional int32 f_0 = 1;
  optional double f_1 = 2;
  optional fixed64 f_2 = 4;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 31;
    E1_CONST_2 = 18;
    E1_CONST_3 = 46;
    E1_CONST_4 = 1;
    E1_CONST_5 = 42;
  }
  optional E1 f_3 = 6;
  optional string f_4 = 7;
  optional fixed64 f_5 = 8;
  optional string f_6 = 10;
  optional int32 f_7 = 11;
  optional int32 f_8 = 14;
  optional fixed64 f_9 = 15;
  optional fixed64 f_10 = 16;
  optional bool f_11 = 18;
  optional int32 f_12 = 20;
  optional int32 f_13 = 21;
  optional bool f_14 = 22;
  optional int32 f_15 = 23;
  optional string f_16 = 24;
  optional fixed64 f_17 = 26;
  optional fixed64 f_18 = 28;
  optional fixed64 f_19 = 29;
  optional int32 f_20 = 30;
  optional int32 f_21 = 32;
  optional double f_22 = 33;
  optional fixed64 f_23 = 35;
  optional fixed64 f_24 = 36;
  optional string f_25 = 37;
  optional double f_26 = 39;
  optional bool f_27 = 40;
  optional bool f_28 = 41;
  optional string f_29 = 43;
  message M1 {
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 11;
      E2_CONST_2 = 12;
      E2_CONST_3 = 21;
      E2_CONST_4 = 93;
      E2_CONST_5 = 61;
    }
    repeated E2 f_0 = 2 [packed = true];
    message M35 {
      optional bool f_0 = 1;
      optional bool f_1 = 2;
      optional fixed64 f_2 = 3;
      optional string f_3 = 4;
    }
    repeated M35 f_3 = 3;
    message M36 {
      optional string f_0 = 1;
    }
    optional M36 f_4 = 4;
  }
  optional M1 f_46 = 46;
  message M2 {
    optional string f_0 = 1;
    optional string f_1 = 3;
    message M25 {
      optional int32 f_0 = 1;
      message M41 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional string f_2 = 4;
        optional string f_3 = 6;
      }
      repeated M41 f_2 = 2;
      message M42 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 3;
        optional string f_2 = 5;
      }
      repeated M42 f_4 = 4;
    }
    optional M25 f_4 = 4;
  }
  repeated M2 f_47 = 47;
  message M3 {
    optional fixed32 f_0 = 1;
  }
  optional M3 f_48 = 48;
  message M4 {
    optional string f_0 = 1;
  }
  optional M4 f_49 = 49;
  message M5 {
    optional fixed32 f_0 = 1;
  }
  optional M5 f_51 = 51;
  message M6 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 3;
    message M38 {
      optional string f_0 = 2;
      optional string f_1 = 3;
      message M45 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 6;
        optional string f_4 = 7;
        optional fixed64 f_5 = 9;
        message M51 {
          optional fixed64 f_0 = 1;
          optional uint64 f_1 = 2;
          optional string f_2 = 3;
        }
        repeated M51 f_11 = 11;
        message M53 {
          optional fixed64 f_0 = 1;
          optional fixed64 f_1 = 2;
        }
        optional M53 f_12 = 12;
        message M54 {
          optional int32 f_0 = 1;
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 96;
            E14_CONST_2 = 49;
            E14_CONST_3 = 20;
            E14_CONST_4 = 63;
            E14_CONST_5 = 40;
          }
          repeated E14 f_1 = 3 [packed = true];
          optional string f_2 = 6;
          optional fixed64 f_3 = 8;
          optional int32 f_4 = 9;
          optional fixed64 f_5 = 12;
        }
        repeated M54 f_14 = 14;
      }
      repeated M45 f_4 = 4;
    }
    optional M38 f_5 = 5;
    message M39 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 5;
    }
    repeated M39 f_7 = 7;
  }
  repeated M6 f_52 = 52;
  message M7 {
    optional fixed64 f_0 = 1;
  }
  optional M7 f_53 = 53;
  message M8 {
    optional string f_0 = 1;
    optional string f_1 = 3;
    optional string f_2 = 4;
  }
  optional M8 f_55 = 55;
  message M9 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 8;
      E3_CONST_2 = 88;
      E3_CONST_3 = 68;
      E3_CONST_4 = 95;
      E3_CONST_5 = 115;
    }
    repeated E3 f_0 = 1 [packed = true];
  }
  optional M9 f_57 = 57;
  message M10 {
    optional bool f_0 = 2;
    message M22 {
      optional int32 f_0 = 2;
    }
    optional M22 f_4 = 4;
    message M23 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional int32 f_3 = 5;
      optional int32 f_4 = 6;
      optional fixed64 f_5 = 7;
      optional fixed64 f_6 = 8;
      optional bool f_7 = 9;
      optional string f_8 = 10;
      optional bool f_9 = 11;
      optional double f_10 = 13;
      optional fixed64 f_11 = 14;
      optional bool f_12 = 15;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 70;
        E5_CONST_2 = 118;
        E5_CONST_3 = 49;
        E5_CONST_4 = 30;
        E5_CONST_5 = 29;
      }
      optional E5 f_13 = 17;
      optional string f_14 = 18;
      optional fixed64 f_15 = 19;
      optional string f_16 = 20;
    }
    repeated M23 f_5 = 5;
    message M24 {
      optional fixed64 f_0 = 1;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 6;
        E6_CONST_2 = 70;
        E6_CONST_3 = 27;
        E6_CONST_4 = 81;
        E6_CONST_5 = 33;
      }
      repeated E6 f_1 = 2 [packed = true];
      optional fixed32 f_2 = 4;
      optional fixed64 f_3 = 6;
      optional fixed64 f_4 = 8;
      optional string f_5 = 9;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 100;
        E7_CONST_2 = 44;
        E7_CONST_3 = 111;
        E7_CONST_4 = 22;
        E7_CONST_5 = 16;
      }
      repeated E7 f_6 = 12 [packed = true];
      message M43 {
        optional bool f_0 = 1;
        message M48 {
          optional int32 f_0 = 1;
          optional string f_1 = 2;
          optional bool f_2 = 3;
        }
        optional M48 f_2 = 2;
      }
      optional M43 f_13 = 13;
    }
    repeated M24 f_6 = 6;
  }
  repeated M10 f_58 = 58;
  message M11 {
    optional fixed64 f_0 = 1;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 117;
      E4_CONST_2 = 20;
      E4_CONST_3 = 44;
      E4_CONST_4 = 5;
      E4_CONST_5 = 98;
    }
    repeated E4 f_1 = 2 [packed = true];
  }
  optional M11 f_59 = 59;
  message M12 {
    optional fixed64 f_0 = 2;
  }
  optional M12 f_60 = 60;
  message M13 {
    optional string f_0 = 1;
    message M30 {
      optional string f_0 = 1;
      optional string f_1 = 3;
      optional fixed64 f_2 = 6;
      message M40 {
        optional double f_0 = 2;
        optional int32 f_1 = 3;
        optional string f_2 = 5;
        message M52 {
          optional fixed64 f_0 = 1;
          message M56 {
            optional bool f_0 = 1;
            optional fixed64 f_1 = 2;
            optional int32 f_2 = 3;
            optional string f_3 = 5;
            optional fixed64 f_4 = 6;
            optional string f_5 = 7;
            optional string f_6 = 8;
          }
          optional M56 f_2 = 2;
        }
        optional M52 f_6 = 6;
      }
      optional M40 f_9 = 9;
    }
    repeated M30 f_2 = 2;
  }
  repeated M13 f_61 = 61;
  message M14 {
    optional string f_0 = 1;
    message M34 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional fixed32 f_5 = 8;
      optional fixed64 f_6 = 12;
    }
    optional M34 f_2 = 2;
  }
  repeated M14 f_63 = 63;
  message M15 {
    optional fixed64 f_0 = 1;
  }
  optional M15 f_64 = 64;
  message M16 {
    optional string f_0 = 2;
    message M27 {
      optional string f_0 = 1;
    }
    repeated M27 f_3 = 3;
    message M31 {
      optional double f_0 = 1;
      optional double f_1 = 3;
      optional fixed64 f_2 = 4;
      optional string f_3 = 5;
      message M46 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 58;
          E8_CONST_2 = 49;
          E8_CONST_3 = 16;
          E8_CONST_4 = 100;
          E8_CONST_5 = 31;
        }
        optional E8 f_0 = 2;
        optional string f_1 = 3;
        optional uint64 f_2 = 5;
        optional string f_3 = 8;
        optional string f_4 = 9;
        optional fixed64 f_5 = 10;
        optional fixed64 f_6 = 11;
        optional int32 f_7 = 12;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 72;
          E9_CONST_2 = 82;
          E9_CONST_3 = 57;
          E9_CONST_4 = 3;
          E9_CONST_5 = 16;
        }
        repeated E9 f_8 = 13 [packed = true];
        optional int32 f_9 = 14;
        optional string f_10 = 15;
        optional fixed32 f_11 = 16;
        optional fixed64 f_12 = 18;
        optional string f_13 = 19;
        optional int32 f_14 = 21;
        optional fixed64 f_15 = 22;
        optional string f_16 = 25;
        optional string f_17 = 27;
        optional int32 f_18 = 28;
        optional int32 f_19 = 30;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 93;
          E10_CONST_2 = 32;
          E10_CONST_3 = 18;
          E10_CONST_4 = 29;
          E10_CONST_5 = 1;
        }
        optional E10 f_20 = 31;
        optional string f_21 = 32;
        optional int32 f_22 = 34;
        optional int32 f_23 = 37;
        optional fixed64 f_24 = 38;
        optional double f_25 = 39;
        optional string f_26 = 41;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 105;
          E11_CONST_2 = 85;
          E11_CONST_3 = 75;
          E11_CONST_4 = 40;
          E11_CONST_5 = 52;
        }
        repeated E11 f_27 = 43 [packed = true];
        optional string f_28 = 44;
        optional int32 f_29 = 45;
        optional string f_30 = 46;
        optional bool f_31 = 48;
      }
      repeated M46 f_6 = 6;
    }
    repeated M31 f_4 = 4;
  }
  optional M16 f_65 = 65;
  message M17 {
    optional string f_0 = 2;
    message M32 {
      optional fixed64 f_0 = 1;
    }
    repeated M32 f_3 = 3;
    message M37 {
      optional fixed32 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional string f_2 = 4;
      optional string f_3 = 6;
    }
    repeated M37 f_4 = 4;
  }
  optional M17 f_67 = 67;
  message M18 {
    optional string f_0 = 2;
    optional string f_1 = 6;
    optional fixed32 f_2 = 10;
    optional fixed64 f_3 = 11;
    optional fixed64 f_4 = 12;
    message M33 {
      optional fixed64 f_0 = 1;
    }
    optional M33 f_13 = 13;
  }
  optional M18 f_69 = 69;
  message M19 {
    optional int32 f_0 = 1;
    message M26 {
      optional fixed64 f_0 = 1;
      message M44 {
        optional fixed64 f_0 = 3;
        message M47 {
          optional string f_0 = 1;
          enum E12 {
            E12_UNSPECIFIED = 0;
            E12_CONST_1 = 83;
            E12_CONST_2 = 54;
            E12_CONST_3 = 51;
            E12_CONST_4 = 7;
            E12_CONST_5 = 68;
          }
          optional E12 f_1 = 3;
        }
        optional M47 f_5 = 5;
        message M49 {
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 122;
            E13_CONST_2 = 78;
            E13_CONST_3 = 103;
            E13_CONST_4 = 17;
            E13_CONST_5 = 85;
          }
          optional E13 f_0 = 1;
        }
        optional M49 f_7 = 7;
        message M50 {
          optional string f_0 = 1;
          optional int32 f_1 = 2;
          optional fixed64 f_2 = 3;
          message M55 {
            optional string f_0 = 1;
          }
          optional M55 f_4 = 4;
        }
        optional M50 f_9 = 9;
      }
      optional M44 f_2 = 2;
    }
    repeated M26 f_2 = 2;
  }
  repeated M19 f_70 = 70;
  message M20 {
    optional fixed64 f_0 = 1;
    optional int64 f_1 = 3;
    message M28 {
      optional int32 f_0 = 1;
    }
    optional M28 f_5 = 5;
    message M29 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M29 f_6 = 6;
  }
  repeated M20 f_72 = 72;
  message M21 {
    optional fixed64 f_0 = 2;
  }
  optional M21 f_75 = 75;
}
