// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.request.Message2;

message Message2 {
  optional string f_0 = 1;
  optional string f_1 = 3;
  optional fixed64 f_2 = 4;
  optional string f_3 = 5;
  optional string f_4 = 7;
  optional int32 f_5 = 10;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 67;
    E1_CONST_2 = 85;
    E1_CONST_3 = 17;
    E1_CONST_4 = 7;
    E1_CONST_5 = 40;
  }
  repeated E1 f_6 = 13 [packed = true];
  optional fixed64 f_7 = 14;
  optional string f_8 = 15;
  optional bool f_9 = 17;
  optional fixed64 f_10 = 18;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 125;
    E2_CONST_2 = 65;
    E2_CONST_3 = 47;
    E2_CONST_4 = 108;
    E2_CONST_5 = 32;
  }
  optional E2 f_11 = 20;
  optional fixed64 f_12 = 21;
  optional string f_13 = 25;
  optional bool f_14 = 27;
  optional fixed64 f_15 = 28;
  optional string f_16 = 30;
  optional string f_17 = 32;
  optional fixed64 f_18 = 34;
  optional fixed64 f_19 = 36;
  optional string f_20 = 37;
  optional fixed64 f_21 = 38;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 121;
    E3_CONST_2 = 84;
    E3_CONST_3 = 63;
    E3_CONST_4 = 74;
    E3_CONST_5 = 125;
  }
  repeated E3 f_22 = 40 [packed = true];
  optional fixed64 f_23 = 41;
  optional int32 f_24 = 44;
  optional string f_25 = 45;
  optional string f_26 = 47;
  optional string f_27 = 48;
  optional double f_28 = 49;
  optional string f_29 = 51;
  message M1 {
    optional string f_0 = 1;
    message M8 {
      optional fixed64 f_0 = 1;
      message M41 {
        optional string f_0 = 1;
        optional string f_1 = 2;
        optional int32 f_2 = 3;
        message M58 {
          optional fixed64 f_0 = 1;
        }
        optional M58 f_5 = 5;
      }
      repeated M41 f_3 = 3;
    }
    optional M8 f_2 = 2;
    message M9 {
      optional int32 f_0 = 2;
    }
    optional M9 f_3 = 3;
    message M13 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 5;
    }
    optional M13 f_5 = 5;
    message M16 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    optional M16 f_7 = 7;
    message M19 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 3;
      message M47 {
        optional string f_0 = 1;
        optional int32 f_1 = 2;
        optional string f_2 = 3;
        optional fixed64 f_3 = 4;
        optional double f_4 = 5;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 39;
          E15_CONST_2 = 20;
          E15_CONST_3 = 124;
          E15_CONST_4 = 97;
          E15_CONST_5 = 114;
        }
        optional E15 f_5 = 7;
        message M50 {
          optional double f_0 = 2;
        }
        optional M50 f_8 = 8;
        message M51 {
          optional string f_0 = 2;
          message M63 {
            optional fixed64 f_0 = 4;
            optional double f_1 = 5;
            optional int32 f_2 = 6;
            optional fixed64 f_3 = 7;
            message M64 {
              optional int32 f_0 = 2;
              optional bool f_1 = 4;
              optional fixed64 f_2 = 5;
              optional double f_3 = 6;
              optional int32 f_4 = 10;
              optional int32 f_5 = 11;
              optional fixed64 f_6 = 12;
              optional fixed64 f_7 = 14;
            }
            optional M64 f_8 = 8;
          }
          optional M63 f_4 = 4;
        }
        optional M51 f_11 = 11;
        message M57 {
          optional fixed64 f_0 = 2;
          optional int32 f_1 = 4;
          optional fixed64 f_2 = 5;
          optional fixed64 f_3 = 7;
          optional fixed64 f_4 = 10;
          optional fixed64 f_5 = 11;
        }
        repeated M57 f_12 = 12;
      }
      optional M47 f_6 = 6;
    }
    optional M19 f_9 = 9;
    message M20 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 56;
        E7_CONST_2 = 47;
        E7_CONST_3 = 67;
        E7_CONST_4 = 68;
        E7_CONST_5 = 10;
      }
      repeated E7 f_0 = 1 [packed = true];
    }
    optional M20 f_10 = 10;
    message M26 {
      optional int32 f_0 = 1;
      message M42 {
        optional fixed32 f_0 = 1;
        optional string f_1 = 3;
        optional bool f_2 = 5;
        optional double f_3 = 7;
        optional double f_4 = 10;
        message M60 {
          optional int32 f_0 = 1;
        }
        optional M60 f_11 = 11;
      }
      optional M42 f_2 = 2;
    }
    optional M26 f_11 = 11;
    message M27 {
      optional int32 f_0 = 1;
    }
    optional M27 f_13 = 13;
    message M35 {
      optional uint64 f_0 = 1;
      message M44 {
        optional int32 f_0 = 1;
        message M54 {
          optional string f_0 = 1;
          optional int32 f_1 = 3;
        }
        optional M54 f_2 = 2;
      }
      optional M44 f_3 = 3;
    }
    repeated M35 f_15 = 15;
  }
  optional M1 f_55 = 55;
  message M2 {
    optional string f_0 = 4;
    optional fixed64 f_1 = 5;
    optional int32 f_2 = 6;
    optional string f_3 = 7;
    optional string f_4 = 10;
    optional string f_5 = 11;
    optional string f_6 = 12;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 92;
      E4_CONST_2 = 122;
      E4_CONST_3 = 105;
      E4_CONST_4 = 100;
      E4_CONST_5 = 83;
    }
    repeated E4 f_7 = 13 [packed = true];
    message M5 {
      optional string f_0 = 1;
    }
    optional M5 f_14 = 14;
    message M7 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 4;
      optional fixed32 f_2 = 5;
      optional bool f_3 = 6;
      optional string f_4 = 8;
      message M46 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 3;
        optional fixed64 f_3 = 5;
        optional fixed64 f_4 = 6;
        optional string f_5 = 8;
        optional string f_6 = 10;
        optional fixed64 f_7 = 12;
        optional int32 f_8 = 14;
        optional bool f_9 = 16;
        optional fixed64 f_10 = 17;
      }
      optional M46 f_9 = 9;
      message M48 {
        optional string f_0 = 1;
        message M53 {
          optional int32 f_0 = 2;
        }
        optional M53 f_5 = 5;
        message M61 {
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 57;
            E17_CONST_2 = 90;
            E17_CONST_3 = 47;
            E17_CONST_4 = 74;
            E17_CONST_5 = 52;
          }
          optional E17 f_0 = 1;
        }
        repeated M61 f_6 = 6;
      }
      repeated M48 f_10 = 10;
    }
    optional M7 f_15 = 15;
    message M11 {
      optional string f_0 = 2;
    }
    repeated M11 f_16 = 16;
    message M12 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 3;
      optional fixed32 f_2 = 4;
    }
    optional M12 f_17 = 17;
    message M18 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 4;
    }
    optional M18 f_19 = 19;
    message M22 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 4;
        E8_CONST_2 = 53;
        E8_CONST_3 = 114;
        E8_CONST_4 = 107;
        E8_CONST_5 = 50;
      }
      repeated E8 f_0 = 1 [packed = true];
    }
    repeated M22 f_20 = 20;
    message M31 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 5;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 73;
        E13_CONST_2 = 24;
        E13_CONST_3 = 18;
        E13_CONST_4 = 98;
        E13_CONST_5 = 85;
      }
      repeated E13 f_4 = 6 [packed = true];
      message M45 {
        optional string f_0 = 2;
        message M52 {
          optional double f_0 = 1;
        }
        optional M52 f_4 = 4;
        message M55 {
          optional int32 f_0 = 1;
          message M62 {
            optional int32 f_0 = 1;
            optional int32 f_1 = 2;
            optional fixed64 f_2 = 3;
            optional string f_3 = 5;
            optional fixed64 f_4 = 6;
            optional fixed64 f_5 = 7;
            optional fixed64 f_6 = 9;
          }
          optional M62 f_2 = 2;
        }
        optional M55 f_5 = 5;
      }
      repeated M45 f_7 = 7;
    }
    optional M31 f_21 = 21;
    message M32 {
      optional fixed64 f_0 = 1;
    }
    optional M32 f_22 = 22;
    message M34 {
      optional bool f_0 = 1;
      message M49 {
        optional fixed64 f_0 = 1;
        message M59 {
          optional string f_0 = 3;
        }
        optional M59 f_2 = 2;
      }
      optional M49 f_2 = 2;
    }
    repeated M34 f_23 = 23;
    message M38 {
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 81;
        E14_CONST_2 = 13;
        E14_CONST_3 = 6;
        E14_CONST_4 = 5;
        E14_CONST_5 = 107;
      }
      optional E14 f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 5;
    }
    optional M38 f_25 = 25;
    message M40 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M40 f_27 = 27;
  }
  optional M2 f_56 = 56;
  message M3 {
    optional fixed32 f_0 = 1;
    optional int32 f_1 = 4;
    optional int32 f_2 = 5;
    optional int32 f_3 = 6;
    optional string f_4 = 9;
    message M6 {
      optional int32 f_0 = 1;
    }
    optional M6 f_10 = 10;
    message M10 {
      optional int32 f_0 = 2;
    }
    optional M10 f_11 = 11;
    message M15 {
      optional int32 f_0 = 1;
    }
    repeated M15 f_13 = 13;
    message M21 {
      optional fixed64 f_0 = 3;
      message M43 {
        optional bool f_0 = 1;
        message M56 {
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 29;
            E16_CONST_2 = 62;
            E16_CONST_3 = 98;
            E16_CONST_4 = 64;
            E16_CONST_5 = 74;
          }
          repeated E16 f_0 = 3 [packed = true];
          optional string f_1 = 5;
        }
        optional M56 f_2 = 2;
      }
      optional M43 f_4 = 4;
    }
    repeated M21 f_14 = 14;
    message M24 {
      optional int32 f_0 = 1;
    }
    repeated M24 f_16 = 16;
    message M25 {
      optional int32 f_0 = 1;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 24;
        E9_CONST_2 = 37;
        E9_CONST_3 = 72;
        E9_CONST_4 = 115;
        E9_CONST_5 = 59;
      }
      repeated E9 f_1 = 4 [packed = true];
    }
    optional M25 f_17 = 17;
    message M28 {
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 92;
        E10_CONST_2 = 98;
        E10_CONST_3 = 64;
        E10_CONST_4 = 15;
        E10_CONST_5 = 13;
      }
      optional E10 f_0 = 1;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 68;
        E11_CONST_2 = 44;
        E11_CONST_3 = 55;
        E11_CONST_4 = 56;
        E11_CONST_5 = 2;
      }
      optional E11 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 4;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 121;
        E12_CONST_2 = 89;
        E12_CONST_3 = 7;
        E12_CONST_4 = 54;
        E12_CONST_5 = 125;
      }
      optional E12 f_4 = 5;
      optional int32 f_5 = 6;
    }
    optional M28 f_20 = 20;
    message M29 {
      optional fixed32 f_0 = 1;
    }
    optional M29 f_22 = 22;
    message M30 {
      optional uint64 f_0 = 1;
      optional bool f_1 = 2;
      optional string f_2 = 4;
      optional int32 f_3 = 5;
      optional int32 f_4 = 6;
    }
    optional M30 f_24 = 24;
    message M36 {
      optional int32 f_0 = 2;
      optional string f_1 = 3;
    }
    optional M36 f_27 = 27;
  }
  repeated M3 f_57 = 57;
  message M4 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    optional fixed64 f_2 = 4;
    optional fixed64 f_3 = 6;
    optional bool f_4 = 7;
    optional bool f_5 = 8;
    optional string f_6 = 9;
    optional fixed32 f_7 = 10;
    optional fixed64 f_8 = 11;
    optional string f_9 = 13;
    optional fixed64 f_10 = 14;
    optional int32 f_11 = 15;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 123;
      E5_CONST_2 = 47;
      E5_CONST_3 = 68;
      E5_CONST_4 = 52;
      E5_CONST_5 = 73;
    }
    optional E5 f_12 = 16;
    optional int32 f_13 = 17;
    optional int32 f_14 = 18;
    optional uint64 f_15 = 19;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 19;
      E6_CONST_2 = 69;
      E6_CONST_3 = 35;
      E6_CONST_4 = 3;
      E6_CONST_5 = 81;
    }
    optional E6 f_16 = 20;
    message M14 {
      optional fixed64 f_0 = 3;
    }
    optional M14 f_21 = 21;
    message M17 {
      optional string f_0 = 2;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional bool f_3 = 6;
      optional bool f_4 = 8;
    }
    repeated M17 f_22 = 22;
    message M23 {
      optional double f_0 = 1;
    }
    repeated M23 f_23 = 23;
    message M33 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 6;
    }
    optional M33 f_25 = 25;
    message M37 {
      optional string f_0 = 2;
      optional string f_1 = 4;
      optional fixed64 f_2 = 5;
      optional fixed64 f_3 = 8;
      optional string f_4 = 9;
      optional fixed64 f_5 = 14;
      optional fixed64 f_6 = 15;
    }
    optional M37 f_26 = 26;
    message M39 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional bool f_2 = 4;
      optional fixed64 f_3 = 5;
    }
    optional M39 f_27 = 27;
  }
  optional M4 f_58 = 58;
}
