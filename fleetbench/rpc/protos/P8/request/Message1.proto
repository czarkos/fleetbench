// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.request.Message1;

message Message1 {
  optional fixed64 f_0 = 1;
  optional int32 f_1 = 2;
  optional fixed64 f_2 = 3;
  optional int32 f_3 = 4;
  optional string f_4 = 5;
  optional fixed32 f_5 = 6;
  optional int32 f_6 = 8;
  optional fixed64 f_7 = 10;
  optional fixed64 f_8 = 12;
  optional string f_9 = 14;
  optional fixed64 f_10 = 16;
  optional string f_11 = 19;
  optional fixed64 f_12 = 20;
  optional fixed64 f_13 = 21;
  optional fixed32 f_14 = 24;
  optional fixed64 f_15 = 25;
  optional double f_16 = 26;
  optional double f_17 = 27;
  optional fixed64 f_18 = 29;
  optional string f_19 = 30;
  optional int32 f_20 = 32;
  optional int32 f_21 = 33;
  optional int32 f_22 = 34;
  optional string f_23 = 36;
  optional bool f_24 = 37;
  optional string f_25 = 38;
  optional int32 f_26 = 39;
  optional uint64 f_27 = 40;
  optional int32 f_28 = 42;
  optional int32 f_29 = 43;
  message M1 {
    optional string f_0 = 1;
    optional string f_1 = 2;
    optional int32 f_2 = 4;
    optional fixed32 f_3 = 5;
    optional fixed64 f_4 = 6;
    optional string f_5 = 8;
    optional string f_6 = 9;
    optional string f_7 = 10;
    optional bool f_8 = 11;
    optional fixed64 f_9 = 14;
    optional int32 f_10 = 15;
    optional int32 f_11 = 17;
    optional string f_12 = 18;
    optional int32 f_13 = 20;
    optional fixed64 f_14 = 25;
    optional int32 f_15 = 27;
    optional int32 f_16 = 28;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 13;
      E1_CONST_2 = 61;
      E1_CONST_3 = 49;
      E1_CONST_4 = 38;
      E1_CONST_5 = 107;
    }
    optional E1 f_17 = 30;
    optional int32 f_18 = 31;
    optional fixed32 f_19 = 32;
    optional string f_20 = 34;
    optional fixed32 f_21 = 35;
    optional fixed64 f_22 = 37;
    optional int32 f_23 = 38;
    optional fixed64 f_24 = 39;
    optional int32 f_25 = 41;
    optional fixed64 f_26 = 42;
    optional fixed64 f_27 = 46;
    optional fixed64 f_28 = 47;
    optional int32 f_29 = 48;
    optional string f_30 = 50;
    message M2 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      optional bool f_2 = 4;
      optional string f_3 = 5;
      optional string f_4 = 6;
      optional bool f_5 = 7;
    }
    repeated M2 f_51 = 51;
    message M3 {
      optional fixed32 f_0 = 2;
      message M17 {
        optional fixed64 f_0 = 1;
        message M29 {
          optional double f_0 = 1;
          message M37 {
            optional fixed64 f_0 = 1;
            optional fixed64 f_1 = 2;
            optional fixed64 f_2 = 3;
            optional fixed64 f_3 = 4;
          }
          optional M37 f_2 = 2;
        }
        optional M29 f_2 = 2;
        message M31 {
          optional fixed64 f_0 = 1;
          message M39 {
            optional int32 f_0 = 2;
          }
          optional M39 f_2 = 2;
        }
        repeated M31 f_3 = 3;
      }
      optional M17 f_4 = 4;
      message M19 {
        optional fixed32 f_0 = 1;
      }
      repeated M19 f_6 = 6;
      message M21 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional bool f_2 = 4;
        message M32 {
          optional fixed64 f_0 = 2;
        }
        repeated M32 f_5 = 5;
        message M34 {
          optional fixed64 f_0 = 1;
        }
        optional M34 f_6 = 6;
      }
      repeated M21 f_7 = 7;
    }
    optional M3 f_52 = 52;
    message M4 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional string f_3 = 5;
      optional fixed32 f_4 = 6;
      optional fixed64 f_5 = 9;
      optional int32 f_6 = 10;
      optional double f_7 = 12;
      optional string f_8 = 13;
      optional string f_9 = 14;
      optional string f_10 = 16;
      optional string f_11 = 17;
      optional fixed64 f_12 = 19;
      optional fixed64 f_13 = 23;
      optional fixed64 f_14 = 25;
      message M25 {
        optional int32 f_0 = 1;
      }
      optional M25 f_26 = 26;
    }
    optional M4 f_53 = 53;
    message M5 {
      optional int32 f_0 = 1;
    }
    repeated M5 f_55 = 55;
    message M6 {
      optional fixed64 f_0 = 1;
      message M15 {
        optional string f_0 = 1;
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 6;
          E4_CONST_2 = 23;
          E4_CONST_3 = 7;
          E4_CONST_4 = 105;
          E4_CONST_5 = 116;
        }
        repeated E4 f_1 = 4 [packed = true];
        optional string f_2 = 5;
        optional fixed64 f_3 = 7;
        optional fixed64 f_4 = 9;
        optional fixed32 f_5 = 10;
        optional fixed64 f_6 = 12;
      }
      optional M15 f_2 = 2;
    }
    optional M6 f_57 = 57;
    message M7 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 5;
      optional bool f_2 = 6;
    }
    optional M7 f_58 = 58;
    message M8 {
      optional bool f_0 = 1;
      message M26 {
        enum E5 {
          E5_UNSPECIFIED = 0;
          E5_CONST_1 = 45;
          E5_CONST_2 = 64;
          E5_CONST_3 = 11;
          E5_CONST_4 = 47;
          E5_CONST_5 = 86;
        }
        optional E5 f_0 = 1;
      }
      optional M26 f_2 = 2;
    }
    optional M8 f_59 = 59;
    message M9 {
      optional fixed64 f_0 = 2;
      optional bool f_1 = 3;
      optional string f_2 = 5;
      message M22 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 3;
        optional fixed64 f_2 = 4;
        message M35 {
          optional int32 f_0 = 1;
          message M38 {
            optional fixed64 f_0 = 2;
          }
          optional M38 f_2 = 2;
          message M40 {
            optional string f_0 = 1;
          }
          repeated M40 f_3 = 3;
        }
        optional M35 f_6 = 6;
      }
      repeated M22 f_6 = 6;
      message M24 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional string f_3 = 5;
        message M36 {
          optional fixed64 f_0 = 1;
          enum E7 {
            E7_UNSPECIFIED = 0;
            E7_CONST_1 = 49;
            E7_CONST_2 = 47;
            E7_CONST_3 = 119;
            E7_CONST_4 = 115;
            E7_CONST_5 = 64;
          }
          repeated E7 f_1 = 2 [packed = true];
          optional string f_2 = 3;
          optional uint64 f_3 = 4;
          optional fixed64 f_4 = 6;
          optional double f_5 = 7;
          optional int32 f_6 = 8;
          optional bool f_7 = 10;
          optional int32 f_8 = 11;
          optional string f_9 = 14;
          optional string f_10 = 15;
          optional int32 f_11 = 16;
          optional int32 f_12 = 17;
          optional int32 f_13 = 18;
          optional fixed64 f_14 = 19;
          optional fixed64 f_15 = 20;
          optional fixed64 f_16 = 22;
          optional string f_17 = 24;
          optional string f_18 = 25;
          optional int32 f_19 = 27;
          optional fixed64 f_20 = 28;
          optional int32 f_21 = 29;
          optional int32 f_22 = 30;
          optional fixed32 f_23 = 31;
          optional fixed64 f_24 = 32;
          optional int32 f_25 = 33;
          optional bool f_26 = 35;
          optional string f_27 = 36;
          optional int32 f_28 = 38;
          optional fixed64 f_29 = 39;
          optional string f_30 = 41;
          enum E8 {
            E8_UNSPECIFIED = 0;
            E8_CONST_1 = 85;
            E8_CONST_2 = 56;
            E8_CONST_3 = 99;
            E8_CONST_4 = 18;
            E8_CONST_5 = 75;
          }
          repeated E8 f_31 = 43 [packed = true];
        }
        optional M36 f_6 = 6;
      }
      optional M24 f_7 = 7;
    }
    repeated M9 f_60 = 60;
    message M10 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 4;
      message M27 {
        optional string f_0 = 2;
      }
      optional M27 f_6 = 6;
    }
    optional M10 f_63 = 63;
    message M11 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      message M20 {
        optional bool f_0 = 1;
      }
      repeated M20 f_4 = 4;
    }
    repeated M11 f_65 = 65;
    message M12 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      message M16 {
        optional uint64 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 4;
        message M33 {
          optional double f_0 = 1;
        }
        optional M33 f_6 = 6;
      }
      optional M16 f_4 = 4;
    }
    repeated M12 f_67 = 67;
    message M13 {
      optional double f_0 = 2;
      optional string f_1 = 5;
      message M18 {
        optional bool f_0 = 3;
      }
      optional M18 f_6 = 6;
      message M23 {
        optional string f_0 = 1;
        message M30 {
          enum E6 {
            E6_UNSPECIFIED = 0;
            E6_CONST_1 = 30;
            E6_CONST_2 = 7;
            E6_CONST_3 = 119;
            E6_CONST_4 = 73;
            E6_CONST_5 = 67;
          }
          optional E6 f_0 = 2;
          optional string f_1 = 4;
        }
        optional M30 f_3 = 3;
      }
      optional M23 f_7 = 7;
    }
    repeated M13 f_68 = 68;
    message M14 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional string f_2 = 4;
      optional string f_3 = 5;
      optional string f_4 = 6;
      optional string f_5 = 7;
      optional fixed64 f_6 = 8;
      optional fixed64 f_7 = 9;
      optional bool f_8 = 10;
      optional string f_9 = 12;
      optional string f_10 = 13;
      optional string f_11 = 15;
      optional string f_12 = 18;
      optional fixed64 f_13 = 19;
      optional fixed64 f_14 = 21;
      optional int64 f_15 = 22;
      optional fixed64 f_16 = 25;
      optional string f_17 = 27;
      optional string f_18 = 28;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 14;
        E2_CONST_2 = 115;
        E2_CONST_3 = 32;
        E2_CONST_4 = 18;
        E2_CONST_5 = 84;
      }
      repeated E2 f_19 = 29 [packed = true];
      optional string f_20 = 30;
      optional fixed32 f_21 = 31;
      optional fixed64 f_22 = 33;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 95;
        E3_CONST_2 = 105;
        E3_CONST_3 = 96;
        E3_CONST_4 = 25;
        E3_CONST_5 = 37;
      }
      optional E3 f_23 = 34;
      optional fixed32 f_24 = 37;
      optional int32 f_25 = 38;
      optional int32 f_26 = 39;
      optional double f_27 = 40;
      optional string f_28 = 43;
      optional fixed64 f_29 = 44;
      optional fixed64 f_30 = 45;
      optional fixed64 f_31 = 47;
      message M28 {
        optional fixed32 f_0 = 2;
        optional int32 f_1 = 3;
      }
      repeated M28 f_48 = 48;
    }
    optional M14 f_69 = 69;
  }
  repeated M1 f_44 = 44;
}
