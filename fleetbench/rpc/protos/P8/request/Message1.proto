// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.request.Message1;

message Message1 {
  optional fixed64 f_0 = 1;
  optional string f_1 = 4;
  optional double f_2 = 5;
  optional int32 f_3 = 6;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 50;
    E1_CONST_2 = 20;
    E1_CONST_3 = 6;
    E1_CONST_4 = 11;
    E1_CONST_5 = 125;
  }
  optional E1 f_4 = 8;
  optional fixed64 f_5 = 9;
  optional int32 f_6 = 10;
  optional fixed64 f_7 = 12;
  optional fixed64 f_8 = 13;
  optional int32 f_9 = 16;
  optional double f_10 = 18;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 10;
    E2_CONST_2 = 80;
    E2_CONST_3 = 9;
    E2_CONST_4 = 99;
    E2_CONST_5 = 124;
  }
  repeated E2 f_11 = 20 [packed = true];
  optional double f_12 = 21;
  optional uint64 f_13 = 22;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 50;
    E3_CONST_2 = 58;
    E3_CONST_3 = 20;
    E3_CONST_4 = 73;
    E3_CONST_5 = 107;
  }
  repeated E3 f_14 = 23 [packed = true];
  optional fixed64 f_15 = 26;
  optional string f_16 = 27;
  optional fixed64 f_17 = 28;
  optional int32 f_18 = 30;
  optional double f_19 = 31;
  optional fixed64 f_20 = 32;
  optional fixed32 f_21 = 34;
  optional bool f_22 = 35;
  optional fixed64 f_23 = 36;
  repeated string f_24 = 37;
  optional int32 f_25 = 39;
  optional string f_26 = 40;
  optional int32 f_27 = 41;
  optional fixed32 f_28 = 42;
  optional int32 f_29 = 44;
  message M1 {
    optional fixed64 f_0 = 1;
    optional string f_1 = 2;
    optional double f_2 = 4;
    message M26 {
      optional fixed32 f_0 = 1;
    }
    optional M26 f_5 = 5;
    message M28 {
      optional fixed64 f_0 = 2;
      message M32 {
        optional int32 f_0 = 1;
        optional string f_1 = 3;
        optional string f_2 = 4;
        message M51 {
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 119;
            E15_CONST_2 = 124;
            E15_CONST_3 = 117;
            E15_CONST_4 = 125;
            E15_CONST_5 = 54;
          }
          optional E15 f_0 = 2;
          optional fixed64 f_1 = 3;
          optional int32 f_2 = 5;
          optional uint64 f_3 = 6;
          optional int32 f_4 = 7;
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 102;
            E16_CONST_2 = 45;
            E16_CONST_3 = 49;
            E16_CONST_4 = 65;
            E16_CONST_5 = 6;
          }
          repeated E16 f_5 = 8 [packed = true];
          optional string f_6 = 9;
          optional string f_7 = 10;
          optional string f_8 = 11;
          optional int32 f_9 = 13;
          optional int64 f_10 = 15;
          message M52 {
            optional string f_0 = 2;
            optional bool f_1 = 3;
            optional fixed64 f_2 = 4;
            optional fixed64 f_3 = 5;
          }
          optional M52 f_16 = 16;
        }
        optional M51 f_6 = 6;
      }
      optional M32 f_3 = 3;
      message M45 {
        optional fixed64 f_0 = 2;
      }
      optional M45 f_4 = 4;
    }
    optional M28 f_7 = 7;
    message M29 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      optional string f_2 = 4;
      optional fixed64 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional fixed64 f_5 = 7;
      message M46 {
        optional fixed64 f_0 = 1;
      }
      optional M46 f_8 = 8;
    }
    optional M29 f_8 = 8;
  }
  optional M1 f_47 = 47;
  message M2 {
    optional int32 f_0 = 2;
    message M8 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 64;
        E6_CONST_2 = 38;
        E6_CONST_3 = 78;
        E6_CONST_4 = 119;
        E6_CONST_5 = 53;
      }
      repeated E6 f_0 = 1 [packed = true];
    }
    optional M8 f_3 = 3;
    message M17 {
      optional int32 f_0 = 3;
      message M35 {
        optional int32 f_0 = 1;
      }
      repeated M35 f_5 = 5;
      message M43 {
        optional fixed32 f_0 = 1;
        optional string f_1 = 2;
        optional string f_2 = 3;
      }
      optional M43 f_7 = 7;
    }
    repeated M17 f_4 = 4;
  }
  repeated M2 f_48 = 48;
  message M3 {
    optional bool f_0 = 2;
    optional fixed64 f_1 = 3;
    optional fixed64 f_2 = 4;
    optional uint64 f_3 = 5;
    message M12 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 3;
      optional int32 f_3 = 4;
      optional int32 f_4 = 5;
      message M37 {
        optional fixed64 f_0 = 1;
      }
      repeated M37 f_6 = 6;
    }
    optional M12 f_6 = 6;
    message M13 {
      optional fixed64 f_0 = 2;
      message M47 {
        optional string f_0 = 1;
        message M49 {
          optional int32 f_0 = 2;
          optional fixed64 f_1 = 3;
          message M53 {
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 83;
              E17_CONST_2 = 84;
              E17_CONST_3 = 6;
              E17_CONST_4 = 37;
              E17_CONST_5 = 28;
            }
            optional E17 f_0 = 1;
            optional int32 f_1 = 2;
            optional fixed32 f_2 = 3;
            optional string f_3 = 6;
            message M54 {
              optional string f_0 = 3;
            }
            optional M54 f_7 = 7;
          }
          repeated M53 f_4 = 4;
        }
        optional M49 f_4 = 4;
      }
      optional M47 f_3 = 3;
    }
    optional M13 f_8 = 8;
    message M19 {
      optional fixed64 f_0 = 2;
      message M36 {
        optional int32 f_0 = 1;
      }
      optional M36 f_3 = 3;
    }
    repeated M19 f_9 = 9;
    message M21 {
      optional string f_0 = 2;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 93;
        E12_CONST_2 = 82;
        E12_CONST_3 = 79;
        E12_CONST_4 = 27;
        E12_CONST_5 = 64;
      }
      repeated E12 f_1 = 4 [packed = true];
      optional fixed64 f_2 = 5;
      optional fixed64 f_3 = 6;
      optional uint64 f_4 = 7;
      message M44 {
        optional bool f_0 = 1;
      }
      optional M44 f_8 = 8;
    }
    repeated M21 f_11 = 11;
    message M24 {
      optional fixed64 f_0 = 1;
    }
    optional M24 f_13 = 13;
    message M27 {
      optional string f_0 = 2;
      optional string f_1 = 3;
      message M31 {
        optional fixed64 f_0 = 1;
        message M48 {
          optional string f_0 = 1;
        }
        optional M48 f_2 = 2;
      }
      optional M31 f_4 = 4;
    }
    optional M27 f_14 = 14;
  }
  optional M3 f_51 = 51;
  message M4 {
    optional bool f_0 = 1;
    optional int32 f_1 = 3;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 60;
      E4_CONST_2 = 126;
      E4_CONST_3 = 124;
      E4_CONST_4 = 17;
      E4_CONST_5 = 41;
    }
    repeated E4 f_2 = 4 [packed = true];
    optional fixed64 f_3 = 5;
    message M9 {
      optional fixed32 f_0 = 1;
      optional uint64 f_1 = 3;
      optional fixed64 f_2 = 4;
      message M39 {
        optional string f_0 = 2;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 4;
      }
      optional M39 f_7 = 7;
      message M41 {
        optional string f_0 = 2;
        optional string f_1 = 5;
      }
      optional M41 f_10 = 10;
    }
    optional M9 f_6 = 6;
    message M14 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      optional string f_2 = 4;
    }
    optional M14 f_7 = 7;
    message M23 {
      optional fixed64 f_0 = 2;
    }
    optional M23 f_8 = 8;
    message M25 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional string f_2 = 4;
      optional string f_3 = 5;
      message M40 {
        optional fixed32 f_0 = 1;
        optional fixed64 f_1 = 4;
        optional string f_2 = 6;
        optional int32 f_3 = 8;
      }
      repeated M40 f_6 = 6;
    }
    optional M25 f_10 = 10;
  }
  optional M4 f_52 = 52;
  message M5 {
    optional int32 f_0 = 2;
    optional bool f_1 = 4;
    optional uint64 f_2 = 5;
    optional bool f_3 = 6;
    message M10 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional uint64 f_3 = 5;
      message M34 {
        optional fixed64 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional fixed64 f_2 = 6;
        optional int32 f_3 = 7;
      }
      optional M34 f_6 = 6;
    }
    optional M10 f_7 = 7;
  }
  optional M5 f_54 = 54;
  message M6 {
    optional fixed64 f_0 = 1;
    optional double f_1 = 3;
    optional fixed64 f_2 = 4;
    optional string f_3 = 5;
    optional fixed64 f_4 = 7;
    message M16 {
      optional string f_0 = 1;
      optional uint64 f_1 = 2;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 98;
        E10_CONST_2 = 3;
        E10_CONST_3 = 5;
        E10_CONST_4 = 101;
        E10_CONST_5 = 2;
      }
      repeated E10 f_2 = 4 [packed = true];
      optional bool f_3 = 5;
      message M42 {
        optional bool f_0 = 1;
      }
      repeated M42 f_8 = 8;
    }
    repeated M16 f_8 = 8;
    message M18 {
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 104;
        E11_CONST_2 = 69;
        E11_CONST_3 = 26;
        E11_CONST_4 = 89;
        E11_CONST_5 = 112;
      }
      repeated E11 f_0 = 1 [packed = true];
    }
    optional M18 f_9 = 9;
    message M30 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 3;
      optional uint64 f_3 = 6;
      optional string f_4 = 7;
      optional string f_5 = 9;
      optional string f_6 = 12;
      optional double f_7 = 13;
      optional fixed32 f_8 = 14;
      optional double f_9 = 15;
      optional uint64 f_10 = 16;
      optional fixed64 f_11 = 17;
      optional fixed64 f_12 = 18;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 44;
        E13_CONST_2 = 78;
        E13_CONST_3 = 100;
        E13_CONST_4 = 112;
        E13_CONST_5 = 119;
      }
      optional E13 f_13 = 19;
      optional fixed32 f_14 = 20;
      optional fixed64 f_15 = 21;
      optional uint64 f_16 = 23;
      message M33 {
        optional string f_0 = 1;
        message M50 {
          optional string f_0 = 2;
          optional int32 f_1 = 3;
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 120;
            E14_CONST_2 = 94;
            E14_CONST_3 = 62;
            E14_CONST_4 = 54;
            E14_CONST_5 = 86;
          }
          optional E14 f_2 = 4;
          optional fixed64 f_3 = 5;
          optional bool f_4 = 8;
        }
        repeated M50 f_3 = 3;
      }
      optional M33 f_24 = 24;
    }
    optional M30 f_10 = 10;
  }
  optional M6 f_55 = 55;
  message M7 {
    optional fixed64 f_0 = 2;
    optional string f_1 = 3;
    optional string f_2 = 4;
    optional fixed32 f_3 = 5;
    optional int32 f_4 = 6;
    optional fixed32 f_5 = 8;
    optional fixed32 f_6 = 9;
    optional string f_7 = 11;
    optional fixed32 f_8 = 12;
    optional int32 f_9 = 13;
    optional int32 f_10 = 14;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 117;
      E5_CONST_2 = 73;
      E5_CONST_3 = 25;
      E5_CONST_4 = 28;
      E5_CONST_5 = 99;
    }
    repeated E5 f_11 = 16 [packed = true];
    optional int32 f_12 = 17;
    optional string f_13 = 18;
    optional string f_14 = 20;
    message M11 {
      optional int64 f_0 = 1;
      optional string f_1 = 2;
      optional bool f_2 = 3;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 124;
        E7_CONST_2 = 80;
        E7_CONST_3 = 15;
        E7_CONST_4 = 116;
        E7_CONST_5 = 76;
      }
      repeated E7 f_3 = 5 [packed = true];
      optional int32 f_4 = 7;
      optional fixed64 f_5 = 8;
      optional string f_6 = 9;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 2;
        E8_CONST_2 = 31;
        E8_CONST_3 = 108;
        E8_CONST_4 = 61;
        E8_CONST_5 = 75;
      }
      repeated E8 f_7 = 10 [packed = true];
      optional int32 f_8 = 12;
      optional string f_9 = 15;
      optional string f_10 = 16;
      optional int32 f_11 = 17;
      optional string f_12 = 18;
      optional int32 f_13 = 19;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 13;
        E9_CONST_2 = 76;
        E9_CONST_3 = 30;
        E9_CONST_4 = 26;
        E9_CONST_5 = 105;
      }
      repeated E9 f_14 = 20 [packed = true];
      optional int32 f_15 = 21;
      optional fixed64 f_16 = 23;
      optional fixed64 f_17 = 24;
      optional int32 f_18 = 27;
      optional int32 f_19 = 28;
      optional string f_20 = 29;
      optional int32 f_21 = 30;
      optional int32 f_22 = 32;
      optional int32 f_23 = 33;
      optional fixed64 f_24 = 34;
    }
    optional M11 f_21 = 21;
    message M15 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    repeated M15 f_23 = 23;
    message M20 {
      optional string f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 5;
    }
    optional M20 f_24 = 24;
    message M22 {
      optional int32 f_0 = 1;
      message M38 {
        optional fixed64 f_0 = 1;
      }
      optional M38 f_2 = 2;
    }
    repeated M22 f_26 = 26;
  }
  repeated M7 f_56 = 56;
}
