// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.request.Message1;

message Message1 {
  optional int32 f_0 = 4;
  optional string f_1 = 5;
  optional uint64 f_2 = 6;
  optional bool f_3 = 8;
  optional int32 f_4 = 11;
  optional fixed64 f_5 = 12;
  optional string f_6 = 14;
  optional fixed64 f_7 = 15;
  optional string f_8 = 16;
  optional bool f_9 = 17;
  optional string f_10 = 18;
  optional string f_11 = 20;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 90;
    E1_CONST_2 = 9;
    E1_CONST_3 = 15;
    E1_CONST_4 = 124;
    E1_CONST_5 = 70;
  }
  repeated E1 f_12 = 21 [packed = true];
  optional int32 f_13 = 22;
  optional int32 f_14 = 24;
  optional string f_15 = 25;
  optional int32 f_16 = 26;
  optional double f_17 = 28;
  optional fixed32 f_18 = 29;
  optional int32 f_19 = 33;
  optional fixed64 f_20 = 35;
  optional double f_21 = 36;
  optional int32 f_22 = 37;
  optional fixed64 f_23 = 38;
  optional string f_24 = 40;
  optional int32 f_25 = 41;
  optional int32 f_26 = 43;
  optional int32 f_27 = 44;
  optional fixed64 f_28 = 47;
  optional string f_29 = 48;
  message M1 {
    optional int32 f_0 = 1;
  }
  repeated M1 f_50 = 50;
  message M2 {
    optional bool f_0 = 3;
    optional uint64 f_1 = 6;
    optional string f_2 = 7;
    message M30 {
      optional int32 f_0 = 1;
      message M38 {
        optional bool f_0 = 1;
        optional fixed64 f_1 = 2;
      }
      optional M38 f_3 = 3;
    }
    repeated M30 f_8 = 8;
  }
  optional M2 f_51 = 51;
  message M3 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 3;
    optional int32 f_2 = 6;
    message M33 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      message M47 {
        optional fixed64 f_0 = 1;
        message M52 {
          optional string f_0 = 1;
          optional string f_1 = 2;
        }
        repeated M52 f_2 = 2;
        message M56 {
          optional int32 f_0 = 1;
        }
        repeated M56 f_3 = 3;
      }
      optional M47 f_5 = 5;
    }
    optional M33 f_7 = 7;
  }
  repeated M3 f_52 = 52;
  message M4 {
    optional string f_0 = 1;
  }
  optional M4 f_55 = 55;
  message M5 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 2;
    optional fixed64 f_2 = 4;
    message M15 {
      optional bool f_0 = 1;
    }
    optional M15 f_6 = 6;
    message M32 {
      optional fixed64 f_0 = 1;
      message M39 {
        optional string f_0 = 1;
        message M54 {
          optional int32 f_0 = 3;
          optional int32 f_1 = 4;
          optional fixed64 f_2 = 6;
          optional fixed64 f_3 = 10;
          optional string f_4 = 11;
        }
        optional M54 f_2 = 2;
      }
      optional M39 f_2 = 2;
      message M41 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 3;
      }
      optional M41 f_3 = 3;
    }
    repeated M32 f_7 = 7;
  }
  optional M5 f_56 = 56;
  message M6 {
    optional int32 f_0 = 1;
    message M17 {
      optional fixed32 f_0 = 3;
      optional fixed64 f_1 = 4;
      optional bool f_2 = 6;
      optional string f_3 = 7;
    }
    optional M17 f_2 = 2;
    message M35 {
      optional int32 f_0 = 1;
    }
    repeated M35 f_4 = 4;
  }
  repeated M6 f_58 = 58;
  message M7 {
    optional fixed64 f_0 = 1;
    message M18 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 3;
      optional string f_2 = 5;
      optional fixed64 f_3 = 6;
      optional int32 f_4 = 7;
      optional int32 f_5 = 9;
      message M40 {
        optional int32 f_0 = 4;
        optional int32 f_1 = 5;
        optional double f_2 = 6;
        optional fixed64 f_3 = 8;
        message M51 {
          optional double f_0 = 1;
        }
        repeated M51 f_9 = 9;
        message M60 {
          optional double f_0 = 1;
        }
        optional M60 f_11 = 11;
        message M61 {
          optional double f_0 = 1;
        }
        optional M61 f_12 = 12;
      }
      optional M40 f_10 = 10;
    }
    optional M18 f_2 = 2;
    message M22 {
      optional int32 f_0 = 1;
    }
    optional M22 f_4 = 4;
  }
  repeated M7 f_61 = 61;
  message M8 {
    optional fixed64 f_0 = 2;
    message M19 {
      optional double f_0 = 2;
    }
    optional M19 f_3 = 3;
  }
  optional M8 f_63 = 63;
  message M9 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed64 f_2 = 3;
    optional int32 f_3 = 6;
    optional int32 f_4 = 7;
    message M20 {
      optional fixed32 f_0 = 1;
      optional uint64 f_1 = 3;
      optional int32 f_2 = 4;
      optional uint64 f_3 = 6;
      optional fixed64 f_4 = 7;
      optional string f_5 = 8;
    }
    optional M20 f_8 = 8;
    message M36 {
      optional double f_0 = 2;
      optional string f_1 = 3;
      optional fixed32 f_2 = 5;
      optional fixed32 f_3 = 6;
      optional int32 f_4 = 7;
    }
    optional M36 f_9 = 9;
  }
  repeated M9 f_64 = 64;
  message M10 {
    optional fixed64 f_0 = 2;
  }
  repeated M10 f_65 = 65;
  message M11 {
    optional string f_0 = 1;
    optional string f_1 = 3;
    optional int32 f_2 = 4;
    optional fixed64 f_3 = 5;
    message M34 {
      optional int32 f_0 = 1;
    }
    optional M34 f_6 = 6;
  }
  repeated M11 f_66 = 66;
  message M12 {
    optional int32 f_0 = 2;
    optional fixed64 f_1 = 3;
    optional int32 f_2 = 4;
    optional string f_3 = 5;
    message M16 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      message M42 {
        optional double f_0 = 1;
        optional string f_1 = 2;
        optional int32 f_2 = 4;
        optional bool f_3 = 6;
        optional fixed64 f_4 = 7;
      }
      optional M42 f_3 = 3;
      message M48 {
        optional bool f_0 = 1;
        optional fixed64 f_1 = 3;
        optional string f_2 = 4;
        message M55 {
          optional uint64 f_0 = 1;
        }
        repeated M55 f_5 = 5;
      }
      optional M48 f_4 = 4;
    }
    optional M16 f_6 = 6;
    message M29 {
      optional string f_0 = 1;
    }
    optional M29 f_9 = 9;
    message M31 {
      optional fixed32 f_0 = 1;
      message M44 {
        optional int32 f_0 = 2;
      }
      repeated M44 f_3 = 3;
      message M49 {
        optional string f_0 = 2;
        optional double f_1 = 3;
        optional fixed32 f_2 = 4;
        message M58 {
          optional fixed32 f_0 = 2;
          message M64 {
            optional fixed64 f_0 = 2;
          }
          repeated M64 f_3 = 3;
        }
        repeated M58 f_5 = 5;
      }
      optional M49 f_5 = 5;
    }
    optional M31 f_11 = 11;
  }
  repeated M12 f_68 = 68;
  message M13 {
    optional string f_0 = 1;
  }
  optional M13 f_69 = 69;
  message M14 {
    optional fixed64 f_0 = 2;
    optional string f_1 = 5;
    message M21 {
      optional int32 f_0 = 1;
      message M37 {
        optional string f_0 = 1;
        message M53 {
          optional string f_0 = 1;
          optional bool f_1 = 2;
        }
        repeated M53 f_2 = 2;
      }
      repeated M37 f_3 = 3;
    }
    repeated M21 f_7 = 7;
    message M23 {
      optional fixed64 f_0 = 1;
    }
    repeated M23 f_8 = 8;
    message M24 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional string f_3 = 5;
      optional bool f_4 = 7;
    }
    optional M24 f_9 = 9;
    message M25 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      message M46 {
        optional int32 f_0 = 2;
      }
      repeated M46 f_4 = 4;
    }
    optional M25 f_11 = 11;
    message M26 {
      optional fixed64 f_0 = 1;
      message M45 {
        optional int32 f_0 = 1;
        message M50 {
          optional string f_0 = 2;
          optional string f_1 = 4;
        }
        optional M50 f_2 = 2;
        message M57 {
          optional fixed64 f_0 = 1;
          message M63 {
            optional int32 f_0 = 1;
            message M65 {
              optional fixed64 f_0 = 1;
              optional fixed64 f_1 = 3;
            }
            optional M65 f_2 = 2;
          }
          optional M63 f_2 = 2;
        }
        optional M57 f_3 = 3;
        message M59 {
          optional double f_0 = 1;
          message M62 {
            optional int32 f_0 = 1;
            optional fixed64 f_1 = 2;
            optional string f_2 = 4;
            optional int32 f_3 = 5;
            optional fixed32 f_4 = 8;
          }
          optional M62 f_2 = 2;
        }
        optional M59 f_4 = 4;
      }
      repeated M45 f_2 = 2;
    }
    repeated M26 f_12 = 12;
    message M27 {
      optional fixed64 f_0 = 2;
      optional double f_1 = 3;
      optional int32 f_2 = 4;
      optional string f_3 = 5;
      optional string f_4 = 6;
      optional int32 f_5 = 7;
      optional fixed64 f_6 = 8;
      optional string f_7 = 9;
      optional int32 f_8 = 11;
      optional fixed32 f_9 = 13;
      optional int32 f_10 = 14;
      optional string f_11 = 15;
      optional fixed64 f_12 = 16;
      optional fixed64 f_13 = 18;
      optional int32 f_14 = 21;
      optional fixed64 f_15 = 22;
      optional fixed32 f_16 = 23;
      optional int32 f_17 = 25;
      message M43 {
        optional fixed64 f_0 = 1;
      }
      optional M43 f_28 = 28;
    }
    repeated M27 f_13 = 13;
    message M28 {
      optional fixed64 f_0 = 1;
    }
    optional M28 f_15 = 15;
  }
  optional M14 f_71 = 71;
}
