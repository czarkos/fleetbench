// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.response.Message1;

message Message1 {
  optional double f_0 = 1;
  optional fixed64 f_1 = 2;
  optional bytes f_2 = 3;
  optional double f_3 = 4;
  optional fixed64 f_4 = 5;
  optional int32 f_5 = 6;
  optional double f_6 = 7;
  optional int32 f_7 = 8;
  optional double f_8 = 9;
  optional double f_9 = 10;
  optional fixed64 f_10 = 11;
  optional int32 f_11 = 13;
  optional int64 f_12 = 14;
  optional fixed64 f_13 = 15;
  optional double f_14 = 16;
  optional fixed64 f_15 = 17;
  optional bytes f_16 = 18;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 83;
    E1_CONST_2 = 82;
    E1_CONST_3 = 53;
    E1_CONST_4 = 26;
    E1_CONST_5 = 30;
  }
  optional E1 f_17 = 19;
  optional int32 f_18 = 20;
  optional double f_19 = 21;
  optional fixed64 f_20 = 22;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 33;
    E2_CONST_2 = 62;
    E2_CONST_3 = 35;
    E2_CONST_4 = 108;
    E2_CONST_5 = 78;
  }
  optional E2 f_21 = 23;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 61;
    E3_CONST_2 = 121;
    E3_CONST_3 = 85;
    E3_CONST_4 = 117;
    E3_CONST_5 = 114;
  }
  optional E3 f_22 = 24;
  optional fixed64 f_23 = 25;
  message M1 {
    optional double f_0 = 3;
    optional double f_1 = 4;
    optional fixed64 f_2 = 5;
    optional int32 f_3 = 6;
    message M12 {
      optional double f_0 = 1;
      optional bytes f_1 = 4;
      optional int32 f_2 = 5;
      optional int32 f_3 = 6;
      optional double f_4 = 7;
      optional double f_5 = 8;
      optional string f_6 = 9;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 120;
        E6_CONST_2 = 69;
        E6_CONST_3 = 49;
        E6_CONST_4 = 9;
        E6_CONST_5 = 42;
      }
      optional E6 f_7 = 10;
      optional double f_8 = 11;
      optional fixed64 f_9 = 12;
      optional string f_10 = 13;
      optional fixed64 f_11 = 14;
      optional string f_12 = 15;
      optional fixed64 f_13 = 16;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 67;
        E7_CONST_2 = 126;
        E7_CONST_3 = 14;
        E7_CONST_4 = 70;
        E7_CONST_5 = 124;
      }
      optional E7 f_14 = 17;
      message M23 {
        optional double f_0 = 1;
        message M28 {
          optional double f_0 = 1;
          optional string f_1 = 2;
          optional double f_2 = 3;
          message M29 {
            optional string f_0 = 1;
            optional string f_1 = 2;
          }
          optional M29 f_4 = 4;
        }
        optional M28 f_2 = 2;
      }
      optional M23 f_18 = 18;
    }
    optional M12 f_8 = 8;
  }
  optional M1 f_26 = 26;
  message M2 {
    optional int64 f_0 = 1;
  }
  optional M2 f_27 = 27;
  message M3 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 2;
    optional string f_2 = 3;
    optional fixed64 f_3 = 4;
    message M15 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 4;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 3;
        E9_CONST_2 = 33;
        E9_CONST_3 = 5;
        E9_CONST_4 = 36;
        E9_CONST_5 = 38;
      }
      optional E9 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional double f_5 = 7;
      optional double f_6 = 8;
    }
    optional M15 f_5 = 5;
  }
  repeated M3 f_28 = 28;
  message M4 {
    optional int32 f_0 = 1;
    message M14 {
      optional double f_0 = 1;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 52;
        E8_CONST_2 = 104;
        E8_CONST_3 = 33;
        E8_CONST_4 = 34;
        E8_CONST_5 = 120;
      }
      optional E8 f_1 = 2;
      message M19 {
        optional fixed64 f_0 = 1;
      }
      optional M19 f_3 = 3;
    }
    optional M14 f_2 = 2;
  }
  optional M4 f_29 = 29;
  message M5 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 94;
      E4_CONST_2 = 105;
      E4_CONST_3 = 49;
      E4_CONST_4 = 16;
      E4_CONST_5 = 84;
    }
    optional E4 f_0 = 1;
    optional string f_1 = 2;
    message M10 {
      optional double f_0 = 1;
      optional bytes f_1 = 3;
      optional int32 f_2 = 4;
      optional string f_3 = 5;
      optional int32 f_4 = 6;
      message M20 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 5;
        optional double f_4 = 6;
        optional fixed64 f_5 = 7;
        message M26 {
          optional int64 f_0 = 1;
          optional double f_1 = 2;
          optional fixed64 f_2 = 3;
          optional double f_3 = 4;
        }
        repeated M26 f_8 = 8;
        message M27 {
          optional int32 f_0 = 1;
          optional int32 f_1 = 2;
          optional double f_2 = 3;
          optional double f_3 = 4;
        }
        optional M27 f_9 = 9;
      }
      optional M20 f_7 = 7;
      message M24 {
        optional double f_0 = 1;
      }
      optional M24 f_9 = 9;
    }
    optional M10 f_3 = 3;
  }
  optional M5 f_30 = 30;
  message M6 {
    optional bool f_0 = 1;
    optional double f_1 = 2;
    optional fixed64 f_2 = 3;
    optional int32 f_3 = 4;
  }
  repeated M6 f_31 = 31;
  message M7 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 2;
    optional fixed64 f_2 = 3;
    message M16 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 4;
      optional fixed64 f_4 = 5;
      optional fixed64 f_5 = 7;
      optional double f_6 = 9;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 81;
        E10_CONST_2 = 75;
        E10_CONST_3 = 126;
        E10_CONST_4 = 58;
        E10_CONST_5 = 56;
      }
      repeated E10 f_7 = 10 [packed = true];
      message M25 {
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 2;
          E12_CONST_2 = 95;
          E12_CONST_3 = 74;
          E12_CONST_4 = 87;
          E12_CONST_5 = 32;
        }
        optional E12 f_0 = 2;
        optional double f_1 = 3;
        optional fixed64 f_2 = 4;
        optional string f_3 = 5;
        optional int32 f_4 = 6;
        optional double f_5 = 7;
        optional int32 f_6 = 8;
        optional int32 f_7 = 9;
        optional int32 f_8 = 10;
        optional bytes f_9 = 11;
        optional fixed64 f_10 = 12;
        optional double f_11 = 13;
      }
      optional M25 f_11 = 11;
    }
    optional M16 f_4 = 4;
    message M17 {
      optional int32 f_0 = 2;
      optional string f_1 = 3;
      optional double f_2 = 4;
      optional int32 f_3 = 5;
      optional string f_4 = 6;
      message M22 {
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 124;
          E11_CONST_2 = 54;
          E11_CONST_3 = 40;
          E11_CONST_4 = 25;
          E11_CONST_5 = 120;
        }
        optional E11 f_0 = 1;
      }
      repeated M22 f_7 = 7;
    }
    optional M17 f_6 = 6;
  }
  repeated M7 f_32 = 32;
  message M8 {
    optional int32 f_0 = 1;
    message M18 {
      optional fixed64 f_0 = 1;
    }
    optional M18 f_2 = 2;
  }
  optional M8 f_34 = 34;
  message M9 {
    optional int32 f_0 = 2;
    optional int64 f_1 = 3;
    optional double f_2 = 4;
    optional double f_3 = 5;
    message M11 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 79;
        E5_CONST_2 = 41;
        E5_CONST_3 = 98;
        E5_CONST_4 = 37;
        E5_CONST_5 = 67;
      }
      optional E5 f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 5;
      optional int32 f_4 = 6;
      message M21 {
        optional string f_0 = 1;
      }
      optional M21 f_8 = 8;
    }
    optional M11 f_6 = 6;
    message M13 {
      optional int32 f_0 = 2;
    }
    repeated M13 f_8 = 8;
  }
  optional M9 f_35 = 35;
}
