// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.response.Message1;

message Message1 {
  optional bytes f_0 = 1 [ctype = CORD];
  optional int64 f_1 = 4;
  message M1 {
    optional float f_0 = 1;
    message M11 {
      optional int32 f_0 = 2;
      message M12 {
        optional uint64 f_0 = 3;
        optional uint32 f_1 = 5;
        optional string f_2 = 8;
        optional int64 f_3 = 9;
        optional string f_4 = 10;
        message M13 {
          optional uint32 f_0 = 3;
          message M14 {
            optional uint64 f_0 = 2;
          }
          optional M14 f_4 = 4;
          message M15 {
            optional int64 f_0 = 3;
          }
          repeated M15 f_6 = 6;
          message M16 {
            optional int32 f_0 = 2;
            message M18 {
              optional bool f_0 = 3;
              message M19 {
                enum E3 {
                  E3_UNSPECIFIED = 0;
                  E3_CONST_1 = 19;
                  E3_CONST_2 = 12;
                  E3_CONST_3 = 79;
                  E3_CONST_4 = 52;
                  E3_CONST_5 = 1;
                }
                optional E3 f_0 = 1;
              }
              optional M19 f_7 = 7;
              message M20 {
                optional fixed32 f_0 = 1;
              }
              repeated M20 f_8 = 8;
              message M21 {
                optional uint64 f_0 = 1;
              }
              repeated M21 f_9 = 9;
              message M22 {
                optional fixed32 f_0 = 2;
              }
              optional M22 f_13 = 13;
            }
            optional M18 f_3 = 3;
          }
          optional M16 f_8 = 8;
          message M17 {
            optional uint32 f_0 = 2;
            optional uint32 f_1 = 4;
            optional int64 f_2 = 8;
            optional int64 f_3 = 10;
            optional uint32 f_4 = 12;
            optional uint32 f_5 = 14;
            optional bool f_6 = 15;
            optional int64 f_7 = 16;
            optional fixed32 f_8 = 20;
            enum E2 {
              E2_UNSPECIFIED = 0;
              E2_CONST_1 = 65;
              E2_CONST_2 = 28;
              E2_CONST_3 = 96;
              E2_CONST_4 = 78;
              E2_CONST_5 = 79;
            }
            optional E2 f_9 = 23;
            optional fixed32 f_10 = 26;
            optional int32 f_11 = 27;
            optional int64 f_12 = 29;
            optional bool f_13 = 31;
            optional uint32 f_14 = 33;
          }
          repeated M17 f_10 = 10;
        }
        optional M13 f_14 = 14;
      }
      optional M12 f_5 = 5;
    }
    optional M11 f_4 = 4;
  }
  optional M1 f_6 = 6;
  message M2 {
    optional int64 f_0 = 1;
    message M8 {
      optional fixed32 f_0 = 2;
    }
    optional M8 f_4 = 4;
  }
  repeated M2 f_9 = 9;
  message M3 {
    optional int64 f_0 = 1;
    message M10 {
      optional bytes f_0 = 1 [ctype = CORD];
    }
    optional M10 f_2 = 2;
  }
  repeated M3 f_13 = 13;
  message M4 {
    optional bool f_0 = 2;
    message M9 {
      optional string f_0 = 2;
      optional int64 f_1 = 3;
      optional bool f_2 = 5;
      optional bool f_3 = 6;
      optional int64 f_4 = 9;
      optional string f_5 = 10;
    }
    optional M9 f_3 = 3;
  }
  repeated M4 f_16 = 16;
  message M5 {
    optional int32 f_0 = 3;
  }
  optional M5 f_18 = 18;
  message M6 {
    optional string f_0 = 2;
  }
  repeated M6 f_20 = 20;
  message M7 {
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 100;
      E1_CONST_2 = 62;
      E1_CONST_3 = 39;
      E1_CONST_4 = 72;
      E1_CONST_5 = 116;
    }
    optional E1 f_0 = 1;
    optional int64 f_1 = 2;
  }
  optional M7 f_23 = 23;
}
