// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.response.Message2;

message Message2 {
  optional double f_0 = 1;
  optional string f_1 = 2;
  optional int32 f_2 = 3;
  optional double f_3 = 4;
  optional int32 f_4 = 6;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 111;
    E1_CONST_2 = 126;
    E1_CONST_3 = 1;
    E1_CONST_4 = 91;
    E1_CONST_5 = 65;
  }
  optional E1 f_5 = 7;
  optional bytes f_6 = 8;
  optional int32 f_7 = 9;
  optional int32 f_8 = 11;
  optional int32 f_9 = 13;
  optional double f_10 = 14;
  optional double f_11 = 15;
  optional double f_12 = 16;
  optional int32 f_13 = 18;
  optional double f_14 = 20;
  optional int32 f_15 = 21;
  optional double f_16 = 22;
  optional int32 f_17 = 23;
  optional string f_18 = 24;
  optional fixed64 f_19 = 25;
  optional int32 f_20 = 26;
  optional int32 f_21 = 27;
  optional double f_22 = 28;
  optional fixed64 f_23 = 29;
  message M1 {
    optional double f_0 = 1;
    message M6 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 3;
      optional double f_3 = 4;
      optional int64 f_4 = 5;
      optional double f_5 = 6;
      optional double f_6 = 7;
      optional double f_7 = 8;
    }
    optional M6 f_3 = 3;
  }
  repeated M1 f_30 = 30;
  message M2 {
    optional int32 f_0 = 1;
    message M14 {
      optional int32 f_0 = 1;
    }
    optional M14 f_2 = 2;
    message M18 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 4;
      optional double f_4 = 6;
    }
    repeated M18 f_3 = 3;
  }
  optional M2 f_31 = 31;
  message M3 {
    optional double f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed64 f_2 = 3;
    optional bytes f_3 = 4;
    optional fixed64 f_4 = 5;
    optional fixed32 f_5 = 8;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 32;
      E2_CONST_2 = 74;
      E2_CONST_3 = 79;
      E2_CONST_4 = 63;
      E2_CONST_5 = 30;
    }
    optional E2 f_6 = 9;
    optional string f_7 = 10;
    optional int32 f_8 = 11;
    optional fixed64 f_9 = 12;
    optional fixed64 f_10 = 13;
    optional fixed64 f_11 = 14;
    optional bytes f_12 = 15;
    optional int32 f_13 = 17;
    optional fixed64 f_14 = 18;
    optional int32 f_15 = 19;
    optional int64 f_16 = 20;
    message M9 {
      optional double f_0 = 1;
      message M23 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
      }
      optional M23 f_2 = 2;
    }
    optional M9 f_21 = 21;
    message M11 {
      optional double f_0 = 1;
      optional int64 f_1 = 2;
      optional double f_2 = 3;
      message M27 {
        optional bytes f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
      }
      repeated M27 f_4 = 4;
    }
    optional M11 f_22 = 22;
    message M16 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 80;
        E5_CONST_2 = 90;
        E5_CONST_3 = 8;
        E5_CONST_4 = 111;
        E5_CONST_5 = 98;
      }
      optional E5 f_0 = 1;
    }
    optional M16 f_23 = 23;
  }
  optional M3 f_33 = 33;
  message M4 {
    optional bytes f_0 = 1;
    optional double f_1 = 2;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 40;
      E3_CONST_2 = 109;
      E3_CONST_3 = 103;
      E3_CONST_4 = 65;
      E3_CONST_5 = 119;
    }
    optional E3 f_2 = 3;
    optional int32 f_3 = 4;
    message M7 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional fixed64 f_4 = 6;
      optional string f_5 = 7;
      optional int32 f_6 = 8;
      optional int32 f_7 = 10;
      optional double f_8 = 11;
      optional double f_9 = 12;
      optional double f_10 = 13;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 52;
        E4_CONST_2 = 68;
        E4_CONST_3 = 42;
        E4_CONST_4 = 48;
        E4_CONST_5 = 32;
      }
      optional E4 f_11 = 14;
      message M22 {
        optional bytes f_0 = 2;
      }
      optional M22 f_15 = 15;
      message M25 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional int32 f_3 = 4;
        message M30 {
          optional int64 f_0 = 1;
          message M33 {
            optional double f_0 = 2;
          }
          optional M33 f_2 = 2;
        }
        repeated M30 f_5 = 5;
        message M32 {
          optional fixed64 f_0 = 1;
        }
        repeated M32 f_6 = 6;
      }
      optional M25 f_16 = 16;
    }
    repeated M7 f_5 = 5;
    message M8 {
      optional fixed64 f_0 = 2;
    }
    optional M8 f_6 = 6;
    message M10 {
      optional double f_0 = 2;
      optional double f_1 = 3;
      optional int32 f_2 = 4;
      optional double f_3 = 5;
      optional fixed64 f_4 = 6;
      message M26 {
        optional bytes f_0 = 1;
        message M28 {
          optional fixed64 f_0 = 1;
          optional double f_1 = 2;
          optional int32 f_2 = 3;
          optional bytes f_3 = 4;
          optional int32 f_4 = 5;
        }
        optional M28 f_3 = 3;
        message M29 {
          optional int32 f_0 = 1;
        }
        optional M29 f_4 = 4;
        message M31 {
          optional string f_0 = 1;
        }
        optional M31 f_5 = 5;
      }
      repeated M26 f_7 = 7;
    }
    optional M10 f_7 = 7;
    message M15 {
      optional bytes f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      message M21 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
      }
      optional M21 f_4 = 4;
    }
    optional M15 f_8 = 8;
    message M17 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 116;
        E6_CONST_2 = 59;
        E6_CONST_3 = 69;
        E6_CONST_4 = 56;
        E6_CONST_5 = 93;
      }
      optional E6 f_2 = 3;
    }
    optional M17 f_9 = 9;
    message M19 {
      optional string f_0 = 1;
    }
    repeated M19 f_10 = 10;
  }
  optional M4 f_34 = 34;
  message M5 {
    optional double f_0 = 2;
    message M12 {
      optional bytes f_0 = 1;
    }
    optional M12 f_3 = 3;
    message M13 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      message M24 {
        optional double f_0 = 1;
        optional bytes f_1 = 2;
        optional fixed64 f_2 = 3;
        optional fixed64 f_3 = 4;
        optional double f_4 = 5;
      }
      optional M24 f_4 = 4;
    }
    repeated M13 f_4 = 4;
    message M20 {
      optional int32 f_0 = 1;
      optional bytes f_1 = 2;
      optional double f_2 = 3;
      optional fixed64 f_3 = 5;
      optional double f_4 = 6;
    }
    optional M20 f_5 = 5;
  }
  optional M5 f_35 = 35;
}
