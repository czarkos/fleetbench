// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.response.Message2;

message Message2 {
  optional int32 f_0 = 1;
  optional double f_1 = 2;
  optional fixed64 f_2 = 3;
  optional double f_3 = 4;
  optional fixed64 f_4 = 5;
  optional bytes f_5 = 6;
  optional int64 f_6 = 7;
  optional fixed64 f_7 = 8;
  optional fixed64 f_8 = 9;
  optional int32 f_9 = 10;
  optional fixed64 f_10 = 11;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 86;
    E1_CONST_2 = 123;
    E1_CONST_3 = 73;
    E1_CONST_4 = 93;
    E1_CONST_5 = 15;
  }
  optional E1 f_11 = 12;
  optional fixed64 f_12 = 13;
  optional string f_13 = 14;
  optional string f_14 = 16;
  optional string f_15 = 17;
  optional double f_16 = 18;
  optional int32 f_17 = 19;
  optional fixed64 f_18 = 20;
  optional int32 f_19 = 22;
  optional double f_20 = 23;
  optional fixed64 f_21 = 24;
  optional double f_22 = 25;
  optional fixed64 f_23 = 26;
  message M1 {
    optional double f_0 = 1;
    message M17 {
      optional fixed64 f_0 = 2;
      message M27 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 6;
          E8_CONST_2 = 75;
          E8_CONST_3 = 14;
          E8_CONST_4 = 72;
          E8_CONST_5 = 38;
        }
        optional E8 f_0 = 1;
      }
      optional M27 f_3 = 3;
    }
    repeated M17 f_2 = 2;
  }
  repeated M1 f_27 = 27;
  message M2 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional bytes f_2 = 3;
    optional double f_3 = 4;
    message M11 {
      optional fixed64 f_0 = 2;
    }
    optional M11 f_5 = 5;
  }
  optional M2 f_28 = 28;
  message M3 {
    optional double f_0 = 1;
  }
  optional M3 f_29 = 29;
  message M4 {
    optional fixed64 f_0 = 2;
  }
  repeated M4 f_30 = 30;
  message M5 {
    optional int32 f_0 = 1;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 124;
      E2_CONST_2 = 15;
      E2_CONST_3 = 116;
      E2_CONST_4 = 67;
      E2_CONST_5 = 24;
    }
    optional E2 f_1 = 2;
    optional int32 f_2 = 3;
    optional int32 f_3 = 4;
    optional fixed64 f_4 = 5;
    message M12 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 119;
        E4_CONST_2 = 45;
        E4_CONST_3 = 22;
        E4_CONST_4 = 5;
        E4_CONST_5 = 114;
      }
      optional E4 f_2 = 3;
      message M26 {
        optional bytes f_0 = 1;
        optional fixed64 f_1 = 2;
        optional double f_2 = 3;
        optional int64 f_3 = 4;
        optional int32 f_4 = 5;
      }
      optional M26 f_4 = 4;
    }
    repeated M12 f_6 = 6;
    message M13 {
      optional double f_0 = 1;
      message M28 {
        optional double f_0 = 1;
      }
      optional M28 f_2 = 2;
    }
    repeated M13 f_7 = 7;
    message M19 {
      optional int32 f_0 = 1;
      message M29 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
      }
      repeated M29 f_2 = 2;
    }
    optional M19 f_8 = 8;
    message M20 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      optional int32 f_4 = 5;
    }
    optional M20 f_9 = 9;
  }
  optional M5 f_31 = 31;
  message M6 {
    optional double f_0 = 1;
    message M24 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 4;
      optional double f_3 = 5;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 77;
        E6_CONST_2 = 37;
        E6_CONST_3 = 3;
        E6_CONST_4 = 18;
        E6_CONST_5 = 23;
      }
      optional E6 f_4 = 6;
      optional int32 f_5 = 7;
      optional int32 f_6 = 8;
      optional fixed64 f_7 = 9;
      optional int32 f_8 = 10;
      optional bytes f_9 = 11;
      optional double f_10 = 12;
      optional int64 f_11 = 13;
      optional fixed64 f_12 = 14;
      optional int64 f_13 = 15;
      optional int64 f_14 = 16;
      optional int32 f_15 = 17;
      optional double f_16 = 18;
      optional double f_17 = 19;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 88;
        E7_CONST_2 = 24;
        E7_CONST_3 = 52;
        E7_CONST_4 = 110;
        E7_CONST_5 = 111;
      }
      optional E7 f_18 = 20;
      optional fixed64 f_19 = 21;
    }
    repeated M24 f_2 = 2;
  }
  optional M6 f_32 = 32;
  message M7 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    optional double f_2 = 3;
    optional int64 f_3 = 4;
    message M15 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 49;
        E5_CONST_2 = 78;
        E5_CONST_3 = 17;
        E5_CONST_4 = 26;
        E5_CONST_5 = 92;
      }
      optional E5 f_0 = 1;
    }
    optional M15 f_5 = 5;
    message M18 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 4;
      optional fixed64 f_4 = 5;
    }
    repeated M18 f_6 = 6;
    message M23 {
      optional double f_0 = 1;
    }
    repeated M23 f_7 = 7;
  }
  optional M7 f_33 = 33;
  message M8 {
    optional double f_0 = 1;
    message M21 {
      optional double f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 4;
    }
    optional M21 f_2 = 2;
    message M22 {
      optional int64 f_0 = 1;
      message M25 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional bytes f_2 = 3;
        message M30 {
          optional bytes f_0 = 1;
          enum E9 {
            E9_UNSPECIFIED = 0;
            E9_CONST_1 = 94;
            E9_CONST_2 = 73;
            E9_CONST_3 = 17;
            E9_CONST_4 = 104;
            E9_CONST_5 = 74;
          }
          optional E9 f_1 = 2;
          optional double f_2 = 3;
          enum E10 {
            E10_UNSPECIFIED = 0;
            E10_CONST_1 = 22;
            E10_CONST_2 = 118;
            E10_CONST_3 = 25;
            E10_CONST_4 = 64;
            E10_CONST_5 = 47;
          }
          optional E10 f_3 = 4;
          optional double f_4 = 5;
          optional fixed64 f_5 = 6;
          optional string f_6 = 7;
          optional double f_7 = 8;
          optional fixed64 f_8 = 9;
          optional double f_9 = 10;
          optional int32 f_10 = 11;
          optional string f_11 = 12;
          optional fixed64 f_12 = 13;
          optional int64 f_13 = 14;
        }
        repeated M30 f_4 = 4;
      }
      optional M25 f_2 = 2;
    }
    optional M22 f_3 = 3;
  }
  optional M8 f_34 = 34;
  message M9 {
    optional int32 f_0 = 1;
    optional int64 f_1 = 2;
    optional int32 f_2 = 3;
    message M14 {
      repeated bool f_0 = 1 [packed = true];
    }
    optional M14 f_4 = 4;
    message M16 {
      optional int32 f_0 = 1;
    }
    optional M16 f_5 = 5;
  }
  repeated M9 f_35 = 35;
  message M10 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 110;
      E3_CONST_2 = 52;
      E3_CONST_3 = 20;
      E3_CONST_4 = 27;
      E3_CONST_5 = 12;
    }
    optional E3 f_0 = 1;
    optional uint64 f_1 = 2;
    optional fixed64 f_2 = 3;
  }
  optional M10 f_36 = 36;
}
