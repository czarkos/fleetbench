// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.response.Message0;

message Message0 {
  optional fixed64 f_0 = 1;
  optional double f_1 = 2;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 56;
    E1_CONST_2 = 83;
    E1_CONST_3 = 79;
    E1_CONST_4 = 99;
    E1_CONST_5 = 77;
  }
  optional E1 f_2 = 3;
  optional double f_3 = 4;
  optional double f_4 = 5;
  optional int32 f_5 = 6;
  optional int32 f_6 = 7;
  optional double f_7 = 8;
  optional double f_8 = 11;
  optional double f_9 = 12;
  optional int32 f_10 = 14;
  optional double f_11 = 15;
  optional double f_12 = 16;
  optional double f_13 = 17;
  optional int32 f_14 = 18;
  optional int32 f_15 = 19;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 2;
    E2_CONST_2 = 43;
    E2_CONST_3 = 63;
    E2_CONST_4 = 61;
    E2_CONST_5 = 73;
  }
  optional E2 f_16 = 20;
  optional fixed64 f_17 = 21;
  optional double f_18 = 22;
  optional int32 f_19 = 23;
  optional int32 f_20 = 24;
  optional double f_21 = 25;
  optional double f_22 = 26;
  optional fixed64 f_23 = 27;
  message M1 {
    optional double f_0 = 1;
    optional string f_1 = 2;
    optional string f_2 = 4;
    message M12 {
      optional double f_0 = 1;
      message M33 {
        optional double f_0 = 1;
      }
      repeated M33 f_2 = 2;
    }
    optional M12 f_5 = 5;
    message M25 {
      optional int32 f_0 = 1;
    }
    optional M25 f_6 = 6;
  }
  optional M1 f_28 = 28;
  message M2 {
    optional double f_0 = 1;
    message M18 {
      optional double f_0 = 2;
      message M30 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 4;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 97;
          E7_CONST_2 = 15;
          E7_CONST_3 = 107;
          E7_CONST_4 = 48;
          E7_CONST_5 = 14;
        }
        optional E7 f_3 = 5;
        optional int32 f_4 = 6;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 112;
          E8_CONST_2 = 120;
          E8_CONST_3 = 26;
          E8_CONST_4 = 96;
          E8_CONST_5 = 60;
        }
        optional E8 f_5 = 7;
        optional bytes f_6 = 8;
        message M39 {
          optional double f_0 = 1;
          optional string f_1 = 2;
          optional double f_2 = 3;
        }
        optional M39 f_9 = 9;
      }
      optional M30 f_3 = 3;
    }
    optional M18 f_2 = 2;
    message M22 {
      optional double f_0 = 2;
      optional double f_1 = 3;
      optional int32 f_2 = 4;
      optional double f_3 = 5;
      optional int64 f_4 = 6;
      message M34 {
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 60;
          E9_CONST_2 = 124;
          E9_CONST_3 = 110;
          E9_CONST_4 = 75;
          E9_CONST_5 = 42;
        }
        optional E9 f_0 = 1;
      }
      optional M34 f_7 = 7;
    }
    repeated M22 f_3 = 3;
    message M23 {
      optional double f_0 = 1;
      optional string f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 4;
      optional double f_4 = 5;
      message M36 {
        optional double f_0 = 1;
      }
      optional M36 f_6 = 6;
    }
    repeated M23 f_4 = 4;
  }
  optional M2 f_29 = 29;
  message M3 {
    optional string f_0 = 1;
    optional double f_1 = 2;
    optional fixed64 f_2 = 3;
    optional double f_3 = 4;
    message M9 {
      optional int32 f_0 = 1;
      message M31 {
        optional bool f_0 = 1;
      }
      optional M31 f_2 = 2;
      message M32 {
        optional int32 f_0 = 1;
        message M38 {
          optional int32 f_0 = 1;
          enum E11 {
            E11_UNSPECIFIED = 0;
            E11_CONST_1 = 107;
            E11_CONST_2 = 18;
            E11_CONST_3 = 98;
            E11_CONST_4 = 91;
            E11_CONST_5 = 103;
          }
          optional E11 f_1 = 2;
          optional double f_2 = 3;
          optional string f_3 = 4;
        }
        optional M38 f_2 = 2;
      }
      optional M32 f_3 = 3;
    }
    repeated M9 f_5 = 5;
    message M10 {
      optional string f_0 = 1;
    }
    optional M10 f_7 = 7;
    message M19 {
      optional fixed64 f_0 = 2;
      message M37 {
        optional double f_0 = 1;
        message M40 {
          optional bool f_0 = 1;
          optional int32 f_1 = 2;
          optional int32 f_2 = 3;
          optional fixed64 f_3 = 4;
        }
        optional M40 f_2 = 2;
      }
      repeated M37 f_3 = 3;
    }
    optional M19 f_8 = 8;
    message M20 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 104;
        E5_CONST_2 = 12;
        E5_CONST_3 = 5;
        E5_CONST_4 = 19;
        E5_CONST_5 = 125;
      }
      optional E5 f_3 = 4;
      optional fixed64 f_4 = 5;
      optional int32 f_5 = 6;
      optional int32 f_6 = 7;
      optional double f_7 = 8;
      optional string f_8 = 9;
      optional double f_9 = 10;
    }
    optional M20 f_9 = 9;
    message M21 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 64;
        E6_CONST_2 = 48;
        E6_CONST_3 = 102;
        E6_CONST_4 = 118;
        E6_CONST_5 = 78;
      }
      optional E6 f_0 = 1;
    }
    optional M21 f_10 = 10;
    message M24 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      message M29 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
      }
      optional M29 f_4 = 4;
    }
    optional M24 f_11 = 11;
  }
  optional M3 f_30 = 30;
  message M4 {
    optional bool f_0 = 1;
    optional fixed64 f_1 = 3;
    optional double f_2 = 4;
    optional string f_3 = 5;
    optional double f_4 = 6;
    message M13 {
      optional fixed64 f_0 = 1;
    }
    repeated M13 f_8 = 8;
    message M16 {
      optional bytes f_0 = 2;
    }
    repeated M16 f_10 = 10;
  }
  repeated M4 f_31 = 31;
  message M5 {
    optional string f_0 = 1;
    message M11 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 64;
        E4_CONST_2 = 54;
        E4_CONST_3 = 83;
        E4_CONST_4 = 26;
        E4_CONST_5 = 125;
      }
      optional E4 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 4;
      optional double f_4 = 5;
      optional fixed64 f_5 = 6;
    }
    optional M11 f_4 = 4;
  }
  repeated M5 f_32 = 32;
  message M6 {
    optional string f_0 = 1;
    message M14 {
      optional double f_0 = 1;
      message M27 {
        optional double f_0 = 1;
        optional double f_1 = 3;
        optional double f_2 = 5;
      }
      repeated M27 f_2 = 2;
    }
    optional M14 f_2 = 2;
    message M17 {
      optional int32 f_0 = 1;
      optional int64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 5;
      optional fixed64 f_4 = 6;
      optional string f_5 = 7;
      message M28 {
        optional double f_0 = 1;
        optional bytes f_1 = 2;
        optional double f_2 = 3;
      }
      repeated M28 f_8 = 8;
    }
    repeated M17 f_3 = 3;
  }
  repeated M6 f_33 = 33;
  message M7 {
    optional double f_0 = 1;
    message M15 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      message M35 {
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 28;
          E10_CONST_2 = 78;
          E10_CONST_3 = 77;
          E10_CONST_4 = 115;
          E10_CONST_5 = 65;
        }
        optional E10 f_0 = 1;
      }
      repeated M35 f_4 = 4;
    }
    optional M15 f_2 = 2;
  }
  repeated M7 f_35 = 35;
  message M8 {
    optional int32 f_0 = 1;
    repeated bool f_1 = 2 [packed = true];
    optional fixed64 f_2 = 3;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 45;
      E3_CONST_2 = 65;
      E3_CONST_3 = 75;
      E3_CONST_4 = 87;
      E3_CONST_5 = 30;
    }
    optional E3 f_3 = 4;
    optional int64 f_4 = 5;
    optional string f_5 = 6;
    optional double f_6 = 7;
    optional double f_7 = 8;
    optional fixed64 f_8 = 9;
    optional fixed64 f_9 = 10;
    optional fixed64 f_10 = 11;
    message M26 {
      optional bool f_0 = 1;
    }
    optional M26 f_13 = 13;
  }
  repeated M8 f_36 = 36;
}
