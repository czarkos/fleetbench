// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P8.response.Message0;

message Message0 {
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 74;
    E1_CONST_2 = 24;
    E1_CONST_3 = 16;
    E1_CONST_4 = 63;
    E1_CONST_5 = 21;
  }
  optional E1 f_0 = 1;
  optional bytes f_1 = 3;
  optional bytes f_2 = 4;
  optional int32 f_3 = 5;
  optional string f_4 = 6;
  optional int32 f_5 = 7;
  optional fixed64 f_6 = 8;
  optional int32 f_7 = 11;
  optional double f_8 = 12;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 64;
    E2_CONST_2 = 11;
    E2_CONST_3 = 102;
    E2_CONST_4 = 44;
    E2_CONST_5 = 65;
  }
  optional E2 f_9 = 14;
  optional double f_10 = 15;
  optional double f_11 = 16;
  optional int32 f_12 = 17;
  optional double f_13 = 18;
  optional double f_14 = 19;
  optional string f_15 = 20;
  optional double f_16 = 21;
  optional fixed64 f_17 = 22;
  optional string f_18 = 23;
  optional fixed64 f_19 = 24;
  optional int32 f_20 = 25;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 85;
    E3_CONST_2 = 121;
    E3_CONST_3 = 43;
    E3_CONST_4 = 48;
    E3_CONST_5 = 77;
  }
  optional E3 f_21 = 26;
  optional double f_22 = 27;
  optional fixed64 f_23 = 28;
  message M1 {
    optional fixed64 f_0 = 1;
    message M13 {
      optional fixed64 f_0 = 2;
      optional double f_1 = 3;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 119;
        E5_CONST_2 = 110;
        E5_CONST_3 = 86;
        E5_CONST_4 = 33;
        E5_CONST_5 = 17;
      }
      optional E5 f_2 = 4;
      optional string f_3 = 5;
      optional double f_4 = 6;
      optional double f_5 = 7;
      optional double f_6 = 8;
      optional double f_7 = 11;
      optional double f_8 = 12;
      optional fixed64 f_9 = 13;
      optional double f_10 = 14;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 15;
        E6_CONST_2 = 44;
        E6_CONST_3 = 56;
        E6_CONST_4 = 86;
        E6_CONST_5 = 63;
      }
      optional E6 f_11 = 16;
    }
    optional M13 f_2 = 2;
  }
  repeated M1 f_30 = 30;
  message M2 {
    optional fixed64 f_0 = 1;
  }
  optional M2 f_31 = 31;
  message M3 {
    optional int64 f_0 = 1;
  }
  optional M3 f_32 = 32;
  message M4 {
    optional double f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed64 f_2 = 3;
    optional double f_3 = 4;
  }
  optional M4 f_33 = 33;
  message M5 {
    optional fixed64 f_0 = 2;
  }
  optional M5 f_34 = 34;
  message M6 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed64 f_2 = 3;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 126;
      E4_CONST_2 = 8;
      E4_CONST_3 = 49;
      E4_CONST_4 = 69;
      E4_CONST_5 = 65;
    }
    optional E4 f_3 = 4;
    message M15 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 3;
      optional double f_2 = 4;
      optional fixed64 f_3 = 6;
      optional int32 f_4 = 7;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 93;
        E8_CONST_2 = 11;
        E8_CONST_3 = 24;
        E8_CONST_4 = 4;
        E8_CONST_5 = 48;
      }
      optional E8 f_5 = 8;
      optional string f_6 = 9;
      optional double f_7 = 10;
      optional double f_8 = 11;
      optional fixed64 f_9 = 12;
      message M17 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional fixed64 f_3 = 5;
        optional double f_4 = 6;
        optional fixed64 f_5 = 8;
        optional string f_6 = 10;
        optional fixed64 f_7 = 11;
        optional string f_8 = 12;
        optional double f_9 = 13;
        optional double f_10 = 14;
        optional double f_11 = 15;
        optional bytes f_12 = 16;
        optional int32 f_13 = 17;
        optional int64 f_14 = 18;
        optional double f_15 = 19;
        optional double f_16 = 20;
        optional fixed64 f_17 = 22;
        optional double f_18 = 23;
        optional double f_19 = 24;
        optional double f_20 = 25;
        optional double f_21 = 27;
        optional string f_22 = 28;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 11;
          E9_CONST_2 = 113;
          E9_CONST_3 = 58;
          E9_CONST_4 = 2;
          E9_CONST_5 = 61;
        }
        optional E9 f_23 = 29;
        message M18 {
          optional int32 f_0 = 1;
          optional double f_1 = 2;
          optional int32 f_2 = 3;
          optional double f_3 = 4;
          message M21 {
            optional fixed64 f_0 = 1;
          }
          optional M21 f_5 = 5;
        }
        optional M18 f_30 = 30;
        message M19 {
          optional double f_0 = 1;
        }
        repeated M19 f_31 = 31;
        message M20 {
          optional string f_0 = 1;
          enum E10 {
            E10_UNSPECIFIED = 0;
            E10_CONST_1 = 71;
            E10_CONST_2 = 78;
            E10_CONST_3 = 105;
            E10_CONST_4 = 61;
            E10_CONST_5 = 116;
          }
          optional E10 f_1 = 2;
          optional double f_2 = 3;
          optional double f_3 = 4;
          optional int32 f_4 = 5;
        }
        optional M20 f_32 = 32;
      }
      repeated M17 f_13 = 13;
    }
    optional M15 f_5 = 5;
  }
  optional M6 f_35 = 35;
  message M7 {
    optional bytes f_0 = 1;
    message M16 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      optional double f_4 = 5;
      optional bytes f_5 = 6;
      optional double f_6 = 7;
      optional double f_7 = 9;
      optional fixed64 f_8 = 10;
      optional fixed64 f_9 = 11;
      optional string f_10 = 12;
      optional string f_11 = 13;
      optional string f_12 = 14;
      optional fixed64 f_13 = 15;
      optional int32 f_14 = 16;
      optional bytes f_15 = 17;
      optional double f_16 = 18;
      optional double f_17 = 19;
      optional double f_18 = 20;
      optional double f_19 = 21;
      optional double f_20 = 22;
      optional fixed64 f_21 = 23;
    }
    repeated M16 f_2 = 2;
  }
  repeated M7 f_36 = 36;
  message M8 {
    optional bytes f_0 = 1;
  }
  optional M8 f_38 = 38;
  message M9 {
    optional fixed64 f_0 = 1;
    optional double f_1 = 2;
    optional int32 f_2 = 3;
  }
  repeated M9 f_39 = 39;
  message M10 {
    optional fixed64 f_0 = 1;
    optional double f_1 = 2;
    optional int64 f_2 = 3;
    optional fixed64 f_3 = 4;
    optional fixed64 f_4 = 5;
  }
  optional M10 f_40 = 40;
  message M11 {
    optional fixed64 f_0 = 1;
    message M14 {
      optional int64 f_0 = 1;
      optional double f_1 = 2;
      optional bytes f_2 = 3;
      optional double f_3 = 4;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 104;
        E7_CONST_2 = 76;
        E7_CONST_3 = 26;
        E7_CONST_4 = 17;
        E7_CONST_5 = 27;
      }
      optional E7 f_4 = 5;
      optional int32 f_5 = 7;
      optional int32 f_6 = 9;
      optional string f_7 = 10;
      optional string f_8 = 11;
      optional double f_9 = 12;
      optional double f_10 = 14;
      optional fixed64 f_11 = 15;
    }
    optional M14 f_2 = 2;
  }
  optional M11 f_41 = 41;
  message M12 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
  }
  repeated M12 f_42 = 42;
}
