// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P4.request.Message0;

message Message0 {
  optional bytes f_0 = 2;
  optional int32 f_1 = 5;
  optional string f_2 = 6;
  optional string f_3 = 7;
  optional int64 f_4 = 8;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 20;
    E1_CONST_2 = 41;
    E1_CONST_3 = 26;
    E1_CONST_4 = 13;
    E1_CONST_5 = 101;
  }
  repeated E1 f_5 = 10 [packed = true];
  optional double f_6 = 11;
  optional string f_7 = 12;
  optional fixed64 f_8 = 13;
  optional string f_9 = 14;
  optional string f_10 = 16;
  optional fixed64 f_11 = 17;
  optional fixed32 f_12 = 20;
  optional fixed64 f_13 = 22;
  optional int32 f_14 = 23;
  optional fixed64 f_15 = 26;
  optional int32 f_16 = 28;
  optional bool f_17 = 30;
  optional string f_18 = 31;
  optional int32 f_19 = 33;
  optional string f_20 = 34;
  optional int32 f_21 = 36;
  optional bool f_22 = 37;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 60;
    E2_CONST_2 = 106;
    E2_CONST_3 = 120;
    E2_CONST_4 = 62;
    E2_CONST_5 = 55;
  }
  repeated E2 f_23 = 39 [packed = true];
  optional int32 f_24 = 40;
  optional string f_25 = 41;
  optional int32 f_26 = 42;
  optional fixed64 f_27 = 44;
  optional fixed64 f_28 = 45;
  optional fixed64 f_29 = 47;
  message M1 {
    optional string f_0 = 2;
    optional string f_1 = 3;
    optional string f_2 = 5;
    optional bytes f_3 = 8;
    optional int32 f_4 = 11;
    optional int32 f_5 = 12;
    optional int32 f_6 = 13;
    optional int32 f_7 = 14;
    optional int32 f_8 = 16;
    optional fixed32 f_9 = 18;
    optional int32 f_10 = 19;
    optional int32 f_11 = 20;
    optional int32 f_12 = 22;
    optional int32 f_13 = 24;
    optional string f_14 = 25;
    optional int32 f_15 = 26;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 64;
      E3_CONST_2 = 17;
      E3_CONST_3 = 2;
      E3_CONST_4 = 106;
      E3_CONST_5 = 66;
    }
    optional E3 f_16 = 27;
    optional fixed64 f_17 = 29;
    optional fixed64 f_18 = 31;
    optional string f_19 = 32;
    message M9 {
      optional fixed64 f_0 = 1;
    }
    optional M9 f_33 = 33;
    message M13 {
      optional int64 f_0 = 1;
      optional fixed32 f_1 = 2;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 64;
        E6_CONST_2 = 13;
        E6_CONST_3 = 3;
        E6_CONST_4 = 96;
        E6_CONST_5 = 92;
      }
      optional E6 f_2 = 4;
      optional string f_3 = 5;
      optional fixed64 f_4 = 7;
      optional fixed64 f_5 = 9;
    }
    optional M13 f_34 = 34;
    message M21 {
      optional bool f_0 = 2;
      message M41 {
        optional double f_0 = 1;
        optional string f_1 = 2;
      }
      optional M41 f_4 = 4;
    }
    optional M21 f_37 = 37;
    message M23 {
      optional bool f_0 = 1;
      optional string f_1 = 2;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 47;
        E11_CONST_2 = 118;
        E11_CONST_3 = 49;
        E11_CONST_4 = 9;
        E11_CONST_5 = 92;
      }
      optional E11 f_2 = 3;
      optional fixed32 f_3 = 4;
      optional bool f_4 = 5;
      optional double f_5 = 6;
      optional fixed64 f_6 = 7;
    }
    repeated M23 f_39 = 39;
    message M24 {
      optional int32 f_0 = 2;
      message M35 {
        optional fixed64 f_0 = 1;
        message M47 {
          optional double f_0 = 1;
          optional double f_1 = 3;
          optional string f_2 = 4;
          message M51 {
            optional double f_0 = 1;
          }
          optional M51 f_5 = 5;
        }
        optional M47 f_2 = 2;
      }
      optional M35 f_4 = 4;
    }
    optional M24 f_40 = 40;
    message M25 {
      optional string f_0 = 2;
    }
    optional M25 f_41 = 41;
  }
  optional M1 f_50 = 50;
  message M2 {
    optional double f_0 = 2;
    message M10 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 79;
        E4_CONST_2 = 82;
        E4_CONST_3 = 90;
        E4_CONST_4 = 22;
        E4_CONST_5 = 91;
      }
      repeated E4 f_2 = 3 [packed = true];
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 103;
        E5_CONST_2 = 74;
        E5_CONST_3 = 43;
        E5_CONST_4 = 94;
        E5_CONST_5 = 93;
      }
      repeated E5 f_3 = 4 [packed = true];
      optional int32 f_4 = 5;
    }
    optional M10 f_4 = 4;
    message M20 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 3;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 34;
        E7_CONST_2 = 27;
        E7_CONST_3 = 95;
        E7_CONST_4 = 4;
        E7_CONST_5 = 79;
      }
      repeated E7 f_2 = 4 [packed = true];
      optional fixed64 f_3 = 5;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 109;
        E8_CONST_2 = 74;
        E8_CONST_3 = 21;
        E8_CONST_4 = 1;
        E8_CONST_5 = 125;
      }
      optional E8 f_4 = 6;
      message M40 {
        optional int32 f_0 = 1;
        optional bytes f_1 = 2;
        message M44 {
          optional int32 f_0 = 2;
        }
        optional M44 f_3 = 3;
        message M50 {
          optional string f_0 = 1;
          optional string f_1 = 2;
          optional int32 f_2 = 3;
          optional fixed32 f_3 = 5;
          optional fixed64 f_4 = 6;
          optional int32 f_5 = 7;
          optional string f_6 = 8;
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 86;
            E16_CONST_2 = 75;
            E16_CONST_3 = 29;
            E16_CONST_4 = 39;
            E16_CONST_5 = 61;
          }
          repeated E16 f_7 = 9 [packed = true];
          optional bool f_8 = 11;
          optional int32 f_9 = 13;
          optional int32 f_10 = 14;
          optional string f_11 = 15;
        }
        repeated M50 f_5 = 5;
      }
      optional M40 f_8 = 8;
    }
    repeated M20 f_5 = 5;
  }
  repeated M2 f_51 = 51;
  message M3 {
    optional fixed32 f_0 = 1;
    message M12 {
      optional bool f_0 = 1;
    }
    repeated M12 f_3 = 3;
    message M15 {
      optional int32 f_0 = 2;
    }
    repeated M15 f_4 = 4;
  }
  optional M3 f_53 = 53;
  message M4 {
    optional string f_0 = 3;
    optional string f_1 = 4;
    message M7 {
      optional fixed64 f_0 = 2;
      optional uint64 f_1 = 3;
      optional string f_2 = 4;
      optional int32 f_3 = 5;
      message M32 {
        optional bytes f_0 = 2;
        message M45 {
          optional string f_0 = 1;
          optional int32 f_1 = 2;
          optional fixed64 f_2 = 4;
          optional bytes f_3 = 5;
          optional int32 f_4 = 6;
          optional fixed64 f_5 = 8;
          message M52 {
            optional int64 f_0 = 1;
          }
          optional M52 f_10 = 10;
          message M53 {
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 72;
              E17_CONST_2 = 100;
              E17_CONST_3 = 14;
              E17_CONST_4 = 71;
              E17_CONST_5 = 96;
            }
            repeated E17 f_0 = 1 [packed = true];
            optional string f_1 = 2;
            optional fixed64 f_2 = 4;
            optional bool f_3 = 6;
            enum E18 {
              E18_UNSPECIFIED = 0;
              E18_CONST_1 = 49;
              E18_CONST_2 = 56;
              E18_CONST_3 = 10;
              E18_CONST_4 = 46;
              E18_CONST_5 = 16;
            }
            repeated E18 f_4 = 7 [packed = true];
          }
          repeated M53 f_13 = 13;
          message M55 {
            optional fixed64 f_0 = 1;
            enum E19 {
              E19_UNSPECIFIED = 0;
              E19_CONST_1 = 108;
              E19_CONST_2 = 79;
              E19_CONST_3 = 106;
              E19_CONST_4 = 52;
              E19_CONST_5 = 113;
            }
            repeated E19 f_1 = 3 [packed = true];
            optional fixed32 f_2 = 4;
          }
          optional M55 f_14 = 14;
        }
        repeated M45 f_3 = 3;
      }
      repeated M32 f_7 = 7;
    }
    repeated M7 f_6 = 6;
    message M8 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 6;
      message M33 {
        optional string f_0 = 1;
        message M46 {
          optional string f_0 = 2;
          message M54 {
            optional bool f_0 = 2;
          }
          optional M54 f_4 = 4;
        }
        optional M46 f_2 = 2;
      }
      optional M33 f_7 = 7;
    }
    repeated M8 f_7 = 7;
    message M11 {
      optional bool f_0 = 1;
    }
    repeated M11 f_10 = 10;
    message M16 {
      optional string f_0 = 2;
    }
    optional M16 f_11 = 11;
    message M22 {
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 36;
        E9_CONST_2 = 121;
        E9_CONST_3 = 95;
        E9_CONST_4 = 68;
        E9_CONST_5 = 87;
      }
      optional E9 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional string f_3 = 5;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 23;
        E10_CONST_2 = 101;
        E10_CONST_3 = 50;
        E10_CONST_4 = 5;
        E10_CONST_5 = 83;
      }
      optional E10 f_4 = 6;
      message M43 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 3;
        optional int64 f_2 = 4;
        optional int32 f_3 = 6;
        optional bytes f_4 = 8;
        optional fixed64 f_5 = 9;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 110;
          E13_CONST_2 = 66;
          E13_CONST_3 = 22;
          E13_CONST_4 = 25;
          E13_CONST_5 = 90;
        }
        repeated E13 f_6 = 11 [packed = true];
        optional string f_7 = 12;
        optional bool f_8 = 15;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 87;
          E14_CONST_2 = 112;
          E14_CONST_3 = 37;
          E14_CONST_4 = 14;
          E14_CONST_5 = 116;
        }
        optional E14 f_9 = 16;
        optional fixed64 f_10 = 17;
        optional string f_11 = 20;
        optional uint64 f_12 = 22;
        optional bool f_13 = 23;
        optional string f_14 = 24;
        optional int32 f_15 = 25;
        optional int32 f_16 = 26;
        optional fixed32 f_17 = 28;
        optional fixed64 f_18 = 30;
        optional string f_19 = 32;
        optional int32 f_20 = 33;
        optional int32 f_21 = 34;
        optional double f_22 = 35;
        optional bool f_23 = 36;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 68;
          E15_CONST_2 = 123;
          E15_CONST_3 = 69;
          E15_CONST_4 = 104;
          E15_CONST_5 = 83;
        }
        repeated E15 f_24 = 37 [packed = true];
        message M49 {
          optional int32 f_0 = 1;
          optional string f_1 = 2;
          optional string f_2 = 4;
        }
        repeated M49 f_39 = 39;
      }
      optional M43 f_8 = 8;
    }
    optional M22 f_13 = 13;
    message M29 {
      optional string f_0 = 2;
    }
    optional M29 f_16 = 16;
  }
  repeated M4 f_54 = 54;
  message M5 {
    optional int64 f_0 = 1;
    message M17 {
      optional string f_0 = 1;
      message M34 {
        optional fixed64 f_0 = 2;
        optional double f_1 = 3;
      }
      optional M34 f_2 = 2;
      message M37 {
        optional fixed64 f_0 = 2;
        optional fixed64 f_1 = 4;
      }
      optional M37 f_4 = 4;
    }
    repeated M17 f_2 = 2;
    message M18 {
      optional string f_0 = 3;
      message M38 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
      }
      optional M38 f_4 = 4;
      message M42 {
        optional fixed64 f_0 = 1;
      }
      optional M42 f_7 = 7;
    }
    optional M18 f_3 = 3;
    message M27 {
      optional int32 f_0 = 2;
    }
    optional M27 f_5 = 5;
    message M28 {
      optional int32 f_0 = 1;
    }
    optional M28 f_6 = 6;
    message M30 {
      optional int32 f_0 = 1;
    }
    repeated M30 f_10 = 10;
    message M31 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 3;
    }
    repeated M31 f_11 = 11;
  }
  repeated M5 f_55 = 55;
  message M6 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    optional bool f_2 = 3;
    optional string f_3 = 4;
    optional fixed64 f_4 = 6;
    optional string f_5 = 8;
    message M14 {
      optional int32 f_0 = 1;
    }
    optional M14 f_9 = 9;
    message M19 {
      optional fixed64 f_0 = 4;
      message M39 {
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 59;
          E12_CONST_2 = 125;
          E12_CONST_3 = 65;
          E12_CONST_4 = 78;
          E12_CONST_5 = 15;
        }
        optional E12 f_0 = 1;
      }
      optional M39 f_5 = 5;
    }
    repeated M19 f_10 = 10;
    message M26 {
      optional fixed64 f_0 = 3;
      optional string f_1 = 4;
      optional string f_2 = 5;
      message M36 {
        optional fixed64 f_0 = 2;
        optional bool f_1 = 3;
        optional int32 f_2 = 5;
        optional string f_3 = 6;
        message M48 {
          optional fixed64 f_0 = 2;
        }
        optional M48 f_8 = 8;
      }
      optional M36 f_6 = 6;
    }
    repeated M26 f_11 = 11;
  }
  repeated M6 f_57 = 57;
}
