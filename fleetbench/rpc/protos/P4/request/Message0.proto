// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P4.request.Message0;

message Message0 {
  optional fixed64 f_0 = 1;
  optional string f_1 = 3;
  optional bytes f_2 = 4;
  optional string f_3 = 6;
  optional int32 f_4 = 8;
  optional int32 f_5 = 11;
  optional string f_6 = 12;
  optional fixed64 f_7 = 15;
  optional bytes f_8 = 16;
  optional fixed64 f_9 = 17;
  optional fixed64 f_10 = 19;
  optional int32 f_11 = 20;
  optional fixed64 f_12 = 21;
  optional string f_13 = 23;
  optional int32 f_14 = 24;
  optional int32 f_15 = 26;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 88;
    E1_CONST_2 = 99;
    E1_CONST_3 = 98;
    E1_CONST_4 = 68;
    E1_CONST_5 = 32;
  }
  optional E1 f_16 = 27;
  optional int64 f_17 = 28;
  optional fixed64 f_18 = 29;
  optional int32 f_19 = 31;
  optional bool f_20 = 32;
  optional string f_21 = 33;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 21;
    E2_CONST_2 = 77;
    E2_CONST_3 = 57;
    E2_CONST_4 = 75;
    E2_CONST_5 = 89;
  }
  repeated E2 f_22 = 34 [packed = true];
  optional double f_23 = 35;
  optional int32 f_24 = 36;
  optional fixed32 f_25 = 37;
  optional double f_26 = 38;
  optional fixed64 f_27 = 39;
  optional double f_28 = 40;
  optional fixed64 f_29 = 43;
  optional bool f_30 = 44;
  optional int32 f_31 = 45;
  optional fixed64 f_32 = 46;
  optional string f_33 = 47;
  message M1 {
    optional int32 f_0 = 1;
    message M15 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 4;
      optional string f_3 = 6;
    }
    optional M15 f_2 = 2;
    message M18 {
      optional fixed64 f_0 = 1;
    }
    repeated M18 f_3 = 3;
  }
  optional M1 f_48 = 48;
  message M2 {
    optional double f_0 = 1;
    optional fixed64 f_1 = 2;
    optional int32 f_2 = 4;
    optional fixed64 f_3 = 6;
    optional string f_4 = 7;
    message M31 {
      optional string f_0 = 1;
      message M38 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 2;
        optional string f_2 = 3;
      }
      optional M38 f_4 = 4;
      message M53 {
        enum E23 {
          E23_UNSPECIFIED = 0;
          E23_CONST_1 = 116;
          E23_CONST_2 = 95;
          E23_CONST_3 = 126;
          E23_CONST_4 = 58;
          E23_CONST_5 = 33;
        }
        optional E23 f_0 = 2;
        message M76 {
          enum E26 {
            E26_UNSPECIFIED = 0;
            E26_CONST_1 = 88;
            E26_CONST_2 = 48;
            E26_CONST_3 = 19;
            E26_CONST_4 = 62;
            E26_CONST_5 = 49;
          }
          repeated E26 f_0 = 1 [packed = true];
          optional int32 f_1 = 2;
          optional double f_2 = 3;
          optional string f_3 = 5;
        }
        optional M76 f_3 = 3;
      }
      repeated M53 f_6 = 6;
    }
    optional M31 f_8 = 8;
    message M33 {
      optional fixed64 f_0 = 2;
      message M47 {
        optional bytes f_0 = 3;
        message M64 {
          optional string f_0 = 1;
        }
        optional M64 f_5 = 5;
        message M71 {
          optional int32 f_0 = 3;
        }
        optional M71 f_6 = 6;
      }
      optional M47 f_3 = 3;
      message M49 {
        optional int32 f_0 = 1;
      }
      optional M49 f_5 = 5;
    }
    optional M33 f_9 = 9;
  }
  optional M2 f_49 = 49;
  message M3 {
    optional fixed32 f_0 = 1;
    message M24 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 4;
      optional fixed64 f_2 = 5;
      optional fixed64 f_3 = 6;
      optional fixed64 f_4 = 7;
      optional int32 f_5 = 8;
      optional bool f_6 = 9;
      optional int32 f_7 = 10;
      optional int32 f_8 = 12;
      optional fixed64 f_9 = 13;
      optional string f_10 = 14;
      optional string f_11 = 15;
      optional string f_12 = 16;
      optional fixed64 f_13 = 17;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 120;
        E8_CONST_2 = 109;
        E8_CONST_3 = 96;
        E8_CONST_4 = 100;
        E8_CONST_5 = 118;
      }
      repeated E8 f_14 = 19 [packed = true];
      optional fixed64 f_15 = 20;
      optional bytes f_16 = 21;
      optional string f_17 = 22;
      optional fixed64 f_18 = 23;
      optional string f_19 = 25;
      optional fixed64 f_20 = 26;
      optional double f_21 = 27;
      optional string f_22 = 28;
      optional fixed64 f_23 = 30;
      optional bytes f_24 = 31;
      optional bool f_25 = 32;
      optional fixed64 f_26 = 33;
      optional fixed64 f_27 = 35;
      optional string f_28 = 36;
      optional bytes f_29 = 37;
      optional string f_30 = 38;
    }
    repeated M24 f_2 = 2;
    message M30 {
      optional string f_0 = 2;
      enum E18 {
        E18_UNSPECIFIED = 0;
        E18_CONST_1 = 89;
        E18_CONST_2 = 4;
        E18_CONST_3 = 27;
        E18_CONST_4 = 106;
        E18_CONST_5 = 34;
      }
      optional E18 f_1 = 3;
      optional bool f_2 = 4;
      optional int32 f_3 = 5;
      optional double f_4 = 6;
      optional fixed64 f_5 = 10;
      optional string f_6 = 12;
      optional int32 f_7 = 13;
      optional string f_8 = 14;
      optional int32 f_9 = 16;
      optional string f_10 = 19;
      optional int32 f_11 = 20;
      optional int32 f_12 = 21;
      optional fixed64 f_13 = 23;
      optional int32 f_14 = 24;
      message M46 {
        optional string f_0 = 1;
        message M66 {
          optional int32 f_0 = 1;
        }
        repeated M66 f_2 = 2;
      }
      optional M46 f_26 = 26;
    }
    repeated M30 f_4 = 4;
  }
  optional M3 f_50 = 50;
  message M4 {
    optional int32 f_0 = 1;
    optional bool f_1 = 2;
    optional fixed64 f_2 = 4;
    optional int32 f_3 = 6;
    message M32 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 5;
      optional fixed64 f_2 = 6;
      optional int32 f_3 = 7;
      enum E19 {
        E19_UNSPECIFIED = 0;
        E19_CONST_1 = 72;
        E19_CONST_2 = 77;
        E19_CONST_3 = 46;
        E19_CONST_4 = 111;
        E19_CONST_5 = 14;
      }
      repeated E19 f_4 = 8 [packed = true];
      optional bool f_5 = 9;
    }
    optional M32 f_8 = 8;
  }
  repeated M4 f_51 = 51;
  message M5 {
    optional fixed64 f_0 = 1;
    message M21 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional string f_2 = 4;
      optional string f_3 = 5;
      optional int32 f_4 = 7;
      optional int64 f_5 = 8;
      optional bool f_6 = 10;
      optional fixed64 f_7 = 12;
    }
    optional M21 f_2 = 2;
    message M25 {
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 117;
        E9_CONST_2 = 12;
        E9_CONST_3 = 10;
        E9_CONST_4 = 42;
        E9_CONST_5 = 22;
      }
      repeated E9 f_0 = 2 [packed = true];
      optional int32 f_1 = 3;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 85;
        E10_CONST_2 = 78;
        E10_CONST_3 = 51;
        E10_CONST_4 = 11;
        E10_CONST_5 = 33;
      }
      optional E10 f_2 = 4;
      optional string f_3 = 5;
      message M39 {
        optional int32 f_0 = 1;
        message M65 {
          optional bytes f_0 = 1;
          optional string f_1 = 2;
          optional string f_2 = 3;
          repeated string f_3 = 4;
          optional fixed32 f_4 = 5;
        }
        optional M65 f_2 = 2;
      }
      optional M39 f_6 = 6;
      message M41 {
        optional int32 f_0 = 2;
        message M69 {
          enum E25 {
            E25_UNSPECIFIED = 0;
            E25_CONST_1 = 99;
            E25_CONST_2 = 11;
            E25_CONST_3 = 108;
            E25_CONST_4 = 58;
            E25_CONST_5 = 112;
          }
          repeated E25 f_0 = 1 [packed = true];
          optional string f_1 = 2;
          optional fixed64 f_2 = 3;
          optional int32 f_3 = 5;
          message M78 {
            optional fixed64 f_0 = 1;
          }
          optional M78 f_6 = 6;
        }
        optional M69 f_5 = 5;
        message M75 {
          optional double f_0 = 3;
          optional int32 f_1 = 5;
          message M79 {
            enum E28 {
              E28_UNSPECIFIED = 0;
              E28_CONST_1 = 80;
              E28_CONST_2 = 73;
              E28_CONST_3 = 94;
              E28_CONST_4 = 6;
              E28_CONST_5 = 33;
            }
            repeated E28 f_0 = 2 [packed = true];
          }
          optional M79 f_6 = 6;
        }
        optional M75 f_7 = 7;
      }
      repeated M41 f_7 = 7;
    }
    optional M25 f_3 = 3;
    message M26 {
      optional uint64 f_0 = 1;
    }
    optional M26 f_4 = 4;
    message M34 {
      enum E20 {
        E20_UNSPECIFIED = 0;
        E20_CONST_1 = 101;
        E20_CONST_2 = 89;
        E20_CONST_3 = 123;
        E20_CONST_4 = 19;
        E20_CONST_5 = 45;
      }
      optional E20 f_0 = 1;
      message M44 {
        enum E22 {
          E22_UNSPECIFIED = 0;
          E22_CONST_1 = 56;
          E22_CONST_2 = 106;
          E22_CONST_3 = 82;
          E22_CONST_4 = 54;
          E22_CONST_5 = 90;
        }
        optional E22 f_0 = 2;
        message M61 {
          optional int32 f_0 = 2;
        }
        optional M61 f_3 = 3;
      }
      repeated M44 f_3 = 3;
    }
    optional M34 f_5 = 5;
  }
  optional M5 f_54 = 54;
  message M6 {
    optional string f_0 = 1;
    optional string f_1 = 2;
    optional fixed64 f_2 = 3;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 42;
      E3_CONST_2 = 35;
      E3_CONST_3 = 123;
      E3_CONST_4 = 81;
      E3_CONST_5 = 115;
    }
    optional E3 f_3 = 4;
    optional double f_4 = 5;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 25;
      E4_CONST_2 = 37;
      E4_CONST_3 = 21;
      E4_CONST_4 = 96;
      E4_CONST_5 = 58;
    }
    repeated E4 f_5 = 6 [packed = true];
    optional int32 f_6 = 9;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 49;
      E5_CONST_2 = 120;
      E5_CONST_3 = 58;
      E5_CONST_4 = 11;
      E5_CONST_5 = 102;
    }
    optional E5 f_7 = 10;
    optional string f_8 = 11;
    optional int32 f_9 = 14;
    optional string f_10 = 15;
    message M17 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 44;
        E7_CONST_2 = 26;
        E7_CONST_3 = 118;
        E7_CONST_4 = 57;
        E7_CONST_5 = 21;
      }
      repeated E7 f_0 = 1 [packed = true];
      message M40 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 5;
        optional int32 f_4 = 7;
      }
      optional M40 f_3 = 3;
    }
    repeated M17 f_16 = 16;
  }
  optional M6 f_55 = 55;
  message M7 {
    optional string f_0 = 1;
    optional string f_1 = 2;
    optional fixed64 f_2 = 3;
    optional fixed64 f_3 = 4;
    optional fixed64 f_4 = 7;
    optional string f_5 = 8;
    repeated string f_6 = 9;
    message M12 {
      optional string f_0 = 1;
    }
    optional M12 f_10 = 10;
    message M19 {
      optional fixed64 f_0 = 1;
      message M50 {
        optional int32 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional bool f_2 = 4;
        optional bytes f_3 = 6;
        message M63 {
          optional bool f_0 = 3;
          optional string f_1 = 4;
          optional string f_2 = 5;
          optional fixed64 f_3 = 7;
        }
        optional M63 f_8 = 8;
      }
      repeated M50 f_2 = 2;
    }
    optional M19 f_11 = 11;
    message M20 {
      optional fixed64 f_0 = 1;
    }
    repeated M20 f_12 = 12;
    message M23 {
      optional fixed64 f_0 = 2;
      message M45 {
        optional bool f_0 = 1;
        message M60 {
          optional fixed64 f_0 = 1;
          message M80 {
            optional fixed32 f_0 = 1;
            optional bool f_1 = 2;
            optional bool f_2 = 4;
            optional string f_3 = 5;
            optional int32 f_4 = 6;
          }
          repeated M80 f_2 = 2;
        }
        optional M60 f_2 = 2;
      }
      optional M45 f_3 = 3;
    }
    optional M23 f_13 = 13;
    message M28 {
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 98;
        E14_CONST_2 = 32;
        E14_CONST_3 = 72;
        E14_CONST_4 = 27;
        E14_CONST_5 = 37;
      }
      optional E14 f_0 = 1;
      message M36 {
        optional int32 f_0 = 2;
        message M56 {
          optional fixed32 f_0 = 1;
          optional bool f_1 = 2;
          optional fixed64 f_2 = 3;
        }
        optional M56 f_4 = 4;
        message M57 {
          optional int32 f_0 = 1;
          message M82 {
            optional int32 f_0 = 2;
            enum E29 {
              E29_UNSPECIFIED = 0;
              E29_CONST_1 = 55;
              E29_CONST_2 = 57;
              E29_CONST_3 = 19;
              E29_CONST_4 = 2;
              E29_CONST_5 = 105;
            }
            repeated E29 f_1 = 3 [packed = true];
            optional fixed32 f_2 = 5;
            optional int32 f_3 = 6;
          }
          optional M82 f_3 = 3;
        }
        optional M57 f_5 = 5;
      }
      optional M36 f_3 = 3;
    }
    repeated M28 f_14 = 14;
  }
  optional M7 f_56 = 56;
  message M8 {
    optional string f_0 = 3;
    message M13 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 99;
        E6_CONST_2 = 86;
        E6_CONST_3 = 114;
        E6_CONST_4 = 72;
        E6_CONST_5 = 78;
      }
      repeated E6 f_0 = 1 [packed = true];
      message M51 {
        optional fixed32 f_0 = 1;
        message M72 {
          optional bool f_0 = 1;
        }
        repeated M72 f_3 = 3;
      }
      optional M51 f_2 = 2;
    }
    repeated M13 f_4 = 4;
    message M14 {
      optional bytes f_0 = 1;
      message M37 {
        optional fixed32 f_0 = 1;
        message M58 {
          optional string f_0 = 1;
        }
        optional M58 f_2 = 2;
        message M67 {
          optional fixed64 f_0 = 2;
          optional fixed64 f_1 = 3;
          optional int32 f_2 = 4;
          optional fixed64 f_3 = 6;
          optional int32 f_4 = 7;
          optional int32 f_5 = 10;
          optional fixed64 f_6 = 11;
          optional int32 f_7 = 13;
          optional bool f_8 = 14;
          optional double f_9 = 15;
          optional string f_10 = 16;
          optional fixed64 f_11 = 17;
          optional fixed64 f_12 = 19;
          optional int32 f_13 = 20;
          optional int32 f_14 = 21;
          optional string f_15 = 22;
          optional int32 f_16 = 25;
          enum E24 {
            E24_UNSPECIFIED = 0;
            E24_CONST_1 = 91;
            E24_CONST_2 = 104;
            E24_CONST_3 = 93;
            E24_CONST_4 = 66;
            E24_CONST_5 = 38;
          }
          repeated E24 f_17 = 26 [packed = true];
          optional fixed64 f_18 = 27;
          optional double f_19 = 28;
          optional bool f_20 = 29;
        }
        repeated M67 f_4 = 4;
        message M73 {
          optional fixed64 f_0 = 1;
        }
        optional M73 f_5 = 5;
        message M74 {
          optional int32 f_0 = 2;
          message M84 {
            optional bool f_0 = 1;
            optional int32 f_1 = 4;
            optional int32 f_2 = 5;
            optional fixed64 f_3 = 7;
            optional int32 f_4 = 8;
            optional fixed64 f_5 = 9;
            optional int32 f_6 = 10;
            optional int32 f_7 = 12;
            optional double f_8 = 13;
            optional bool f_9 = 14;
            optional double f_10 = 15;
            optional fixed64 f_11 = 16;
            optional fixed64 f_12 = 17;
          }
          repeated M84 f_3 = 3;
        }
        repeated M74 f_6 = 6;
        message M77 {
          enum E27 {
            E27_UNSPECIFIED = 0;
            E27_CONST_1 = 98;
            E27_CONST_2 = 57;
            E27_CONST_3 = 59;
            E27_CONST_4 = 6;
            E27_CONST_5 = 3;
          }
          repeated E27 f_0 = 1 [packed = true];
          optional string f_1 = 2;
        }
        optional M77 f_8 = 8;
      }
      optional M37 f_2 = 2;
    }
    optional M14 f_6 = 6;
  }
  repeated M8 f_57 = 57;
  message M9 {
    optional double f_0 = 1;
    optional fixed64 f_1 = 3;
    optional fixed64 f_2 = 4;
    optional string f_3 = 7;
    message M27 {
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 50;
        E11_CONST_2 = 88;
        E11_CONST_3 = 17;
        E11_CONST_4 = 71;
        E11_CONST_5 = 51;
      }
      optional E11 f_0 = 3;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 122;
        E12_CONST_2 = 93;
        E12_CONST_3 = 40;
        E12_CONST_4 = 43;
        E12_CONST_5 = 121;
      }
      optional E12 f_1 = 4;
      optional fixed32 f_2 = 5;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 6;
        E13_CONST_2 = 16;
        E13_CONST_3 = 51;
        E13_CONST_4 = 57;
        E13_CONST_5 = 77;
      }
      repeated E13 f_3 = 6 [packed = true];
      optional int32 f_4 = 7;
      message M52 {
        optional int64 f_0 = 1;
      }
      repeated M52 f_8 = 8;
    }
    repeated M27 f_9 = 9;
  }
  repeated M9 f_58 = 58;
  message M10 {
    optional fixed64 f_0 = 1;
    message M11 {
      optional bool f_0 = 1;
      message M42 {
        optional bool f_0 = 1;
        optional int32 f_1 = 3;
      }
      repeated M42 f_2 = 2;
      message M48 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 3;
        optional int32 f_2 = 4;
        optional fixed64 f_3 = 5;
        optional string f_4 = 6;
        message M70 {
          optional int32 f_0 = 1;
        }
        repeated M70 f_7 = 7;
      }
      optional M48 f_4 = 4;
      message M54 {
        optional string f_0 = 1;
        message M59 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 2;
          optional int32 f_2 = 3;
          message M83 {
            optional bool f_0 = 1;
          }
          optional M83 f_4 = 4;
        }
        optional M59 f_2 = 2;
      }
      optional M54 f_5 = 5;
    }
    optional M11 f_2 = 2;
    message M16 {
      optional string f_0 = 1;
    }
    optional M16 f_3 = 3;
    message M22 {
      optional int32 f_0 = 1;
      optional bool f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional fixed64 f_4 = 6;
      optional double f_5 = 7;
      optional int32 f_6 = 8;
      message M35 {
        enum E21 {
          E21_UNSPECIFIED = 0;
          E21_CONST_1 = 42;
          E21_CONST_2 = 100;
          E21_CONST_3 = 58;
          E21_CONST_4 = 118;
          E21_CONST_5 = 37;
        }
        optional E21 f_0 = 1;
      }
      repeated M35 f_10 = 10;
      message M43 {
        optional string f_0 = 2;
      }
      optional M43 f_11 = 11;
    }
    optional M22 f_4 = 4;
    message M29 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      enum E15 {
        E15_UNSPECIFIED = 0;
        E15_CONST_1 = 82;
        E15_CONST_2 = 100;
        E15_CONST_3 = 27;
        E15_CONST_4 = 97;
        E15_CONST_5 = 124;
      }
      optional E15 f_3 = 5;
      enum E16 {
        E16_UNSPECIFIED = 0;
        E16_CONST_1 = 97;
        E16_CONST_2 = 64;
        E16_CONST_3 = 31;
        E16_CONST_4 = 67;
        E16_CONST_5 = 53;
      }
      optional E16 f_4 = 6;
      optional string f_5 = 7;
      enum E17 {
        E17_UNSPECIFIED = 0;
        E17_CONST_1 = 114;
        E17_CONST_2 = 31;
        E17_CONST_3 = 101;
        E17_CONST_4 = 40;
        E17_CONST_5 = 20;
      }
      optional E17 f_6 = 9;
      optional int32 f_7 = 10;
      optional double f_8 = 11;
      message M55 {
        optional string f_0 = 1;
        optional int32 f_1 = 2;
        message M62 {
          repeated string f_0 = 2;
          message M81 {
            optional fixed64 f_0 = 1;
            optional string f_1 = 2;
            optional int32 f_2 = 3;
            optional bool f_3 = 4;
            message M85 {
              optional int32 f_0 = 1;
              optional int32 f_1 = 3;
              optional fixed64 f_2 = 4;
              optional fixed64 f_3 = 5;
            }
            optional M85 f_6 = 6;
          }
          optional M81 f_4 = 4;
        }
        optional M62 f_4 = 4;
        message M68 {
          optional fixed64 f_0 = 3;
        }
        optional M68 f_5 = 5;
      }
      optional M55 f_12 = 12;
    }
    repeated M29 f_5 = 5;
  }
  optional M10 f_59 = 59;
}
