// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P4.request.Message1;

message Message1 {
  optional int32 f_0 = 3;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 98;
    E1_CONST_2 = 88;
    E1_CONST_3 = 11;
    E1_CONST_4 = 85;
    E1_CONST_5 = 102;
  }
  repeated E1 f_1 = 6 [packed = true];
  optional double f_2 = 8;
  optional double f_3 = 9;
  optional fixed64 f_4 = 11;
  optional int32 f_5 = 12;
  optional int32 f_6 = 16;
  optional int32 f_7 = 17;
  optional int32 f_8 = 18;
  optional string f_9 = 19;
  optional fixed64 f_10 = 20;
  optional string f_11 = 22;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 103;
    E2_CONST_2 = 75;
    E2_CONST_3 = 56;
    E2_CONST_4 = 7;
    E2_CONST_5 = 49;
  }
  optional E2 f_12 = 24;
  optional bool f_13 = 26;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 77;
    E3_CONST_2 = 21;
    E3_CONST_3 = 116;
    E3_CONST_4 = 13;
    E3_CONST_5 = 23;
  }
  optional E3 f_14 = 27;
  optional fixed64 f_15 = 28;
  optional int32 f_16 = 30;
  optional fixed64 f_17 = 32;
  optional fixed32 f_18 = 33;
  optional int32 f_19 = 34;
  optional double f_20 = 35;
  optional bool f_21 = 38;
  optional int32 f_22 = 41;
  optional int32 f_23 = 42;
  optional int32 f_24 = 43;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 2;
    E4_CONST_2 = 27;
    E4_CONST_3 = 109;
    E4_CONST_4 = 98;
    E4_CONST_5 = 74;
  }
  repeated E4 f_25 = 45 [packed = true];
  optional double f_26 = 46;
  optional fixed64 f_27 = 47;
  optional fixed64 f_28 = 48;
  optional string f_29 = 51;
  message M1 {
    optional bool f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 4;
    message M11 {
      optional fixed64 f_0 = 3;
      message M19 {
        optional int32 f_0 = 1;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 62;
          E16_CONST_2 = 55;
          E16_CONST_3 = 54;
          E16_CONST_4 = 125;
          E16_CONST_5 = 123;
        }
        repeated E16 f_1 = 2 [packed = true];
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 104;
          E17_CONST_2 = 36;
          E17_CONST_3 = 50;
          E17_CONST_4 = 87;
          E17_CONST_5 = 88;
        }
        repeated E17 f_2 = 4 [packed = true];
        optional int32 f_3 = 5;
        optional int32 f_4 = 6;
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 30;
          E18_CONST_2 = 126;
          E18_CONST_3 = 62;
          E18_CONST_4 = 101;
          E18_CONST_5 = 50;
        }
        repeated E18 f_5 = 7 [packed = true];
        optional fixed64 f_6 = 8;
        optional fixed64 f_7 = 9;
        optional fixed64 f_8 = 11;
        message M25 {
          optional int32 f_0 = 1;
        }
        optional M25 f_12 = 12;
        message M26 {
          optional int32 f_0 = 1;
          optional double f_1 = 2;
        }
        optional M26 f_13 = 13;
        message M30 {
          optional int32 f_0 = 1;
          message M31 {
            optional int32 f_0 = 3;
          }
          repeated M31 f_2 = 2;
        }
        optional M30 f_15 = 15;
      }
      repeated M19 f_4 = 4;
    }
    optional M11 f_5 = 5;
    message M13 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 4;
    }
    optional M13 f_6 = 6;
    message M16 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional string f_2 = 4;
      optional fixed64 f_3 = 5;
      optional int32 f_4 = 7;
      optional int32 f_5 = 8;
      optional int32 f_6 = 9;
      optional fixed64 f_7 = 11;
      optional string f_8 = 13;
      optional int64 f_9 = 15;
      optional fixed32 f_10 = 16;
      optional bool f_11 = 17;
      optional int32 f_12 = 20;
      optional fixed64 f_13 = 21;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 13;
        E11_CONST_2 = 20;
        E11_CONST_3 = 93;
        E11_CONST_4 = 118;
        E11_CONST_5 = 38;
      }
      optional E11 f_14 = 22;
      optional string f_15 = 25;
      optional fixed64 f_16 = 26;
      optional double f_17 = 28;
      optional string f_18 = 29;
      optional string f_19 = 30;
      optional int32 f_20 = 31;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 12;
        E12_CONST_2 = 64;
        E12_CONST_3 = 34;
        E12_CONST_4 = 9;
        E12_CONST_5 = 8;
      }
      optional E12 f_21 = 32;
      optional string f_22 = 33;
      optional bool f_23 = 34;
      optional int32 f_24 = 35;
      optional int32 f_25 = 37;
      optional string f_26 = 38;
      optional bool f_27 = 40;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 70;
        E13_CONST_2 = 123;
        E13_CONST_3 = 13;
        E13_CONST_4 = 29;
        E13_CONST_5 = 92;
      }
      repeated E13 f_28 = 42 [packed = true];
      optional bytes f_29 = 43;
      optional string f_30 = 44;
      optional bool f_31 = 45;
      optional int32 f_32 = 48;
      message M17 {
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 38;
          E14_CONST_2 = 83;
          E14_CONST_3 = 97;
          E14_CONST_4 = 116;
          E14_CONST_5 = 106;
        }
        repeated E14 f_0 = 2 [packed = true];
        message M28 {
          optional fixed32 f_0 = 2;
        }
        repeated M28 f_4 = 4;
      }
      optional M17 f_50 = 50;
    }
    optional M16 f_7 = 7;
  }
  optional M1 f_56 = 56;
  message M2 {
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 22;
      E5_CONST_2 = 109;
      E5_CONST_3 = 51;
      E5_CONST_4 = 68;
      E5_CONST_5 = 13;
    }
    repeated E5 f_0 = 1 [packed = true];
    optional bool f_1 = 3;
    optional string f_2 = 4;
    optional int64 f_3 = 5;
    optional string f_4 = 6;
    optional fixed64 f_5 = 7;
    message M7 {
      optional string f_0 = 1;
      optional bool f_1 = 2;
      optional int32 f_2 = 4;
      optional int32 f_3 = 6;
      optional string f_4 = 7;
      optional fixed64 f_5 = 9;
      optional int32 f_6 = 11;
    }
    optional M7 f_8 = 8;
    message M8 {
      optional string f_0 = 3;
    }
    optional M8 f_10 = 10;
    message M10 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 4;
    }
    optional M10 f_11 = 11;
  }
  optional M2 f_57 = 57;
  message M3 {
    optional int64 f_0 = 2;
    message M9 {
      optional string f_0 = 1;
      message M21 {
        optional bool f_0 = 2;
        optional int32 f_1 = 4;
        optional fixed64 f_2 = 5;
        optional int32 f_3 = 6;
        optional string f_4 = 8;
        message M29 {
          enum E21 {
            E21_UNSPECIFIED = 0;
            E21_CONST_1 = 47;
            E21_CONST_2 = 110;
            E21_CONST_3 = 7;
            E21_CONST_4 = 91;
            E21_CONST_5 = 122;
          }
          repeated E21 f_0 = 2 [packed = true];
          optional int32 f_1 = 4;
          optional int32 f_2 = 6;
          enum E22 {
            E22_UNSPECIFIED = 0;
            E22_CONST_1 = 59;
            E22_CONST_2 = 93;
            E22_CONST_3 = 75;
            E22_CONST_4 = 32;
            E22_CONST_5 = 22;
          }
          repeated E22 f_3 = 8 [packed = true];
        }
        optional M29 f_10 = 10;
      }
      optional M21 f_3 = 3;
      message M22 {
        optional bool f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
        optional int64 f_3 = 4;
        optional fixed64 f_4 = 5;
        optional bytes f_5 = 7;
        optional int32 f_6 = 8;
        optional fixed64 f_7 = 9;
        optional bool f_8 = 10;
        optional fixed32 f_9 = 12;
        optional int32 f_10 = 13;
        optional bool f_11 = 14;
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 80;
          E19_CONST_2 = 61;
          E19_CONST_3 = 115;
          E19_CONST_4 = 11;
          E19_CONST_5 = 126;
        }
        repeated E19 f_12 = 15 [packed = true];
        optional fixed64 f_13 = 16;
        optional fixed64 f_14 = 17;
        optional bool f_15 = 20;
        optional bool f_16 = 21;
        optional fixed64 f_17 = 25;
        optional string f_18 = 26;
        optional int32 f_19 = 28;
        optional int32 f_20 = 29;
        optional int32 f_21 = 30;
        optional fixed64 f_22 = 31;
        optional bool f_23 = 32;
        optional int32 f_24 = 33;
        enum E20 {
          E20_UNSPECIFIED = 0;
          E20_CONST_1 = 120;
          E20_CONST_2 = 105;
          E20_CONST_3 = 94;
          E20_CONST_4 = 69;
          E20_CONST_5 = 108;
        }
        optional E20 f_25 = 34;
        optional bool f_26 = 35;
        optional double f_27 = 36;
        optional fixed64 f_28 = 38;
        optional string f_29 = 40;
        optional int32 f_30 = 41;
        optional bool f_31 = 42;
        message M23 {
          optional int32 f_0 = 1;
          optional bool f_1 = 3;
          optional fixed64 f_2 = 5;
          message M32 {
            optional bool f_0 = 1;
            optional int32 f_1 = 3;
            optional bool f_2 = 4;
            optional fixed32 f_3 = 6;
            optional fixed64 f_4 = 7;
            optional int32 f_5 = 8;
            optional int32 f_6 = 10;
            optional string f_7 = 12;
            optional int32 f_8 = 13;
            optional double f_9 = 14;
            optional string f_10 = 16;
            optional int32 f_11 = 18;
            optional fixed64 f_12 = 19;
            optional string f_13 = 20;
            optional int32 f_14 = 21;
            optional int64 f_15 = 22;
            optional string f_16 = 23;
            optional int32 f_17 = 24;
            optional int32 f_18 = 28;
            optional int32 f_19 = 30;
            optional fixed32 f_20 = 32;
            enum E23 {
              E23_UNSPECIFIED = 0;
              E23_CONST_1 = 60;
              E23_CONST_2 = 34;
              E23_CONST_3 = 29;
              E23_CONST_4 = 32;
              E23_CONST_5 = 85;
            }
            repeated E23 f_21 = 33 [packed = true];
          }
          optional M32 f_6 = 6;
        }
        optional M23 f_43 = 43;
        message M24 {
          optional bool f_0 = 2;
          optional fixed64 f_1 = 3;
          optional fixed64 f_2 = 4;
          optional bytes f_3 = 6;
        }
        optional M24 f_45 = 45;
      }
      optional M22 f_4 = 4;
    }
    optional M9 f_3 = 3;
  }
  optional M3 f_58 = 58;
  message M4 {
    optional bytes f_0 = 1;
    optional fixed32 f_1 = 2;
    optional int32 f_2 = 3;
    optional string f_3 = 4;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 32;
      E6_CONST_2 = 21;
      E6_CONST_3 = 71;
      E6_CONST_4 = 89;
      E6_CONST_5 = 28;
    }
    repeated E6 f_4 = 5 [packed = true];
    optional bool f_5 = 8;
    message M12 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 4;
      optional string f_2 = 6;
      optional fixed64 f_3 = 7;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 18;
        E9_CONST_2 = 92;
        E9_CONST_3 = 91;
        E9_CONST_4 = 117;
        E9_CONST_5 = 94;
      }
      repeated E9 f_4 = 8 [packed = true];
    }
    optional M12 f_9 = 9;
  }
  optional M4 f_59 = 59;
  message M5 {
    optional bool f_0 = 1;
    optional fixed64 f_1 = 2;
    optional int32 f_2 = 4;
    optional int32 f_3 = 6;
    optional string f_4 = 7;
    optional string f_5 = 9;
    optional bool f_6 = 10;
    optional string f_7 = 11;
    optional fixed64 f_8 = 13;
    optional fixed64 f_9 = 14;
    optional fixed64 f_10 = 16;
    optional fixed64 f_11 = 20;
    optional string f_12 = 22;
    optional bool f_13 = 23;
    optional string f_14 = 24;
    optional string f_15 = 25;
    optional fixed64 f_16 = 26;
    optional double f_17 = 28;
    optional bytes f_18 = 29;
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 110;
      E7_CONST_2 = 68;
      E7_CONST_3 = 59;
      E7_CONST_4 = 5;
      E7_CONST_5 = 111;
    }
    optional E7 f_19 = 31;
    optional double f_20 = 32;
    optional int32 f_21 = 33;
    optional fixed64 f_22 = 35;
    optional bool f_23 = 37;
    optional fixed64 f_24 = 38;
    optional int32 f_25 = 39;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 112;
      E8_CONST_2 = 55;
      E8_CONST_3 = 125;
      E8_CONST_4 = 25;
      E8_CONST_5 = 60;
    }
    repeated E8 f_26 = 40 [packed = true];
    optional string f_27 = 41;
    optional int32 f_28 = 44;
    optional bool f_29 = 46;
    message M6 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional string f_2 = 3;
      optional int32 f_3 = 4;
    }
    repeated M6 f_48 = 48;
    message M14 {
      optional fixed64 f_0 = 1;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 107;
        E10_CONST_2 = 65;
        E10_CONST_3 = 62;
        E10_CONST_4 = 76;
        E10_CONST_5 = 40;
      }
      repeated E10 f_1 = 4 [packed = true];
      optional fixed32 f_2 = 6;
      optional int32 f_3 = 8;
      optional fixed64 f_4 = 10;
    }
    optional M14 f_50 = 50;
    message M15 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 3;
      optional string f_2 = 5;
      optional fixed64 f_3 = 6;
      message M18 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 2;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 67;
          E15_CONST_2 = 52;
          E15_CONST_3 = 11;
          E15_CONST_4 = 97;
          E15_CONST_5 = 55;
        }
        optional E15 f_2 = 3;
        optional int32 f_3 = 5;
        optional fixed64 f_4 = 8;
        optional fixed64 f_5 = 9;
        message M27 {
          optional bool f_0 = 1;
          optional double f_1 = 2;
          optional fixed64 f_2 = 3;
        }
        optional M27 f_10 = 10;
      }
      repeated M18 f_8 = 8;
      message M20 {
        optional int32 f_0 = 1;
      }
      optional M20 f_9 = 9;
    }
    optional M15 f_52 = 52;
  }
  repeated M5 f_61 = 61;
}
