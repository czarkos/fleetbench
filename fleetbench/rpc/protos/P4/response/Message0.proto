// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P4.response.Message0;

message Message0 {
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 76;
    E1_CONST_2 = 95;
    E1_CONST_3 = 15;
    E1_CONST_4 = 34;
    E1_CONST_5 = 5;
  }
  repeated E1 f_0 = 1 [packed = true];
  optional double f_1 = 3;
  optional fixed64 f_2 = 4;
  optional int64 f_3 = 5;
  optional double f_4 = 6;
  optional string f_5 = 8;
  optional int32 f_6 = 11;
  optional int32 f_7 = 12;
  optional float f_8 = 15;
  optional fixed64 f_9 = 16;
  optional double f_10 = 17;
  optional string f_11 = 18;
  optional float f_12 = 19;
  optional string f_13 = 20;
  optional double f_14 = 21;
  optional int32 f_15 = 23;
  optional double f_16 = 24;
  optional fixed64 f_17 = 25;
  optional int32 f_18 = 26;
  optional double f_19 = 27;
  optional string f_20 = 28;
  optional int32 f_21 = 29;
  optional double f_22 = 31;
  optional string f_23 = 32;
  message M1 {
    optional double f_0 = 1;
    message M13 {
      optional double f_0 = 2;
      message M23 {
        optional int32 f_0 = 1;
        optional string f_1 = 3;
        optional int64 f_2 = 5;
        optional fixed64 f_3 = 6;
        optional float f_4 = 7;
        optional string f_5 = 8;
        optional int32 f_6 = 9;
        optional fixed64 f_7 = 10;
        optional float f_8 = 11;
        optional int32 f_9 = 12;
        optional int32 f_10 = 13;
        optional int32 f_11 = 14;
        optional float f_12 = 15;
        optional float f_13 = 16;
        optional string f_14 = 17;
        optional fixed64 f_15 = 18;
        optional fixed64 f_16 = 19;
        optional double f_17 = 20;
        optional float f_18 = 21;
        optional int32 f_19 = 23;
        optional int64 f_20 = 24;
        optional int64 f_21 = 26;
      }
      repeated M23 f_4 = 4;
    }
    optional M13 f_2 = 2;
    message M14 {
      optional string f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional float f_3 = 4;
      optional int64 f_4 = 5;
    }
    optional M14 f_5 = 5;
    message M17 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 5;
      optional float f_4 = 7;
      optional fixed64 f_5 = 8;
      message M25 {
        optional string f_0 = 1;
      }
      optional M25 f_9 = 9;
    }
    repeated M17 f_6 = 6;
  }
  optional M1 f_33 = 33;
  message M2 {
    optional double f_0 = 1;
    message M4 {
      optional float f_0 = 1;
      optional string f_1 = 4;
      repeated bool f_2 = 5 [packed = true];
      optional double f_3 = 6;
      optional int32 f_4 = 7;
    }
    optional M4 f_2 = 2;
    message M6 {
      optional float f_0 = 1;
      optional double f_1 = 2;
      optional string f_2 = 4;
      optional string f_3 = 5;
      message M22 {
        optional string f_0 = 1;
        optional int64 f_1 = 3;
        message M29 {
          optional float f_0 = 1;
          optional fixed64 f_1 = 2;
          optional int32 f_2 = 3;
          optional float f_3 = 4;
          optional string f_4 = 5;
          optional int32 f_5 = 6;
          optional int64 f_6 = 7;
          optional double f_7 = 8;
          optional bool f_8 = 9;
        }
        optional M29 f_4 = 4;
      }
      repeated M22 f_6 = 6;
    }
    repeated M6 f_3 = 3;
    message M8 {
      optional double f_0 = 1;
      message M24 {
        optional string f_0 = 1;
        message M28 {
          optional fixed64 f_0 = 1;
          optional float f_1 = 2;
          message M30 {
            optional fixed64 f_0 = 1;
            optional float f_1 = 2;
            optional double f_2 = 3;
            optional float f_3 = 5;
            optional string f_4 = 6;
            optional fixed64 f_5 = 7;
            optional int32 f_6 = 8;
            optional double f_7 = 9;
            optional int64 f_8 = 10;
          }
          repeated M30 f_3 = 3;
        }
        optional M28 f_3 = 3;
      }
      repeated M24 f_2 = 2;
    }
    optional M8 f_4 = 4;
    message M10 {
      optional int32 f_0 = 1;
    }
    optional M10 f_6 = 6;
    message M11 {
      optional int64 f_0 = 1;
    }
    optional M11 f_7 = 7;
    message M16 {
      optional string f_0 = 2;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional int64 f_3 = 5;
    }
    optional M16 f_8 = 8;
  }
  optional M2 f_34 = 34;
  message M3 {
    optional float f_0 = 1;
    optional double f_1 = 2;
    message M5 {
      optional string f_0 = 1;
    }
    optional M5 f_3 = 3;
    message M7 {
      optional float f_0 = 1;
    }
    repeated M7 f_4 = 4;
    message M9 {
      optional string f_0 = 1;
    }
    optional M9 f_5 = 5;
    message M12 {
      optional float f_0 = 1;
      message M27 {
        optional float f_0 = 1;
        optional float f_1 = 3;
      }
      repeated M27 f_2 = 2;
    }
    repeated M12 f_6 = 6;
    message M15 {
      optional double f_0 = 1;
    }
    optional M15 f_7 = 7;
    message M18 {
      optional int32 f_0 = 2;
    }
    optional M18 f_8 = 8;
    message M19 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 39;
        E2_CONST_2 = 1;
        E2_CONST_3 = 73;
        E2_CONST_4 = 26;
        E2_CONST_5 = 7;
      }
      repeated E2 f_2 = 3 [packed = true];
      optional int32 f_3 = 5;
      optional float f_4 = 7;
      message M26 {
        optional int32 f_0 = 1;
        optional string f_1 = 2;
        enum E3 {
          E3_UNSPECIFIED = 0;
          E3_CONST_1 = 25;
          E3_CONST_2 = 68;
          E3_CONST_3 = 53;
          E3_CONST_4 = 48;
          E3_CONST_5 = 23;
        }
        optional E3 f_2 = 3;
        optional int32 f_3 = 4;
      }
      optional M26 f_8 = 8;
    }
    optional M19 f_9 = 9;
    message M20 {
      optional int64 f_0 = 1;
      optional float f_1 = 2;
      optional string f_2 = 3;
    }
    optional M20 f_10 = 10;
    message M21 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional double f_2 = 3;
      optional float f_3 = 4;
    }
    repeated M21 f_11 = 11;
  }
  optional M3 f_35 = 35;
}
