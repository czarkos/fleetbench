// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P4.response.Message2;

message Message2 {
  optional int64 f_0 = 2;
  optional double f_1 = 4;
  optional int64 f_2 = 5;
  optional fixed64 f_3 = 6;
  optional int32 f_4 = 7;
  optional string f_5 = 10;
  optional fixed64 f_6 = 11;
  optional int64 f_7 = 12;
  optional double f_8 = 14;
  optional double f_9 = 15;
  optional int32 f_10 = 16;
  optional double f_11 = 17;
  optional int64 f_12 = 18;
  optional int32 f_13 = 19;
  optional double f_14 = 22;
  optional double f_15 = 23;
  optional float f_16 = 24;
  optional double f_17 = 26;
  optional float f_18 = 27;
  optional fixed64 f_19 = 28;
  optional float f_20 = 29;
  optional double f_21 = 31;
  optional float f_22 = 32;
  optional int64 f_23 = 33;
  message M1 {
    optional string f_0 = 1;
    optional int32 f_1 = 2;
    message M10 {
      optional fixed64 f_0 = 1;
    }
    optional M10 f_3 = 3;
    message M12 {
      optional float f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
    }
    optional M12 f_4 = 4;
    message M16 {
      optional fixed64 f_0 = 1;
    }
    repeated M16 f_5 = 5;
    message M21 {
      optional double f_0 = 2;
    }
    optional M21 f_6 = 6;
    message M27 {
      optional double f_0 = 1;
    }
    repeated M27 f_8 = 8;
  }
  optional M1 f_34 = 34;
  message M2 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 2;
    message M24 {
      optional fixed64 f_0 = 1;
    }
    optional M24 f_4 = 4;
    message M29 {
      optional string f_0 = 1;
    }
    optional M29 f_5 = 5;
  }
  optional M2 f_36 = 36;
  message M3 {
    optional int32 f_0 = 1;
    message M13 {
      optional double f_0 = 1;
    }
    optional M13 f_2 = 2;
    message M19 {
      optional double f_0 = 2;
    }
    optional M19 f_3 = 3;
  }
  optional M3 f_37 = 37;
  message M4 {
    optional string f_0 = 1;
    message M11 {
      optional string f_0 = 1;
      optional double f_1 = 2;
      optional string f_2 = 3;
      optional string f_3 = 4;
      optional int32 f_4 = 5;
    }
    optional M11 f_3 = 3;
  }
  optional M4 f_38 = 38;
  message M5 {
    optional int32 f_0 = 1;
    message M17 {
      optional string f_0 = 1;
      optional float f_1 = 2;
      optional fixed64 f_2 = 3;
      optional string f_3 = 5;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 9;
        E3_CONST_2 = 2;
        E3_CONST_3 = 73;
        E3_CONST_4 = 90;
        E3_CONST_5 = 36;
      }
      optional E3 f_4 = 6;
      optional float f_5 = 7;
      optional float f_6 = 8;
      optional int32 f_7 = 9;
    }
    repeated M17 f_2 = 2;
    message M23 {
      optional int32 f_0 = 1;
      optional float f_1 = 2;
      optional double f_2 = 3;
    }
    optional M23 f_3 = 3;
    message M25 {
      optional int32 f_0 = 1;
    }
    optional M25 f_4 = 4;
    message M30 {
      optional float f_0 = 1;
    }
    optional M30 f_5 = 5;
  }
  optional M5 f_39 = 39;
  message M6 {
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 76;
      E1_CONST_2 = 122;
      E1_CONST_3 = 12;
      E1_CONST_4 = 55;
      E1_CONST_5 = 11;
    }
    optional E1 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional double f_2 = 3;
    optional float f_3 = 4;
    optional int32 f_4 = 5;
    optional int32 f_5 = 6;
    optional float f_6 = 7;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 98;
      E2_CONST_2 = 56;
      E2_CONST_3 = 118;
      E2_CONST_4 = 105;
      E2_CONST_5 = 68;
    }
    optional E2 f_7 = 8;
  }
  optional M6 f_41 = 41;
  message M7 {
    optional string f_0 = 1;
    message M18 {
      optional fixed64 f_0 = 1;
      optional int64 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional string f_3 = 5;
    }
    optional M18 f_2 = 2;
    message M20 {
      optional double f_0 = 1;
    }
    optional M20 f_3 = 3;
  }
  optional M7 f_43 = 43;
  message M8 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 3;
    optional int64 f_2 = 4;
    message M9 {
      optional int32 f_0 = 1;
    }
    optional M9 f_6 = 6;
    message M14 {
      optional string f_0 = 1;
      optional float f_1 = 3;
    }
    optional M14 f_7 = 7;
    message M15 {
      repeated bool f_0 = 1 [packed = true];
      optional string f_1 = 2;
      optional string f_2 = 3;
      optional double f_3 = 4;
    }
    repeated M15 f_8 = 8;
    message M22 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional double f_2 = 3;
      optional fixed64 f_3 = 4;
    }
    optional M22 f_9 = 9;
    message M26 {
      optional int32 f_0 = 1;
      message M33 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional int32 f_2 = 3;
        optional int32 f_3 = 4;
        optional string f_4 = 5;
        optional int32 f_5 = 6;
        optional string f_6 = 7;
        optional int32 f_7 = 8;
        optional double f_8 = 9;
        optional float f_9 = 10;
        optional string f_10 = 11;
        optional string f_11 = 13;
        optional float f_12 = 14;
        optional int64 f_13 = 15;
        optional float f_14 = 16;
        optional double f_15 = 19;
        optional float f_16 = 20;
        optional double f_17 = 21;
        optional double f_18 = 22;
        optional float f_19 = 23;
        optional string f_20 = 24;
        optional float f_21 = 25;
        optional float f_22 = 27;
      }
      optional M33 f_2 = 2;
    }
    optional M26 f_10 = 10;
    message M28 {
      optional string f_0 = 2;
      message M32 {
        optional string f_0 = 1;
        optional double f_1 = 2;
        optional int64 f_2 = 4;
        optional double f_3 = 5;
        optional int64 f_4 = 6;
        optional float f_5 = 7;
        optional double f_6 = 8;
        optional int32 f_7 = 9;
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 72;
          E4_CONST_2 = 34;
          E4_CONST_3 = 67;
          E4_CONST_4 = 122;
          E4_CONST_5 = 69;
        }
        optional E4 f_8 = 10;
        optional fixed64 f_9 = 11;
        optional double f_10 = 12;
        optional int32 f_11 = 13;
        optional float f_12 = 15;
        message M34 {
          optional int64 f_0 = 1;
        }
        optional M34 f_16 = 16;
        message M35 {
          optional double f_0 = 1;
          optional float f_1 = 2;
          optional int32 f_2 = 3;
        }
        optional M35 f_17 = 17;
        message M36 {
          optional int32 f_0 = 1;
          optional double f_1 = 2;
        }
        optional M36 f_18 = 18;
        message M37 {
          optional int32 f_0 = 2;
          optional string f_1 = 3;
          optional float f_2 = 5;
          optional float f_3 = 7;
          optional double f_4 = 8;
          optional fixed64 f_5 = 9;
          optional fixed64 f_6 = 10;
        }
        optional M37 f_19 = 19;
      }
      optional M32 f_4 = 4;
    }
    optional M28 f_11 = 11;
    message M31 {
      optional int64 f_0 = 1;
      optional string f_1 = 2;
      optional int64 f_2 = 3;
      optional float f_3 = 4;
      optional string f_4 = 5;
      optional float f_5 = 8;
    }
    repeated M31 f_12 = 12;
  }
  optional M8 f_44 = 44;
}
