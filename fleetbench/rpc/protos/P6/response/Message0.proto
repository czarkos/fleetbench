// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.response.Message0;

message Message0 {
  optional int32 f_0 = 1;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 14;
    E1_CONST_2 = 72;
    E1_CONST_3 = 113;
    E1_CONST_4 = 36;
    E1_CONST_5 = 16;
  }
  optional E1 f_1 = 2;
  optional double f_2 = 3;
  optional double f_3 = 4;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 70;
    E2_CONST_2 = 9;
    E2_CONST_3 = 56;
    E2_CONST_4 = 1;
    E2_CONST_5 = 37;
  }
  repeated E2 f_4 = 5 [packed = true];
  optional double f_5 = 6;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 120;
    E3_CONST_2 = 90;
    E3_CONST_3 = 35;
    E3_CONST_4 = 37;
    E3_CONST_5 = 66;
  }
  optional E3 f_6 = 7;
  optional double f_7 = 8;
  optional double f_8 = 11;
  optional double f_9 = 12;
  optional double f_10 = 14;
  optional double f_11 = 15;
  optional double f_12 = 16;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 10;
    E4_CONST_2 = 115;
    E4_CONST_3 = 14;
    E4_CONST_4 = 24;
    E4_CONST_5 = 50;
  }
  optional E4 f_13 = 17;
  optional int32 f_14 = 18;
  enum E5 {
    E5_UNSPECIFIED = 0;
    E5_CONST_1 = 122;
    E5_CONST_2 = 81;
    E5_CONST_3 = 3;
    E5_CONST_4 = 57;
    E5_CONST_5 = 120;
  }
  optional E5 f_15 = 19;
  optional float f_16 = 20;
  optional double f_17 = 21;
  enum E6 {
    E6_UNSPECIFIED = 0;
    E6_CONST_1 = 42;
    E6_CONST_2 = 76;
    E6_CONST_3 = 37;
    E6_CONST_4 = 97;
    E6_CONST_5 = 32;
  }
  repeated E6 f_18 = 22 [packed = true];
  optional int32 f_19 = 23;
  optional float f_20 = 24;
  optional int32 f_21 = 25;
  optional double f_22 = 26;
  optional float f_23 = 27;
  optional float f_24 = 28;
  message M1 {
    optional double f_0 = 1;
    optional double f_1 = 3;
    message M9 {
      optional int32 f_0 = 1;
    }
    optional M9 f_4 = 4;
    message M10 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      message M14 {
        optional int32 f_0 = 1;
        message M16 {
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 76;
            E13_CONST_2 = 72;
            E13_CONST_3 = 47;
            E13_CONST_4 = 84;
            E13_CONST_5 = 82;
          }
          optional E13 f_0 = 1;
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 60;
            E14_CONST_2 = 38;
            E14_CONST_3 = 51;
            E14_CONST_4 = 13;
            E14_CONST_5 = 94;
          }
          repeated E14 f_1 = 3 [packed = true];
          optional double f_2 = 4;
        }
        optional M16 f_2 = 2;
      }
      optional M14 f_4 = 4;
    }
    optional M10 f_5 = 5;
  }
  optional M1 f_29 = 29;
  message M2 {
    optional double f_0 = 1;
  }
  optional M2 f_30 = 30;
  message M3 {
    optional int32 f_0 = 1;
    optional float f_1 = 2;
    optional fixed64 f_2 = 3;
    optional double f_3 = 4;
    optional fixed64 f_4 = 5;
    optional int32 f_5 = 6;
    optional double f_6 = 8;
    optional fixed64 f_7 = 9;
    optional fixed64 f_8 = 10;
    optional int32 f_9 = 11;
    optional fixed64 f_10 = 12;
    optional double f_11 = 13;
    optional int32 f_12 = 14;
    message M8 {
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 54;
        E10_CONST_2 = 111;
        E10_CONST_3 = 88;
        E10_CONST_4 = 13;
        E10_CONST_5 = 28;
      }
      repeated E10 f_0 = 1 [packed = true];
    }
    optional M8 f_15 = 15;
    message M12 {
      optional int32 f_0 = 1;
      optional float f_1 = 2;
      optional int32 f_2 = 3;
      optional float f_3 = 4;
      optional int32 f_4 = 6;
    }
    optional M12 f_16 = 16;
  }
  optional M3 f_31 = 31;
  message M4 {
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 110;
      E7_CONST_2 = 18;
      E7_CONST_3 = 71;
      E7_CONST_4 = 17;
      E7_CONST_5 = 4;
    }
    optional E7 f_0 = 1;
    optional double f_1 = 2;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 27;
      E8_CONST_2 = 9;
      E8_CONST_3 = 57;
      E8_CONST_4 = 52;
      E8_CONST_5 = 15;
    }
    optional E8 f_2 = 3;
    optional int32 f_3 = 4;
  }
  optional M4 f_32 = 32;
  message M5 {
    optional int32 f_0 = 1;
  }
  optional M5 f_33 = 33;
  message M6 {
    enum E9 {
      E9_UNSPECIFIED = 0;
      E9_CONST_1 = 32;
      E9_CONST_2 = 5;
      E9_CONST_3 = 56;
      E9_CONST_4 = 81;
      E9_CONST_5 = 126;
    }
    repeated E9 f_0 = 1 [packed = true];
    optional double f_1 = 2;
  }
  optional M6 f_34 = 34;
  message M7 {
    optional fixed64 f_0 = 1;
    optional double f_1 = 2;
    optional fixed64 f_2 = 3;
    message M11 {
      optional double f_0 = 1;
    }
    optional M11 f_4 = 4;
    message M13 {
      optional int32 f_0 = 1;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 32;
        E11_CONST_2 = 8;
        E11_CONST_3 = 7;
        E11_CONST_4 = 74;
        E11_CONST_5 = 52;
      }
      optional E11 f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 5;
      optional int32 f_4 = 6;
      optional fixed64 f_5 = 7;
      optional double f_6 = 8;
      optional double f_7 = 9;
      message M15 {
        optional double f_0 = 1;
        optional float f_1 = 2;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 52;
          E12_CONST_2 = 120;
          E12_CONST_3 = 5;
          E12_CONST_4 = 34;
          E12_CONST_5 = 88;
        }
        optional E12 f_2 = 3;
        message M17 {
          optional double f_0 = 1;
          optional float f_1 = 2;
          optional fixed64 f_2 = 3;
        }
        optional M17 f_4 = 4;
      }
      optional M15 f_10 = 10;
    }
    optional M13 f_5 = 5;
  }
  optional M7 f_35 = 35;
}
