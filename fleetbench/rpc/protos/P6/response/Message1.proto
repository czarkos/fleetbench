// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.response.Message1;

message Message1 {
  optional float f_0 = 1;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 80;
    E1_CONST_2 = 42;
    E1_CONST_3 = 73;
    E1_CONST_4 = 12;
    E1_CONST_5 = 59;
  }
  repeated E1 f_1 = 2 [packed = true];
  optional fixed64 f_2 = 3;
  optional double f_3 = 4;
  optional fixed64 f_4 = 5;
  optional fixed64 f_5 = 6;
  optional double f_6 = 7;
  optional fixed64 f_7 = 8;
  optional float f_8 = 9;
  optional double f_9 = 10;
  optional double f_10 = 11;
  optional double f_11 = 12;
  optional double f_12 = 13;
  optional fixed64 f_13 = 14;
  optional double f_14 = 15;
  optional double f_15 = 16;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 57;
    E2_CONST_2 = 41;
    E2_CONST_3 = 46;
    E2_CONST_4 = 78;
    E2_CONST_5 = 4;
  }
  repeated E2 f_16 = 17 [packed = true];
  optional float f_17 = 18;
  optional double f_18 = 19;
  optional double f_19 = 21;
  optional float f_20 = 22;
  optional float f_21 = 23;
  optional double f_22 = 24;
  optional int32 f_23 = 25;
  optional double f_24 = 26;
  optional double f_25 = 27;
  optional int32 f_26 = 28;
  optional double f_27 = 29;
  message M1 {
    optional int32 f_0 = 1;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 26;
      E3_CONST_2 = 124;
      E3_CONST_3 = 75;
      E3_CONST_4 = 105;
      E3_CONST_5 = 126;
    }
    repeated E3 f_1 = 2 [packed = true];
    optional double f_2 = 3;
    optional double f_3 = 4;
    optional float f_4 = 7;
    optional double f_5 = 8;
    optional double f_6 = 9;
    optional float f_7 = 10;
    optional double f_8 = 11;
    optional double f_9 = 12;
    message M6 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 5;
      optional fixed64 f_4 = 6;
      optional double f_5 = 7;
      optional double f_6 = 8;
    }
    optional M6 f_13 = 13;
    message M7 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 41;
        E7_CONST_2 = 1;
        E7_CONST_3 = 6;
        E7_CONST_4 = 46;
        E7_CONST_5 = 59;
      }
      optional E7 f_0 = 1;
    }
    optional M7 f_14 = 14;
  }
  repeated M1 f_30 = 30;
  message M2 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 120;
      E4_CONST_2 = 22;
      E4_CONST_3 = 33;
      E4_CONST_4 = 11;
      E4_CONST_5 = 52;
    }
    repeated E4 f_0 = 1 [packed = true];
    message M8 {
      optional fixed64 f_0 = 1;
    }
    optional M8 f_3 = 3;
    message M9 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 6;
      optional int32 f_4 = 7;
      message M16 {
        optional fixed64 f_0 = 1;
        optional float f_1 = 2;
        optional fixed64 f_2 = 3;
        optional double f_3 = 4;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 94;
          E11_CONST_2 = 33;
          E11_CONST_3 = 47;
          E11_CONST_4 = 114;
          E11_CONST_5 = 16;
        }
        optional E11 f_4 = 6;
        optional double f_5 = 8;
        message M18 {
          optional int32 f_0 = 1;
        }
        repeated M18 f_9 = 9;
        message M19 {
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 122;
            E14_CONST_2 = 67;
            E14_CONST_3 = 26;
            E14_CONST_4 = 34;
            E14_CONST_5 = 4;
          }
          optional E14 f_0 = 1;
        }
        optional M19 f_10 = 10;
      }
      repeated M16 f_8 = 8;
    }
    optional M9 f_4 = 4;
    message M10 {
      optional float f_0 = 1;
    }
    optional M10 f_5 = 5;
    message M12 {
      optional fixed64 f_0 = 1;
    }
    repeated M12 f_6 = 6;
  }
  optional M2 f_31 = 31;
  message M3 {
    optional double f_0 = 1;
    message M11 {
      optional fixed64 f_0 = 1;
      message M17 {
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 68;
          E12_CONST_2 = 33;
          E12_CONST_3 = 30;
          E12_CONST_4 = 39;
          E12_CONST_5 = 121;
        }
        repeated E12 f_0 = 1 [packed = true];
        optional float f_1 = 3;
        optional float f_2 = 4;
        optional double f_3 = 5;
        optional double f_4 = 6;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 98;
          E13_CONST_2 = 57;
          E13_CONST_3 = 39;
          E13_CONST_4 = 9;
          E13_CONST_5 = 25;
        }
        optional E13 f_5 = 7;
        message M21 {
          optional fixed64 f_0 = 1;
        }
        repeated M21 f_9 = 9;
      }
      optional M17 f_3 = 3;
    }
    optional M11 f_2 = 2;
    message M13 {
      optional float f_0 = 1;
      message M15 {
        optional int32 f_0 = 1;
        message M20 {
          optional double f_0 = 1;
          optional float f_1 = 3;
          optional int32 f_2 = 5;
          optional fixed64 f_3 = 6;
          optional fixed64 f_4 = 7;
        }
        optional M20 f_2 = 2;
      }
      optional M15 f_2 = 2;
    }
    repeated M13 f_3 = 3;
    message M14 {
      optional double f_0 = 1;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 17;
        E8_CONST_2 = 62;
        E8_CONST_3 = 97;
        E8_CONST_4 = 103;
        E8_CONST_5 = 37;
      }
      optional E8 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 5;
      optional fixed64 f_4 = 7;
      optional fixed64 f_5 = 9;
      optional float f_6 = 10;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 47;
        E9_CONST_2 = 114;
        E9_CONST_3 = 4;
        E9_CONST_4 = 58;
        E9_CONST_5 = 83;
      }
      repeated E9 f_7 = 11 [packed = true];
      optional double f_8 = 12;
      optional float f_9 = 13;
      optional fixed64 f_10 = 14;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 111;
        E10_CONST_2 = 44;
        E10_CONST_3 = 106;
        E10_CONST_4 = 100;
        E10_CONST_5 = 18;
      }
      repeated E10 f_11 = 16 [packed = true];
      optional double f_12 = 17;
      optional double f_13 = 18;
      optional fixed64 f_14 = 19;
    }
    optional M14 f_4 = 4;
  }
  optional M3 f_32 = 32;
  message M4 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
  }
  repeated M4 f_33 = 33;
  message M5 {
    optional float f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 3;
    optional float f_3 = 4;
    optional double f_4 = 5;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 39;
      E5_CONST_2 = 82;
      E5_CONST_3 = 45;
      E5_CONST_4 = 91;
      E5_CONST_5 = 38;
    }
    repeated E5 f_5 = 6 [packed = true];
    optional fixed64 f_6 = 7;
    optional int32 f_7 = 8;
    optional double f_8 = 9;
    optional double f_9 = 10;
    optional int32 f_10 = 11;
    optional double f_11 = 12;
    optional int32 f_12 = 13;
    optional int32 f_13 = 16;
    optional fixed64 f_14 = 17;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 91;
      E6_CONST_2 = 121;
      E6_CONST_3 = 1;
      E6_CONST_4 = 45;
      E6_CONST_5 = 12;
    }
    optional E6 f_15 = 18;
  }
  optional M5 f_34 = 34;
}
