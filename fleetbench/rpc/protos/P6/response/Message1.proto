// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.response.Message1;

message Message1 {
  optional fixed64 f_0 = 1;
  optional double f_1 = 2;
  optional double f_2 = 3;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 73;
    E1_CONST_2 = 120;
    E1_CONST_3 = 59;
    E1_CONST_4 = 58;
    E1_CONST_5 = 7;
  }
  optional E1 f_3 = 4;
  optional fixed64 f_4 = 5;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 43;
    E2_CONST_2 = 25;
    E2_CONST_3 = 122;
    E2_CONST_4 = 98;
    E2_CONST_5 = 39;
  }
  repeated E2 f_5 = 6 [packed = true];
  optional fixed64 f_6 = 7;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 64;
    E3_CONST_2 = 38;
    E3_CONST_3 = 40;
    E3_CONST_4 = 42;
    E3_CONST_5 = 124;
  }
  repeated E3 f_7 = 8 [packed = true];
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 118;
    E4_CONST_2 = 5;
    E4_CONST_3 = 10;
    E4_CONST_4 = 71;
    E4_CONST_5 = 111;
  }
  optional E4 f_8 = 9;
  optional int32 f_9 = 10;
  optional fixed64 f_10 = 11;
  optional int32 f_11 = 12;
  enum E5 {
    E5_UNSPECIFIED = 0;
    E5_CONST_1 = 12;
    E5_CONST_2 = 96;
    E5_CONST_3 = 4;
    E5_CONST_4 = 83;
    E5_CONST_5 = 94;
  }
  optional E5 f_12 = 13;
  optional double f_13 = 14;
  enum E6 {
    E6_UNSPECIFIED = 0;
    E6_CONST_1 = 125;
    E6_CONST_2 = 29;
    E6_CONST_3 = 27;
    E6_CONST_4 = 120;
    E6_CONST_5 = 41;
  }
  optional E6 f_14 = 15;
  enum E7 {
    E7_UNSPECIFIED = 0;
    E7_CONST_1 = 102;
    E7_CONST_2 = 63;
    E7_CONST_3 = 64;
    E7_CONST_4 = 53;
    E7_CONST_5 = 36;
  }
  repeated E7 f_15 = 16 [packed = true];
  optional fixed64 f_16 = 18;
  optional int32 f_17 = 19;
  enum E8 {
    E8_UNSPECIFIED = 0;
    E8_CONST_1 = 40;
    E8_CONST_2 = 64;
    E8_CONST_3 = 126;
    E8_CONST_4 = 15;
    E8_CONST_5 = 77;
  }
  repeated E8 f_18 = 20 [packed = true];
  optional fixed64 f_19 = 21;
  enum E9 {
    E9_UNSPECIFIED = 0;
    E9_CONST_1 = 43;
    E9_CONST_2 = 100;
    E9_CONST_3 = 15;
    E9_CONST_4 = 46;
    E9_CONST_5 = 85;
  }
  optional E9 f_20 = 22;
  enum E10 {
    E10_UNSPECIFIED = 0;
    E10_CONST_1 = 10;
    E10_CONST_2 = 3;
    E10_CONST_3 = 89;
    E10_CONST_4 = 96;
    E10_CONST_5 = 47;
  }
  optional E10 f_21 = 23;
  optional int32 f_22 = 24;
  optional int32 f_23 = 25;
  optional float f_24 = 26;
  message M1 {
    optional double f_0 = 1;
    optional float f_1 = 2;
    optional int32 f_2 = 3;
    enum E11 {
      E11_UNSPECIFIED = 0;
      E11_CONST_1 = 55;
      E11_CONST_2 = 8;
      E11_CONST_3 = 77;
      E11_CONST_4 = 26;
      E11_CONST_5 = 15;
    }
    optional E11 f_3 = 4;
    message M15 {
      optional double f_0 = 1;
    }
    optional M15 f_5 = 5;
    message M18 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    optional M18 f_6 = 6;
  }
  optional M1 f_27 = 27;
  message M2 {
    enum E12 {
      E12_UNSPECIFIED = 0;
      E12_CONST_1 = 21;
      E12_CONST_2 = 89;
      E12_CONST_3 = 9;
      E12_CONST_4 = 31;
      E12_CONST_5 = 111;
    }
    optional E12 f_0 = 1;
    optional double f_1 = 2;
    optional double f_2 = 3;
  }
  optional M2 f_28 = 28;
  message M3 {
    optional float f_0 = 1;
  }
  optional M3 f_30 = 30;
  message M4 {
    optional double f_0 = 1;
  }
  optional M4 f_31 = 31;
  message M5 {
    optional double f_0 = 1;
    enum E13 {
      E13_UNSPECIFIED = 0;
      E13_CONST_1 = 60;
      E13_CONST_2 = 80;
      E13_CONST_3 = 57;
      E13_CONST_4 = 124;
      E13_CONST_5 = 18;
    }
    optional E13 f_1 = 2;
    optional fixed64 f_2 = 3;
    optional double f_3 = 4;
  }
  optional M5 f_32 = 32;
  message M6 {
    enum E14 {
      E14_UNSPECIFIED = 0;
      E14_CONST_1 = 90;
      E14_CONST_2 = 11;
      E14_CONST_3 = 47;
      E14_CONST_4 = 44;
      E14_CONST_5 = 62;
    }
    optional E14 f_0 = 1;
  }
  optional M6 f_33 = 33;
  message M7 {
    optional float f_0 = 1;
  }
  optional M7 f_34 = 34;
  message M8 {
    optional double f_0 = 1;
    message M14 {
      optional double f_0 = 1;
      enum E18 {
        E18_UNSPECIFIED = 0;
        E18_CONST_1 = 63;
        E18_CONST_2 = 105;
        E18_CONST_3 = 40;
        E18_CONST_4 = 15;
        E18_CONST_5 = 95;
      }
      repeated E18 f_1 = 2 [packed = true];
      message M21 {
        optional double f_0 = 1;
      }
      optional M21 f_3 = 3;
    }
    optional M14 f_2 = 2;
  }
  optional M8 f_35 = 35;
  message M9 {
    optional double f_0 = 1;
    enum E15 {
      E15_UNSPECIFIED = 0;
      E15_CONST_1 = 65;
      E15_CONST_2 = 45;
      E15_CONST_3 = 26;
      E15_CONST_4 = 73;
      E15_CONST_5 = 41;
    }
    optional E15 f_1 = 2;
    optional double f_2 = 3;
  }
  optional M9 f_36 = 36;
  message M10 {
    enum E16 {
      E16_UNSPECIFIED = 0;
      E16_CONST_1 = 50;
      E16_CONST_2 = 56;
      E16_CONST_3 = 87;
      E16_CONST_4 = 7;
      E16_CONST_5 = 117;
    }
    repeated E16 f_0 = 1 [packed = true];
    message M16 {
      optional int32 f_0 = 1;
      message M22 {
        optional fixed64 f_0 = 1;
        message M23 {
          optional int32 f_0 = 1;
          optional int32 f_1 = 2;
          optional double f_2 = 3;
          optional int32 f_3 = 4;
          optional double f_4 = 5;
          optional fixed64 f_5 = 6;
        }
        optional M23 f_2 = 2;
      }
      optional M22 f_2 = 2;
    }
    optional M16 f_2 = 2;
  }
  optional M10 f_37 = 37;
  message M11 {
    optional double f_0 = 1;
  }
  optional M11 f_38 = 38;
  message M12 {
    optional double f_0 = 1;
    message M17 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional fixed64 f_3 = 4;
      enum E19 {
        E19_UNSPECIFIED = 0;
        E19_CONST_1 = 35;
        E19_CONST_2 = 27;
        E19_CONST_3 = 49;
        E19_CONST_4 = 125;
        E19_CONST_5 = 85;
      }
      repeated E19 f_4 = 5 [packed = true];
      enum E20 {
        E20_UNSPECIFIED = 0;
        E20_CONST_1 = 66;
        E20_CONST_2 = 96;
        E20_CONST_3 = 88;
        E20_CONST_4 = 91;
        E20_CONST_5 = 61;
      }
      optional E20 f_5 = 6;
    }
    optional M17 f_2 = 2;
  }
  optional M12 f_39 = 39;
  message M13 {
    optional int32 f_0 = 1;
    enum E17 {
      E17_UNSPECIFIED = 0;
      E17_CONST_1 = 69;
      E17_CONST_2 = 56;
      E17_CONST_3 = 124;
      E17_CONST_4 = 15;
      E17_CONST_5 = 115;
    }
    optional E17 f_1 = 2;
    optional fixed64 f_2 = 3;
    optional double f_3 = 4;
    optional double f_4 = 5;
    message M19 {
      enum E21 {
        E21_UNSPECIFIED = 0;
        E21_CONST_1 = 124;
        E21_CONST_2 = 84;
        E21_CONST_3 = 76;
        E21_CONST_4 = 4;
        E21_CONST_5 = 32;
      }
      repeated E21 f_0 = 1 [packed = true];
      optional float f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 4;
      optional double f_4 = 5;
      optional fixed64 f_5 = 7;
      optional int32 f_6 = 8;
      optional int32 f_7 = 9;
      optional double f_8 = 10;
      optional fixed64 f_9 = 11;
      optional fixed64 f_10 = 12;
      optional double f_11 = 13;
      optional fixed64 f_12 = 14;
      optional fixed64 f_13 = 15;
      optional float f_14 = 16;
      optional fixed64 f_15 = 17;
      optional int32 f_16 = 18;
      enum E22 {
        E22_UNSPECIFIED = 0;
        E22_CONST_1 = 119;
        E22_CONST_2 = 111;
        E22_CONST_3 = 116;
        E22_CONST_4 = 124;
        E22_CONST_5 = 5;
      }
      repeated E22 f_17 = 19 [packed = true];
      optional int32 f_18 = 21;
      optional fixed64 f_19 = 22;
      optional double f_20 = 23;
      optional float f_21 = 24;
      optional int32 f_22 = 25;
      message M20 {
        optional double f_0 = 1;
      }
      optional M20 f_26 = 26;
    }
    optional M19 f_6 = 6;
  }
  optional M13 f_40 = 40;
}
