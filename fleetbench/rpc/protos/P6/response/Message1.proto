// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.response.Message1;

message Message1 {
  optional double f_0 = 1;
  optional fixed64 f_1 = 2;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 103;
    E1_CONST_2 = 65;
    E1_CONST_3 = 48;
    E1_CONST_4 = 90;
    E1_CONST_5 = 60;
  }
  optional E1 f_2 = 3;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 56;
    E2_CONST_2 = 89;
    E2_CONST_3 = 86;
    E2_CONST_4 = 108;
    E2_CONST_5 = 79;
  }
  repeated E2 f_3 = 4 [packed = true];
  optional int32 f_4 = 5;
  optional double f_5 = 6;
  optional fixed64 f_6 = 7;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 56;
    E3_CONST_2 = 27;
    E3_CONST_3 = 117;
    E3_CONST_4 = 55;
    E3_CONST_5 = 42;
  }
  optional E3 f_7 = 8;
  optional fixed64 f_8 = 9;
  optional int32 f_9 = 10;
  optional int32 f_10 = 11;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 11;
    E4_CONST_2 = 113;
    E4_CONST_3 = 45;
    E4_CONST_4 = 87;
    E4_CONST_5 = 106;
  }
  optional E4 f_11 = 12;
  optional float f_12 = 13;
  optional double f_13 = 14;
  optional int32 f_14 = 15;
  optional double f_15 = 16;
  optional double f_16 = 17;
  optional int32 f_17 = 18;
  optional double f_18 = 19;
  optional fixed64 f_19 = 20;
  optional double f_20 = 21;
  optional float f_21 = 22;
  optional int32 f_22 = 23;
  optional int32 f_23 = 24;
  optional fixed64 f_24 = 25;
  optional double f_25 = 26;
  optional int32 f_26 = 27;
  optional int32 f_27 = 30;
  optional fixed64 f_28 = 33;
  message M1 {
    optional int32 f_0 = 1;
  }
  optional M1 f_34 = 34;
  message M2 {
    optional double f_0 = 1;
  }
  optional M2 f_35 = 35;
  message M3 {
    optional double f_0 = 1;
  }
  optional M3 f_36 = 36;
  message M4 {
    optional fixed64 f_0 = 1;
    optional double f_1 = 2;
    message M29 {
      optional int32 f_0 = 1;
    }
    optional M29 f_3 = 3;
  }
  optional M4 f_37 = 37;
  message M5 {
    optional double f_0 = 1;
    optional double f_1 = 2;
    optional double f_2 = 3;
    optional double f_3 = 4;
    optional fixed64 f_4 = 5;
    optional fixed64 f_5 = 6;
  }
  optional M5 f_38 = 38;
  message M6 {
    optional double f_0 = 1;
  }
  optional M6 f_39 = 39;
  message M7 {
    optional double f_0 = 1;
  }
  optional M7 f_40 = 40;
  message M8 {
    optional double f_0 = 1;
    message M24 {
      optional double f_0 = 1;
      message M33 {
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 46;
          E10_CONST_2 = 117;
          E10_CONST_3 = 43;
          E10_CONST_4 = 33;
          E10_CONST_5 = 59;
        }
        optional E10 f_0 = 1;
        message M40 {
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 96;
            E14_CONST_2 = 83;
            E14_CONST_3 = 101;
            E14_CONST_4 = 75;
            E14_CONST_5 = 63;
          }
          optional E14 f_0 = 1;
        }
        optional M40 f_2 = 2;
      }
      optional M33 f_2 = 2;
    }
    optional M24 f_2 = 2;
  }
  optional M8 f_41 = 41;
  message M9 {
    optional float f_0 = 1;
    message M26 {
      optional fixed64 f_0 = 1;
      message M32 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        message M36 {
          optional double f_0 = 1;
        }
        optional M36 f_3 = 3;
        message M38 {
          optional double f_0 = 1;
        }
        optional M38 f_4 = 4;
        message M39 {
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 40;
            E13_CONST_2 = 14;
            E13_CONST_3 = 4;
            E13_CONST_4 = 9;
            E13_CONST_5 = 36;
          }
          optional E13 f_0 = 1;
        }
        optional M39 f_5 = 5;
        message M41 {
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 84;
            E15_CONST_2 = 8;
            E15_CONST_3 = 11;
            E15_CONST_4 = 35;
            E15_CONST_5 = 83;
          }
          optional E15 f_0 = 1;
        }
        optional M41 f_8 = 8;
        message M42 {
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 30;
            E16_CONST_2 = 45;
            E16_CONST_3 = 112;
            E16_CONST_4 = 93;
            E16_CONST_5 = 28;
          }
          repeated E16 f_0 = 1 [packed = true];
        }
        optional M42 f_9 = 9;
      }
      optional M32 f_2 = 2;
    }
    optional M26 f_2 = 2;
    message M28 {
      optional int32 f_0 = 2;
    }
    optional M28 f_3 = 3;
  }
  optional M9 f_43 = 43;
  message M10 {
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 32;
      E5_CONST_2 = 27;
      E5_CONST_3 = 39;
      E5_CONST_4 = 53;
      E5_CONST_5 = 104;
    }
    optional E5 f_0 = 1;
  }
  optional M10 f_44 = 44;
  message M11 {
    optional double f_0 = 1;
  }
  optional M11 f_45 = 45;
  message M12 {
    optional int32 f_0 = 1;
    message M25 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
    }
    optional M25 f_2 = 2;
  }
  optional M12 f_47 = 47;
  message M13 {
    optional double f_0 = 1;
    message M30 {
      optional double f_0 = 3;
    }
    optional M30 f_3 = 3;
  }
  optional M13 f_48 = 48;
  message M14 {
    optional double f_0 = 1;
  }
  optional M14 f_49 = 49;
  message M15 {
    optional float f_0 = 2;
    message M27 {
      optional double f_0 = 1;
      message M34 {
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 53;
          E11_CONST_2 = 80;
          E11_CONST_3 = 6;
          E11_CONST_4 = 29;
          E11_CONST_5 = 116;
        }
        optional E11 f_0 = 1;
        message M37 {
          optional int32 f_0 = 2;
        }
        optional M37 f_3 = 3;
      }
      optional M34 f_2 = 2;
      message M35 {
        optional double f_0 = 1;
        optional float f_1 = 2;
        optional int32 f_2 = 3;
        optional double f_3 = 4;
        optional double f_4 = 5;
        optional double f_5 = 6;
        optional double f_6 = 7;
        optional fixed64 f_7 = 8;
        optional double f_8 = 9;
        optional double f_9 = 10;
        optional int32 f_10 = 11;
        optional double f_11 = 12;
        optional double f_12 = 14;
        optional int32 f_13 = 15;
        optional double f_14 = 16;
        optional double f_15 = 17;
        optional double f_16 = 18;
        optional fixed64 f_17 = 19;
        optional double f_18 = 20;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 82;
          E12_CONST_2 = 123;
          E12_CONST_3 = 17;
          E12_CONST_4 = 63;
          E12_CONST_5 = 30;
        }
        optional E12 f_19 = 22;
        optional fixed64 f_20 = 23;
      }
      optional M35 f_3 = 3;
    }
    optional M27 f_3 = 3;
  }
  optional M15 f_50 = 50;
  message M16 {
    optional int32 f_0 = 2;
  }
  optional M16 f_51 = 51;
  message M17 {
    optional double f_0 = 1;
  }
  optional M17 f_52 = 52;
  message M18 {
    optional fixed64 f_0 = 1;
  }
  optional M18 f_53 = 53;
  message M19 {
    optional double f_0 = 1;
  }
  optional M19 f_54 = 54;
  message M20 {
    optional float f_0 = 2;
    message M31 {
      optional double f_0 = 1;
      optional int32 f_1 = 3;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 98;
        E7_CONST_2 = 6;
        E7_CONST_3 = 78;
        E7_CONST_4 = 76;
        E7_CONST_5 = 64;
      }
      repeated E7 f_2 = 4 [packed = true];
      optional fixed64 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional int32 f_5 = 7;
      optional double f_6 = 8;
      optional fixed64 f_7 = 9;
      optional int32 f_8 = 10;
      optional double f_9 = 11;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 69;
        E8_CONST_2 = 67;
        E8_CONST_3 = 5;
        E8_CONST_4 = 81;
        E8_CONST_5 = 87;
      }
      optional E8 f_10 = 12;
      optional double f_11 = 13;
      optional int32 f_12 = 14;
      optional double f_13 = 15;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 27;
        E9_CONST_2 = 94;
        E9_CONST_3 = 32;
        E9_CONST_4 = 11;
        E9_CONST_5 = 29;
      }
      repeated E9 f_14 = 16 [packed = true];
      optional float f_15 = 17;
      optional double f_16 = 18;
      optional int32 f_17 = 19;
      optional double f_18 = 20;
    }
    optional M31 f_3 = 3;
  }
  optional M20 f_55 = 55;
  message M21 {
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 103;
      E6_CONST_2 = 93;
      E6_CONST_3 = 66;
      E6_CONST_4 = 115;
      E6_CONST_5 = 87;
    }
    repeated E6 f_0 = 1 [packed = true];
  }
  optional M21 f_56 = 56;
  message M22 {
    optional double f_0 = 1;
  }
  optional M22 f_57 = 57;
  message M23 {
    optional float f_0 = 2;
  }
  optional M23 f_58 = 58;
}
