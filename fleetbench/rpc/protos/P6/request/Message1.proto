// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.request.Message1;

message Message1 {
  optional string f_0 = 2;
  optional bool f_1 = 3;
  optional string f_2 = 4;
  optional double f_3 = 5;
  optional fixed64 f_4 = 6;
  optional fixed64 f_5 = 8;
  optional string f_6 = 9;
  optional fixed32 f_7 = 10;
  optional fixed32 f_8 = 12;
  optional fixed64 f_9 = 13;
  optional int32 f_10 = 14;
  optional int64 f_11 = 16;
  optional fixed32 f_12 = 17;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 24;
    E1_CONST_2 = 22;
    E1_CONST_3 = 91;
    E1_CONST_4 = 72;
    E1_CONST_5 = 33;
  }
  optional E1 f_13 = 21;
  optional bool f_14 = 23;
  optional bool f_15 = 24;
  optional string f_16 = 25;
  optional fixed64 f_17 = 26;
  optional int32 f_18 = 28;
  optional double f_19 = 29;
  optional int32 f_20 = 31;
  optional fixed64 f_21 = 32;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 56;
    E2_CONST_2 = 10;
    E2_CONST_3 = 13;
    E2_CONST_4 = 80;
    E2_CONST_5 = 79;
  }
  optional E2 f_22 = 35;
  optional string f_23 = 36;
  optional bool f_24 = 37;
  optional bool f_25 = 39;
  optional int64 f_26 = 42;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 13;
    E3_CONST_2 = 91;
    E3_CONST_3 = 59;
    E3_CONST_4 = 3;
    E3_CONST_5 = 29;
  }
  optional E3 f_27 = 45;
  optional fixed64 f_28 = 46;
  optional int32 f_29 = 47;
  message M1 {
    optional string f_0 = 1;
    optional int32 f_1 = 3;
    message M15 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      optional string f_2 = 5;
      optional string f_3 = 6;
      optional int32 f_4 = 7;
      optional fixed64 f_5 = 9;
      optional fixed64 f_6 = 10;
      optional fixed64 f_7 = 12;
      optional fixed64 f_8 = 13;
      optional fixed64 f_9 = 14;
      optional int32 f_10 = 16;
      message M40 {
        optional int32 f_0 = 2;
        optional fixed64 f_1 = 4;
        enum E24 {
          E24_UNSPECIFIED = 0;
          E24_CONST_1 = 22;
          E24_CONST_2 = 49;
          E24_CONST_3 = 89;
          E24_CONST_4 = 121;
          E24_CONST_5 = 50;
        }
        repeated E24 f_2 = 5 [packed = true];
        optional fixed32 f_3 = 6;
        optional string f_4 = 9;
        optional int32 f_5 = 10;
        optional int64 f_6 = 12;
        optional fixed32 f_7 = 13;
        optional int32 f_8 = 15;
        optional int32 f_9 = 16;
        optional int32 f_10 = 17;
        optional bool f_11 = 19;
        enum E25 {
          E25_UNSPECIFIED = 0;
          E25_CONST_1 = 83;
          E25_CONST_2 = 21;
          E25_CONST_3 = 76;
          E25_CONST_4 = 62;
          E25_CONST_5 = 108;
        }
        optional E25 f_12 = 20;
        optional string f_13 = 21;
        optional string f_14 = 23;
        optional bool f_15 = 25;
        enum E26 {
          E26_UNSPECIFIED = 0;
          E26_CONST_1 = 83;
          E26_CONST_2 = 107;
          E26_CONST_3 = 51;
          E26_CONST_4 = 21;
          E26_CONST_5 = 35;
        }
        optional E26 f_16 = 27;
        optional string f_17 = 28;
        optional int32 f_18 = 29;
        optional bool f_19 = 30;
        optional bool f_20 = 31;
        optional fixed32 f_21 = 32;
        optional int32 f_22 = 33;
        optional int32 f_23 = 34;
        enum E27 {
          E27_UNSPECIFIED = 0;
          E27_CONST_1 = 101;
          E27_CONST_2 = 107;
          E27_CONST_3 = 89;
          E27_CONST_4 = 68;
          E27_CONST_5 = 102;
        }
        optional E27 f_24 = 35;
        optional fixed64 f_25 = 36;
        optional fixed64 f_26 = 39;
        optional double f_27 = 40;
        optional int32 f_28 = 42;
        optional fixed64 f_29 = 46;
        optional int32 f_30 = 47;
        message M45 {
          optional string f_0 = 1;
          enum E29 {
            E29_UNSPECIFIED = 0;
            E29_CONST_1 = 45;
            E29_CONST_2 = 42;
            E29_CONST_3 = 33;
            E29_CONST_4 = 59;
            E29_CONST_5 = 115;
          }
          optional E29 f_1 = 2;
          optional int32 f_2 = 4;
          optional fixed64 f_3 = 5;
          optional fixed32 f_4 = 6;
          enum E30 {
            E30_UNSPECIFIED = 0;
            E30_CONST_1 = 3;
            E30_CONST_2 = 124;
            E30_CONST_3 = 61;
            E30_CONST_4 = 7;
            E30_CONST_5 = 20;
          }
          optional E30 f_5 = 7;
        }
        optional M45 f_48 = 48;
        message M46 {
          enum E31 {
            E31_UNSPECIFIED = 0;
            E31_CONST_1 = 123;
            E31_CONST_2 = 118;
            E31_CONST_3 = 114;
            E31_CONST_4 = 108;
            E31_CONST_5 = 56;
          }
          optional E31 f_0 = 2;
          enum E32 {
            E32_UNSPECIFIED = 0;
            E32_CONST_1 = 44;
            E32_CONST_2 = 103;
            E32_CONST_3 = 54;
            E32_CONST_4 = 57;
            E32_CONST_5 = 116;
          }
          optional E32 f_1 = 3;
          optional fixed32 f_2 = 6;
          optional int32 f_3 = 7;
          message M54 {
            optional fixed32 f_0 = 1;
            optional int32 f_1 = 4;
            optional int32 f_2 = 5;
          }
          optional M54 f_8 = 8;
        }
        optional M46 f_49 = 49;
        message M49 {
          optional fixed64 f_0 = 2;
        }
        optional M49 f_50 = 50;
        message M50 {
          optional fixed32 f_0 = 1;
          optional string f_1 = 3;
          message M51 {
            optional bool f_0 = 1;
            optional double f_1 = 4;
            optional fixed64 f_2 = 5;
          }
          optional M51 f_6 = 6;
        }
        optional M50 f_51 = 51;
      }
      optional M40 f_17 = 17;
    }
    optional M15 f_5 = 5;
    message M27 {
      optional int64 f_0 = 2;
    }
    optional M27 f_7 = 7;
    message M35 {
      optional int32 f_0 = 1;
      message M38 {
        optional fixed64 f_0 = 1;
      }
      optional M38 f_2 = 2;
    }
    optional M35 f_9 = 9;
  }
  optional M1 f_50 = 50;
  message M2 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 13;
      E4_CONST_2 = 30;
      E4_CONST_3 = 77;
      E4_CONST_4 = 100;
      E4_CONST_5 = 106;
    }
    optional E4 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed64 f_2 = 6;
    optional fixed64 f_3 = 7;
    message M24 {
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 34;
        E13_CONST_2 = 33;
        E13_CONST_3 = 69;
        E13_CONST_4 = 42;
        E13_CONST_5 = 38;
      }
      repeated E13 f_0 = 2 [packed = true];
    }
    optional M24 f_8 = 8;
  }
  optional M2 f_52 = 52;
  message M3 {
    optional int32 f_0 = 1;
    optional bool f_1 = 2;
    optional bool f_2 = 4;
    message M23 {
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 11;
        E12_CONST_2 = 115;
        E12_CONST_3 = 118;
        E12_CONST_4 = 92;
        E12_CONST_5 = 93;
      }
      optional E12 f_0 = 1;
    }
    repeated M23 f_6 = 6;
  }
  optional M3 f_53 = 53;
  message M4 {
    optional string f_0 = 3;
    optional int32 f_1 = 5;
    message M14 {
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 65;
        E11_CONST_2 = 8;
        E11_CONST_3 = 111;
        E11_CONST_4 = 14;
        E11_CONST_5 = 89;
      }
      repeated E11 f_0 = 1 [packed = true];
    }
    repeated M14 f_6 = 6;
    message M17 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed32 f_2 = 3;
      optional fixed64 f_3 = 5;
    }
    optional M17 f_7 = 7;
    message M19 {
      optional fixed64 f_0 = 1;
      message M39 {
        optional bool f_0 = 1;
        message M41 {
          optional fixed64 f_0 = 1;
        }
        optional M41 f_2 = 2;
        message M42 {
          optional string f_0 = 1;
        }
        repeated M42 f_3 = 3;
        message M43 {
          optional string f_0 = 1;
          message M52 {
            optional string f_0 = 2;
          }
          repeated M52 f_3 = 3;
        }
        repeated M43 f_4 = 4;
        message M44 {
          enum E28 {
            E28_UNSPECIFIED = 0;
            E28_CONST_1 = 2;
            E28_CONST_2 = 38;
            E28_CONST_3 = 108;
            E28_CONST_4 = 60;
            E28_CONST_5 = 13;
          }
          optional E28 f_0 = 2;
          optional fixed32 f_1 = 3;
          message M53 {
            optional string f_0 = 1;
            optional int64 f_1 = 4;
          }
          optional M53 f_8 = 8;
        }
        repeated M44 f_5 = 5;
        message M47 {
          optional string f_0 = 1;
        }
        repeated M47 f_7 = 7;
        message M48 {
          optional double f_0 = 1;
        }
        optional M48 f_8 = 8;
      }
      repeated M39 f_4 = 4;
    }
    optional M19 f_8 = 8;
    message M29 {
      optional bool f_0 = 3;
    }
    repeated M29 f_9 = 9;
  }
  optional M4 f_56 = 56;
  message M5 {
    optional fixed64 f_0 = 1;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 26;
      E5_CONST_2 = 81;
      E5_CONST_3 = 79;
      E5_CONST_4 = 20;
      E5_CONST_5 = 73;
    }
    optional E5 f_1 = 2;
    optional int32 f_2 = 5;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 12;
      E6_CONST_2 = 99;
      E6_CONST_3 = 109;
      E6_CONST_4 = 87;
      E6_CONST_5 = 75;
    }
    optional E6 f_3 = 6;
    message M28 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 3;
    }
    repeated M28 f_8 = 8;
  }
  repeated M5 f_57 = 57;
  message M6 {
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 15;
      E7_CONST_2 = 95;
      E7_CONST_3 = 74;
      E7_CONST_4 = 69;
      E7_CONST_5 = 103;
    }
    optional E7 f_0 = 2;
    optional bool f_1 = 3;
    optional fixed64 f_2 = 4;
    message M31 {
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 62;
        E14_CONST_2 = 86;
        E14_CONST_3 = 8;
        E14_CONST_4 = 117;
        E14_CONST_5 = 89;
      }
      repeated E14 f_0 = 1 [packed = true];
    }
    optional M31 f_5 = 5;
  }
  optional M6 f_59 = 59;
  message M7 {
    optional int32 f_0 = 1;
    optional bool f_1 = 2;
    message M22 {
      optional bool f_0 = 1;
      optional int32 f_1 = 3;
    }
    optional M22 f_3 = 3;
  }
  repeated M7 f_60 = 60;
  message M8 {
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 95;
      E8_CONST_2 = 103;
      E8_CONST_3 = 77;
      E8_CONST_4 = 122;
      E8_CONST_5 = 98;
    }
    optional E8 f_0 = 2;
    enum E9 {
      E9_UNSPECIFIED = 0;
      E9_CONST_1 = 2;
      E9_CONST_2 = 105;
      E9_CONST_3 = 120;
      E9_CONST_4 = 85;
      E9_CONST_5 = 45;
    }
    optional E9 f_1 = 3;
    optional fixed64 f_2 = 4;
    optional bool f_3 = 5;
    optional string f_4 = 7;
    message M34 {
      optional fixed32 f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 4;
      optional string f_3 = 5;
      optional int32 f_4 = 6;
      optional bool f_5 = 7;
      optional fixed64 f_6 = 8;
      enum E15 {
        E15_UNSPECIFIED = 0;
        E15_CONST_1 = 31;
        E15_CONST_2 = 117;
        E15_CONST_3 = 37;
        E15_CONST_4 = 58;
        E15_CONST_5 = 17;
      }
      optional E15 f_7 = 9;
      optional fixed64 f_8 = 10;
      optional fixed64 f_9 = 11;
      optional int32 f_10 = 12;
      optional double f_11 = 13;
      enum E16 {
        E16_UNSPECIFIED = 0;
        E16_CONST_1 = 123;
        E16_CONST_2 = 38;
        E16_CONST_3 = 12;
        E16_CONST_4 = 5;
        E16_CONST_5 = 122;
      }
      repeated E16 f_12 = 15 [packed = true];
      optional fixed64 f_13 = 17;
      enum E17 {
        E17_UNSPECIFIED = 0;
        E17_CONST_1 = 88;
        E17_CONST_2 = 91;
        E17_CONST_3 = 90;
        E17_CONST_4 = 110;
        E17_CONST_5 = 5;
      }
      optional E17 f_14 = 18;
      enum E18 {
        E18_UNSPECIFIED = 0;
        E18_CONST_1 = 83;
        E18_CONST_2 = 47;
        E18_CONST_3 = 49;
        E18_CONST_4 = 111;
        E18_CONST_5 = 118;
      }
      repeated E18 f_15 = 20 [packed = true];
      optional string f_16 = 21;
      optional fixed64 f_17 = 22;
      enum E19 {
        E19_UNSPECIFIED = 0;
        E19_CONST_1 = 94;
        E19_CONST_2 = 38;
        E19_CONST_3 = 50;
        E19_CONST_4 = 70;
        E19_CONST_5 = 33;
      }
      repeated E19 f_18 = 23 [packed = true];
      optional int32 f_19 = 24;
      optional int32 f_20 = 26;
      optional fixed64 f_21 = 27;
      enum E20 {
        E20_UNSPECIFIED = 0;
        E20_CONST_1 = 75;
        E20_CONST_2 = 82;
        E20_CONST_3 = 123;
        E20_CONST_4 = 54;
        E20_CONST_5 = 8;
      }
      optional E20 f_22 = 28;
      optional double f_23 = 30;
      optional bool f_24 = 31;
      optional fixed64 f_25 = 32;
      enum E21 {
        E21_UNSPECIFIED = 0;
        E21_CONST_1 = 39;
        E21_CONST_2 = 3;
        E21_CONST_3 = 11;
        E21_CONST_4 = 12;
        E21_CONST_5 = 103;
      }
      repeated E21 f_26 = 36 [packed = true];
      optional int32 f_27 = 37;
      optional bool f_28 = 38;
      optional int32 f_29 = 40;
    }
    optional M34 f_8 = 8;
  }
  optional M8 f_61 = 61;
  message M9 {
    optional bool f_0 = 2;
    message M16 {
      optional int32 f_0 = 1;
    }
    optional M16 f_3 = 3;
    message M20 {
      optional fixed32 f_0 = 2;
    }
    optional M20 f_4 = 4;
  }
  optional M9 f_62 = 62;
  message M10 {
    enum E10 {
      E10_UNSPECIFIED = 0;
      E10_CONST_1 = 72;
      E10_CONST_2 = 23;
      E10_CONST_3 = 47;
      E10_CONST_4 = 50;
      E10_CONST_5 = 121;
    }
    optional E10 f_0 = 3;
    message M26 {
      optional int32 f_0 = 1;
    }
    repeated M26 f_4 = 4;
    message M33 {
      optional fixed64 f_0 = 1;
    }
    repeated M33 f_5 = 5;
    message M36 {
      enum E22 {
        E22_UNSPECIFIED = 0;
        E22_CONST_1 = 30;
        E22_CONST_2 = 89;
        E22_CONST_3 = 99;
        E22_CONST_4 = 23;
        E22_CONST_5 = 21;
      }
      repeated E22 f_0 = 1 [packed = true];
    }
    repeated M36 f_6 = 6;
  }
  optional M10 f_64 = 64;
  message M11 {
    optional string f_0 = 1;
    message M32 {
      optional int32 f_0 = 2;
    }
    optional M32 f_4 = 4;
    message M37 {
      enum E23 {
        E23_UNSPECIFIED = 0;
        E23_CONST_1 = 62;
        E23_CONST_2 = 103;
        E23_CONST_3 = 77;
        E23_CONST_4 = 38;
        E23_CONST_5 = 14;
      }
      optional E23 f_0 = 1;
      optional int32 f_1 = 3;
    }
    optional M37 f_6 = 6;
  }
  optional M11 f_66 = 66;
  message M12 {
    optional int32 f_0 = 1;
    message M21 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional bool f_3 = 5;
    }
    repeated M21 f_2 = 2;
    message M30 {
      optional bool f_0 = 1;
    }
    repeated M30 f_4 = 4;
  }
  optional M12 f_67 = 67;
  message M13 {
    optional fixed64 f_0 = 1;
    optional bool f_1 = 4;
    optional int32 f_2 = 5;
    message M18 {
      optional int32 f_0 = 2;
    }
    repeated M18 f_6 = 6;
    message M25 {
      optional fixed64 f_0 = 1;
    }
    optional M25 f_7 = 7;
  }
  optional M13 f_69 = 69;
}
