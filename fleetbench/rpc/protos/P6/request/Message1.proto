// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.request.Message1;

message Message1 {
  optional int32 f_0 = 1;
  optional int32 f_1 = 5;
  optional fixed32 f_2 = 7;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 25;
    E1_CONST_2 = 13;
    E1_CONST_3 = 65;
    E1_CONST_4 = 5;
    E1_CONST_5 = 69;
  }
  optional E1 f_3 = 8;
  optional fixed32 f_4 = 9;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 84;
    E2_CONST_2 = 44;
    E2_CONST_3 = 14;
    E2_CONST_4 = 120;
    E2_CONST_5 = 76;
  }
  optional E2 f_5 = 11;
  optional int32 f_6 = 13;
  optional string f_7 = 14;
  optional fixed64 f_8 = 15;
  optional string f_9 = 16;
  optional int32 f_10 = 17;
  optional int32 f_11 = 19;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 89;
    E3_CONST_2 = 30;
    E3_CONST_3 = 45;
    E3_CONST_4 = 64;
    E3_CONST_5 = 11;
  }
  optional E3 f_12 = 20;
  optional fixed64 f_13 = 21;
  optional double f_14 = 23;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 82;
    E4_CONST_2 = 13;
    E4_CONST_3 = 23;
    E4_CONST_4 = 17;
    E4_CONST_5 = 43;
  }
  repeated E4 f_15 = 24 [packed = true];
  optional fixed64 f_16 = 25;
  optional int32 f_17 = 27;
  optional int64 f_18 = 29;
  optional string f_19 = 30;
  optional fixed64 f_20 = 31;
  enum E5 {
    E5_UNSPECIFIED = 0;
    E5_CONST_1 = 104;
    E5_CONST_2 = 11;
    E5_CONST_3 = 77;
    E5_CONST_4 = 23;
    E5_CONST_5 = 2;
  }
  repeated E5 f_21 = 33 [packed = true];
  optional bool f_22 = 34;
  optional fixed64 f_23 = 35;
  optional fixed32 f_24 = 36;
  optional int64 f_25 = 37;
  enum E6 {
    E6_UNSPECIFIED = 0;
    E6_CONST_1 = 90;
    E6_CONST_2 = 89;
    E6_CONST_3 = 12;
    E6_CONST_4 = 75;
    E6_CONST_5 = 120;
  }
  optional E6 f_26 = 39;
  optional string f_27 = 40;
  optional fixed64 f_28 = 41;
  message M1 {
    optional fixed32 f_0 = 1;
    message M33 {
      enum E22 {
        E22_UNSPECIFIED = 0;
        E22_CONST_1 = 70;
        E22_CONST_2 = 118;
        E22_CONST_3 = 49;
        E22_CONST_4 = 30;
        E22_CONST_5 = 29;
      }
      optional E22 f_0 = 2;
      optional fixed64 f_1 = 4;
      optional bool f_2 = 7;
      enum E23 {
        E23_UNSPECIFIED = 0;
        E23_CONST_1 = 74;
        E23_CONST_2 = 82;
        E23_CONST_3 = 60;
        E23_CONST_4 = 45;
        E23_CONST_5 = 108;
      }
      optional E23 f_3 = 9;
      optional bool f_4 = 12;
      optional int32 f_5 = 13;
    }
    optional M33 f_2 = 2;
  }
  optional M1 f_44 = 44;
  message M2 {
    optional bool f_0 = 2;
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 88;
      E7_CONST_2 = 51;
      E7_CONST_3 = 55;
      E7_CONST_4 = 83;
      E7_CONST_5 = 53;
    }
    optional E7 f_1 = 3;
    optional int32 f_2 = 4;
    optional fixed32 f_3 = 6;
    message M20 {
      optional bool f_0 = 1;
      optional bytes f_1 = 3;
      optional int32 f_2 = 4;
      enum E15 {
        E15_UNSPECIFIED = 0;
        E15_CONST_1 = 51;
        E15_CONST_2 = 103;
        E15_CONST_3 = 93;
        E15_CONST_4 = 8;
        E15_CONST_5 = 46;
      }
      optional E15 f_3 = 6;
    }
    repeated M20 f_7 = 7;
    message M32 {
      enum E21 {
        E21_UNSPECIFIED = 0;
        E21_CONST_1 = 77;
        E21_CONST_2 = 67;
        E21_CONST_3 = 2;
        E21_CONST_4 = 22;
        E21_CONST_5 = 90;
      }
      repeated E21 f_0 = 3 [packed = true];
    }
    optional M32 f_10 = 10;
  }
  optional M2 f_46 = 46;
  message M3 {
    optional bool f_0 = 1;
    message M16 {
      optional string f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 5;
      optional bytes f_3 = 6;
      message M51 {
        optional int32 f_0 = 2;
        enum E33 {
          E33_UNSPECIFIED = 0;
          E33_CONST_1 = 58;
          E33_CONST_2 = 49;
          E33_CONST_3 = 16;
          E33_CONST_4 = 100;
          E33_CONST_5 = 31;
        }
        optional E33 f_1 = 3;
        optional string f_2 = 4;
        optional int32 f_3 = 8;
        optional string f_4 = 11;
        optional fixed64 f_5 = 13;
        optional fixed64 f_6 = 15;
        optional fixed64 f_7 = 17;
        optional fixed64 f_8 = 19;
        optional bool f_9 = 20;
        optional bool f_10 = 22;
      }
      optional M51 f_7 = 7;
    }
    optional M16 f_4 = 4;
    message M21 {
      optional fixed64 f_0 = 3;
      optional bool f_1 = 4;
      message M42 {
        optional fixed64 f_0 = 3;
      }
      optional M42 f_5 = 5;
      message M48 {
        optional int32 f_0 = 2;
        optional bool f_1 = 3;
        message M57 {
          enum E43 {
            E43_UNSPECIFIED = 0;
            E43_CONST_1 = 113;
            E43_CONST_2 = 126;
            E43_CONST_3 = 125;
            E43_CONST_4 = 12;
            E43_CONST_5 = 49;
          }
          repeated E43 f_0 = 3 [packed = true];
          optional fixed64 f_1 = 5;
          optional fixed64 f_2 = 6;
          optional string f_3 = 7;
          message M64 {
            optional fixed64 f_0 = 2;
            optional string f_1 = 3;
            optional fixed64 f_2 = 5;
            optional fixed64 f_3 = 6;
            enum E47 {
              E47_UNSPECIFIED = 0;
              E47_CONST_1 = 38;
              E47_CONST_2 = 113;
              E47_CONST_3 = 78;
              E47_CONST_4 = 14;
              E47_CONST_5 = 47;
            }
            repeated E47 f_4 = 7 [packed = true];
            optional bool f_5 = 8;
            optional string f_6 = 9;
            optional bool f_7 = 11;
            optional string f_8 = 13;
            optional bool f_9 = 14;
            optional int32 f_10 = 17;
            optional int32 f_11 = 20;
            enum E48 {
              E48_UNSPECIFIED = 0;
              E48_CONST_1 = 65;
              E48_CONST_2 = 21;
              E48_CONST_3 = 17;
              E48_CONST_4 = 13;
              E48_CONST_5 = 30;
            }
            repeated E48 f_12 = 23 [packed = true];
            optional bool f_13 = 25;
            enum E49 {
              E49_UNSPECIFIED = 0;
              E49_CONST_1 = 107;
              E49_CONST_2 = 67;
              E49_CONST_3 = 78;
              E49_CONST_4 = 2;
              E49_CONST_5 = 13;
            }
            optional E49 f_14 = 27;
            optional fixed64 f_15 = 28;
            optional string f_16 = 29;
            optional int32 f_17 = 30;
            optional fixed32 f_18 = 31;
            optional string f_19 = 32;
            optional bool f_20 = 33;
            enum E50 {
              E50_UNSPECIFIED = 0;
              E50_CONST_1 = 51;
              E50_CONST_2 = 67;
              E50_CONST_3 = 63;
              E50_CONST_4 = 83;
              E50_CONST_5 = 19;
            }
            repeated E50 f_21 = 34 [packed = true];
            optional int32 f_22 = 36;
            optional string f_23 = 37;
            optional string f_24 = 40;
            optional int32 f_25 = 41;
            enum E51 {
              E51_UNSPECIFIED = 0;
              E51_CONST_1 = 88;
              E51_CONST_2 = 42;
              E51_CONST_3 = 68;
              E51_CONST_4 = 30;
              E51_CONST_5 = 39;
            }
            optional E51 f_26 = 43;
            optional fixed64 f_27 = 45;
            enum E52 {
              E52_UNSPECIFIED = 0;
              E52_CONST_1 = 94;
              E52_CONST_2 = 28;
              E52_CONST_3 = 59;
              E52_CONST_4 = 62;
              E52_CONST_5 = 32;
            }
            repeated E52 f_28 = 46 [packed = true];
            optional fixed64 f_29 = 48;
            enum E53 {
              E53_UNSPECIFIED = 0;
              E53_CONST_1 = 22;
              E53_CONST_2 = 64;
              E53_CONST_3 = 43;
              E53_CONST_4 = 28;
              E53_CONST_5 = 80;
            }
            optional E53 f_30 = 49;
            optional int64 f_31 = 50;
            optional fixed64 f_32 = 51;
          }
          repeated M64 f_8 = 8;
        }
        optional M57 f_4 = 4;
      }
      repeated M48 f_8 = 8;
      message M52 {
        optional bool f_0 = 2;
      }
      repeated M52 f_11 = 11;
      message M54 {
        optional string f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 4;
        enum E35 {
          E35_UNSPECIFIED = 0;
          E35_CONST_1 = 93;
          E35_CONST_2 = 32;
          E35_CONST_3 = 18;
          E35_CONST_4 = 29;
          E35_CONST_5 = 1;
        }
        optional E35 f_3 = 5;
        optional string f_4 = 6;
        optional int32 f_5 = 8;
        optional int32 f_6 = 11;
        optional fixed64 f_7 = 12;
        optional double f_8 = 13;
        optional string f_9 = 15;
        enum E36 {
          E36_UNSPECIFIED = 0;
          E36_CONST_1 = 105;
          E36_CONST_2 = 85;
          E36_CONST_3 = 75;
          E36_CONST_4 = 40;
          E36_CONST_5 = 52;
        }
        repeated E36 f_10 = 17 [packed = true];
        optional string f_11 = 18;
        optional int32 f_12 = 19;
        optional bool f_13 = 20;
        optional bool f_14 = 22;
        optional int32 f_15 = 23;
        optional fixed64 f_16 = 26;
      }
      optional M54 f_13 = 13;
    }
    optional M21 f_5 = 5;
    message M22 {
      optional fixed64 f_0 = 2;
      message M41 {
        optional bool f_0 = 2;
      }
      optional M41 f_4 = 4;
    }
    repeated M22 f_6 = 6;
  }
  repeated M3 f_47 = 47;
  message M4 {
    optional string f_0 = 1;
    message M19 {
      optional bool f_0 = 1;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 39;
        E14_CONST_2 = 62;
        E14_CONST_3 = 83;
        E14_CONST_4 = 35;
        E14_CONST_5 = 44;
      }
      optional E14 f_1 = 2;
      optional bool f_2 = 3;
      optional string f_3 = 4;
    }
    repeated M19 f_2 = 2;
  }
  optional M4 f_48 = 48;
  message M5 {
    optional string f_0 = 2;
    message M18 {
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 31;
        E13_CONST_2 = 84;
        E13_CONST_3 = 51;
        E13_CONST_4 = 109;
        E13_CONST_5 = 18;
      }
      repeated E13 f_0 = 2 [packed = true];
      optional fixed64 f_1 = 5;
      optional string f_2 = 6;
      message M38 {
        optional bool f_0 = 1;
      }
      optional M38 f_8 = 8;
      message M53 {
        optional int32 f_0 = 2;
        enum E34 {
          E34_UNSPECIFIED = 0;
          E34_CONST_1 = 54;
          E34_CONST_2 = 78;
          E34_CONST_3 = 52;
          E34_CONST_4 = 58;
          E34_CONST_5 = 14;
        }
        repeated E34 f_1 = 4 [packed = true];
      }
      repeated M53 f_9 = 9;
    }
    repeated M18 f_3 = 3;
    message M23 {
      optional fixed32 f_0 = 2;
      message M40 {
        optional string f_0 = 1;
      }
      optional M40 f_3 = 3;
      message M44 {
        optional int32 f_0 = 3;
      }
      optional M44 f_4 = 4;
    }
    optional M23 f_5 = 5;
    message M24 {
      enum E16 {
        E16_UNSPECIFIED = 0;
        E16_CONST_1 = 68;
        E16_CONST_2 = 95;
        E16_CONST_3 = 115;
        E16_CONST_4 = 125;
        E16_CONST_5 = 29;
      }
      optional E16 f_0 = 1;
      enum E17 {
        E17_UNSPECIFIED = 0;
        E17_CONST_1 = 97;
        E17_CONST_2 = 104;
        E17_CONST_3 = 13;
        E17_CONST_4 = 92;
        E17_CONST_5 = 108;
      }
      repeated E17 f_1 = 4 [packed = true];
      enum E18 {
        E18_UNSPECIFIED = 0;
        E18_CONST_1 = 64;
        E18_CONST_2 = 59;
        E18_CONST_3 = 67;
        E18_CONST_4 = 82;
        E18_CONST_5 = 14;
      }
      repeated E18 f_2 = 5 [packed = true];
      optional fixed64 f_3 = 6;
    }
    optional M24 f_6 = 6;
    message M30 {
      optional bool f_0 = 2;
      optional int32 f_1 = 4;
      optional bool f_2 = 6;
      optional double f_3 = 9;
      message M39 {
        enum E28 {
          E28_UNSPECIFIED = 0;
          E28_CONST_1 = 122;
          E28_CONST_2 = 126;
          E28_CONST_3 = 55;
          E28_CONST_4 = 44;
          E28_CONST_5 = 32;
        }
        optional E28 f_0 = 1;
        enum E29 {
          E29_UNSPECIFIED = 0;
          E29_CONST_1 = 20;
          E29_CONST_2 = 74;
          E29_CONST_3 = 11;
          E29_CONST_4 = 107;
          E29_CONST_5 = 49;
        }
        optional E29 f_1 = 2;
        optional string f_2 = 5;
        optional int32 f_3 = 7;
        message M58 {
          enum E44 {
            E44_UNSPECIFIED = 0;
            E44_CONST_1 = 21;
            E44_CONST_2 = 17;
            E44_CONST_3 = 88;
            E44_CONST_4 = 1;
            E44_CONST_5 = 121;
          }
          optional E44 f_0 = 1;
          message M60 {
            optional bool f_0 = 2;
          }
          optional M60 f_3 = 3;
        }
        repeated M58 f_9 = 9;
      }
      optional M39 f_11 = 11;
    }
    optional M30 f_9 = 9;
  }
  repeated M5 f_49 = 49;
  message M6 {
    optional bool f_0 = 4;
    message M26 {
      optional int32 f_0 = 2;
    }
    optional M26 f_5 = 5;
  }
  optional M6 f_51 = 51;
  message M7 {
    optional fixed64 f_0 = 2;
    optional int32 f_1 = 3;
    optional string f_2 = 5;
    optional fixed64 f_3 = 6;
    optional int32 f_4 = 8;
    message M28 {
      optional fixed32 f_0 = 2;
      enum E19 {
        E19_UNSPECIFIED = 0;
        E19_CONST_1 = 89;
        E19_CONST_2 = 7;
        E19_CONST_3 = 55;
        E19_CONST_4 = 3;
        E19_CONST_5 = 10;
      }
      optional E19 f_1 = 5;
      optional fixed64 f_2 = 7;
      optional int64 f_3 = 8;
      message M37 {
        optional string f_0 = 2;
        enum E26 {
          E26_UNSPECIFIED = 0;
          E26_CONST_1 = 55;
          E26_CONST_2 = 83;
          E26_CONST_3 = 13;
          E26_CONST_4 = 118;
          E26_CONST_5 = 20;
        }
        optional E26 f_1 = 3;
        enum E27 {
          E27_UNSPECIFIED = 0;
          E27_CONST_1 = 23;
          E27_CONST_2 = 94;
          E27_CONST_3 = 57;
          E27_CONST_4 = 35;
          E27_CONST_5 = 109;
        }
        optional E27 f_2 = 4;
        optional fixed64 f_3 = 7;
      }
      optional M37 f_9 = 9;
    }
    optional M28 f_10 = 10;
  }
  optional M7 f_52 = 52;
  message M8 {
    optional int32 f_0 = 3;
    message M27 {
      optional bool f_0 = 2;
    }
    optional M27 f_4 = 4;
    message M29 {
      optional int32 f_0 = 1;
      message M35 {
        enum E24 {
          E24_UNSPECIFIED = 0;
          E24_CONST_1 = 101;
          E24_CONST_2 = 107;
          E24_CONST_3 = 37;
          E24_CONST_4 = 124;
          E24_CONST_5 = 58;
        }
        repeated E24 f_0 = 2 [packed = true];
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 5;
        optional fixed64 f_3 = 7;
      }
      optional M35 f_2 = 2;
      message M43 {
        optional string f_0 = 2;
        optional fixed64 f_1 = 5;
        optional string f_2 = 7;
        optional fixed64 f_3 = 8;
      }
      repeated M43 f_3 = 3;
    }
    optional M29 f_6 = 6;
  }
  optional M8 f_53 = 53;
  message M9 {
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 9;
      E8_CONST_2 = 77;
      E8_CONST_3 = 71;
      E8_CONST_4 = 5;
      E8_CONST_5 = 15;
    }
    optional E8 f_0 = 1;
    optional int32 f_1 = 3;
    optional string f_2 = 4;
    optional int32 f_3 = 5;
  }
  optional M9 f_55 = 55;
  message M10 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 3;
    optional int32 f_2 = 6;
    optional int32 f_3 = 7;
  }
  optional M10 f_59 = 59;
  message M11 {
    enum E9 {
      E9_UNSPECIFIED = 0;
      E9_CONST_1 = 81;
      E9_CONST_2 = 46;
      E9_CONST_3 = 94;
      E9_CONST_4 = 67;
      E9_CONST_5 = 119;
    }
    repeated E9 f_0 = 1 [packed = true];
    enum E10 {
      E10_UNSPECIFIED = 0;
      E10_CONST_1 = 30;
      E10_CONST_2 = 121;
      E10_CONST_3 = 80;
      E10_CONST_4 = 23;
      E10_CONST_5 = 90;
    }
    repeated E10 f_1 = 2 [packed = true];
    optional string f_2 = 4;
    optional fixed64 f_3 = 6;
    message M15 {
      optional string f_0 = 2;
      message M46 {
        optional fixed64 f_0 = 3;
      }
      optional M46 f_4 = 4;
    }
    optional M15 f_7 = 7;
    message M17 {
      optional fixed64 f_0 = 2;
    }
    optional M17 f_8 = 8;
    message M31 {
      enum E20 {
        E20_UNSPECIFIED = 0;
        E20_CONST_1 = 45;
        E20_CONST_2 = 102;
        E20_CONST_3 = 46;
        E20_CONST_4 = 15;
        E20_CONST_5 = 17;
      }
      repeated E20 f_0 = 2 [packed = true];
      optional string f_1 = 4;
      optional int32 f_2 = 7;
      optional fixed64 f_3 = 8;
      message M34 {
        optional int32 f_0 = 1;
      }
      optional M34 f_9 = 9;
      message M45 {
        enum E30 {
          E30_UNSPECIFIED = 0;
          E30_CONST_1 = 36;
          E30_CONST_2 = 44;
          E30_CONST_3 = 54;
          E30_CONST_4 = 1;
          E30_CONST_5 = 103;
        }
        repeated E30 f_0 = 1 [packed = true];
        optional fixed64 f_1 = 3;
        message M56 {
          enum E37 {
            E37_UNSPECIFIED = 0;
            E37_CONST_1 = 95;
            E37_CONST_2 = 103;
            E37_CONST_3 = 6;
            E37_CONST_4 = 43;
            E37_CONST_5 = 71;
          }
          repeated E37 f_0 = 2 [packed = true];
          optional fixed64 f_1 = 3;
          enum E38 {
            E38_UNSPECIFIED = 0;
            E38_CONST_1 = 83;
            E38_CONST_2 = 123;
            E38_CONST_3 = 92;
            E38_CONST_4 = 87;
            E38_CONST_5 = 37;
          }
          repeated E38 f_2 = 4 [packed = true];
          optional string f_3 = 6;
          optional fixed64 f_4 = 8;
          optional int32 f_5 = 9;
          enum E39 {
            E39_UNSPECIFIED = 0;
            E39_CONST_1 = 63;
            E39_CONST_2 = 18;
            E39_CONST_3 = 90;
            E39_CONST_4 = 28;
            E39_CONST_5 = 105;
          }
          optional E39 f_6 = 12;
          optional int32 f_7 = 13;
          enum E40 {
            E40_UNSPECIFIED = 0;
            E40_CONST_1 = 8;
            E40_CONST_2 = 32;
            E40_CONST_3 = 98;
            E40_CONST_4 = 59;
            E40_CONST_5 = 68;
          }
          repeated E40 f_8 = 15 [packed = true];
          enum E41 {
            E41_UNSPECIFIED = 0;
            E41_CONST_1 = 87;
            E41_CONST_2 = 23;
            E41_CONST_3 = 124;
            E41_CONST_4 = 16;
            E41_CONST_5 = 98;
          }
          optional E41 f_9 = 16;
          optional fixed64 f_10 = 19;
          enum E42 {
            E42_UNSPECIFIED = 0;
            E42_CONST_1 = 59;
            E42_CONST_2 = 87;
            E42_CONST_3 = 24;
            E42_CONST_4 = 99;
            E42_CONST_5 = 32;
          }
          optional E42 f_11 = 20;
          optional int32 f_12 = 21;
          optional bool f_13 = 23;
          message M62 {
            optional fixed64 f_0 = 4;
            optional int32 f_1 = 6;
            optional int32 f_2 = 7;
            optional int32 f_3 = 9;
            enum E46 {
              E46_UNSPECIFIED = 0;
              E46_CONST_1 = 63;
              E46_CONST_2 = 92;
              E46_CONST_3 = 45;
              E46_CONST_4 = 55;
              E46_CONST_5 = 118;
            }
            repeated E46 f_4 = 11 [packed = true];
          }
          optional M62 f_26 = 26;
        }
        optional M56 f_4 = 4;
      }
      optional M45 f_11 = 11;
      message M50 {
        optional fixed64 f_0 = 1;
      }
      optional M50 f_12 = 12;
    }
    optional M31 f_9 = 9;
  }
  optional M11 f_62 = 62;
  message M12 {
    optional fixed64 f_0 = 2;
    enum E11 {
      E11_UNSPECIFIED = 0;
      E11_CONST_1 = 31;
      E11_CONST_2 = 18;
      E11_CONST_3 = 46;
      E11_CONST_4 = 1;
      E11_CONST_5 = 42;
    }
    optional E11 f_1 = 4;
    message M14 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional fixed64 f_4 = 5;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 84;
        E12_CONST_2 = 37;
        E12_CONST_3 = 53;
        E12_CONST_4 = 122;
        E12_CONST_5 = 1;
      }
      optional E12 f_5 = 7;
    }
    repeated M14 f_6 = 6;
  }
  repeated M12 f_63 = 63;
  message M13 {
    optional int32 f_0 = 1;
    message M25 {
      optional bool f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 3;
      optional fixed32 f_3 = 5;
      optional string f_4 = 7;
      optional bool f_5 = 8;
      message M36 {
        optional int32 f_0 = 3;
        optional fixed64 f_1 = 4;
        optional fixed64 f_2 = 5;
        enum E25 {
          E25_UNSPECIFIED = 0;
          E25_CONST_1 = 35;
          E25_CONST_2 = 115;
          E25_CONST_3 = 28;
          E25_CONST_4 = 12;
          E25_CONST_5 = 8;
        }
        repeated E25 f_3 = 6 [packed = true];
      }
      optional M36 f_9 = 9;
      message M47 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 4;
        optional int32 f_2 = 6;
        optional fixed64 f_3 = 7;
      }
      repeated M47 f_11 = 11;
      message M49 {
        optional string f_0 = 2;
        optional string f_1 = 4;
        optional bool f_2 = 6;
        enum E31 {
          E31_UNSPECIFIED = 0;
          E31_CONST_1 = 36;
          E31_CONST_2 = 69;
          E31_CONST_3 = 95;
          E31_CONST_4 = 74;
          E31_CONST_5 = 29;
        }
        repeated E31 f_3 = 7 [packed = true];
        enum E32 {
          E32_UNSPECIFIED = 0;
          E32_CONST_1 = 10;
          E32_CONST_2 = 38;
          E32_CONST_3 = 2;
          E32_CONST_4 = 121;
          E32_CONST_5 = 79;
        }
        optional E32 f_4 = 9;
        optional fixed32 f_5 = 10;
        message M55 {
          optional string f_0 = 1;
          message M61 {
            optional double f_0 = 1;
          }
          repeated M61 f_4 = 4;
        }
        optional M55 f_11 = 11;
        message M59 {
          enum E45 {
            E45_UNSPECIFIED = 0;
            E45_CONST_1 = 106;
            E45_CONST_2 = 36;
            E45_CONST_3 = 92;
            E45_CONST_4 = 43;
            E45_CONST_5 = 49;
          }
          optional E45 f_0 = 3;
          optional fixed64 f_1 = 5;
          optional string f_2 = 6;
          optional int64 f_3 = 8;
          message M63 {
            optional int32 f_0 = 1;
          }
          optional M63 f_11 = 11;
        }
        repeated M59 f_12 = 12;
      }
      optional M49 f_12 = 12;
    }
    optional M25 f_3 = 3;
  }
  repeated M13 f_64 = 64;
}
