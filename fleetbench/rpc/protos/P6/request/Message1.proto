// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.request.Message1;

message Message1 {
  optional fixed64 f_0 = 1;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 6;
    E1_CONST_2 = 67;
    E1_CONST_3 = 119;
    E1_CONST_4 = 120;
    E1_CONST_5 = 116;
  }
  optional E1 f_1 = 2;
  optional string f_2 = 3;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 8;
    E2_CONST_2 = 20;
    E2_CONST_3 = 83;
    E2_CONST_4 = 58;
    E2_CONST_5 = 100;
  }
  repeated E2 f_3 = 4 [packed = true];
  optional fixed64 f_4 = 6;
  optional int32 f_5 = 7;
  optional bool f_6 = 8;
  optional string f_7 = 10;
  optional string f_8 = 11;
  optional int32 f_9 = 12;
  optional string f_10 = 14;
  optional fixed32 f_11 = 15;
  optional int32 f_12 = 19;
  optional string f_13 = 21;
  optional int64 f_14 = 22;
  optional string f_15 = 23;
  optional int32 f_16 = 24;
  optional string f_17 = 25;
  optional fixed64 f_18 = 27;
  optional bool f_19 = 29;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 125;
    E3_CONST_2 = 58;
    E3_CONST_3 = 71;
    E3_CONST_4 = 65;
    E3_CONST_5 = 18;
  }
  repeated E3 f_20 = 30 [packed = true];
  optional double f_21 = 33;
  optional bool f_22 = 34;
  optional bool f_23 = 35;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 84;
    E4_CONST_2 = 40;
    E4_CONST_3 = 112;
    E4_CONST_4 = 86;
    E4_CONST_5 = 12;
  }
  repeated E4 f_24 = 37 [packed = true];
  optional fixed64 f_25 = 40;
  enum E5 {
    E5_UNSPECIFIED = 0;
    E5_CONST_1 = 122;
    E5_CONST_2 = 118;
    E5_CONST_3 = 34;
    E5_CONST_4 = 90;
    E5_CONST_5 = 64;
  }
  repeated E5 f_26 = 43 [packed = true];
  optional fixed64 f_27 = 44;
  optional string f_28 = 45;
  optional int32 f_29 = 46;
  message M1 {
    optional int32 f_0 = 2;
    message M27 {
      optional string f_0 = 1;
    }
    repeated M27 f_3 = 3;
    message M34 {
      optional int32 f_0 = 1;
    }
    repeated M34 f_4 = 4;
    message M35 {
      optional string f_0 = 3;
      message M50 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional bool f_2 = 3;
        enum E36 {
          E36_UNSPECIFIED = 0;
          E36_CONST_1 = 49;
          E36_CONST_2 = 1;
          E36_CONST_3 = 59;
          E36_CONST_4 = 22;
          E36_CONST_5 = 65;
        }
        repeated E36 f_3 = 4 [packed = true];
        optional bool f_4 = 5;
        message M57 {
          optional fixed64 f_0 = 3;
          optional fixed32 f_1 = 5;
          optional fixed64 f_2 = 7;
          optional fixed64 f_3 = 8;
        }
        optional M57 f_7 = 7;
        message M58 {
          enum E41 {
            E41_UNSPECIFIED = 0;
            E41_CONST_1 = 48;
            E41_CONST_2 = 122;
            E41_CONST_3 = 40;
            E41_CONST_4 = 36;
            E41_CONST_5 = 30;
          }
          repeated E41 f_0 = 3 [packed = true];
        }
        optional M58 f_10 = 10;
      }
      repeated M50 f_4 = 4;
      message M51 {
        optional int32 f_0 = 1;
        optional bool f_1 = 3;
        enum E37 {
          E37_UNSPECIFIED = 0;
          E37_CONST_1 = 117;
          E37_CONST_2 = 11;
          E37_CONST_3 = 86;
          E37_CONST_4 = 82;
          E37_CONST_5 = 58;
        }
        optional E37 f_2 = 4;
        optional int64 f_3 = 5;
        message M60 {
          optional bool f_0 = 1;
          optional int32 f_1 = 2;
          optional fixed32 f_2 = 3;
        }
        repeated M60 f_7 = 7;
      }
      optional M51 f_5 = 5;
    }
    optional M35 f_5 = 5;
    message M39 {
      optional bool f_0 = 1;
    }
    optional M39 f_7 = 7;
    message M41 {
      optional bool f_0 = 2;
      message M55 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 3;
        optional string f_2 = 4;
        message M56 {
          enum E40 {
            E40_UNSPECIFIED = 0;
            E40_CONST_1 = 36;
            E40_CONST_2 = 31;
            E40_CONST_3 = 62;
            E40_CONST_4 = 106;
            E40_CONST_5 = 100;
          }
          repeated E40 f_0 = 1 [packed = true];
          optional fixed64 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional string f_3 = 5;
          optional fixed32 f_4 = 6;
          optional bool f_5 = 7;
          optional fixed64 f_6 = 10;
          message M63 {
            optional int64 f_0 = 2;
            optional int32 f_1 = 3;
            optional double f_2 = 4;
            optional fixed64 f_3 = 5;
            optional int32 f_4 = 8;
            optional int32 f_5 = 10;
          }
          repeated M63 f_12 = 12;
        }
        repeated M56 f_5 = 5;
      }
      optional M55 f_3 = 3;
    }
    optional M41 f_8 = 8;
    message M44 {
      enum E32 {
        E32_UNSPECIFIED = 0;
        E32_CONST_1 = 80;
        E32_CONST_2 = 24;
        E32_CONST_3 = 16;
        E32_CONST_4 = 40;
        E32_CONST_5 = 39;
      }
      optional E32 f_0 = 1;
      message M47 {
        optional fixed64 f_0 = 1;
      }
      repeated M47 f_2 = 2;
    }
    optional M44 f_10 = 10;
  }
  optional M1 f_49 = 49;
  message M2 {
    optional int32 f_0 = 1;
    message M14 {
      optional int32 f_0 = 1;
    }
    optional M14 f_2 = 2;
    message M15 {
      optional fixed64 f_0 = 2;
      enum E22 {
        E22_UNSPECIFIED = 0;
        E22_CONST_1 = 109;
        E22_CONST_2 = 17;
        E22_CONST_3 = 31;
        E22_CONST_4 = 36;
        E22_CONST_5 = 3;
      }
      repeated E22 f_1 = 3 [packed = true];
      optional fixed64 f_2 = 4;
      optional fixed64 f_3 = 6;
    }
    optional M15 f_3 = 3;
    message M18 {
      optional bool f_0 = 1;
    }
    optional M18 f_4 = 4;
    message M21 {
      enum E24 {
        E24_UNSPECIFIED = 0;
        E24_CONST_1 = 110;
        E24_CONST_2 = 107;
        E24_CONST_3 = 55;
        E24_CONST_4 = 121;
        E24_CONST_5 = 48;
      }
      optional E24 f_0 = 1;
      optional int32 f_1 = 2;
      enum E25 {
        E25_UNSPECIFIED = 0;
        E25_CONST_1 = 94;
        E25_CONST_2 = 36;
        E25_CONST_3 = 43;
        E25_CONST_4 = 19;
        E25_CONST_5 = 35;
      }
      repeated E25 f_2 = 3 [packed = true];
      optional string f_3 = 4;
      optional int32 f_4 = 6;
    }
    repeated M21 f_6 = 6;
    message M23 {
      enum E27 {
        E27_UNSPECIFIED = 0;
        E27_CONST_1 = 117;
        E27_CONST_2 = 1;
        E27_CONST_3 = 118;
        E27_CONST_4 = 121;
        E27_CONST_5 = 12;
      }
      optional E27 f_0 = 1;
    }
    repeated M23 f_7 = 7;
  }
  optional M2 f_50 = 50;
  message M3 {
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 1;
      E6_CONST_2 = 40;
      E6_CONST_3 = 54;
      E6_CONST_4 = 80;
      E6_CONST_5 = 101;
    }
    optional E6 f_0 = 3;
    message M8 {
      optional double f_0 = 1;
    }
    optional M8 f_4 = 4;
    message M12 {
      enum E18 {
        E18_UNSPECIFIED = 0;
        E18_CONST_1 = 113;
        E18_CONST_2 = 78;
        E18_CONST_3 = 19;
        E18_CONST_4 = 43;
        E18_CONST_5 = 81;
      }
      optional E18 f_0 = 1;
      enum E19 {
        E19_UNSPECIFIED = 0;
        E19_CONST_1 = 66;
        E19_CONST_2 = 113;
        E19_CONST_3 = 81;
        E19_CONST_4 = 18;
        E19_CONST_5 = 99;
      }
      optional E19 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional int32 f_3 = 5;
      optional double f_4 = 6;
      optional fixed64 f_5 = 7;
    }
    repeated M12 f_6 = 6;
    message M17 {
      optional int32 f_0 = 1;
    }
    optional M17 f_8 = 8;
    message M20 {
      optional fixed64 f_0 = 1;
      message M49 {
        enum E34 {
          E34_UNSPECIFIED = 0;
          E34_CONST_1 = 109;
          E34_CONST_2 = 79;
          E34_CONST_3 = 68;
          E34_CONST_4 = 95;
          E34_CONST_5 = 18;
        }
        repeated E34 f_0 = 3 [packed = true];
        optional fixed64 f_1 = 4;
        enum E35 {
          E35_UNSPECIFIED = 0;
          E35_CONST_1 = 87;
          E35_CONST_2 = 100;
          E35_CONST_3 = 90;
          E35_CONST_4 = 68;
          E35_CONST_5 = 48;
        }
        repeated E35 f_2 = 6 [packed = true];
        optional int32 f_3 = 10;
      }
      optional M49 f_2 = 2;
    }
    optional M20 f_9 = 9;
    message M22 {
      optional string f_0 = 1;
      enum E26 {
        E26_UNSPECIFIED = 0;
        E26_CONST_1 = 59;
        E26_CONST_2 = 29;
        E26_CONST_3 = 4;
        E26_CONST_4 = 63;
        E26_CONST_5 = 113;
      }
      optional E26 f_1 = 2;
      optional bool f_2 = 3;
      optional string f_3 = 5;
    }
    optional M22 f_12 = 12;
    message M29 {
      optional string f_0 = 1;
    }
    repeated M29 f_13 = 13;
    message M31 {
      optional bool f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M31 f_14 = 14;
    message M32 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 4;
      optional int32 f_2 = 5;
      optional fixed64 f_3 = 7;
    }
    optional M32 f_15 = 15;
    message M42 {
      optional int32 f_0 = 1;
      message M48 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional double f_2 = 3;
        optional int32 f_3 = 4;
        optional string f_4 = 5;
        optional int32 f_5 = 6;
        message M59 {
          optional bool f_0 = 1;
          message M62 {
            optional bool f_0 = 2;
            optional int32 f_1 = 3;
            optional fixed64 f_2 = 4;
            optional int32 f_3 = 5;
            optional fixed64 f_4 = 7;
            optional fixed64 f_5 = 8;
          }
          optional M62 f_4 = 4;
        }
        optional M59 f_9 = 9;
        message M61 {
          optional fixed64 f_0 = 1;
          enum E42 {
            E42_UNSPECIFIED = 0;
            E42_CONST_1 = 46;
            E42_CONST_2 = 57;
            E42_CONST_3 = 98;
            E42_CONST_4 = 25;
            E42_CONST_5 = 60;
          }
          optional E42 f_1 = 2;
          optional int64 f_2 = 4;
          enum E43 {
            E43_UNSPECIFIED = 0;
            E43_CONST_1 = 28;
            E43_CONST_2 = 11;
            E43_CONST_3 = 8;
            E43_CONST_4 = 80;
            E43_CONST_5 = 10;
          }
          repeated E43 f_3 = 5 [packed = true];
        }
        optional M61 f_10 = 10;
      }
      optional M48 f_2 = 2;
    }
    optional M42 f_17 = 17;
  }
  optional M3 f_51 = 51;
  message M4 {
    optional string f_0 = 1;
    message M16 {
      optional int32 f_0 = 1;
    }
    optional M16 f_2 = 2;
    message M28 {
      optional string f_0 = 1;
    }
    optional M28 f_4 = 4;
    message M33 {
      optional string f_0 = 1;
      enum E30 {
        E30_UNSPECIFIED = 0;
        E30_CONST_1 = 56;
        E30_CONST_2 = 92;
        E30_CONST_3 = 115;
        E30_CONST_4 = 67;
        E30_CONST_5 = 90;
      }
      optional E30 f_1 = 2;
      optional string f_2 = 3;
      optional string f_3 = 5;
      optional int64 f_4 = 6;
      optional fixed64 f_5 = 7;
      message M54 {
        optional int32 f_0 = 2;
        enum E39 {
          E39_UNSPECIFIED = 0;
          E39_CONST_1 = 123;
          E39_CONST_2 = 87;
          E39_CONST_3 = 61;
          E39_CONST_4 = 101;
          E39_CONST_5 = 12;
        }
        repeated E39 f_1 = 3 [packed = true];
        optional string f_2 = 6;
        optional fixed32 f_3 = 7;
        optional int64 f_4 = 8;
      }
      repeated M54 f_8 = 8;
    }
    repeated M33 f_6 = 6;
    message M36 {
      optional fixed32 f_0 = 1;
      optional bool f_1 = 2;
      optional string f_2 = 4;
      optional double f_3 = 5;
      enum E31 {
        E31_UNSPECIFIED = 0;
        E31_CONST_1 = 88;
        E31_CONST_2 = 76;
        E31_CONST_3 = 36;
        E31_CONST_4 = 56;
        E31_CONST_5 = 99;
      }
      optional E31 f_4 = 6;
      optional int32 f_5 = 8;
      optional fixed32 f_6 = 9;
      message M53 {
        enum E38 {
          E38_UNSPECIFIED = 0;
          E38_CONST_1 = 70;
          E38_CONST_2 = 9;
          E38_CONST_3 = 85;
          E38_CONST_4 = 53;
          E38_CONST_5 = 106;
        }
        optional E38 f_0 = 1;
      }
      optional M53 f_10 = 10;
    }
    optional M36 f_7 = 7;
    message M40 {
      optional int32 f_0 = 1;
    }
    repeated M40 f_9 = 9;
    message M45 {
      optional string f_0 = 1;
    }
    optional M45 f_10 = 10;
  }
  repeated M4 f_53 = 53;
  message M5 {
    optional int32 f_0 = 1;
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 63;
      E7_CONST_2 = 123;
      E7_CONST_3 = 62;
      E7_CONST_4 = 76;
      E7_CONST_5 = 120;
    }
    repeated E7 f_1 = 2 [packed = true];
    message M30 {
      enum E28 {
        E28_UNSPECIFIED = 0;
        E28_CONST_1 = 108;
        E28_CONST_2 = 56;
        E28_CONST_3 = 48;
        E28_CONST_4 = 34;
        E28_CONST_5 = 39;
      }
      repeated E28 f_0 = 1 [packed = true];
      enum E29 {
        E29_UNSPECIFIED = 0;
        E29_CONST_1 = 47;
        E29_CONST_2 = 1;
        E29_CONST_3 = 48;
        E29_CONST_4 = 15;
        E29_CONST_5 = 97;
      }
      repeated E29 f_1 = 2 [packed = true];
      optional int32 f_2 = 3;
    }
    repeated M30 f_3 = 3;
    message M46 {
      optional fixed64 f_0 = 2;
      optional string f_1 = 3;
      optional fixed64 f_2 = 4;
      optional bytes f_3 = 6;
      enum E33 {
        E33_UNSPECIFIED = 0;
        E33_CONST_1 = 41;
        E33_CONST_2 = 61;
        E33_CONST_3 = 52;
        E33_CONST_4 = 9;
        E33_CONST_5 = 113;
      }
      optional E33 f_4 = 8;
    }
    repeated M46 f_5 = 5;
  }
  repeated M5 f_55 = 55;
  message M6 {
    optional bool f_0 = 1;
    message M13 {
      enum E20 {
        E20_UNSPECIFIED = 0;
        E20_CONST_1 = 20;
        E20_CONST_2 = 84;
        E20_CONST_3 = 73;
        E20_CONST_4 = 44;
        E20_CONST_5 = 88;
      }
      repeated E20 f_0 = 1 [packed = true];
      enum E21 {
        E21_UNSPECIFIED = 0;
        E21_CONST_1 = 68;
        E21_CONST_2 = 13;
        E21_CONST_3 = 91;
        E21_CONST_4 = 99;
        E21_CONST_5 = 126;
      }
      optional E21 f_1 = 3;
    }
    optional M13 f_2 = 2;
    message M19 {
      enum E23 {
        E23_UNSPECIFIED = 0;
        E23_CONST_1 = 121;
        E23_CONST_2 = 98;
        E23_CONST_3 = 118;
        E23_CONST_4 = 104;
        E23_CONST_5 = 117;
      }
      optional E23 f_0 = 2;
    }
    repeated M19 f_3 = 3;
    message M24 {
      optional fixed64 f_0 = 2;
    }
    optional M24 f_4 = 4;
    message M43 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M43 f_6 = 6;
  }
  optional M6 f_58 = 58;
  message M7 {
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 46;
      E8_CONST_2 = 45;
      E8_CONST_3 = 48;
      E8_CONST_4 = 9;
      E8_CONST_5 = 86;
    }
    optional E8 f_0 = 2;
    optional double f_1 = 4;
    optional int32 f_2 = 5;
    optional int32 f_3 = 6;
    enum E9 {
      E9_UNSPECIFIED = 0;
      E9_CONST_1 = 48;
      E9_CONST_2 = 77;
      E9_CONST_3 = 116;
      E9_CONST_4 = 106;
      E9_CONST_5 = 32;
    }
    repeated E9 f_4 = 7 [packed = true];
    optional fixed64 f_5 = 10;
    optional double f_6 = 11;
    optional bool f_7 = 12;
    optional int32 f_8 = 14;
    enum E10 {
      E10_UNSPECIFIED = 0;
      E10_CONST_1 = 53;
      E10_CONST_2 = 93;
      E10_CONST_3 = 96;
      E10_CONST_4 = 5;
      E10_CONST_5 = 95;
    }
    optional E10 f_9 = 15;
    optional double f_10 = 16;
    optional bool f_11 = 18;
    optional string f_12 = 19;
    optional int32 f_13 = 20;
    optional string f_14 = 21;
    enum E11 {
      E11_UNSPECIFIED = 0;
      E11_CONST_1 = 26;
      E11_CONST_2 = 7;
      E11_CONST_3 = 8;
      E11_CONST_4 = 83;
      E11_CONST_5 = 49;
    }
    repeated E11 f_15 = 23 [packed = true];
    enum E12 {
      E12_UNSPECIFIED = 0;
      E12_CONST_1 = 65;
      E12_CONST_2 = 42;
      E12_CONST_3 = 44;
      E12_CONST_4 = 112;
      E12_CONST_5 = 1;
    }
    repeated E12 f_16 = 24 [packed = true];
    optional int32 f_17 = 25;
    optional int32 f_18 = 26;
    optional fixed64 f_19 = 28;
    optional fixed64 f_20 = 29;
    optional string f_21 = 30;
    enum E13 {
      E13_UNSPECIFIED = 0;
      E13_CONST_1 = 75;
      E13_CONST_2 = 73;
      E13_CONST_3 = 27;
      E13_CONST_4 = 3;
      E13_CONST_5 = 125;
    }
    optional E13 f_22 = 32;
    optional string f_23 = 35;
    optional fixed64 f_24 = 37;
    optional string f_25 = 38;
    optional fixed64 f_26 = 40;
    optional string f_27 = 41;
    enum E14 {
      E14_UNSPECIFIED = 0;
      E14_CONST_1 = 17;
      E14_CONST_2 = 107;
      E14_CONST_3 = 63;
      E14_CONST_4 = 50;
      E14_CONST_5 = 15;
    }
    repeated E14 f_28 = 42 [packed = true];
    optional int32 f_29 = 43;
    enum E15 {
      E15_UNSPECIFIED = 0;
      E15_CONST_1 = 17;
      E15_CONST_2 = 71;
      E15_CONST_3 = 56;
      E15_CONST_4 = 1;
      E15_CONST_5 = 30;
    }
    optional E15 f_30 = 46;
    optional int32 f_31 = 47;
    message M9 {
      optional string f_0 = 1;
      optional int32 f_1 = 3;
      optional double f_2 = 5;
      optional bool f_3 = 6;
      enum E16 {
        E16_UNSPECIFIED = 0;
        E16_CONST_1 = 25;
        E16_CONST_2 = 5;
        E16_CONST_3 = 20;
        E16_CONST_4 = 114;
        E16_CONST_5 = 77;
      }
      optional E16 f_4 = 7;
      optional bool f_5 = 9;
    }
    repeated M9 f_48 = 48;
    message M10 {
      optional bool f_0 = 2;
    }
    optional M10 f_49 = 49;
    message M11 {
      enum E17 {
        E17_UNSPECIFIED = 0;
        E17_CONST_1 = 108;
        E17_CONST_2 = 51;
        E17_CONST_3 = 111;
        E17_CONST_4 = 47;
        E17_CONST_5 = 70;
      }
      optional E17 f_0 = 1;
    }
    optional M11 f_51 = 51;
    message M25 {
      optional bool f_0 = 1;
    }
    repeated M25 f_53 = 53;
    message M26 {
      optional double f_0 = 1;
      message M52 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 4;
      }
      optional M52 f_2 = 2;
    }
    repeated M26 f_56 = 56;
    message M37 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 3;
    }
    optional M37 f_58 = 58;
    message M38 {
      optional fixed32 f_0 = 1;
    }
    repeated M38 f_59 = 59;
  }
  optional M7 f_60 = 60;
}
