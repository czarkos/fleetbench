// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.request.Message0;

message Message0 {
  optional int32 f_0 = 1;
  optional int32 f_1 = 3;
  optional bool f_2 = 4;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 72;
    E1_CONST_2 = 85;
    E1_CONST_3 = 119;
    E1_CONST_4 = 105;
    E1_CONST_5 = 108;
  }
  repeated E1 f_3 = 6 [packed = true];
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 26;
    E2_CONST_2 = 103;
    E2_CONST_3 = 97;
    E2_CONST_4 = 65;
    E2_CONST_5 = 55;
  }
  optional E2 f_4 = 8;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 34;
    E3_CONST_2 = 61;
    E3_CONST_3 = 9;
    E3_CONST_4 = 31;
    E3_CONST_5 = 38;
  }
  optional E3 f_5 = 11;
  optional bool f_6 = 14;
  optional string f_7 = 15;
  optional fixed64 f_8 = 16;
  optional fixed64 f_9 = 17;
  optional int32 f_10 = 19;
  optional string f_11 = 20;
  optional fixed64 f_12 = 21;
  optional string f_13 = 24;
  optional int32 f_14 = 26;
  optional fixed64 f_15 = 27;
  optional bool f_16 = 28;
  optional int32 f_17 = 29;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 74;
    E4_CONST_2 = 119;
    E4_CONST_3 = 3;
    E4_CONST_4 = 41;
    E4_CONST_5 = 114;
  }
  optional E4 f_18 = 31;
  optional int32 f_19 = 32;
  optional int64 f_20 = 33;
  optional int32 f_21 = 34;
  optional fixed64 f_22 = 35;
  optional fixed64 f_23 = 36;
  optional bool f_24 = 38;
  optional bool f_25 = 39;
  optional int32 f_26 = 40;
  optional fixed64 f_27 = 43;
  optional fixed64 f_28 = 44;
  optional bool f_29 = 45;
  message M1 {
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 2;
      E5_CONST_2 = 90;
      E5_CONST_3 = 57;
      E5_CONST_4 = 89;
      E5_CONST_5 = 91;
    }
    optional E5 f_0 = 1;
    optional int32 f_1 = 2;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 34;
      E6_CONST_2 = 71;
      E6_CONST_3 = 77;
      E6_CONST_4 = 40;
      E6_CONST_5 = 27;
    }
    optional E6 f_2 = 3;
    message M25 {
      optional string f_0 = 2;
    }
    repeated M25 f_6 = 6;
    message M32 {
      optional fixed64 f_0 = 2;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 99;
        E10_CONST_2 = 42;
        E10_CONST_3 = 111;
        E10_CONST_4 = 49;
        E10_CONST_5 = 123;
      }
      repeated E10 f_1 = 3 [packed = true];
      optional fixed64 f_2 = 5;
      optional string f_3 = 6;
      optional bool f_4 = 8;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 114;
        E11_CONST_2 = 21;
        E11_CONST_3 = 33;
        E11_CONST_4 = 16;
        E11_CONST_5 = 38;
      }
      repeated E11 f_5 = 9 [packed = true];
    }
    optional M32 f_7 = 7;
  }
  optional M1 f_46 = 46;
  message M2 {
    optional string f_0 = 2;
    optional int64 f_1 = 4;
    optional bool f_2 = 6;
    message M35 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 4;
    }
    optional M35 f_7 = 7;
  }
  repeated M2 f_47 = 47;
  message M3 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional string f_2 = 4;
    message M42 {
      optional int32 f_0 = 1;
      optional bool f_1 = 3;
    }
    optional M42 f_5 = 5;
  }
  optional M3 f_48 = 48;
  message M4 {
    optional bool f_0 = 3;
    optional int32 f_1 = 4;
    optional double f_2 = 5;
    message M20 {
      optional bool f_0 = 1;
    }
    optional M20 f_6 = 6;
    message M24 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed32 f_2 = 4;
      optional int32 f_3 = 6;
      optional bytes f_4 = 7;
      optional int32 f_5 = 9;
      optional fixed64 f_6 = 10;
      optional fixed64 f_7 = 12;
      optional fixed32 f_8 = 13;
      optional fixed32 f_9 = 14;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 61;
        E9_CONST_2 = 121;
        E9_CONST_3 = 87;
        E9_CONST_4 = 85;
        E9_CONST_5 = 89;
      }
      optional E9 f_10 = 16;
      optional string f_11 = 18;
      optional string f_12 = 19;
      optional string f_13 = 21;
    }
    optional M24 f_7 = 7;
  }
  optional M4 f_49 = 49;
  message M5 {
    optional fixed32 f_0 = 3;
    message M39 {
      optional string f_0 = 1;
    }
    optional M39 f_5 = 5;
  }
  optional M5 f_50 = 50;
  message M6 {
    optional fixed32 f_0 = 1;
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 5;
      E7_CONST_2 = 84;
      E7_CONST_3 = 31;
      E7_CONST_4 = 48;
      E7_CONST_5 = 25;
    }
    optional E7 f_1 = 2;
    message M41 {
      optional fixed64 f_0 = 4;
      optional int32 f_1 = 6;
      optional string f_2 = 7;
      optional fixed64 f_3 = 9;
      optional fixed64 f_4 = 13;
    }
    repeated M41 f_3 = 3;
  }
  repeated M6 f_51 = 51;
  message M7 {
    optional int64 f_0 = 1;
    optional int32 f_1 = 2;
    message M30 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 3;
      optional int64 f_2 = 4;
      optional fixed64 f_3 = 5;
    }
    optional M30 f_4 = 4;
  }
  repeated M7 f_54 = 54;
  message M8 {
    optional bool f_0 = 1;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 104;
      E8_CONST_2 = 96;
      E8_CONST_3 = 27;
      E8_CONST_4 = 95;
      E8_CONST_5 = 97;
    }
    repeated E8 f_1 = 2 [packed = true];
    optional fixed64 f_2 = 5;
    optional fixed32 f_3 = 6;
    message M31 {
      optional fixed64 f_0 = 2;
    }
    optional M31 f_7 = 7;
  }
  optional M8 f_55 = 55;
  message M9 {
    optional double f_0 = 1;
    message M23 {
      optional int32 f_0 = 1;
    }
    repeated M23 f_3 = 3;
    message M38 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    optional M38 f_5 = 5;
  }
  optional M9 f_56 = 56;
  message M10 {
    optional fixed64 f_0 = 1;
    optional string f_1 = 2;
    message M17 {
      optional fixed32 f_0 = 1;
      message M46 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
        optional fixed64 f_2 = 3;
        optional fixed64 f_3 = 4;
        optional double f_4 = 7;
        optional bool f_5 = 8;
        optional fixed64 f_6 = 9;
        optional fixed64 f_7 = 11;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 92;
          E16_CONST_2 = 104;
          E16_CONST_3 = 111;
          E16_CONST_4 = 102;
          E16_CONST_5 = 113;
        }
        optional E16 f_8 = 13;
        optional int32 f_9 = 14;
        optional string f_10 = 16;
        optional fixed32 f_11 = 18;
        optional int32 f_12 = 20;
        optional fixed64 f_13 = 21;
        optional fixed64 f_14 = 22;
        optional int32 f_15 = 24;
        optional string f_16 = 25;
        optional double f_17 = 28;
        optional double f_18 = 30;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 13;
          E17_CONST_2 = 78;
          E17_CONST_3 = 106;
          E17_CONST_4 = 96;
          E17_CONST_5 = 115;
        }
        repeated E17 f_19 = 32 [packed = true];
        optional string f_20 = 33;
        optional string f_21 = 34;
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 96;
          E18_CONST_2 = 4;
          E18_CONST_3 = 107;
          E18_CONST_4 = 8;
          E18_CONST_5 = 29;
        }
        repeated E18 f_22 = 35 [packed = true];
        optional fixed64 f_23 = 37;
        optional bool f_24 = 40;
        optional int32 f_25 = 41;
        optional double f_26 = 42;
        optional int32 f_27 = 45;
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 79;
          E19_CONST_2 = 110;
          E19_CONST_3 = 21;
          E19_CONST_4 = 13;
          E19_CONST_5 = 113;
        }
        optional E19 f_28 = 46;
        optional fixed32 f_29 = 47;
        enum E20 {
          E20_UNSPECIFIED = 0;
          E20_CONST_1 = 15;
          E20_CONST_2 = 87;
          E20_CONST_3 = 48;
          E20_CONST_4 = 51;
          E20_CONST_5 = 98;
        }
        optional E20 f_30 = 50;
        message M50 {
          optional fixed64 f_0 = 2;
        }
        optional M50 f_52 = 52;
        message M53 {
          optional int32 f_0 = 1;
          optional double f_1 = 3;
          optional bool f_2 = 4;
        }
        repeated M53 f_53 = 53;
        message M54 {
          optional string f_0 = 1;
        }
        optional M54 f_54 = 54;
        message M55 {
          optional fixed32 f_0 = 1;
        }
        repeated M55 f_55 = 55;
      }
      repeated M46 f_3 = 3;
    }
    optional M17 f_3 = 3;
    message M26 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
    }
    optional M26 f_4 = 4;
    message M36 {
      optional fixed32 f_0 = 1;
    }
    optional M36 f_6 = 6;
    message M37 {
      optional string f_0 = 1;
    }
    optional M37 f_8 = 8;
  }
  optional M10 f_60 = 60;
  message M11 {
    optional fixed64 f_0 = 1;
    message M16 {
      optional int64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
    }
    repeated M16 f_3 = 3;
    message M18 {
      optional double f_0 = 1;
      message M45 {
        optional string f_0 = 5;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 103;
          E14_CONST_2 = 5;
          E14_CONST_3 = 21;
          E14_CONST_4 = 76;
          E14_CONST_5 = 91;
        }
        repeated E14 f_1 = 7 [packed = true];
        optional string f_2 = 8;
        optional int32 f_3 = 10;
        optional int32 f_4 = 12;
        optional fixed64 f_5 = 14;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 33;
          E15_CONST_2 = 30;
          E15_CONST_3 = 25;
          E15_CONST_4 = 54;
          E15_CONST_5 = 118;
        }
        optional E15 f_6 = 15;
        optional int32 f_7 = 18;
        optional string f_8 = 20;
        optional bool f_9 = 22;
        message M47 {
          optional bool f_0 = 2;
          optional bool f_1 = 3;
          optional fixed64 f_2 = 4;
          enum E21 {
            E21_UNSPECIFIED = 0;
            E21_CONST_1 = 54;
            E21_CONST_2 = 94;
            E21_CONST_3 = 80;
            E21_CONST_4 = 8;
            E21_CONST_5 = 23;
          }
          optional E21 f_3 = 6;
          message M56 {
            optional fixed64 f_0 = 1;
            optional int64 f_1 = 3;
            optional bool f_2 = 4;
          }
          optional M56 f_8 = 8;
        }
        repeated M47 f_23 = 23;
        message M48 {
          optional fixed64 f_0 = 1;
        }
        optional M48 f_24 = 24;
        message M51 {
          optional string f_0 = 1;
          message M57 {
            enum E23 {
              E23_UNSPECIFIED = 0;
              E23_CONST_1 = 38;
              E23_CONST_2 = 24;
              E23_CONST_3 = 119;
              E23_CONST_4 = 22;
              E23_CONST_5 = 105;
            }
            optional E23 f_0 = 4;
            optional int32 f_1 = 5;
            optional fixed64 f_2 = 6;
            enum E24 {
              E24_UNSPECIFIED = 0;
              E24_CONST_1 = 104;
              E24_CONST_2 = 70;
              E24_CONST_3 = 57;
              E24_CONST_4 = 113;
              E24_CONST_5 = 80;
            }
            repeated E24 f_3 = 8 [packed = true];
            optional int32 f_4 = 11;
          }
          repeated M57 f_2 = 2;
        }
        optional M51 f_25 = 25;
        message M52 {
          enum E22 {
            E22_UNSPECIFIED = 0;
            E22_CONST_1 = 99;
            E22_CONST_2 = 76;
            E22_CONST_3 = 49;
            E22_CONST_4 = 36;
            E22_CONST_5 = 69;
          }
          repeated E22 f_0 = 1 [packed = true];
          optional fixed64 f_1 = 2;
          optional string f_2 = 3;
          optional int32 f_3 = 4;
          optional string f_4 = 5;
          optional string f_5 = 7;
        }
        repeated M52 f_26 = 26;
      }
      optional M45 f_2 = 2;
    }
    repeated M18 f_6 = 6;
  }
  optional M11 f_61 = 61;
  message M12 {
    optional string f_0 = 3;
    message M19 {
      optional int32 f_0 = 1;
    }
    repeated M19 f_4 = 4;
    message M27 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional bool f_2 = 4;
    }
    repeated M27 f_5 = 5;
    message M40 {
      optional string f_0 = 1;
    }
    optional M40 f_6 = 6;
  }
  optional M12 f_62 = 62;
  message M13 {
    optional int32 f_0 = 2;
    optional string f_1 = 4;
    optional string f_2 = 7;
    message M22 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed32 f_2 = 4;
      optional fixed64 f_3 = 5;
      message M43 {
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 17;
          E13_CONST_2 = 84;
          E13_CONST_3 = 70;
          E13_CONST_4 = 39;
          E13_CONST_5 = 11;
        }
        optional E13 f_0 = 2;
        message M49 {
          optional double f_0 = 1;
        }
        repeated M49 f_3 = 3;
      }
      repeated M43 f_6 = 6;
    }
    repeated M22 f_8 = 8;
    message M28 {
      optional int32 f_0 = 1;
    }
    optional M28 f_9 = 9;
    message M29 {
      optional int32 f_0 = 2;
      optional bytes f_1 = 4;
      optional string f_2 = 5;
    }
    repeated M29 f_11 = 11;
  }
  optional M13 f_63 = 63;
  message M14 {
    optional int32 f_0 = 1;
    message M21 {
      optional bool f_0 = 1;
      message M44 {
        optional fixed64 f_0 = 1;
      }
      repeated M44 f_2 = 2;
    }
    repeated M21 f_2 = 2;
  }
  optional M14 f_64 = 64;
  message M15 {
    optional string f_0 = 1;
    message M33 {
      optional fixed64 f_0 = 1;
    }
    optional M33 f_2 = 2;
    message M34 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 5;
      optional bool f_3 = 6;
      optional bool f_4 = 7;
      optional bool f_5 = 8;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 114;
        E12_CONST_2 = 83;
        E12_CONST_3 = 43;
        E12_CONST_4 = 49;
        E12_CONST_5 = 35;
      }
      optional E12 f_6 = 9;
    }
    optional M34 f_4 = 4;
  }
  repeated M15 f_65 = 65;
}
