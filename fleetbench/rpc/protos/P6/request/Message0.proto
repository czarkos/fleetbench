// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.request.Message0;

message Message0 {
  optional int32 f_0 = 1;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 31;
    E1_CONST_2 = 70;
    E1_CONST_3 = 45;
    E1_CONST_4 = 13;
    E1_CONST_5 = 38;
  }
  optional E1 f_1 = 3;
  optional string f_2 = 4;
  optional fixed32 f_3 = 6;
  optional fixed64 f_4 = 8;
  optional fixed64 f_5 = 11;
  optional string f_6 = 13;
  optional fixed64 f_7 = 15;
  optional fixed64 f_8 = 16;
  optional fixed32 f_9 = 17;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 70;
    E2_CONST_2 = 119;
    E2_CONST_3 = 14;
    E2_CONST_4 = 41;
    E2_CONST_5 = 39;
  }
  optional E2 f_10 = 19;
  optional fixed64 f_11 = 20;
  optional string f_12 = 21;
  optional string f_13 = 24;
  optional double f_14 = 26;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 14;
    E3_CONST_2 = 8;
    E3_CONST_3 = 10;
    E3_CONST_4 = 12;
    E3_CONST_5 = 58;
  }
  optional E3 f_15 = 27;
  optional string f_16 = 28;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 126;
    E4_CONST_2 = 10;
    E4_CONST_3 = 44;
    E4_CONST_4 = 110;
    E4_CONST_5 = 29;
  }
  repeated E4 f_17 = 29 [packed = true];
  optional int32 f_18 = 31;
  optional double f_19 = 32;
  optional fixed64 f_20 = 33;
  enum E5 {
    E5_UNSPECIFIED = 0;
    E5_CONST_1 = 28;
    E5_CONST_2 = 84;
    E5_CONST_3 = 51;
    E5_CONST_4 = 36;
    E5_CONST_5 = 62;
  }
  repeated E5 f_21 = 34 [packed = true];
  enum E6 {
    E6_UNSPECIFIED = 0;
    E6_CONST_1 = 71;
    E6_CONST_2 = 86;
    E6_CONST_3 = 69;
    E6_CONST_4 = 45;
    E6_CONST_5 = 58;
  }
  optional E6 f_22 = 35;
  enum E7 {
    E7_UNSPECIFIED = 0;
    E7_CONST_1 = 52;
    E7_CONST_2 = 37;
    E7_CONST_3 = 81;
    E7_CONST_4 = 65;
    E7_CONST_5 = 30;
  }
  repeated E7 f_23 = 36 [packed = true];
  optional fixed64 f_24 = 38;
  enum E8 {
    E8_UNSPECIFIED = 0;
    E8_CONST_1 = 43;
    E8_CONST_2 = 91;
    E8_CONST_3 = 73;
    E8_CONST_4 = 56;
    E8_CONST_5 = 22;
  }
  optional E8 f_25 = 39;
  optional int32 f_26 = 40;
  optional string f_27 = 43;
  optional int32 f_28 = 44;
  optional int32 f_29 = 45;
  message M1 {
    enum E9 {
      E9_UNSPECIFIED = 0;
      E9_CONST_1 = 77;
      E9_CONST_2 = 35;
      E9_CONST_3 = 110;
      E9_CONST_4 = 18;
      E9_CONST_5 = 51;
    }
    optional E9 f_0 = 1;
    message M19 {
      enum E20 {
        E20_UNSPECIFIED = 0;
        E20_CONST_1 = 14;
        E20_CONST_2 = 73;
        E20_CONST_3 = 123;
        E20_CONST_4 = 12;
        E20_CONST_5 = 78;
      }
      optional E20 f_0 = 1;
      enum E21 {
        E21_UNSPECIFIED = 0;
        E21_CONST_1 = 78;
        E21_CONST_2 = 124;
        E21_CONST_3 = 14;
        E21_CONST_4 = 65;
        E21_CONST_5 = 80;
      }
      optional E21 f_1 = 2;
      enum E22 {
        E22_UNSPECIFIED = 0;
        E22_CONST_1 = 43;
        E22_CONST_2 = 34;
        E22_CONST_3 = 73;
        E22_CONST_4 = 26;
        E22_CONST_5 = 56;
      }
      repeated E22 f_2 = 4 [packed = true];
      optional int32 f_3 = 5;
      enum E23 {
        E23_UNSPECIFIED = 0;
        E23_CONST_1 = 100;
        E23_CONST_2 = 26;
        E23_CONST_3 = 68;
        E23_CONST_4 = 120;
        E23_CONST_5 = 15;
      }
      optional E23 f_4 = 6;
      optional string f_5 = 8;
      enum E24 {
        E24_UNSPECIFIED = 0;
        E24_CONST_1 = 23;
        E24_CONST_2 = 88;
        E24_CONST_3 = 84;
        E24_CONST_4 = 40;
        E24_CONST_5 = 81;
      }
      optional E24 f_6 = 10;
    }
    repeated M19 f_2 = 2;
    message M27 {
      enum E29 {
        E29_UNSPECIFIED = 0;
        E29_CONST_1 = 79;
        E29_CONST_2 = 50;
        E29_CONST_3 = 102;
        E29_CONST_4 = 19;
        E29_CONST_5 = 118;
      }
      optional E29 f_0 = 1;
      message M42 {
        optional bool f_0 = 2;
        optional fixed64 f_1 = 3;
        optional string f_2 = 4;
        optional int32 f_3 = 5;
        optional string f_4 = 7;
        enum E40 {
          E40_UNSPECIFIED = 0;
          E40_CONST_1 = 86;
          E40_CONST_2 = 92;
          E40_CONST_3 = 42;
          E40_CONST_4 = 11;
          E40_CONST_5 = 117;
        }
        repeated E40 f_5 = 10 [packed = true];
        message M47 {
          optional string f_0 = 1;
          optional bool f_1 = 2;
          enum E43 {
            E43_UNSPECIFIED = 0;
            E43_CONST_1 = 93;
            E43_CONST_2 = 54;
            E43_CONST_3 = 90;
            E43_CONST_4 = 77;
            E43_CONST_5 = 73;
          }
          optional E43 f_2 = 3;
          optional string f_3 = 4;
          message M50 {
            enum E45 {
              E45_UNSPECIFIED = 0;
              E45_CONST_1 = 97;
              E45_CONST_2 = 120;
              E45_CONST_3 = 83;
              E45_CONST_4 = 107;
              E45_CONST_5 = 19;
            }
            optional E45 f_0 = 2;
            optional int64 f_1 = 3;
            enum E46 {
              E46_UNSPECIFIED = 0;
              E46_CONST_1 = 13;
              E46_CONST_2 = 110;
              E46_CONST_3 = 50;
              E46_CONST_4 = 114;
              E46_CONST_5 = 35;
            }
            optional E46 f_2 = 4;
            optional fixed64 f_3 = 6;
            optional double f_4 = 7;
            optional int32 f_5 = 8;
          }
          optional M50 f_5 = 5;
          message M52 {
            optional int32 f_0 = 1;
          }
          optional M52 f_7 = 7;
        }
        optional M47 f_11 = 11;
      }
      optional M42 f_2 = 2;
    }
    repeated M27 f_3 = 3;
    message M29 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed32 f_3 = 5;
      enum E30 {
        E30_UNSPECIFIED = 0;
        E30_CONST_1 = 106;
        E30_CONST_2 = 44;
        E30_CONST_3 = 120;
        E30_CONST_4 = 93;
        E30_CONST_5 = 22;
      }
      repeated E30 f_4 = 6 [packed = true];
      enum E31 {
        E31_UNSPECIFIED = 0;
        E31_CONST_1 = 74;
        E31_CONST_2 = 59;
        E31_CONST_3 = 32;
        E31_CONST_4 = 120;
        E31_CONST_5 = 91;
      }
      repeated E31 f_5 = 7 [packed = true];
      enum E32 {
        E32_UNSPECIFIED = 0;
        E32_CONST_1 = 14;
        E32_CONST_2 = 28;
        E32_CONST_3 = 87;
        E32_CONST_4 = 108;
        E32_CONST_5 = 78;
      }
      optional E32 f_6 = 8;
      optional fixed64 f_7 = 9;
      optional string f_8 = 10;
      optional bool f_9 = 11;
      optional int32 f_10 = 14;
      optional fixed32 f_11 = 15;
      optional fixed64 f_12 = 16;
      optional fixed64 f_13 = 17;
      optional bytes f_14 = 18;
      optional fixed64 f_15 = 20;
      optional int32 f_16 = 21;
      optional bool f_17 = 22;
      optional string f_18 = 24;
      optional string f_19 = 25;
      optional string f_20 = 26;
      optional int32 f_21 = 27;
      optional int32 f_22 = 28;
      optional int32 f_23 = 29;
      enum E33 {
        E33_UNSPECIFIED = 0;
        E33_CONST_1 = 87;
        E33_CONST_2 = 14;
        E33_CONST_3 = 6;
        E33_CONST_4 = 65;
        E33_CONST_5 = 114;
      }
      repeated E33 f_24 = 31 [packed = true];
      optional int32 f_25 = 32;
      optional fixed64 f_26 = 33;
      enum E34 {
        E34_UNSPECIFIED = 0;
        E34_CONST_1 = 41;
        E34_CONST_2 = 64;
        E34_CONST_3 = 47;
        E34_CONST_4 = 16;
        E34_CONST_5 = 19;
      }
      optional E34 f_27 = 35;
      message M39 {
        enum E38 {
          E38_UNSPECIFIED = 0;
          E38_CONST_1 = 102;
          E38_CONST_2 = 37;
          E38_CONST_3 = 77;
          E38_CONST_4 = 82;
          E38_CONST_5 = 78;
        }
        optional E38 f_0 = 2;
      }
      optional M39 f_36 = 36;
    }
    optional M29 f_4 = 4;
  }
  optional M1 f_46 = 46;
  message M2 {
    optional fixed64 f_0 = 1;
    enum E10 {
      E10_UNSPECIFIED = 0;
      E10_CONST_1 = 117;
      E10_CONST_2 = 94;
      E10_CONST_3 = 29;
      E10_CONST_4 = 55;
      E10_CONST_5 = 51;
    }
    optional E10 f_1 = 2;
    optional double f_2 = 3;
    optional bool f_3 = 4;
    message M18 {
      enum E18 {
        E18_UNSPECIFIED = 0;
        E18_CONST_1 = 52;
        E18_CONST_2 = 114;
        E18_CONST_3 = 13;
        E18_CONST_4 = 71;
        E18_CONST_5 = 73;
      }
      repeated E18 f_0 = 1 [packed = true];
      optional string f_1 = 2;
      enum E19 {
        E19_UNSPECIFIED = 0;
        E19_CONST_1 = 39;
        E19_CONST_2 = 72;
        E19_CONST_3 = 47;
        E19_CONST_4 = 107;
        E19_CONST_5 = 61;
      }
      repeated E19 f_2 = 3 [packed = true];
      optional fixed64 f_3 = 5;
    }
    optional M18 f_5 = 5;
    message M34 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 4;
    }
    optional M34 f_6 = 6;
  }
  optional M2 f_48 = 48;
  message M3 {
    enum E11 {
      E11_UNSPECIFIED = 0;
      E11_CONST_1 = 118;
      E11_CONST_2 = 125;
      E11_CONST_3 = 96;
      E11_CONST_4 = 105;
      E11_CONST_5 = 80;
    }
    optional E11 f_0 = 2;
    message M15 {
      optional fixed64 f_0 = 3;
      message M37 {
        enum E37 {
          E37_UNSPECIFIED = 0;
          E37_CONST_1 = 32;
          E37_CONST_2 = 115;
          E37_CONST_3 = 87;
          E37_CONST_4 = 113;
          E37_CONST_5 = 5;
        }
        optional E37 f_0 = 1;
        message M46 {
          enum E42 {
            E42_UNSPECIFIED = 0;
            E42_CONST_1 = 1;
            E42_CONST_2 = 101;
            E42_CONST_3 = 31;
            E42_CONST_4 = 30;
            E42_CONST_5 = 82;
          }
          optional E42 f_0 = 1;
          message M51 {
            optional int32 f_0 = 1;
          }
          optional M51 f_2 = 2;
        }
        repeated M46 f_3 = 3;
      }
      optional M37 f_5 = 5;
      message M41 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 3;
        optional int64 f_2 = 5;
        optional fixed64 f_3 = 6;
        optional bool f_4 = 8;
        optional int32 f_5 = 10;
        optional int32 f_6 = 12;
        optional string f_7 = 13;
        optional string f_8 = 14;
        optional fixed32 f_9 = 16;
        optional string f_10 = 17;
        optional int32 f_11 = 20;
        message M44 {
          enum E41 {
            E41_UNSPECIFIED = 0;
            E41_CONST_1 = 98;
            E41_CONST_2 = 101;
            E41_CONST_3 = 29;
            E41_CONST_4 = 61;
            E41_CONST_5 = 22;
          }
          repeated E41 f_0 = 2 [packed = true];
          optional int32 f_1 = 3;
        }
        repeated M44 f_22 = 22;
      }
      optional M41 f_7 = 7;
    }
    optional M15 f_3 = 3;
    message M16 {
      optional int32 f_0 = 1;
    }
    optional M16 f_4 = 4;
    message M20 {
      optional bool f_0 = 2;
      optional fixed64 f_1 = 3;
      enum E25 {
        E25_UNSPECIFIED = 0;
        E25_CONST_1 = 76;
        E25_CONST_2 = 52;
        E25_CONST_3 = 113;
        E25_CONST_4 = 35;
        E25_CONST_5 = 81;
      }
      repeated E25 f_2 = 5 [packed = true];
      optional bool f_3 = 6;
      optional string f_4 = 7;
      enum E26 {
        E26_UNSPECIFIED = 0;
        E26_CONST_1 = 16;
        E26_CONST_2 = 110;
        E26_CONST_3 = 7;
        E26_CONST_4 = 54;
        E26_CONST_5 = 58;
      }
      repeated E26 f_5 = 9 [packed = true];
    }
    repeated M20 f_6 = 6;
    message M23 {
      optional fixed32 f_0 = 3;
    }
    repeated M23 f_7 = 7;
  }
  optional M3 f_49 = 49;
  message M4 {
    optional string f_0 = 1;
    message M22 {
      optional string f_0 = 1;
    }
    optional M22 f_3 = 3;
    message M24 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional string f_2 = 3;
      optional fixed64 f_3 = 4;
    }
    repeated M24 f_5 = 5;
    message M28 {
      optional fixed64 f_0 = 2;
      message M36 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 3;
        optional string f_2 = 5;
      }
      optional M36 f_4 = 4;
    }
    optional M28 f_6 = 6;
  }
  optional M4 f_50 = 50;
  message M5 {
    optional string f_0 = 2;
    optional string f_1 = 3;
    optional fixed32 f_2 = 5;
  }
  optional M5 f_52 = 52;
  message M6 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional string f_2 = 5;
    optional fixed64 f_3 = 6;
    optional fixed64 f_4 = 7;
  }
  optional M6 f_53 = 53;
  message M7 {
    optional bool f_0 = 1;
    message M17 {
      optional fixed64 f_0 = 1;
    }
    optional M17 f_2 = 2;
    message M21 {
      optional bool f_0 = 1;
    }
    repeated M21 f_4 = 4;
  }
  optional M7 f_54 = 54;
  message M8 {
    enum E12 {
      E12_UNSPECIFIED = 0;
      E12_CONST_1 = 61;
      E12_CONST_2 = 101;
      E12_CONST_3 = 81;
      E12_CONST_4 = 70;
      E12_CONST_5 = 121;
    }
    repeated E12 f_0 = 1 [packed = true];
    message M31 {
      optional string f_0 = 1;
      optional string f_1 = 5;
      optional fixed64 f_2 = 7;
      optional fixed64 f_3 = 8;
      message M38 {
        optional bool f_0 = 1;
        message M43 {
          optional fixed32 f_0 = 1;
          optional string f_1 = 4;
          optional fixed64 f_2 = 5;
        }
        optional M43 f_2 = 2;
        message M49 {
          optional bool f_0 = 1;
          optional fixed64 f_1 = 2;
          enum E44 {
            E44_UNSPECIFIED = 0;
            E44_CONST_1 = 61;
            E44_CONST_2 = 110;
            E44_CONST_3 = 81;
            E44_CONST_4 = 58;
            E44_CONST_5 = 20;
          }
          optional E44 f_2 = 3;
          optional string f_3 = 4;
          optional int32 f_4 = 5;
          optional fixed32 f_5 = 6;
        }
        optional M49 f_3 = 3;
      }
      repeated M38 f_10 = 10;
    }
    optional M31 f_3 = 3;
  }
  optional M8 f_57 = 57;
  message M9 {
    optional bool f_0 = 1;
    optional fixed64 f_1 = 2;
    optional string f_2 = 5;
    message M14 {
      optional string f_0 = 1;
    }
    optional M14 f_6 = 6;
  }
  optional M9 f_58 = 58;
  message M10 {
    optional int32 f_0 = 1;
    optional string f_1 = 2;
    optional string f_2 = 3;
    optional int32 f_3 = 4;
    optional fixed64 f_4 = 5;
    optional fixed64 f_5 = 9;
    message M32 {
      enum E35 {
        E35_UNSPECIFIED = 0;
        E35_CONST_1 = 95;
        E35_CONST_2 = 125;
        E35_CONST_3 = 57;
        E35_CONST_4 = 104;
        E35_CONST_5 = 102;
      }
      repeated E35 f_0 = 4 [packed = true];
      message M40 {
        enum E39 {
          E39_UNSPECIFIED = 0;
          E39_CONST_1 = 108;
          E39_CONST_2 = 94;
          E39_CONST_3 = 75;
          E39_CONST_4 = 74;
          E39_CONST_5 = 120;
        }
        optional E39 f_0 = 1;
        optional bool f_1 = 2;
        optional bool f_2 = 3;
        optional bool f_3 = 4;
        optional string f_4 = 7;
        message M45 {
          optional fixed64 f_0 = 2;
          message M53 {
            optional fixed32 f_0 = 1;
          }
          optional M53 f_4 = 4;
        }
        optional M45 f_8 = 8;
        message M48 {
          optional string f_0 = 2;
          optional bool f_1 = 4;
          message M54 {
            optional bool f_0 = 4;
            optional fixed64 f_1 = 5;
            enum E47 {
              E47_UNSPECIFIED = 0;
              E47_CONST_1 = 103;
              E47_CONST_2 = 114;
              E47_CONST_3 = 12;
              E47_CONST_4 = 104;
              E47_CONST_5 = 124;
            }
            optional E47 f_2 = 6;
            optional fixed32 f_3 = 8;
            optional int32 f_4 = 11;
            optional fixed64 f_5 = 12;
          }
          repeated M54 f_6 = 6;
        }
        optional M48 f_9 = 9;
      }
      optional M40 f_5 = 5;
    }
    optional M32 f_10 = 10;
  }
  repeated M10 f_59 = 59;
  message M11 {
    optional fixed64 f_0 = 1;
    message M25 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 3;
      optional fixed32 f_3 = 4;
      enum E27 {
        E27_UNSPECIFIED = 0;
        E27_CONST_1 = 13;
        E27_CONST_2 = 104;
        E27_CONST_3 = 17;
        E27_CONST_4 = 67;
        E27_CONST_5 = 22;
      }
      optional E27 f_4 = 6;
      optional int32 f_5 = 8;
      optional string f_6 = 9;
      optional bool f_7 = 10;
      optional int32 f_8 = 11;
      optional bool f_9 = 13;
      optional bool f_10 = 14;
      optional string f_11 = 15;
    }
    optional M25 f_2 = 2;
    message M26 {
      enum E28 {
        E28_UNSPECIFIED = 0;
        E28_CONST_1 = 71;
        E28_CONST_2 = 119;
        E28_CONST_3 = 59;
        E28_CONST_4 = 21;
        E28_CONST_5 = 19;
      }
      repeated E28 f_0 = 2 [packed = true];
    }
    optional M26 f_3 = 3;
    message M30 {
      optional int64 f_0 = 2;
      message M35 {
        enum E36 {
          E36_UNSPECIFIED = 0;
          E36_CONST_1 = 86;
          E36_CONST_2 = 68;
          E36_CONST_3 = 16;
          E36_CONST_4 = 74;
          E36_CONST_5 = 124;
        }
        optional E36 f_0 = 1;
        optional fixed64 f_1 = 5;
        optional string f_2 = 6;
      }
      repeated M35 f_4 = 4;
    }
    optional M30 f_4 = 4;
  }
  optional M11 f_62 = 62;
  message M12 {
    enum E13 {
      E13_UNSPECIFIED = 0;
      E13_CONST_1 = 14;
      E13_CONST_2 = 57;
      E13_CONST_3 = 25;
      E13_CONST_4 = 122;
      E13_CONST_5 = 112;
    }
    repeated E13 f_0 = 1 [packed = true];
  }
  optional M12 f_63 = 63;
  message M13 {
    optional int32 f_0 = 3;
    enum E14 {
      E14_UNSPECIFIED = 0;
      E14_CONST_1 = 99;
      E14_CONST_2 = 79;
      E14_CONST_3 = 81;
      E14_CONST_4 = 126;
      E14_CONST_5 = 104;
    }
    optional E14 f_1 = 6;
    enum E15 {
      E15_UNSPECIFIED = 0;
      E15_CONST_1 = 62;
      E15_CONST_2 = 126;
      E15_CONST_3 = 90;
      E15_CONST_4 = 105;
      E15_CONST_5 = 73;
    }
    optional E15 f_2 = 7;
    optional string f_3 = 8;
    optional fixed64 f_4 = 9;
    optional bool f_5 = 10;
    optional fixed64 f_6 = 11;
    optional string f_7 = 12;
    enum E16 {
      E16_UNSPECIFIED = 0;
      E16_CONST_1 = 101;
      E16_CONST_2 = 8;
      E16_CONST_3 = 18;
      E16_CONST_4 = 106;
      E16_CONST_5 = 45;
    }
    optional E16 f_8 = 13;
    optional string f_9 = 14;
    optional string f_10 = 15;
    enum E17 {
      E17_UNSPECIFIED = 0;
      E17_CONST_1 = 120;
      E17_CONST_2 = 32;
      E17_CONST_3 = 38;
      E17_CONST_4 = 54;
      E17_CONST_5 = 95;
    }
    repeated E17 f_11 = 17 [packed = true];
    message M33 {
      optional fixed32 f_0 = 1;
    }
    optional M33 f_19 = 19;
  }
  optional M13 f_64 = 64;
}
