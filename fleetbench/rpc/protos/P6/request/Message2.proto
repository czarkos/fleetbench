// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.request.Message2;

message Message2 {
  optional fixed64 f_0 = 2;
  optional int64 f_1 = 7;
  optional int64 f_2 = 8;
  optional fixed64 f_3 = 11;
  optional string f_4 = 12;
  optional bool f_5 = 13;
  optional fixed64 f_6 = 14;
  optional string f_7 = 15;
  optional fixed64 f_8 = 16;
  optional int32 f_9 = 18;
  optional int64 f_10 = 19;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 44;
    E1_CONST_2 = 52;
    E1_CONST_3 = 23;
    E1_CONST_4 = 113;
    E1_CONST_5 = 17;
  }
  repeated E1 f_11 = 20 [packed = true];
  optional int32 f_12 = 22;
  optional double f_13 = 23;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 43;
    E2_CONST_2 = 87;
    E2_CONST_3 = 67;
    E2_CONST_4 = 30;
    E2_CONST_5 = 103;
  }
  repeated E2 f_14 = 24 [packed = true];
  optional bool f_15 = 25;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 45;
    E3_CONST_2 = 39;
    E3_CONST_3 = 91;
    E3_CONST_4 = 58;
    E3_CONST_5 = 61;
  }
  optional E3 f_16 = 26;
  optional string f_17 = 27;
  optional double f_18 = 30;
  optional bool f_19 = 31;
  optional fixed64 f_20 = 33;
  optional bool f_21 = 34;
  optional fixed64 f_22 = 36;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 38;
    E4_CONST_2 = 10;
    E4_CONST_3 = 78;
    E4_CONST_4 = 125;
    E4_CONST_5 = 51;
  }
  optional E4 f_23 = 38;
  enum E5 {
    E5_UNSPECIFIED = 0;
    E5_CONST_1 = 42;
    E5_CONST_2 = 15;
    E5_CONST_3 = 45;
    E5_CONST_4 = 86;
    E5_CONST_5 = 81;
  }
  optional E5 f_24 = 39;
  optional int32 f_25 = 40;
  optional fixed32 f_26 = 42;
  optional int32 f_27 = 44;
  optional bool f_28 = 45;
  message M1 {
    optional double f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 3;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 101;
      E6_CONST_2 = 78;
      E6_CONST_3 = 55;
      E6_CONST_4 = 47;
      E6_CONST_5 = 117;
    }
    optional E6 f_3 = 5;
    message M20 {
      optional bool f_0 = 1;
      message M32 {
        optional string f_0 = 2;
        optional bool f_1 = 4;
        optional fixed32 f_2 = 8;
        optional fixed64 f_3 = 9;
        optional string f_4 = 10;
        enum E33 {
          E33_UNSPECIFIED = 0;
          E33_CONST_1 = 117;
          E33_CONST_2 = 6;
          E33_CONST_3 = 92;
          E33_CONST_4 = 94;
          E33_CONST_5 = 122;
        }
        optional E33 f_5 = 11;
        optional string f_6 = 12;
      }
      optional M32 f_4 = 4;
    }
    optional M20 f_7 = 7;
  }
  optional M1 f_46 = 46;
  message M2 {
    optional int32 f_0 = 3;
    optional bool f_1 = 5;
    optional bytes f_2 = 6;
  }
  repeated M2 f_48 = 48;
  message M3 {
    optional fixed64 f_0 = 2;
    optional fixed64 f_1 = 5;
    message M16 {
      optional bool f_0 = 1;
      message M34 {
        optional int64 f_0 = 1;
        enum E34 {
          E34_UNSPECIFIED = 0;
          E34_CONST_1 = 113;
          E34_CONST_2 = 31;
          E34_CONST_3 = 19;
          E34_CONST_4 = 7;
          E34_CONST_5 = 24;
        }
        repeated E34 f_1 = 2 [packed = true];
        optional string f_2 = 3;
        enum E35 {
          E35_UNSPECIFIED = 0;
          E35_CONST_1 = 34;
          E35_CONST_2 = 45;
          E35_CONST_3 = 25;
          E35_CONST_4 = 115;
          E35_CONST_5 = 39;
        }
        repeated E35 f_3 = 4 [packed = true];
        optional fixed64 f_4 = 7;
      }
      optional M34 f_4 = 4;
      message M36 {
        optional fixed64 f_0 = 2;
      }
      repeated M36 f_6 = 6;
    }
    optional M16 f_8 = 8;
  }
  repeated M3 f_51 = 51;
  message M4 {
    optional int32 f_0 = 1;
    message M15 {
      optional fixed64 f_0 = 1;
    }
    optional M15 f_5 = 5;
  }
  optional M4 f_53 = 53;
  message M5 {
    optional int32 f_0 = 1;
  }
  optional M5 f_54 = 54;
  message M6 {
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 66;
      E7_CONST_2 = 81;
      E7_CONST_3 = 28;
      E7_CONST_4 = 53;
      E7_CONST_5 = 91;
    }
    repeated E7 f_0 = 2 [packed = true];
    optional bool f_1 = 3;
    optional bool f_2 = 4;
    optional fixed32 f_3 = 6;
  }
  optional M6 f_57 = 57;
  message M7 {
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 79;
      E8_CONST_2 = 37;
      E8_CONST_3 = 5;
      E8_CONST_4 = 45;
      E8_CONST_5 = 95;
    }
    repeated E8 f_0 = 2 [packed = true];
    optional double f_1 = 4;
    optional int64 f_2 = 5;
    enum E9 {
      E9_UNSPECIFIED = 0;
      E9_CONST_1 = 125;
      E9_CONST_2 = 87;
      E9_CONST_3 = 105;
      E9_CONST_4 = 107;
      E9_CONST_5 = 74;
    }
    repeated E9 f_3 = 7 [packed = true];
    enum E10 {
      E10_UNSPECIFIED = 0;
      E10_CONST_1 = 109;
      E10_CONST_2 = 26;
      E10_CONST_3 = 54;
      E10_CONST_4 = 22;
      E10_CONST_5 = 39;
    }
    optional E10 f_4 = 8;
  }
  optional M7 f_58 = 58;
  message M8 {
    optional fixed64 f_0 = 1;
    message M17 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 3;
      optional fixed32 f_3 = 4;
      message M26 {
        optional int64 f_0 = 1;
      }
      optional M26 f_6 = 6;
      message M35 {
        optional int32 f_0 = 1;
        enum E36 {
          E36_UNSPECIFIED = 0;
          E36_CONST_1 = 59;
          E36_CONST_2 = 100;
          E36_CONST_3 = 33;
          E36_CONST_4 = 75;
          E36_CONST_5 = 78;
        }
        repeated E36 f_1 = 2 [packed = true];
        enum E37 {
          E37_UNSPECIFIED = 0;
          E37_CONST_1 = 56;
          E37_CONST_2 = 16;
          E37_CONST_3 = 7;
          E37_CONST_4 = 99;
          E37_CONST_5 = 70;
        }
        repeated E37 f_2 = 3 [packed = true];
        enum E38 {
          E38_UNSPECIFIED = 0;
          E38_CONST_1 = 62;
          E38_CONST_2 = 106;
          E38_CONST_3 = 14;
          E38_CONST_4 = 99;
          E38_CONST_5 = 92;
        }
        repeated E38 f_3 = 6 [packed = true];
        optional string f_4 = 8;
      }
      optional M35 f_8 = 8;
    }
    optional M17 f_4 = 4;
    message M21 {
      optional fixed64 f_0 = 1;
      message M24 {
        optional bool f_0 = 1;
      }
      optional M24 f_2 = 2;
      message M28 {
        enum E30 {
          E30_UNSPECIFIED = 0;
          E30_CONST_1 = 7;
          E30_CONST_2 = 92;
          E30_CONST_3 = 25;
          E30_CONST_4 = 88;
          E30_CONST_5 = 46;
        }
        repeated E30 f_0 = 1 [packed = true];
      }
      optional M28 f_4 = 4;
      message M40 {
        optional fixed32 f_0 = 1;
      }
      optional M40 f_6 = 6;
      message M41 {
        optional string f_0 = 3;
        enum E41 {
          E41_UNSPECIFIED = 0;
          E41_CONST_1 = 105;
          E41_CONST_2 = 60;
          E41_CONST_3 = 86;
          E41_CONST_4 = 93;
          E41_CONST_5 = 22;
        }
        optional E41 f_1 = 5;
        message M47 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 2;
          optional int32 f_2 = 3;
          optional fixed32 f_3 = 5;
          optional string f_4 = 8;
          message M56 {
            optional fixed32 f_0 = 1;
            optional bool f_1 = 4;
            optional double f_2 = 6;
          }
          optional M56 f_9 = 9;
        }
        optional M47 f_6 = 6;
      }
      optional M41 f_7 = 7;
      message M43 {
        enum E44 {
          E44_UNSPECIFIED = 0;
          E44_CONST_1 = 120;
          E44_CONST_2 = 62;
          E44_CONST_3 = 4;
          E44_CONST_4 = 49;
          E44_CONST_5 = 44;
        }
        repeated E44 f_0 = 3 [packed = true];
        optional fixed32 f_1 = 7;
        optional string f_2 = 9;
        optional fixed32 f_3 = 11;
        optional fixed64 f_4 = 13;
        optional fixed64 f_5 = 15;
        optional fixed64 f_6 = 18;
        message M45 {
          optional fixed64 f_0 = 2;
        }
        optional M45 f_22 = 22;
        message M52 {
          optional bool f_0 = 1;
          optional string f_1 = 2;
          optional bool f_2 = 4;
          message M53 {
            enum E45 {
              E45_UNSPECIFIED = 0;
              E45_CONST_1 = 72;
              E45_CONST_2 = 21;
              E45_CONST_3 = 109;
              E45_CONST_4 = 74;
              E45_CONST_5 = 120;
            }
            repeated E45 f_0 = 1 [packed = true];
          }
          optional M53 f_6 = 6;
          message M57 {
            optional fixed64 f_0 = 1;
            optional fixed64 f_1 = 2;
            optional fixed64 f_2 = 3;
            optional string f_3 = 5;
          }
          repeated M57 f_9 = 9;
        }
        optional M52 f_23 = 23;
      }
      optional M43 f_8 = 8;
    }
    repeated M21 f_5 = 5;
    message M22 {
      optional int64 f_0 = 2;
      optional string f_1 = 3;
      optional fixed64 f_2 = 4;
      optional bool f_3 = 5;
      optional bool f_4 = 7;
      optional int32 f_5 = 9;
      optional int32 f_6 = 11;
      enum E19 {
        E19_UNSPECIFIED = 0;
        E19_CONST_1 = 112;
        E19_CONST_2 = 95;
        E19_CONST_3 = 52;
        E19_CONST_4 = 28;
        E19_CONST_5 = 68;
      }
      repeated E19 f_7 = 12 [packed = true];
      optional int32 f_8 = 13;
      enum E20 {
        E20_UNSPECIFIED = 0;
        E20_CONST_1 = 46;
        E20_CONST_2 = 90;
        E20_CONST_3 = 56;
        E20_CONST_4 = 59;
        E20_CONST_5 = 58;
      }
      repeated E20 f_9 = 14 [packed = true];
      optional string f_10 = 16;
      optional bool f_11 = 18;
      optional fixed64 f_12 = 20;
      optional bool f_13 = 21;
      optional string f_14 = 22;
      optional fixed64 f_15 = 25;
      optional fixed64 f_16 = 26;
      optional string f_17 = 27;
      optional fixed64 f_18 = 29;
      optional int32 f_19 = 31;
      enum E21 {
        E21_UNSPECIFIED = 0;
        E21_CONST_1 = 16;
        E21_CONST_2 = 123;
        E21_CONST_3 = 7;
        E21_CONST_4 = 22;
        E21_CONST_5 = 105;
      }
      repeated E21 f_20 = 32 [packed = true];
      enum E22 {
        E22_UNSPECIFIED = 0;
        E22_CONST_1 = 121;
        E22_CONST_2 = 104;
        E22_CONST_3 = 38;
        E22_CONST_4 = 43;
        E22_CONST_5 = 67;
      }
      repeated E22 f_21 = 34 [packed = true];
      optional int32 f_22 = 36;
      enum E23 {
        E23_UNSPECIFIED = 0;
        E23_CONST_1 = 21;
        E23_CONST_2 = 115;
        E23_CONST_3 = 90;
        E23_CONST_4 = 121;
        E23_CONST_5 = 107;
      }
      repeated E23 f_23 = 37 [packed = true];
      optional fixed64 f_24 = 38;
      enum E24 {
        E24_UNSPECIFIED = 0;
        E24_CONST_1 = 46;
        E24_CONST_2 = 95;
        E24_CONST_3 = 22;
        E24_CONST_4 = 60;
        E24_CONST_5 = 55;
      }
      optional E24 f_25 = 39;
      optional bool f_26 = 40;
      enum E25 {
        E25_UNSPECIFIED = 0;
        E25_CONST_1 = 84;
        E25_CONST_2 = 87;
        E25_CONST_3 = 27;
        E25_CONST_4 = 76;
        E25_CONST_5 = 14;
      }
      repeated E25 f_27 = 41 [packed = true];
      optional fixed32 f_28 = 45;
      optional int32 f_29 = 46;
      message M39 {
        optional bool f_0 = 3;
        optional string f_1 = 4;
        optional fixed64 f_2 = 5;
        message M44 {
          optional fixed64 f_0 = 1;
          optional fixed32 f_1 = 3;
          optional fixed64 f_2 = 4;
          optional fixed64 f_3 = 5;
        }
        optional M44 f_6 = 6;
      }
      optional M39 f_48 = 48;
    }
    repeated M22 f_6 = 6;
  }
  optional M8 f_60 = 60;
  message M9 {
    optional bool f_0 = 1;
    optional fixed64 f_1 = 2;
    enum E11 {
      E11_UNSPECIFIED = 0;
      E11_CONST_1 = 110;
      E11_CONST_2 = 60;
      E11_CONST_3 = 84;
      E11_CONST_4 = 62;
      E11_CONST_5 = 100;
    }
    optional E11 f_2 = 4;
    message M14 {
      enum E18 {
        E18_UNSPECIFIED = 0;
        E18_CONST_1 = 74;
        E18_CONST_2 = 27;
        E18_CONST_3 = 43;
        E18_CONST_4 = 102;
        E18_CONST_5 = 14;
      }
      optional E18 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed32 f_2 = 4;
      message M23 {
        optional string f_0 = 2;
        enum E26 {
          E26_UNSPECIFIED = 0;
          E26_CONST_1 = 114;
          E26_CONST_2 = 76;
          E26_CONST_3 = 5;
          E26_CONST_4 = 87;
          E26_CONST_5 = 73;
        }
        optional E26 f_1 = 5;
        optional bool f_2 = 6;
        optional bool f_3 = 8;
        optional string f_4 = 10;
        optional bool f_5 = 12;
        optional int64 f_6 = 13;
        optional fixed32 f_7 = 14;
        optional fixed32 f_8 = 15;
        optional fixed32 f_9 = 16;
        optional fixed64 f_10 = 18;
        enum E27 {
          E27_UNSPECIFIED = 0;
          E27_CONST_1 = 55;
          E27_CONST_2 = 20;
          E27_CONST_3 = 11;
          E27_CONST_4 = 71;
          E27_CONST_5 = 63;
        }
        repeated E27 f_11 = 20 [packed = true];
        optional bool f_12 = 21;
        enum E28 {
          E28_UNSPECIFIED = 0;
          E28_CONST_1 = 68;
          E28_CONST_2 = 36;
          E28_CONST_3 = 34;
          E28_CONST_4 = 65;
          E28_CONST_5 = 105;
        }
        repeated E28 f_13 = 22 [packed = true];
        optional string f_14 = 23;
        optional fixed64 f_15 = 24;
        optional int32 f_16 = 25;
        enum E29 {
          E29_UNSPECIFIED = 0;
          E29_CONST_1 = 122;
          E29_CONST_2 = 52;
          E29_CONST_3 = 21;
          E29_CONST_4 = 13;
          E29_CONST_5 = 29;
        }
        repeated E29 f_17 = 27 [packed = true];
        optional int32 f_18 = 30;
        optional double f_19 = 31;
        optional fixed32 f_20 = 33;
      }
      optional M23 f_5 = 5;
      message M25 {
        optional string f_0 = 2;
        message M49 {
          optional fixed64 f_0 = 1;
          optional bool f_1 = 3;
          optional bool f_2 = 5;
          optional int32 f_3 = 6;
          optional fixed32 f_4 = 8;
          optional int64 f_5 = 10;
          optional int32 f_6 = 12;
        }
        optional M49 f_4 = 4;
      }
      optional M25 f_6 = 6;
      message M31 {
        enum E31 {
          E31_UNSPECIFIED = 0;
          E31_CONST_1 = 55;
          E31_CONST_2 = 109;
          E31_CONST_3 = 26;
          E31_CONST_4 = 124;
          E31_CONST_5 = 68;
        }
        optional E31 f_0 = 1;
        enum E32 {
          E32_UNSPECIFIED = 0;
          E32_CONST_1 = 55;
          E32_CONST_2 = 43;
          E32_CONST_3 = 97;
          E32_CONST_4 = 41;
          E32_CONST_5 = 51;
        }
        repeated E32 f_1 = 3 [packed = true];
        optional fixed64 f_2 = 4;
      }
      repeated M31 f_7 = 7;
    }
    optional M14 f_5 = 5;
  }
  optional M9 f_61 = 61;
  message M10 {
    optional string f_0 = 1;
    message M18 {
      optional bool f_0 = 1;
      optional bool f_1 = 3;
      optional string f_2 = 4;
      message M27 {
        optional fixed64 f_0 = 2;
      }
      optional M27 f_6 = 6;
      message M29 {
        optional double f_0 = 2;
      }
      repeated M29 f_7 = 7;
      message M33 {
        optional bool f_0 = 3;
        message M51 {
          optional int32 f_0 = 4;
        }
        repeated M51 f_6 = 6;
      }
      repeated M33 f_8 = 8;
      message M37 {
        enum E39 {
          E39_UNSPECIFIED = 0;
          E39_CONST_1 = 82;
          E39_CONST_2 = 90;
          E39_CONST_3 = 87;
          E39_CONST_4 = 34;
          E39_CONST_5 = 95;
        }
        repeated E39 f_0 = 2 [packed = true];
        optional bool f_1 = 3;
        optional int64 f_2 = 5;
        optional bool f_3 = 6;
        enum E40 {
          E40_UNSPECIFIED = 0;
          E40_CONST_1 = 77;
          E40_CONST_2 = 118;
          E40_CONST_3 = 79;
          E40_CONST_4 = 119;
          E40_CONST_5 = 12;
        }
        optional E40 f_4 = 7;
        optional int64 f_5 = 9;
        message M46 {
          optional fixed64 f_0 = 1;
          message M55 {
            optional bool f_0 = 1;
            enum E46 {
              E46_UNSPECIFIED = 0;
              E46_CONST_1 = 74;
              E46_CONST_2 = 10;
              E46_CONST_3 = 105;
              E46_CONST_4 = 29;
              E46_CONST_5 = 14;
            }
            optional E46 f_1 = 2;
            enum E47 {
              E47_UNSPECIFIED = 0;
              E47_CONST_1 = 95;
              E47_CONST_2 = 87;
              E47_CONST_3 = 94;
              E47_CONST_4 = 29;
              E47_CONST_5 = 99;
            }
            optional E47 f_2 = 4;
            optional string f_3 = 7;
          }
          optional M55 f_3 = 3;
        }
        optional M46 f_10 = 10;
        message M48 {
          optional bool f_0 = 2;
          optional fixed64 f_1 = 4;
        }
        optional M48 f_12 = 12;
      }
      optional M37 f_9 = 9;
    }
    repeated M18 f_3 = 3;
  }
  repeated M10 f_63 = 63;
  message M11 {
    optional int32 f_0 = 1;
    message M13 {
      optional int32 f_0 = 1;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 29;
        E13_CONST_2 = 27;
        E13_CONST_3 = 84;
        E13_CONST_4 = 43;
        E13_CONST_5 = 13;
      }
      repeated E13 f_1 = 4 [packed = true];
      optional fixed32 f_2 = 5;
      optional fixed64 f_3 = 7;
      optional bool f_4 = 8;
      optional fixed64 f_5 = 9;
      optional fixed64 f_6 = 10;
      optional fixed64 f_7 = 12;
      optional fixed32 f_8 = 13;
      optional string f_9 = 14;
      optional string f_10 = 15;
      optional int32 f_11 = 16;
      optional int32 f_12 = 18;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 105;
        E14_CONST_2 = 101;
        E14_CONST_3 = 31;
        E14_CONST_4 = 18;
        E14_CONST_5 = 52;
      }
      optional E14 f_13 = 19;
      optional bool f_14 = 22;
      enum E15 {
        E15_UNSPECIFIED = 0;
        E15_CONST_1 = 72;
        E15_CONST_2 = 64;
        E15_CONST_3 = 27;
        E15_CONST_4 = 49;
        E15_CONST_5 = 120;
      }
      optional E15 f_15 = 23;
      optional int64 f_16 = 25;
      optional int32 f_17 = 26;
      optional bool f_18 = 27;
      optional int32 f_19 = 28;
      optional int32 f_20 = 30;
      optional string f_21 = 31;
      optional int32 f_22 = 33;
      optional fixed32 f_23 = 36;
      optional string f_24 = 37;
      optional int32 f_25 = 39;
      optional bool f_26 = 40;
      optional int32 f_27 = 41;
      optional string f_28 = 43;
      optional int32 f_29 = 44;
      enum E16 {
        E16_UNSPECIFIED = 0;
        E16_CONST_1 = 69;
        E16_CONST_2 = 105;
        E16_CONST_3 = 44;
        E16_CONST_4 = 60;
        E16_CONST_5 = 103;
      }
      repeated E16 f_30 = 46 [packed = true];
      enum E17 {
        E17_UNSPECIFIED = 0;
        E17_CONST_1 = 9;
        E17_CONST_2 = 121;
        E17_CONST_3 = 29;
        E17_CONST_4 = 28;
        E17_CONST_5 = 51;
      }
      repeated E17 f_31 = 47 [packed = true];
      message M38 {
        optional int32 f_0 = 1;
        optional bool f_1 = 2;
      }
      optional M38 f_48 = 48;
    }
    optional M13 f_3 = 3;
  }
  optional M11 f_64 = 64;
  message M12 {
    optional int64 f_0 = 2;
    optional int32 f_1 = 5;
    optional double f_2 = 6;
    enum E12 {
      E12_UNSPECIFIED = 0;
      E12_CONST_1 = 94;
      E12_CONST_2 = 101;
      E12_CONST_3 = 96;
      E12_CONST_4 = 91;
      E12_CONST_5 = 87;
    }
    repeated E12 f_3 = 7 [packed = true];
    optional string f_4 = 8;
    message M19 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      message M30 {
        optional int64 f_0 = 1;
        message M50 {
          optional string f_0 = 1;
          message M54 {
            optional bool f_0 = 3;
            optional string f_1 = 4;
            optional int32 f_2 = 6;
            optional int32 f_3 = 7;
            optional int32 f_4 = 9;
            optional int64 f_5 = 10;
          }
          repeated M54 f_5 = 5;
        }
        optional M50 f_2 = 2;
      }
      optional M30 f_6 = 6;
      message M42 {
        enum E42 {
          E42_UNSPECIFIED = 0;
          E42_CONST_1 = 67;
          E42_CONST_2 = 107;
          E42_CONST_3 = 3;
          E42_CONST_4 = 122;
          E42_CONST_5 = 16;
        }
        optional E42 f_0 = 2;
        optional string f_1 = 3;
        optional fixed64 f_2 = 4;
        optional double f_3 = 6;
        optional fixed64 f_4 = 7;
        enum E43 {
          E43_UNSPECIFIED = 0;
          E43_CONST_1 = 104;
          E43_CONST_2 = 99;
          E43_CONST_3 = 43;
          E43_CONST_4 = 33;
          E43_CONST_5 = 123;
        }
        repeated E43 f_5 = 10 [packed = true];
      }
      optional M42 f_7 = 7;
    }
    optional M19 f_9 = 9;
  }
  optional M12 f_66 = 66;
}
