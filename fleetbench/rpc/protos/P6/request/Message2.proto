// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.request.Message2;

message Message2 {
  optional string f_0 = 1;
  optional string f_1 = 3;
  optional int32 f_2 = 4;
  optional int32 f_3 = 5;
  optional bool f_4 = 7;
  optional fixed64 f_5 = 8;
  optional fixed64 f_6 = 9;
  optional fixed32 f_7 = 11;
  optional string f_8 = 12;
  optional int32 f_9 = 13;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 16;
    E1_CONST_2 = 80;
    E1_CONST_3 = 94;
    E1_CONST_4 = 21;
    E1_CONST_5 = 95;
  }
  repeated E1 f_10 = 14 [packed = true];
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 108;
    E2_CONST_2 = 120;
    E2_CONST_3 = 40;
    E2_CONST_4 = 96;
    E2_CONST_5 = 103;
  }
  repeated E2 f_11 = 16 [packed = true];
  optional fixed64 f_12 = 17;
  optional fixed64 f_13 = 20;
  optional string f_14 = 22;
  optional int32 f_15 = 23;
  optional fixed32 f_16 = 24;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 35;
    E3_CONST_2 = 69;
    E3_CONST_3 = 79;
    E3_CONST_4 = 61;
    E3_CONST_5 = 99;
  }
  optional E3 f_17 = 25;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 35;
    E4_CONST_2 = 62;
    E4_CONST_3 = 97;
    E4_CONST_4 = 33;
    E4_CONST_5 = 36;
  }
  optional E4 f_18 = 28;
  optional int32 f_19 = 30;
  optional int32 f_20 = 32;
  optional int32 f_21 = 33;
  optional fixed64 f_22 = 35;
  optional bool f_23 = 36;
  optional fixed64 f_24 = 37;
  optional fixed32 f_25 = 38;
  optional bool f_26 = 39;
  optional fixed32 f_27 = 40;
  optional bool f_28 = 41;
  optional fixed32 f_29 = 43;
  message M1 {
    optional double f_0 = 2;
    optional int32 f_1 = 4;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 126;
      E5_CONST_2 = 92;
      E5_CONST_3 = 97;
      E5_CONST_4 = 116;
      E5_CONST_5 = 101;
    }
    repeated E5 f_2 = 6 [packed = true];
    optional bool f_3 = 7;
    optional int32 f_4 = 9;
    message M12 {
      optional string f_0 = 1;
    }
    optional M12 f_10 = 10;
    message M13 {
      optional double f_0 = 1;
    }
    optional M13 f_12 = 12;
    message M18 {
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 103;
        E12_CONST_2 = 45;
        E12_CONST_3 = 97;
        E12_CONST_4 = 23;
        E12_CONST_5 = 34;
      }
      optional E12 f_0 = 1;
    }
    optional M18 f_13 = 13;
    message M21 {
      optional fixed64 f_0 = 4;
      optional fixed32 f_1 = 5;
      optional string f_2 = 7;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 36;
        E13_CONST_2 = 109;
        E13_CONST_3 = 89;
        E13_CONST_4 = 7;
        E13_CONST_5 = 29;
      }
      optional E13 f_3 = 9;
      optional bool f_4 = 10;
      optional int32 f_5 = 11;
      optional string f_6 = 13;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 22;
        E14_CONST_2 = 120;
        E14_CONST_3 = 26;
        E14_CONST_4 = 51;
        E14_CONST_5 = 107;
      }
      repeated E14 f_7 = 15 [packed = true];
      optional fixed32 f_8 = 16;
      optional int32 f_9 = 17;
      enum E15 {
        E15_UNSPECIFIED = 0;
        E15_CONST_1 = 56;
        E15_CONST_2 = 53;
        E15_CONST_3 = 37;
        E15_CONST_4 = 110;
        E15_CONST_5 = 43;
      }
      optional E15 f_10 = 19;
      optional bool f_11 = 21;
      optional string f_12 = 22;
      optional bool f_13 = 24;
      optional int32 f_14 = 26;
      optional bool f_15 = 28;
      optional string f_16 = 29;
      optional bool f_17 = 30;
      optional fixed32 f_18 = 31;
      optional fixed32 f_19 = 33;
      optional int32 f_20 = 34;
      optional fixed64 f_21 = 36;
      optional int32 f_22 = 38;
      optional int32 f_23 = 39;
      optional int32 f_24 = 40;
      optional fixed64 f_25 = 41;
      optional bool f_26 = 42;
      optional fixed32 f_27 = 43;
      optional string f_28 = 44;
      optional int64 f_29 = 46;
      optional bool f_30 = 47;
    }
    repeated M21 f_16 = 16;
    message M22 {
      optional fixed64 f_0 = 1;
    }
    optional M22 f_17 = 17;
  }
  optional M1 f_44 = 44;
  message M2 {
    optional fixed64 f_0 = 1;
    message M8 {
      optional string f_0 = 1;
      message M24 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional fixed64 f_3 = 4;
        optional int32 f_4 = 5;
        optional string f_5 = 6;
        optional fixed64 f_6 = 9;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 75;
          E16_CONST_2 = 41;
          E16_CONST_3 = 28;
          E16_CONST_4 = 24;
          E16_CONST_5 = 64;
        }
        optional E16 f_7 = 10;
        optional string f_8 = 12;
        optional string f_9 = 13;
        optional int32 f_10 = 14;
        optional string f_11 = 16;
        optional fixed64 f_12 = 17;
        optional int32 f_13 = 18;
        message M26 {
          optional fixed64 f_0 = 1;
        }
        repeated M26 f_23 = 23;
        message M27 {
          optional string f_0 = 1;
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 33;
            E19_CONST_2 = 97;
            E19_CONST_3 = 57;
            E19_CONST_4 = 82;
            E19_CONST_5 = 56;
          }
          optional E19 f_1 = 2;
        }
        optional M27 f_24 = 24;
        message M28 {
          enum E20 {
            E20_UNSPECIFIED = 0;
            E20_CONST_1 = 79;
            E20_CONST_2 = 93;
            E20_CONST_3 = 1;
            E20_CONST_4 = 30;
            E20_CONST_5 = 17;
          }
          optional E20 f_0 = 3;
          optional fixed64 f_1 = 4;
          optional int32 f_2 = 6;
          optional int32 f_3 = 7;
          optional int32 f_4 = 9;
          enum E21 {
            E21_UNSPECIFIED = 0;
            E21_CONST_1 = 107;
            E21_CONST_2 = 79;
            E21_CONST_3 = 11;
            E21_CONST_4 = 125;
            E21_CONST_5 = 115;
          }
          optional E21 f_5 = 10;
        }
        repeated M28 f_25 = 25;
        message M30 {
          optional bool f_0 = 1;
          message M34 {
            optional int32 f_0 = 1;
          }
          optional M34 f_3 = 3;
        }
        optional M30 f_27 = 27;
        message M31 {
          optional int32 f_0 = 1;
        }
        repeated M31 f_28 = 28;
        message M32 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 3;
          optional bool f_2 = 4;
          optional bool f_3 = 7;
        }
        optional M32 f_29 = 29;
      }
      optional M24 f_3 = 3;
    }
    optional M8 f_4 = 4;
    message M9 {
      optional string f_0 = 1;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 26;
        E9_CONST_2 = 106;
        E9_CONST_3 = 116;
        E9_CONST_4 = 52;
        E9_CONST_5 = 67;
      }
      repeated E9 f_1 = 2 [packed = true];
      optional bool f_2 = 3;
    }
    optional M9 f_6 = 6;
    message M17 {
      optional fixed32 f_0 = 2;
    }
    optional M17 f_7 = 7;
    message M20 {
      optional string f_0 = 1;
    }
    optional M20 f_9 = 9;
    message M23 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M23 f_11 = 11;
  }
  repeated M2 f_45 = 45;
  message M3 {
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 28;
      E6_CONST_2 = 7;
      E6_CONST_3 = 68;
      E6_CONST_4 = 73;
      E6_CONST_5 = 61;
    }
    optional E6 f_0 = 1;
    message M5 {
      optional fixed64 f_0 = 4;
      optional fixed64 f_1 = 8;
      optional fixed64 f_2 = 9;
    }
    optional M5 f_2 = 2;
    message M6 {
      optional int32 f_0 = 1;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 52;
        E8_CONST_2 = 126;
        E8_CONST_3 = 48;
        E8_CONST_4 = 77;
        E8_CONST_5 = 74;
      }
      repeated E8 f_1 = 4 [packed = true];
      optional string f_2 = 6;
      optional fixed32 f_3 = 7;
      optional fixed64 f_4 = 8;
    }
    optional M6 f_3 = 3;
    message M7 {
      optional string f_0 = 3;
    }
    repeated M7 f_4 = 4;
    message M10 {
      optional int32 f_0 = 3;
      message M25 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 5;
        optional bool f_4 = 6;
        optional bool f_5 = 7;
        optional string f_6 = 8;
        optional string f_7 = 9;
        optional bool f_8 = 10;
        optional int32 f_9 = 11;
        optional int64 f_10 = 12;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 114;
          E17_CONST_2 = 102;
          E17_CONST_3 = 31;
          E17_CONST_4 = 103;
          E17_CONST_5 = 10;
        }
        optional E17 f_11 = 15;
        optional fixed32 f_12 = 17;
        optional fixed64 f_13 = 18;
        optional int32 f_14 = 19;
        optional bool f_15 = 20;
        optional bool f_16 = 22;
        optional fixed64 f_17 = 24;
        optional bool f_18 = 25;
        optional int32 f_19 = 28;
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 102;
          E18_CONST_2 = 94;
          E18_CONST_3 = 90;
          E18_CONST_4 = 57;
          E18_CONST_5 = 107;
        }
        optional E18 f_20 = 31;
        optional int32 f_21 = 33;
        message M29 {
          optional int32 f_0 = 1;
        }
        optional M29 f_34 = 34;
        message M33 {
          optional fixed64 f_0 = 2;
          optional string f_1 = 5;
          optional fixed64 f_2 = 6;
          enum E22 {
            E22_UNSPECIFIED = 0;
            E22_CONST_1 = 76;
            E22_CONST_2 = 41;
            E22_CONST_3 = 27;
            E22_CONST_4 = 93;
            E22_CONST_5 = 52;
          }
          optional E22 f_3 = 7;
          message M35 {
            enum E23 {
              E23_UNSPECIFIED = 0;
              E23_CONST_1 = 46;
              E23_CONST_2 = 45;
              E23_CONST_3 = 91;
              E23_CONST_4 = 8;
              E23_CONST_5 = 53;
            }
            optional E23 f_0 = 2;
            optional int32 f_1 = 3;
            optional int32 f_2 = 4;
            optional string f_3 = 5;
            optional bool f_4 = 6;
            optional int32 f_5 = 8;
            enum E24 {
              E24_UNSPECIFIED = 0;
              E24_CONST_1 = 20;
              E24_CONST_2 = 26;
              E24_CONST_3 = 46;
              E24_CONST_4 = 123;
              E24_CONST_5 = 10;
            }
            optional E24 f_6 = 9;
            optional fixed64 f_7 = 11;
            optional string f_8 = 13;
            optional fixed64 f_9 = 15;
            optional string f_10 = 17;
            optional string f_11 = 19;
            enum E25 {
              E25_UNSPECIFIED = 0;
              E25_CONST_1 = 125;
              E25_CONST_2 = 23;
              E25_CONST_3 = 72;
              E25_CONST_4 = 80;
              E25_CONST_5 = 67;
            }
            optional E25 f_12 = 20;
            optional fixed64 f_13 = 21;
            optional bool f_14 = 22;
            optional bool f_15 = 23;
            optional double f_16 = 24;
            optional bool f_17 = 25;
            optional fixed64 f_18 = 26;
            optional fixed64 f_19 = 28;
            optional bool f_20 = 31;
            optional fixed64 f_21 = 32;
            optional int32 f_22 = 33;
            optional bool f_23 = 34;
            optional int32 f_24 = 35;
            optional fixed64 f_25 = 37;
            optional bool f_26 = 38;
            enum E26 {
              E26_UNSPECIFIED = 0;
              E26_CONST_1 = 95;
              E26_CONST_2 = 124;
              E26_CONST_3 = 1;
              E26_CONST_4 = 98;
              E26_CONST_5 = 102;
            }
            optional E26 f_27 = 40;
            optional fixed64 f_28 = 43;
            optional string f_29 = 44;
            optional int32 f_30 = 46;
          }
          optional M35 f_9 = 9;
        }
        repeated M33 f_35 = 35;
      }
      optional M25 f_6 = 6;
    }
    optional M10 f_5 = 5;
    message M16 {
      optional fixed32 f_0 = 1;
      optional double f_1 = 3;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 76;
        E11_CONST_2 = 45;
        E11_CONST_3 = 33;
        E11_CONST_4 = 14;
        E11_CONST_5 = 51;
      }
      optional E11 f_2 = 4;
      optional bool f_3 = 6;
    }
    optional M16 f_6 = 6;
    message M19 {
      optional bool f_0 = 1;
    }
    repeated M19 f_7 = 7;
  }
  repeated M3 f_48 = 48;
  message M4 {
    optional string f_0 = 1;
    optional string f_1 = 4;
    optional fixed32 f_2 = 5;
    optional fixed64 f_3 = 6;
    optional fixed64 f_4 = 8;
    optional int64 f_5 = 9;
    optional bool f_6 = 10;
    optional int32 f_7 = 12;
    optional string f_8 = 15;
    optional int32 f_9 = 18;
    optional bool f_10 = 19;
    optional string f_11 = 21;
    optional string f_12 = 23;
    optional string f_13 = 25;
    optional bool f_14 = 26;
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 124;
      E7_CONST_2 = 100;
      E7_CONST_3 = 123;
      E7_CONST_4 = 107;
      E7_CONST_5 = 103;
    }
    optional E7 f_15 = 30;
    optional fixed64 f_16 = 32;
    optional bool f_17 = 33;
    optional fixed64 f_18 = 35;
    optional string f_19 = 37;
    optional int32 f_20 = 39;
    optional int32 f_21 = 41;
    optional fixed64 f_22 = 42;
    optional fixed64 f_23 = 43;
    optional fixed64 f_24 = 45;
    optional string f_25 = 46;
    optional bool f_26 = 49;
    optional int32 f_27 = 50;
    optional fixed64 f_28 = 52;
    optional int32 f_29 = 53;
    optional bool f_30 = 54;
    optional int32 f_31 = 56;
    message M11 {
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 74;
        E10_CONST_2 = 100;
        E10_CONST_3 = 17;
        E10_CONST_4 = 111;
        E10_CONST_5 = 10;
      }
      optional E10 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional fixed32 f_3 = 5;
    }
    optional M11 f_57 = 57;
    message M14 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 4;
      optional string f_3 = 5;
      optional string f_4 = 6;
      optional fixed64 f_5 = 8;
    }
    optional M14 f_59 = 59;
    message M15 {
      optional int32 f_0 = 2;
      optional string f_1 = 4;
      optional int64 f_2 = 5;
      optional int32 f_3 = 6;
      optional string f_4 = 7;
    }
    optional M15 f_61 = 61;
  }
  optional M4 f_49 = 49;
}
