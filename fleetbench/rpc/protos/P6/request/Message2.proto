// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.request.Message2;

message Message2 {
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 45;
    E1_CONST_2 = 52;
    E1_CONST_3 = 92;
    E1_CONST_4 = 102;
    E1_CONST_5 = 99;
  }
  optional E1 f_0 = 1;
  optional int32 f_1 = 2;
  optional int32 f_2 = 3;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 94;
    E2_CONST_2 = 101;
    E2_CONST_3 = 64;
    E2_CONST_4 = 115;
    E2_CONST_5 = 99;
  }
  optional E2 f_3 = 4;
  optional int32 f_4 = 5;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 114;
    E3_CONST_2 = 95;
    E3_CONST_3 = 53;
    E3_CONST_4 = 22;
    E3_CONST_5 = 111;
  }
  optional E3 f_5 = 7;
  optional int64 f_6 = 9;
  optional fixed64 f_7 = 11;
  optional bool f_8 = 13;
  optional fixed64 f_9 = 14;
  optional int32 f_10 = 16;
  optional bool f_11 = 17;
  optional string f_12 = 18;
  optional fixed64 f_13 = 19;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 25;
    E4_CONST_2 = 101;
    E4_CONST_3 = 77;
    E4_CONST_4 = 49;
    E4_CONST_5 = 71;
  }
  repeated E4 f_14 = 20 [packed = true];
  optional string f_15 = 23;
  optional fixed64 f_16 = 24;
  optional bool f_17 = 27;
  optional fixed64 f_18 = 28;
  optional fixed64 f_19 = 29;
  optional string f_20 = 31;
  enum E5 {
    E5_UNSPECIFIED = 0;
    E5_CONST_1 = 38;
    E5_CONST_2 = 62;
    E5_CONST_3 = 124;
    E5_CONST_4 = 4;
    E5_CONST_5 = 85;
  }
  repeated E5 f_21 = 32 [packed = true];
  optional int32 f_22 = 33;
  optional string f_23 = 35;
  optional int32 f_24 = 38;
  optional int32 f_25 = 41;
  enum E6 {
    E6_UNSPECIFIED = 0;
    E6_CONST_1 = 124;
    E6_CONST_2 = 107;
    E6_CONST_3 = 67;
    E6_CONST_4 = 58;
    E6_CONST_5 = 6;
  }
  repeated E6 f_26 = 42 [packed = true];
  optional bool f_27 = 43;
  optional int64 f_28 = 46;
  optional string f_29 = 48;
  message M1 {
    optional double f_0 = 1;
    message M14 {
      optional string f_0 = 1;
    }
    optional M14 f_2 = 2;
    message M16 {
      enum E16 {
        E16_UNSPECIFIED = 0;
        E16_CONST_1 = 40;
        E16_CONST_2 = 9;
        E16_CONST_3 = 54;
        E16_CONST_4 = 107;
        E16_CONST_5 = 94;
      }
      optional E16 f_0 = 1;
      message M43 {
        optional double f_0 = 2;
      }
      repeated M43 f_3 = 3;
    }
    optional M16 f_4 = 4;
    message M19 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 4;
      message M38 {
        optional bool f_0 = 3;
        enum E24 {
          E24_UNSPECIFIED = 0;
          E24_CONST_1 = 42;
          E24_CONST_2 = 121;
          E24_CONST_3 = 86;
          E24_CONST_4 = 84;
          E24_CONST_5 = 21;
        }
        optional E24 f_1 = 4;
        optional string f_2 = 6;
        optional string f_3 = 9;
        optional int32 f_4 = 10;
        message M49 {
          optional string f_0 = 2;
        }
        repeated M49 f_14 = 14;
        message M50 {
          optional int32 f_0 = 1;
        }
        optional M50 f_16 = 16;
      }
      repeated M38 f_5 = 5;
    }
    repeated M19 f_5 = 5;
    message M20 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
    }
    repeated M20 f_7 = 7;
    message M36 {
      optional int32 f_0 = 1;
    }
    optional M36 f_8 = 8;
  }
  optional M1 f_52 = 52;
  message M2 {
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 106;
      E7_CONST_2 = 101;
      E7_CONST_3 = 30;
      E7_CONST_4 = 1;
      E7_CONST_5 = 77;
    }
    repeated E7 f_0 = 2 [packed = true];
    message M26 {
      optional string f_0 = 2;
    }
    repeated M26 f_3 = 3;
    message M27 {
      optional string f_0 = 3;
      message M45 {
        optional double f_0 = 1;
        optional bool f_1 = 2;
        optional fixed64 f_2 = 3;
        optional fixed64 f_3 = 4;
        optional string f_4 = 6;
        message M47 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 3;
          message M59 {
            enum E27 {
              E27_UNSPECIFIED = 0;
              E27_CONST_1 = 123;
              E27_CONST_2 = 122;
              E27_CONST_3 = 110;
              E27_CONST_4 = 26;
              E27_CONST_5 = 20;
            }
            optional E27 f_0 = 2;
            enum E28 {
              E28_UNSPECIFIED = 0;
              E28_CONST_1 = 91;
              E28_CONST_2 = 65;
              E28_CONST_3 = 112;
              E28_CONST_4 = 13;
              E28_CONST_5 = 77;
            }
            repeated E28 f_1 = 3 [packed = true];
            optional fixed64 f_2 = 4;
          }
          repeated M59 f_5 = 5;
        }
        optional M47 f_9 = 9;
        message M56 {
          optional bool f_0 = 1;
          optional fixed64 f_1 = 2;
        }
        optional M56 f_10 = 10;
      }
      optional M45 f_6 = 6;
    }
    optional M27 f_4 = 4;
  }
  optional M2 f_53 = 53;
  message M3 {
    optional fixed64 f_0 = 2;
    message M23 {
      optional int32 f_0 = 1;
    }
    optional M23 f_3 = 3;
  }
  optional M3 f_55 = 55;
  message M4 {
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 24;
      E8_CONST_2 = 16;
      E8_CONST_3 = 79;
      E8_CONST_4 = 11;
      E8_CONST_5 = 99;
    }
    repeated E8 f_0 = 2 [packed = true];
  }
  optional M4 f_57 = 57;
  message M5 {
    optional string f_0 = 1;
    message M31 {
      optional string f_0 = 1;
      enum E22 {
        E22_UNSPECIFIED = 0;
        E22_CONST_1 = 34;
        E22_CONST_2 = 9;
        E22_CONST_3 = 117;
        E22_CONST_4 = 52;
        E22_CONST_5 = 99;
      }
      optional E22 f_1 = 2;
      optional fixed64 f_2 = 4;
      optional bool f_3 = 6;
      enum E23 {
        E23_UNSPECIFIED = 0;
        E23_CONST_1 = 102;
        E23_CONST_2 = 107;
        E23_CONST_3 = 45;
        E23_CONST_4 = 77;
        E23_CONST_5 = 24;
      }
      optional E23 f_4 = 7;
      optional string f_5 = 10;
      optional fixed64 f_6 = 13;
      optional int32 f_7 = 15;
      optional fixed64 f_8 = 18;
      optional int32 f_9 = 19;
      optional bool f_10 = 24;
      optional int32 f_11 = 25;
      optional fixed64 f_12 = 26;
      optional int32 f_13 = 27;
    }
    optional M31 f_3 = 3;
  }
  repeated M5 f_58 = 58;
  message M6 {
    optional fixed64 f_0 = 2;
    optional fixed64 f_1 = 3;
    optional bool f_2 = 6;
    optional fixed64 f_3 = 7;
    optional int32 f_4 = 9;
    enum E9 {
      E9_UNSPECIFIED = 0;
      E9_CONST_1 = 3;
      E9_CONST_2 = 120;
      E9_CONST_3 = 122;
      E9_CONST_4 = 57;
      E9_CONST_5 = 64;
    }
    optional E9 f_5 = 10;
    optional fixed64 f_6 = 11;
    optional fixed32 f_7 = 13;
    optional fixed64 f_8 = 14;
  }
  repeated M6 f_62 = 62;
  message M7 {
    optional string f_0 = 4;
    message M15 {
      optional string f_0 = 1;
    }
    optional M15 f_5 = 5;
    message M18 {
      optional fixed64 f_0 = 1;
      enum E17 {
        E17_UNSPECIFIED = 0;
        E17_CONST_1 = 24;
        E17_CONST_2 = 62;
        E17_CONST_3 = 40;
        E17_CONST_4 = 75;
        E17_CONST_5 = 81;
      }
      repeated E17 f_1 = 2 [packed = true];
      optional fixed64 f_2 = 4;
      optional bool f_3 = 5;
    }
    optional M18 f_6 = 6;
    message M33 {
      optional fixed64 f_0 = 2;
      optional fixed32 f_1 = 3;
      optional fixed64 f_2 = 5;
      optional bool f_3 = 6;
      optional int32 f_4 = 7;
    }
    optional M33 f_7 = 7;
  }
  optional M7 f_63 = 63;
  message M8 {
    optional fixed64 f_0 = 1;
    optional bool f_1 = 2;
    optional fixed64 f_2 = 5;
    optional fixed64 f_3 = 6;
    optional bool f_4 = 7;
    message M25 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 4;
      message M41 {
        optional fixed32 f_0 = 1;
        optional int32 f_1 = 3;
        optional double f_2 = 4;
      }
      optional M41 f_6 = 6;
      message M46 {
        optional int32 f_0 = 1;
        optional bool f_1 = 2;
        optional string f_2 = 3;
        optional fixed32 f_3 = 4;
        message M48 {
          optional bool f_0 = 1;
        }
        optional M48 f_6 = 6;
      }
      optional M46 f_8 = 8;
    }
    optional M25 f_8 = 8;
  }
  repeated M8 f_64 = 64;
  message M9 {
    optional fixed32 f_0 = 1;
    message M29 {
      optional bool f_0 = 1;
      message M37 {
        optional fixed64 f_0 = 2;
        message M53 {
          optional int32 f_0 = 1;
          message M57 {
            optional fixed64 f_0 = 1;
          }
          optional M57 f_2 = 2;
          message M60 {
            optional string f_0 = 1;
            optional fixed64 f_1 = 5;
            optional int32 f_2 = 6;
            enum E29 {
              E29_UNSPECIFIED = 0;
              E29_CONST_1 = 32;
              E29_CONST_2 = 124;
              E29_CONST_3 = 92;
              E29_CONST_4 = 72;
              E29_CONST_5 = 8;
            }
            optional E29 f_3 = 7;
            enum E30 {
              E30_UNSPECIFIED = 0;
              E30_CONST_1 = 29;
              E30_CONST_2 = 114;
              E30_CONST_3 = 90;
              E30_CONST_4 = 94;
              E30_CONST_5 = 108;
            }
            repeated E30 f_4 = 8 [packed = true];
            optional fixed64 f_5 = 10;
            optional string f_6 = 12;
            optional int32 f_7 = 14;
          }
          optional M60 f_3 = 3;
        }
        repeated M53 f_4 = 4;
        message M54 {
          optional int32 f_0 = 2;
        }
        optional M54 f_5 = 5;
      }
      optional M37 f_2 = 2;
      message M40 {
        optional bool f_0 = 1;
        optional string f_1 = 2;
      }
      optional M40 f_3 = 3;
    }
    optional M29 f_4 = 4;
    message M30 {
      optional int32 f_0 = 2;
    }
    optional M30 f_5 = 5;
    message M34 {
      optional bool f_0 = 1;
      message M44 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        message M51 {
          enum E26 {
            E26_UNSPECIFIED = 0;
            E26_CONST_1 = 41;
            E26_CONST_2 = 123;
            E26_CONST_3 = 31;
            E26_CONST_4 = 77;
            E26_CONST_5 = 51;
          }
          repeated E26 f_0 = 1 [packed = true];
          optional int32 f_1 = 2;
          message M58 {
            optional string f_0 = 1;
          }
          optional M58 f_3 = 3;
        }
        repeated M51 f_3 = 3;
        message M52 {
          optional int32 f_0 = 3;
        }
        optional M52 f_5 = 5;
      }
      optional M44 f_2 = 2;
    }
    optional M34 f_6 = 6;
  }
  optional M9 f_65 = 65;
  message M10 {
    enum E10 {
      E10_UNSPECIFIED = 0;
      E10_CONST_1 = 110;
      E10_CONST_2 = 14;
      E10_CONST_3 = 48;
      E10_CONST_4 = 87;
      E10_CONST_5 = 58;
    }
    optional E10 f_0 = 3;
    message M21 {
      optional string f_0 = 1;
      message M42 {
        enum E25 {
          E25_UNSPECIFIED = 0;
          E25_CONST_1 = 112;
          E25_CONST_2 = 116;
          E25_CONST_3 = 73;
          E25_CONST_4 = 48;
          E25_CONST_5 = 32;
        }
        optional E25 f_0 = 2;
      }
      optional M42 f_3 = 3;
    }
    repeated M21 f_5 = 5;
    message M32 {
      optional fixed64 f_0 = 1;
    }
    optional M32 f_6 = 6;
  }
  optional M10 f_66 = 66;
  message M11 {
    optional bytes f_0 = 1;
    optional string f_1 = 4;
    optional bool f_2 = 5;
    optional int32 f_3 = 6;
    optional string f_4 = 7;
    optional int32 f_5 = 9;
    optional bytes f_6 = 11;
    message M28 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 2;
      optional bool f_2 = 3;
      optional bool f_3 = 5;
      optional string f_4 = 6;
      optional int64 f_5 = 7;
      optional string f_6 = 8;
      optional string f_7 = 9;
      optional int32 f_8 = 10;
      optional int32 f_9 = 11;
      optional string f_10 = 14;
      enum E18 {
        E18_UNSPECIFIED = 0;
        E18_CONST_1 = 40;
        E18_CONST_2 = 31;
        E18_CONST_3 = 16;
        E18_CONST_4 = 121;
        E18_CONST_5 = 95;
      }
      optional E18 f_11 = 15;
      enum E19 {
        E19_UNSPECIFIED = 0;
        E19_CONST_1 = 119;
        E19_CONST_2 = 51;
        E19_CONST_3 = 67;
        E19_CONST_4 = 121;
        E19_CONST_5 = 2;
      }
      repeated E19 f_12 = 17 [packed = true];
      optional int32 f_13 = 18;
      optional int32 f_14 = 19;
      optional string f_15 = 21;
      optional double f_16 = 22;
      optional bool f_17 = 23;
      optional int32 f_18 = 25;
      optional int64 f_19 = 26;
      optional string f_20 = 27;
      optional string f_21 = 29;
      enum E20 {
        E20_UNSPECIFIED = 0;
        E20_CONST_1 = 112;
        E20_CONST_2 = 121;
        E20_CONST_3 = 39;
        E20_CONST_4 = 65;
        E20_CONST_5 = 90;
      }
      optional E20 f_22 = 30;
      optional fixed64 f_23 = 31;
      optional int32 f_24 = 32;
      optional int64 f_25 = 33;
      enum E21 {
        E21_UNSPECIFIED = 0;
        E21_CONST_1 = 70;
        E21_CONST_2 = 45;
        E21_CONST_3 = 59;
        E21_CONST_4 = 126;
        E21_CONST_5 = 33;
      }
      optional E21 f_26 = 34;
      optional int32 f_27 = 35;
    }
    repeated M28 f_12 = 12;
  }
  optional M11 f_67 = 67;
  message M12 {
    optional string f_0 = 1;
    message M17 {
      optional bool f_0 = 3;
      message M39 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 4;
        message M55 {
          optional string f_0 = 2;
          optional bool f_1 = 5;
          optional int32 f_2 = 6;
          optional fixed64 f_3 = 7;
          optional fixed64 f_4 = 8;
          optional fixed64 f_5 = 10;
          optional int32 f_6 = 13;
        }
        optional M55 f_5 = 5;
      }
      optional M39 f_5 = 5;
    }
    repeated M17 f_3 = 3;
    message M22 {
      optional string f_0 = 2;
      optional string f_1 = 4;
      optional fixed64 f_2 = 5;
      optional int64 f_3 = 6;
      optional fixed64 f_4 = 7;
    }
    optional M22 f_5 = 5;
  }
  repeated M12 f_68 = 68;
  message M13 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 2;
    optional bool f_2 = 4;
    optional bool f_3 = 5;
    optional fixed64 f_4 = 6;
    optional fixed64 f_5 = 7;
    optional fixed64 f_6 = 8;
    optional double f_7 = 9;
    enum E11 {
      E11_UNSPECIFIED = 0;
      E11_CONST_1 = 72;
      E11_CONST_2 = 30;
      E11_CONST_3 = 47;
      E11_CONST_4 = 113;
      E11_CONST_5 = 42;
    }
    optional E11 f_8 = 10;
    optional string f_9 = 11;
    enum E12 {
      E12_UNSPECIFIED = 0;
      E12_CONST_1 = 45;
      E12_CONST_2 = 54;
      E12_CONST_3 = 25;
      E12_CONST_4 = 42;
      E12_CONST_5 = 102;
    }
    optional E12 f_10 = 12;
    optional string f_11 = 13;
    optional bool f_12 = 14;
    enum E13 {
      E13_UNSPECIFIED = 0;
      E13_CONST_1 = 63;
      E13_CONST_2 = 43;
      E13_CONST_3 = 42;
      E13_CONST_4 = 82;
      E13_CONST_5 = 51;
    }
    repeated E13 f_13 = 15 [packed = true];
    optional double f_14 = 16;
    optional int32 f_15 = 18;
    optional double f_16 = 20;
    optional int32 f_17 = 21;
    optional int32 f_18 = 22;
    optional bool f_19 = 24;
    enum E14 {
      E14_UNSPECIFIED = 0;
      E14_CONST_1 = 96;
      E14_CONST_2 = 47;
      E14_CONST_3 = 34;
      E14_CONST_4 = 39;
      E14_CONST_5 = 42;
    }
    optional E14 f_20 = 25;
    optional fixed32 f_21 = 26;
    optional bool f_22 = 27;
    optional fixed64 f_23 = 29;
    enum E15 {
      E15_UNSPECIFIED = 0;
      E15_CONST_1 = 42;
      E15_CONST_2 = 8;
      E15_CONST_3 = 126;
      E15_CONST_4 = 117;
      E15_CONST_5 = 104;
    }
    repeated E15 f_24 = 30 [packed = true];
    optional fixed64 f_25 = 32;
    optional int32 f_26 = 33;
    optional string f_27 = 35;
    optional double f_28 = 36;
    optional fixed64 f_29 = 38;
    message M24 {
      optional bool f_0 = 3;
    }
    optional M24 f_39 = 39;
    message M35 {
      optional string f_0 = 2;
    }
    repeated M35 f_40 = 40;
  }
  optional M13 f_69 = 69;
}
