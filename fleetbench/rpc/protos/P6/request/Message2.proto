// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P6.request.Message2;

message Message2 {
  optional string f_0 = 1;
  optional string f_1 = 3;
  optional string f_2 = 4;
  optional fixed64 f_3 = 5;
  optional fixed64 f_4 = 6;
  optional int32 f_5 = 7;
  optional fixed64 f_6 = 8;
  optional fixed64 f_7 = 9;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 77;
    E1_CONST_2 = 105;
    E1_CONST_3 = 14;
    E1_CONST_4 = 68;
    E1_CONST_5 = 89;
  }
  optional E1 f_8 = 11;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 113;
    E2_CONST_2 = 126;
    E2_CONST_3 = 104;
    E2_CONST_4 = 118;
    E2_CONST_5 = 89;
  }
  repeated E2 f_9 = 13 [packed = true];
  optional int64 f_10 = 15;
  optional int32 f_11 = 17;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 16;
    E3_CONST_2 = 33;
    E3_CONST_3 = 84;
    E3_CONST_4 = 60;
    E3_CONST_5 = 98;
  }
  optional E3 f_12 = 18;
  optional bool f_13 = 19;
  optional string f_14 = 20;
  optional int32 f_15 = 21;
  optional fixed64 f_16 = 22;
  optional fixed32 f_17 = 23;
  optional bool f_18 = 24;
  optional fixed32 f_19 = 27;
  optional fixed64 f_20 = 28;
  optional bool f_21 = 31;
  optional bool f_22 = 32;
  optional string f_23 = 33;
  optional fixed64 f_24 = 35;
  optional int32 f_25 = 36;
  optional fixed64 f_26 = 37;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 92;
    E4_CONST_2 = 73;
    E4_CONST_3 = 83;
    E4_CONST_4 = 44;
    E4_CONST_5 = 42;
  }
  repeated E4 f_27 = 39 [packed = true];
  optional int32 f_28 = 42;
  optional string f_29 = 45;
  message M1 {
    optional fixed64 f_0 = 1;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 57;
      E5_CONST_2 = 97;
      E5_CONST_3 = 83;
      E5_CONST_4 = 11;
      E5_CONST_5 = 25;
    }
    optional E5 f_1 = 2;
    optional int32 f_2 = 5;
    optional fixed64 f_3 = 7;
    message M15 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional string f_2 = 3;
    }
    optional M15 f_8 = 8;
    message M20 {
      optional fixed32 f_0 = 2;
    }
    optional M20 f_9 = 9;
  }
  optional M1 f_46 = 46;
  message M2 {
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 56;
      E6_CONST_2 = 63;
      E6_CONST_3 = 119;
      E6_CONST_4 = 101;
      E6_CONST_5 = 73;
    }
    optional E6 f_0 = 4;
    optional bool f_1 = 6;
    optional int32 f_2 = 7;
    message M16 {
      optional int32 f_0 = 1;
    }
    optional M16 f_8 = 8;
    message M21 {
      optional bool f_0 = 1;
      enum E25 {
        E25_UNSPECIFIED = 0;
        E25_CONST_1 = 51;
        E25_CONST_2 = 4;
        E25_CONST_3 = 7;
        E25_CONST_4 = 22;
        E25_CONST_5 = 81;
      }
      optional E25 f_1 = 3;
      optional string f_2 = 5;
      optional string f_3 = 6;
      optional bool f_4 = 8;
      optional string f_5 = 10;
    }
    optional M21 f_10 = 10;
    message M25 {
      optional bool f_0 = 1;
    }
    optional M25 f_12 = 12;
  }
  repeated M2 f_48 = 48;
  message M3 {
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 47;
      E7_CONST_2 = 52;
      E7_CONST_3 = 73;
      E7_CONST_4 = 4;
      E7_CONST_5 = 118;
    }
    optional E7 f_0 = 2;
    optional string f_1 = 4;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 63;
      E8_CONST_2 = 59;
      E8_CONST_3 = 96;
      E8_CONST_4 = 17;
      E8_CONST_5 = 32;
    }
    optional E8 f_2 = 6;
    enum E9 {
      E9_UNSPECIFIED = 0;
      E9_CONST_1 = 86;
      E9_CONST_2 = 54;
      E9_CONST_3 = 72;
      E9_CONST_4 = 33;
      E9_CONST_5 = 101;
    }
    optional E9 f_3 = 7;
    enum E10 {
      E10_UNSPECIFIED = 0;
      E10_CONST_1 = 10;
      E10_CONST_2 = 41;
      E10_CONST_3 = 118;
      E10_CONST_4 = 14;
      E10_CONST_5 = 22;
    }
    repeated E10 f_4 = 8 [packed = true];
    message M10 {
      enum E17 {
        E17_UNSPECIFIED = 0;
        E17_CONST_1 = 7;
        E17_CONST_2 = 29;
        E17_CONST_3 = 55;
        E17_CONST_4 = 23;
        E17_CONST_5 = 36;
      }
      repeated E17 f_0 = 2 [packed = true];
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional string f_3 = 5;
      optional bool f_4 = 6;
      optional bool f_5 = 7;
    }
    repeated M10 f_10 = 10;
    message M11 {
      optional fixed64 f_0 = 1;
      enum E18 {
        E18_UNSPECIFIED = 0;
        E18_CONST_1 = 22;
        E18_CONST_2 = 95;
        E18_CONST_3 = 111;
        E18_CONST_4 = 31;
        E18_CONST_5 = 110;
      }
      optional E18 f_1 = 2;
      optional bool f_2 = 3;
      optional int32 f_3 = 4;
      enum E19 {
        E19_UNSPECIFIED = 0;
        E19_CONST_1 = 50;
        E19_CONST_2 = 2;
        E19_CONST_3 = 86;
        E19_CONST_4 = 42;
        E19_CONST_5 = 121;
      }
      repeated E19 f_4 = 5 [packed = true];
      optional fixed64 f_5 = 6;
      optional int32 f_6 = 7;
    }
    repeated M11 f_11 = 11;
    message M14 {
      enum E22 {
        E22_UNSPECIFIED = 0;
        E22_CONST_1 = 33;
        E22_CONST_2 = 2;
        E22_CONST_3 = 83;
        E22_CONST_4 = 42;
        E22_CONST_5 = 66;
      }
      repeated E22 f_0 = 1 [packed = true];
      optional fixed64 f_1 = 3;
      optional double f_2 = 4;
      optional int32 f_3 = 6;
      optional fixed32 f_4 = 7;
    }
    optional M14 f_13 = 13;
  }
  optional M3 f_50 = 50;
  message M4 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 4;
    optional int32 f_2 = 5;
    optional bool f_3 = 7;
    message M17 {
      optional string f_0 = 2;
      optional int32 f_1 = 4;
    }
    optional M17 f_10 = 10;
    message M22 {
      optional string f_0 = 1;
    }
    repeated M22 f_11 = 11;
    message M23 {
      optional int32 f_0 = 1;
      message M27 {
        optional int32 f_0 = 1;
        optional fixed32 f_1 = 2;
        message M31 {
          enum E39 {
            E39_UNSPECIFIED = 0;
            E39_CONST_1 = 75;
            E39_CONST_2 = 23;
            E39_CONST_3 = 116;
            E39_CONST_4 = 17;
            E39_CONST_5 = 98;
          }
          repeated E39 f_0 = 1 [packed = true];
        }
        optional M31 f_3 = 3;
        message M34 {
          optional bool f_0 = 1;
          enum E41 {
            E41_UNSPECIFIED = 0;
            E41_CONST_1 = 121;
            E41_CONST_2 = 68;
            E41_CONST_3 = 2;
            E41_CONST_4 = 65;
            E41_CONST_5 = 43;
          }
          repeated E41 f_1 = 3 [packed = true];
          optional int32 f_2 = 4;
          message M36 {
            optional string f_0 = 2;
            enum E42 {
              E42_UNSPECIFIED = 0;
              E42_CONST_1 = 93;
              E42_CONST_2 = 101;
              E42_CONST_3 = 118;
              E42_CONST_4 = 90;
              E42_CONST_5 = 107;
            }
            optional E42 f_1 = 4;
            optional string f_2 = 5;
            optional bool f_3 = 6;
            optional fixed64 f_4 = 7;
            optional string f_5 = 8;
            optional fixed64 f_6 = 9;
            optional fixed32 f_7 = 10;
            optional string f_8 = 11;
            optional int32 f_9 = 13;
            optional fixed64 f_10 = 16;
            optional fixed32 f_11 = 17;
            optional fixed64 f_12 = 18;
            optional fixed32 f_13 = 19;
            optional string f_14 = 20;
            optional fixed32 f_15 = 22;
            optional fixed64 f_16 = 23;
            optional string f_17 = 25;
            enum E43 {
              E43_UNSPECIFIED = 0;
              E43_CONST_1 = 94;
              E43_CONST_2 = 3;
              E43_CONST_3 = 101;
              E43_CONST_4 = 55;
              E43_CONST_5 = 46;
            }
            optional E43 f_18 = 28;
            optional int32 f_19 = 29;
            optional string f_20 = 31;
            optional bool f_21 = 33;
            optional fixed64 f_22 = 37;
            enum E44 {
              E44_UNSPECIFIED = 0;
              E44_CONST_1 = 8;
              E44_CONST_2 = 123;
              E44_CONST_3 = 101;
              E44_CONST_4 = 92;
              E44_CONST_5 = 30;
            }
            optional E44 f_23 = 38;
            optional fixed64 f_24 = 40;
            optional int32 f_25 = 41;
            optional string f_26 = 42;
            optional bool f_27 = 43;
            enum E45 {
              E45_UNSPECIFIED = 0;
              E45_CONST_1 = 116;
              E45_CONST_2 = 126;
              E45_CONST_3 = 73;
              E45_CONST_4 = 89;
              E45_CONST_5 = 11;
            }
            repeated E45 f_28 = 46 [packed = true];
            enum E46 {
              E46_UNSPECIFIED = 0;
              E46_CONST_1 = 104;
              E46_CONST_2 = 121;
              E46_CONST_3 = 57;
              E46_CONST_4 = 111;
              E46_CONST_5 = 77;
            }
            optional E46 f_29 = 48;
            optional fixed64 f_30 = 49;
          }
          repeated M36 f_6 = 6;
        }
        optional M34 f_5 = 5;
        message M35 {
          optional int32 f_0 = 2;
        }
        repeated M35 f_7 = 7;
      }
      repeated M27 f_2 = 2;
    }
    repeated M23 f_13 = 13;
  }
  optional M4 f_51 = 51;
  message M5 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 3;
  }
  repeated M5 f_52 = 52;
  message M6 {
    optional bool f_0 = 4;
    optional string f_1 = 8;
    enum E11 {
      E11_UNSPECIFIED = 0;
      E11_CONST_1 = 62;
      E11_CONST_2 = 59;
      E11_CONST_3 = 60;
      E11_CONST_4 = 111;
      E11_CONST_5 = 61;
    }
    optional E11 f_2 = 9;
    optional fixed32 f_3 = 10;
    message M19 {
      optional bool f_0 = 2;
      enum E23 {
        E23_UNSPECIFIED = 0;
        E23_CONST_1 = 30;
        E23_CONST_2 = 57;
        E23_CONST_3 = 97;
        E23_CONST_4 = 24;
        E23_CONST_5 = 63;
      }
      repeated E23 f_1 = 3 [packed = true];
      enum E24 {
        E24_UNSPECIFIED = 0;
        E24_CONST_1 = 85;
        E24_CONST_2 = 75;
        E24_CONST_3 = 60;
        E24_CONST_4 = 55;
        E24_CONST_5 = 98;
      }
      optional E24 f_2 = 4;
    }
    optional M19 f_12 = 12;
    message M24 {
      optional double f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 5;
      optional fixed64 f_3 = 6;
      optional fixed64 f_4 = 7;
      optional int32 f_5 = 8;
      optional fixed32 f_6 = 9;
      enum E26 {
        E26_UNSPECIFIED = 0;
        E26_CONST_1 = 20;
        E26_CONST_2 = 37;
        E26_CONST_3 = 54;
        E26_CONST_4 = 64;
        E26_CONST_5 = 90;
      }
      optional E26 f_7 = 10;
      optional fixed32 f_8 = 11;
      optional string f_9 = 13;
      optional fixed64 f_10 = 14;
      optional string f_11 = 17;
      optional fixed32 f_12 = 18;
      enum E27 {
        E27_UNSPECIFIED = 0;
        E27_CONST_1 = 62;
        E27_CONST_2 = 83;
        E27_CONST_3 = 95;
        E27_CONST_4 = 114;
        E27_CONST_5 = 65;
      }
      optional E27 f_13 = 19;
      optional string f_14 = 20;
      optional string f_15 = 21;
      optional fixed64 f_16 = 23;
      optional string f_17 = 24;
      optional bool f_18 = 25;
      optional fixed64 f_19 = 26;
      optional int32 f_20 = 27;
      optional fixed64 f_21 = 28;
      optional fixed64 f_22 = 29;
      optional fixed64 f_23 = 32;
      optional bool f_24 = 33;
      enum E28 {
        E28_UNSPECIFIED = 0;
        E28_CONST_1 = 50;
        E28_CONST_2 = 54;
        E28_CONST_3 = 30;
        E28_CONST_4 = 71;
        E28_CONST_5 = 109;
      }
      optional E28 f_25 = 35;
      optional string f_26 = 36;
      enum E29 {
        E29_UNSPECIFIED = 0;
        E29_CONST_1 = 16;
        E29_CONST_2 = 86;
        E29_CONST_3 = 109;
        E29_CONST_4 = 54;
        E29_CONST_5 = 104;
      }
      optional E29 f_27 = 37;
      optional string f_28 = 39;
    }
    optional M24 f_13 = 13;
    message M26 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M26 f_15 = 15;
  }
  repeated M6 f_53 = 53;
  message M7 {
    optional fixed64 f_0 = 3;
    enum E12 {
      E12_UNSPECIFIED = 0;
      E12_CONST_1 = 57;
      E12_CONST_2 = 109;
      E12_CONST_3 = 79;
      E12_CONST_4 = 78;
      E12_CONST_5 = 35;
    }
    optional E12 f_1 = 4;
    optional bool f_2 = 5;
    optional bool f_3 = 6;
  }
  optional M7 f_54 = 54;
  message M8 {
    enum E13 {
      E13_UNSPECIFIED = 0;
      E13_CONST_1 = 71;
      E13_CONST_2 = 84;
      E13_CONST_3 = 2;
      E13_CONST_4 = 94;
      E13_CONST_5 = 3;
    }
    repeated E13 f_0 = 1 [packed = true];
    message M13 {
      optional fixed32 f_0 = 2;
      enum E21 {
        E21_UNSPECIFIED = 0;
        E21_CONST_1 = 88;
        E21_CONST_2 = 111;
        E21_CONST_3 = 77;
        E21_CONST_4 = 13;
        E21_CONST_5 = 27;
      }
      optional E21 f_1 = 3;
      optional int32 f_2 = 4;
      optional bool f_3 = 5;
      message M28 {
        optional bool f_0 = 1;
        optional string f_1 = 2;
        enum E30 {
          E30_UNSPECIFIED = 0;
          E30_CONST_1 = 75;
          E30_CONST_2 = 125;
          E30_CONST_3 = 99;
          E30_CONST_4 = 60;
          E30_CONST_5 = 86;
        }
        optional E30 f_2 = 3;
        optional int64 f_3 = 4;
        optional fixed64 f_4 = 5;
        enum E31 {
          E31_UNSPECIFIED = 0;
          E31_CONST_1 = 6;
          E31_CONST_2 = 54;
          E31_CONST_3 = 47;
          E31_CONST_4 = 115;
          E31_CONST_5 = 102;
        }
        repeated E31 f_5 = 8 [packed = true];
        optional int32 f_6 = 10;
        enum E32 {
          E32_UNSPECIFIED = 0;
          E32_CONST_1 = 49;
          E32_CONST_2 = 102;
          E32_CONST_3 = 76;
          E32_CONST_4 = 61;
          E32_CONST_5 = 69;
        }
        repeated E32 f_7 = 11 [packed = true];
        enum E33 {
          E33_UNSPECIFIED = 0;
          E33_CONST_1 = 7;
          E33_CONST_2 = 70;
          E33_CONST_3 = 126;
          E33_CONST_4 = 111;
          E33_CONST_5 = 18;
        }
        optional E33 f_8 = 12;
        optional fixed64 f_9 = 13;
        enum E34 {
          E34_UNSPECIFIED = 0;
          E34_CONST_1 = 18;
          E34_CONST_2 = 114;
          E34_CONST_3 = 108;
          E34_CONST_4 = 39;
          E34_CONST_5 = 59;
        }
        repeated E34 f_10 = 15 [packed = true];
        optional int32 f_11 = 17;
        optional int32 f_12 = 18;
        optional fixed32 f_13 = 21;
        optional fixed64 f_14 = 23;
        optional int32 f_15 = 25;
        optional int32 f_16 = 26;
        optional fixed64 f_17 = 29;
        optional string f_18 = 30;
        optional bool f_19 = 35;
        enum E35 {
          E35_UNSPECIFIED = 0;
          E35_CONST_1 = 55;
          E35_CONST_2 = 28;
          E35_CONST_3 = 90;
          E35_CONST_4 = 54;
          E35_CONST_5 = 19;
        }
        optional E35 f_20 = 36;
        optional string f_21 = 37;
        optional int32 f_22 = 38;
        optional int32 f_23 = 40;
        enum E36 {
          E36_UNSPECIFIED = 0;
          E36_CONST_1 = 49;
          E36_CONST_2 = 74;
          E36_CONST_3 = 26;
          E36_CONST_4 = 86;
          E36_CONST_5 = 24;
        }
        repeated E36 f_24 = 41 [packed = true];
        optional fixed64 f_25 = 42;
        optional int32 f_26 = 44;
        optional int32 f_27 = 45;
        optional int32 f_28 = 47;
        enum E37 {
          E37_UNSPECIFIED = 0;
          E37_CONST_1 = 107;
          E37_CONST_2 = 21;
          E37_CONST_3 = 87;
          E37_CONST_4 = 9;
          E37_CONST_5 = 16;
        }
        optional E37 f_29 = 48;
        optional string f_30 = 49;
        optional string f_31 = 50;
        message M29 {
          optional string f_0 = 1;
          optional int32 f_1 = 3;
        }
        optional M29 f_51 = 51;
        message M30 {
          optional double f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed64 f_2 = 4;
          enum E38 {
            E38_UNSPECIFIED = 0;
            E38_CONST_1 = 82;
            E38_CONST_2 = 76;
            E38_CONST_3 = 117;
            E38_CONST_4 = 123;
            E38_CONST_5 = 69;
          }
          optional E38 f_3 = 5;
          optional bool f_4 = 8;
          optional int32 f_5 = 9;
          optional int64 f_6 = 11;
        }
        optional M30 f_54 = 54;
        message M32 {
          optional string f_0 = 1;
        }
        repeated M32 f_55 = 55;
        message M33 {
          optional fixed32 f_0 = 2;
          optional fixed64 f_1 = 4;
          optional fixed64 f_2 = 5;
          enum E40 {
            E40_UNSPECIFIED = 0;
            E40_CONST_1 = 68;
            E40_CONST_2 = 99;
            E40_CONST_3 = 17;
            E40_CONST_4 = 77;
            E40_CONST_5 = 98;
          }
          repeated E40 f_3 = 6 [packed = true];
        }
        repeated M33 f_56 = 56;
      }
      optional M28 f_6 = 6;
    }
    optional M13 f_3 = 3;
    message M18 {
      optional double f_0 = 1;
    }
    repeated M18 f_4 = 4;
  }
  optional M8 f_57 = 57;
  message M9 {
    enum E14 {
      E14_UNSPECIFIED = 0;
      E14_CONST_1 = 27;
      E14_CONST_2 = 115;
      E14_CONST_3 = 80;
      E14_CONST_4 = 26;
      E14_CONST_5 = 11;
    }
    optional E14 f_0 = 1;
    enum E15 {
      E15_UNSPECIFIED = 0;
      E15_CONST_1 = 91;
      E15_CONST_2 = 56;
      E15_CONST_3 = 50;
      E15_CONST_4 = 112;
      E15_CONST_5 = 33;
    }
    optional E15 f_1 = 2;
    optional string f_2 = 5;
    optional string f_3 = 6;
    enum E16 {
      E16_UNSPECIFIED = 0;
      E16_CONST_1 = 18;
      E16_CONST_2 = 61;
      E16_CONST_3 = 13;
      E16_CONST_4 = 55;
      E16_CONST_5 = 16;
    }
    optional E16 f_4 = 7;
    optional fixed64 f_5 = 8;
    message M12 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 4;
      enum E20 {
        E20_UNSPECIFIED = 0;
        E20_CONST_1 = 67;
        E20_CONST_2 = 77;
        E20_CONST_3 = 86;
        E20_CONST_4 = 79;
        E20_CONST_5 = 117;
      }
      repeated E20 f_4 = 6 [packed = true];
      optional fixed64 f_5 = 8;
      optional int32 f_6 = 9;
    }
    optional M12 f_9 = 9;
  }
  optional M9 f_59 = 59;
}
