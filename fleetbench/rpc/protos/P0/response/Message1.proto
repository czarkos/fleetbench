// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P0.response.Message1;

message Message1 {
  optional bool f_0 = 1;
  optional bytes f_1 = 2 [ctype = CORD];
  optional uint32 f_2 = 3;
  message M1 {
    optional double f_0 = 1;
    optional double f_1 = 2;
    optional double f_2 = 3;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 125;
      E1_CONST_2 = 89;
      E1_CONST_3 = 83;
      E1_CONST_4 = 20;
      E1_CONST_5 = 99;
    }
    optional E1 f_3 = 7;
    message M6 {
      optional string f_0 = 1;
      optional double f_1 = 2;
      optional int64 f_2 = 3;
      optional bool f_3 = 6;
      optional int64 f_4 = 8;
      optional fixed64 f_5 = 10;
      optional float f_6 = 11;
      optional int64 f_7 = 12;
      optional uint64 f_8 = 14;
      optional double f_9 = 15;
      enum E16 {
        E16_UNSPECIFIED = 0;
        E16_CONST_1 = 16;
        E16_CONST_2 = 126;
        E16_CONST_3 = 33;
        E16_CONST_4 = 117;
        E16_CONST_5 = 93;
      }
      optional E16 f_10 = 16;
      optional int64 f_11 = 17;
      optional bool f_12 = 20;
      optional int64 f_13 = 23;
      optional string f_14 = 25;
      enum E17 {
        E17_UNSPECIFIED = 0;
        E17_CONST_1 = 46;
        E17_CONST_2 = 54;
        E17_CONST_3 = 37;
        E17_CONST_4 = 52;
        E17_CONST_5 = 76;
      }
      optional E17 f_15 = 27;
      enum E18 {
        E18_UNSPECIFIED = 0;
        E18_CONST_1 = 80;
        E18_CONST_2 = 97;
        E18_CONST_3 = 6;
        E18_CONST_4 = 82;
        E18_CONST_5 = 11;
      }
      optional E18 f_16 = 29;
      message M7 {
        optional uint32 f_0 = 2;
        optional int64 f_1 = 3;
        optional int32 f_2 = 5;
        optional fixed64 f_3 = 8;
        optional bytes f_4 = 10 [ctype = CORD];
        optional uint64 f_5 = 12;
        message M19 {
          optional fixed64 f_0 = 1;
          enum E23 {
            E23_UNSPECIFIED = 0;
            E23_CONST_1 = 124;
            E23_CONST_2 = 102;
            E23_CONST_3 = 46;
            E23_CONST_4 = 87;
            E23_CONST_5 = 67;
          }
          optional E23 f_1 = 2;
          optional int32 f_2 = 3;
          optional int32 f_3 = 4;
          enum E24 {
            E24_UNSPECIFIED = 0;
            E24_CONST_1 = 113;
            E24_CONST_2 = 43;
            E24_CONST_3 = 70;
            E24_CONST_4 = 126;
            E24_CONST_5 = 44;
          }
          optional E24 f_4 = 5;
          enum E25 {
            E25_UNSPECIFIED = 0;
            E25_CONST_1 = 63;
            E25_CONST_2 = 58;
            E25_CONST_3 = 56;
            E25_CONST_4 = 46;
            E25_CONST_5 = 31;
          }
          optional E25 f_5 = 6;
          optional bytes f_6 = 7 [ctype = CORD];
          optional int64 f_7 = 8;
          optional string f_8 = 9;
          enum E26 {
            E26_UNSPECIFIED = 0;
            E26_CONST_1 = 39;
            E26_CONST_2 = 102;
            E26_CONST_3 = 111;
            E26_CONST_4 = 75;
            E26_CONST_5 = 65;
          }
          optional E26 f_9 = 10;
          optional int64 f_10 = 12;
          optional int32 f_11 = 13;
          optional bytes f_12 = 14 [ctype = CORD];
          optional double f_13 = 17;
          optional int32 f_14 = 18;
          optional bool f_15 = 19;
          optional uint32 f_16 = 21;
          optional string f_17 = 24;
          optional float f_18 = 26;
          optional string f_19 = 27;
          optional int64 f_20 = 28;
          optional int32 f_21 = 31;
          optional int32 f_22 = 33;
          optional int32 f_23 = 35;
          optional double f_24 = 38;
          optional uint32 f_25 = 39;
          optional int64 f_26 = 42;
          optional int64 f_27 = 43;
          optional int64 f_28 = 45;
          optional bytes f_29 = 47 [ctype = CORD];
          optional string f_30 = 48;
          optional bytes f_31 = 52 [ctype = CORD];
          message M20 {
            optional int32 f_0 = 2;
          }
          repeated M20 f_53 = 53;
          message M21 {
            optional int32 f_0 = 1;
            optional string f_1 = 3;
            optional uint32 f_2 = 4;
            optional float f_3 = 5;
            optional string f_4 = 7;
            optional int32 f_5 = 9;
            optional bytes f_6 = 10 [ctype = CORD];
            enum E27 {
              E27_UNSPECIFIED = 0;
              E27_CONST_1 = 50;
              E27_CONST_2 = 91;
              E27_CONST_3 = 64;
              E27_CONST_4 = 44;
              E27_CONST_5 = 98;
            }
            optional E27 f_7 = 11;
            enum E28 {
              E28_UNSPECIFIED = 0;
              E28_CONST_1 = 49;
              E28_CONST_2 = 75;
              E28_CONST_3 = 17;
              E28_CONST_4 = 86;
              E28_CONST_5 = 26;
            }
            optional E28 f_8 = 12;
            optional bytes f_9 = 13 [ctype = CORD];
            optional double f_10 = 14;
            repeated int64 f_11 = 16 [packed = true];
            optional int32 f_12 = 17;
            optional double f_13 = 18;
            optional float f_14 = 23;
            optional int32 f_15 = 24;
            optional uint32 f_16 = 25;
            optional double f_17 = 28;
            optional int32 f_18 = 34;
            optional fixed64 f_19 = 35;
            optional double f_20 = 37;
            optional double f_21 = 38;
            optional double f_22 = 40;
            optional double f_23 = 41;
            optional int64 f_24 = 42;
            optional int64 f_25 = 43;
            optional fixed64 f_26 = 45;
            optional string f_27 = 46;
            optional bool f_28 = 47;
            optional uint32 f_29 = 50;
            optional bool f_30 = 51;
            enum E29 {
              E29_UNSPECIFIED = 0;
              E29_CONST_1 = 126;
              E29_CONST_2 = 47;
              E29_CONST_3 = 7;
              E29_CONST_4 = 68;
              E29_CONST_5 = 53;
            }
            optional E29 f_31 = 55;
            optional double f_32 = 57;
            message M22 {
              optional float f_0 = 2;
              message M26 {
                enum E31 {
                  E31_UNSPECIFIED = 0;
                  E31_CONST_1 = 92;
                  E31_CONST_2 = 106;
                  E31_CONST_3 = 43;
                  E31_CONST_4 = 1;
                  E31_CONST_5 = 91;
                }
                optional E31 f_0 = 1;
              }
              optional M26 f_3 = 3;
            }
            repeated M22 f_58 = 58;
            message M23 {
              optional int32 f_0 = 3;
              optional string f_1 = 4;
              optional string f_2 = 6;
              optional string f_3 = 7;
              optional double f_4 = 9;
              optional int64 f_5 = 10;
              optional uint32 f_6 = 11;
              optional bytes f_7 = 12;
              optional float f_8 = 13;
              optional bytes f_9 = 14 [ctype = CORD];
              optional int64 f_10 = 16;
              repeated string f_11 = 17;
              enum E30 {
                E30_UNSPECIFIED = 0;
                E30_CONST_1 = 53;
                E30_CONST_2 = 107;
                E30_CONST_3 = 8;
                E30_CONST_4 = 48;
                E30_CONST_5 = 57;
              }
              optional E30 f_12 = 21;
              repeated bool f_13 = 22 [packed = true];
              optional int32 f_14 = 23;
              optional double f_15 = 24;
              message M24 {
                optional int32 f_0 = 1;
                optional bytes f_1 = 2;
              }
              optional M24 f_25 = 25;
              message M25 {
                optional float f_0 = 2;
                message M27 {
                  optional uint32 f_0 = 2;
                  optional int32 f_1 = 4;
                  optional string f_2 = 6;
                  optional bool f_3 = 8;
                  optional bytes f_4 = 10 [ctype = CORD];
                  repeated string f_5 = 11;
                  optional int64 f_6 = 12;
                  optional int64 f_7 = 13;
                  optional int64 f_8 = 15;
                  optional float f_9 = 17;
                }
                optional M27 f_4 = 4;
              }
              optional M25 f_26 = 26;
            }
            optional M23 f_59 = 59;
          }
          optional M21 f_55 = 55;
        }
        optional M19 f_13 = 13;
      }
      optional M7 f_31 = 31;
      message M8 {
        optional bytes f_0 = 1 [ctype = CORD];
      }
      optional M8 f_33 = 33;
      message M9 {
        optional int32 f_0 = 2;
      }
      repeated M9 f_34 = 34;
      message M10 {
        optional uint32 f_0 = 2;
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 106;
          E19_CONST_2 = 12;
          E19_CONST_3 = 20;
          E19_CONST_4 = 37;
          E19_CONST_5 = 97;
        }
        optional E19 f_1 = 3;
      }
      repeated M10 f_35 = 35;
      message M11 {
        optional fixed64 f_0 = 1;
      }
      optional M11 f_36 = 36;
      message M12 {
        optional string f_0 = 1;
        optional string f_1 = 2;
        optional int64 f_2 = 5;
      }
      repeated M12 f_38 = 38;
      message M13 {
        optional int64 f_0 = 2;
      }
      optional M13 f_42 = 42;
      message M14 {
        optional string f_0 = 1;
        optional bytes f_1 = 2 [ctype = CORD];
        optional int64 f_2 = 3;
        optional int64 f_3 = 4;
        optional uint32 f_4 = 6;
        optional int64 f_5 = 8;
      }
      optional M14 f_43 = 43;
      message M15 {
        enum E20 {
          E20_UNSPECIFIED = 0;
          E20_CONST_1 = 63;
          E20_CONST_2 = 74;
          E20_CONST_3 = 28;
          E20_CONST_4 = 23;
          E20_CONST_5 = 80;
        }
        optional E20 f_0 = 1;
      }
      optional M15 f_47 = 47;
      message M16 {
        optional float f_0 = 1;
        optional double f_1 = 3;
      }
      optional M16 f_48 = 48;
      message M17 {
        optional int64 f_0 = 2;
      }
      repeated M17 f_51 = 51;
      message M18 {
        optional int64 f_0 = 2;
        optional string f_1 = 3;
        optional bytes f_2 = 4 [ctype = CORD];
        optional double f_3 = 6;
        optional fixed64 f_4 = 7;
        optional uint32 f_5 = 8;
        enum E21 {
          E21_UNSPECIFIED = 0;
          E21_CONST_1 = 57;
          E21_CONST_2 = 68;
          E21_CONST_3 = 112;
          E21_CONST_4 = 29;
          E21_CONST_5 = 10;
        }
        optional E21 f_6 = 10;
        optional int32 f_7 = 13;
        optional bytes f_8 = 14 [ctype = CORD];
        optional bytes f_9 = 15;
        optional bytes f_10 = 17 [ctype = CORD];
        optional int64 f_11 = 18;
        optional int32 f_12 = 19;
        optional string f_13 = 23;
        optional string f_14 = 24;
        optional int32 f_15 = 25;
        enum E22 {
          E22_UNSPECIFIED = 0;
          E22_CONST_1 = 21;
          E22_CONST_2 = 17;
          E22_CONST_3 = 83;
          E22_CONST_4 = 7;
          E22_CONST_5 = 64;
        }
        optional E22 f_16 = 28;
      }
      repeated M18 f_52 = 52;
    }
    optional M6 f_8 = 8;
  }
  optional M1 f_4 = 4;
  message M2 {
    optional bytes f_0 = 1 [ctype = CORD];
  }
  optional M2 f_5 = 5;
  message M3 {
    optional int64 f_0 = 2;
    optional float f_1 = 3;
    optional bytes f_2 = 5 [ctype = CORD];
  }
  optional M3 f_7 = 7;
  message M4 {
    optional uint32 f_0 = 1;
  }
  optional M4 f_8 = 8;
  message M5 {
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 99;
      E2_CONST_2 = 96;
      E2_CONST_3 = 87;
      E2_CONST_4 = 88;
      E2_CONST_5 = 61;
    }
    optional E2 f_0 = 1;
    optional int64 f_1 = 3;
    optional string f_2 = 4;
    optional int64 f_3 = 7;
    optional float f_4 = 8;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 113;
      E3_CONST_2 = 81;
      E3_CONST_3 = 74;
      E3_CONST_4 = 121;
      E3_CONST_5 = 35;
    }
    optional E3 f_5 = 9;
    optional int64 f_6 = 10;
    optional bytes f_7 = 11 [ctype = CORD];
    optional int32 f_8 = 13;
    optional int64 f_9 = 14;
    optional int32 f_10 = 18;
    optional fixed64 f_11 = 19;
    optional float f_12 = 21;
    optional double f_13 = 24;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 89;
      E4_CONST_2 = 120;
      E4_CONST_3 = 56;
      E4_CONST_4 = 34;
      E4_CONST_5 = 13;
    }
    optional E4 f_14 = 25;
    optional double f_15 = 26;
    optional bytes f_16 = 27 [ctype = CORD];
    optional string f_17 = 28;
    optional fixed64 f_18 = 30;
    optional float f_19 = 34;
    optional uint32 f_20 = 37;
    optional string f_21 = 41;
    optional int64 f_22 = 42;
    optional int64 f_23 = 43;
    optional int32 f_24 = 44;
    optional int64 f_25 = 46;
    optional uint32 f_26 = 48;
    optional bool f_27 = 49;
    optional double f_28 = 52;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 33;
      E5_CONST_2 = 58;
      E5_CONST_3 = 112;
      E5_CONST_4 = 91;
      E5_CONST_5 = 80;
    }
    optional E5 f_29 = 54;
    optional bytes f_30 = 56 [ctype = CORD];
    optional bool f_31 = 57;
    optional int64 f_32 = 58;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 27;
      E6_CONST_2 = 92;
      E6_CONST_3 = 85;
      E6_CONST_4 = 107;
      E6_CONST_5 = 50;
    }
    optional E6 f_33 = 60;
    optional int32 f_34 = 61;
    optional float f_35 = 62;
    optional double f_36 = 64;
    optional fixed32 f_37 = 66;
    optional int64 f_38 = 67;
    optional int64 f_39 = 68;
    optional uint32 f_40 = 70;
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 12;
      E7_CONST_2 = 43;
      E7_CONST_3 = 75;
      E7_CONST_4 = 26;
      E7_CONST_5 = 29;
    }
    optional E7 f_41 = 72;
    optional double f_42 = 73;
    optional int32 f_43 = 75;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 67;
      E8_CONST_2 = 44;
      E8_CONST_3 = 96;
      E8_CONST_4 = 81;
      E8_CONST_5 = 122;
    }
    optional E8 f_44 = 76;
    optional int32 f_45 = 77;
    optional int32 f_46 = 78;
    optional bytes f_47 = 80;
    optional int32 f_48 = 81;
    optional bytes f_49 = 84 [ctype = CORD];
    optional float f_50 = 85;
    optional int64 f_51 = 86;
    optional int64 f_52 = 88;
    repeated int64 f_53 = 90 [packed = true];
    optional fixed32 f_54 = 91;
    optional double f_55 = 92;
    repeated string f_56 = 94;
    optional bytes f_57 = 96 [ctype = CORD];
    optional bool f_58 = 99;
    optional uint32 f_59 = 101;
    optional float f_60 = 102;
    optional bool f_61 = 105;
    optional bool f_62 = 108;
    optional string f_63 = 109;
    optional double f_64 = 111;
    optional int64 f_65 = 113;
    optional bytes f_66 = 115 [ctype = CORD];
    optional int64 f_67 = 117;
    optional uint32 f_68 = 118;
    repeated int64 f_69 = 119 [packed = true];
    optional int32 f_70 = 120;
    optional float f_71 = 121;
    optional int64 f_72 = 122;
    optional bytes f_73 = 124 [ctype = CORD];
    optional string f_74 = 125;
    optional bytes f_75 = 130 [ctype = CORD];
    optional fixed64 f_76 = 132;
    enum E9 {
      E9_UNSPECIFIED = 0;
      E9_CONST_1 = 43;
      E9_CONST_2 = 125;
      E9_CONST_3 = 29;
      E9_CONST_4 = 35;
      E9_CONST_5 = 71;
    }
    optional E9 f_77 = 134;
    optional double f_78 = 135;
    optional uint32 f_79 = 137;
    enum E10 {
      E10_UNSPECIFIED = 0;
      E10_CONST_1 = 23;
      E10_CONST_2 = 14;
      E10_CONST_3 = 16;
      E10_CONST_4 = 6;
      E10_CONST_5 = 109;
    }
    optional E10 f_80 = 140;
    optional bool f_81 = 142;
    optional bool f_82 = 143;
    optional double f_83 = 144;
    optional int32 f_84 = 145;
    optional string f_85 = 146;
    optional string f_86 = 147;
    optional double f_87 = 149;
    optional double f_88 = 150;
    optional double f_89 = 152;
    optional float f_90 = 153;
    optional double f_91 = 154;
    optional string f_92 = 156;
    optional int64 f_93 = 157;
    optional int32 f_94 = 159;
    enum E11 {
      E11_UNSPECIFIED = 0;
      E11_CONST_1 = 101;
      E11_CONST_2 = 110;
      E11_CONST_3 = 26;
      E11_CONST_4 = 106;
      E11_CONST_5 = 43;
    }
    optional E11 f_95 = 160;
    enum E12 {
      E12_UNSPECIFIED = 0;
      E12_CONST_1 = 83;
      E12_CONST_2 = 88;
      E12_CONST_3 = 122;
      E12_CONST_4 = 64;
      E12_CONST_5 = 76;
    }
    optional E12 f_96 = 163;
    enum E13 {
      E13_UNSPECIFIED = 0;
      E13_CONST_1 = 54;
      E13_CONST_2 = 41;
      E13_CONST_3 = 13;
      E13_CONST_4 = 124;
      E13_CONST_5 = 117;
    }
    optional E13 f_97 = 164;
    enum E14 {
      E14_UNSPECIFIED = 0;
      E14_CONST_1 = 104;
      E14_CONST_2 = 118;
      E14_CONST_3 = 25;
      E14_CONST_4 = 31;
      E14_CONST_5 = 50;
    }
    optional E14 f_98 = 166;
    optional string f_99 = 167;
    optional double f_100 = 168;
    optional double f_101 = 169;
    optional int64 f_102 = 173;
    optional double f_103 = 174;
    optional fixed64 f_104 = 175;
    enum E15 {
      E15_UNSPECIFIED = 0;
      E15_CONST_1 = 98;
      E15_CONST_2 = 5;
      E15_CONST_3 = 106;
      E15_CONST_4 = 119;
      E15_CONST_5 = 66;
    }
    repeated E15 f_105 = 178 [packed = true];
    optional int64 f_106 = 179;
    optional string f_107 = 181;
    optional int64 f_108 = 182;
    optional float f_109 = 184;
    optional double f_110 = 187;
    optional int32 f_111 = 188;
  }
  optional M5 f_9 = 9;
}
