// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P0.response.Message1;

message Message1 {
  optional int32 f_0 = 3;
  optional double f_1 = 4;
  optional double f_2 = 5;
  optional fixed64 f_3 = 6;
  optional fixed64 f_4 = 7;
  optional fixed64 f_5 = 8;
  optional fixed64 f_6 = 9;
  optional int32 f_7 = 10;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 26;
    E1_CONST_2 = 3;
    E1_CONST_3 = 107;
    E1_CONST_4 = 42;
    E1_CONST_5 = 59;
  }
  repeated E1 f_8 = 12 [packed = true];
  optional fixed64 f_9 = 13;
  optional double f_10 = 14;
  optional double f_11 = 15;
  optional fixed64 f_12 = 17;
  optional fixed64 f_13 = 18;
  optional double f_14 = 19;
  optional double f_15 = 20;
  optional fixed64 f_16 = 21;
  optional int32 f_17 = 22;
  optional fixed64 f_18 = 24;
  optional int32 f_19 = 25;
  optional fixed64 f_20 = 26;
  optional double f_21 = 27;
  optional int32 f_22 = 28;
  optional double f_23 = 29;
  optional fixed64 f_24 = 30;
  optional double f_25 = 31;
  optional fixed64 f_26 = 32;
  message M1 {
    optional int32 f_0 = 1;
    optional double f_1 = 3;
    optional double f_2 = 4;
    optional int32 f_3 = 5;
    optional double f_4 = 6;
    message M18 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 32;
        E5_CONST_2 = 122;
        E5_CONST_3 = 58;
        E5_CONST_4 = 107;
        E5_CONST_5 = 112;
      }
      optional E5 f_0 = 1;
    }
    optional M18 f_7 = 7;
    message M22 {
      optional double f_0 = 1;
      message M34 {
        optional double f_0 = 1;
      }
      repeated M34 f_2 = 2;
      message M47 {
        optional fixed64 f_0 = 1;
        message M53 {
          optional double f_0 = 1;
          message M61 {
            optional double f_0 = 1;
            message M65 {
              optional int64 f_0 = 1;
            }
            optional M65 f_2 = 2;
            message M66 {
              optional double f_0 = 1;
            }
            repeated M66 f_3 = 3;
            message M69 {
              optional double f_0 = 1;
              optional fixed64 f_1 = 2;
              optional fixed64 f_2 = 3;
              optional double f_3 = 4;
            }
            optional M69 f_4 = 4;
          }
          optional M61 f_2 = 2;
        }
        optional M53 f_2 = 2;
      }
      optional M47 f_3 = 3;
      message M49 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 5;
        optional double f_4 = 6;
        optional double f_5 = 7;
      }
      optional M49 f_4 = 4;
    }
    optional M22 f_8 = 8;
    message M26 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional fixed64 f_4 = 5;
      optional int32 f_5 = 6;
      optional fixed32 f_6 = 8;
      optional double f_7 = 9;
      optional bool f_8 = 10;
      optional fixed64 f_9 = 11;
      optional bool f_10 = 13;
      optional fixed64 f_11 = 14;
      optional double f_12 = 15;
      optional double f_13 = 16;
      optional double f_14 = 18;
      optional double f_15 = 19;
      optional double f_16 = 20;
      optional double f_17 = 21;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 80;
        E8_CONST_2 = 85;
        E8_CONST_3 = 75;
        E8_CONST_4 = 122;
        E8_CONST_5 = 6;
      }
      optional E8 f_18 = 22;
      optional int32 f_19 = 23;
      optional int32 f_20 = 24;
      optional double f_21 = 25;
      optional double f_22 = 26;
      optional double f_23 = 27;
      message M43 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 4;
        optional int32 f_3 = 5;
        optional double f_4 = 6;
      }
      optional M43 f_28 = 28;
    }
    optional M26 f_9 = 9;
  }
  repeated M1 f_33 = 33;
  message M2 {
    optional double f_0 = 2;
  }
  repeated M2 f_34 = 34;
  message M3 {
    optional fixed64 f_0 = 1;
    message M14 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 84;
        E4_CONST_2 = 56;
        E4_CONST_3 = 115;
        E4_CONST_4 = 53;
        E4_CONST_5 = 12;
      }
      repeated E4 f_0 = 1 [packed = true];
      message M35 {
        optional int32 f_0 = 1;
      }
      repeated M35 f_2 = 2;
      message M46 {
        optional fixed64 f_0 = 2;
        message M55 {
          optional int32 f_0 = 1;
          optional double f_1 = 2;
          optional double f_2 = 3;
          optional double f_3 = 4;
          message M59 {
            optional double f_0 = 1;
            optional double f_1 = 2;
            optional fixed64 f_2 = 3;
            message M70 {
              optional fixed64 f_0 = 1;
            }
            optional M70 f_5 = 5;
            message M71 {
              optional int32 f_0 = 2;
              optional double f_1 = 3;
              optional double f_2 = 5;
              optional double f_3 = 6;
            }
            optional M71 f_6 = 6;
          }
          optional M59 f_5 = 5;
          message M60 {
            optional double f_0 = 2;
            optional fixed64 f_1 = 3;
            optional int32 f_2 = 4;
          }
          repeated M60 f_6 = 6;
          message M62 {
            optional double f_0 = 1;
            optional double f_1 = 2;
            optional double f_2 = 3;
            optional double f_3 = 4;
            message M64 {
              optional int32 f_0 = 1;
              optional fixed64 f_1 = 2;
              optional int32 f_2 = 4;
              optional bool f_3 = 5;
            }
            optional M64 f_5 = 5;
            message M68 {
              enum E12 {
                E12_UNSPECIFIED = 0;
                E12_CONST_1 = 4;
                E12_CONST_2 = 12;
                E12_CONST_3 = 13;
                E12_CONST_4 = 73;
                E12_CONST_5 = 43;
              }
              optional E12 f_0 = 1;
              optional fixed64 f_1 = 3;
              optional int64 f_2 = 4;
              optional fixed64 f_3 = 5;
              optional fixed64 f_4 = 6;
            }
            optional M68 f_7 = 7;
          }
          repeated M62 f_7 = 7;
        }
        optional M55 f_3 = 3;
        message M56 {
          optional fixed64 f_0 = 1;
          optional fixed64 f_1 = 2;
        }
        optional M56 f_4 = 4;
      }
      optional M46 f_3 = 3;
      message M52 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 3;
        optional fixed64 f_3 = 4;
        optional fixed64 f_4 = 5;
        optional double f_5 = 7;
        optional fixed64 f_6 = 8;
        optional double f_7 = 9;
      }
      optional M52 f_4 = 4;
    }
    optional M14 f_2 = 2;
    message M23 {
      optional fixed64 f_0 = 1;
    }
    repeated M23 f_3 = 3;
    message M27 {
      optional fixed64 f_0 = 1;
      message M38 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
      }
      optional M38 f_2 = 2;
      message M45 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional int32 f_2 = 3;
        optional double f_3 = 4;
        optional fixed64 f_4 = 5;
        optional int32 f_5 = 7;
        optional int32 f_6 = 8;
        optional int64 f_7 = 9;
        optional bool f_8 = 10;
      }
      optional M45 f_4 = 4;
    }
    optional M27 f_5 = 5;
    message M28 {
      optional double f_0 = 1;
      message M40 {
        optional int64 f_0 = 1;
      }
      repeated M40 f_2 = 2;
    }
    optional M28 f_6 = 6;
  }
  repeated M3 f_36 = 36;
  message M4 {
    optional fixed64 f_0 = 1;
    message M16 {
      optional fixed64 f_0 = 1;
      message M37 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 3;
        optional int32 f_2 = 4;
        optional fixed64 f_3 = 5;
        optional bool f_4 = 6;
        optional int32 f_5 = 7;
        repeated bool f_6 = 8 [packed = true];
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 13;
          E9_CONST_2 = 84;
          E9_CONST_3 = 117;
          E9_CONST_4 = 20;
          E9_CONST_5 = 15;
        }
        optional E9 f_7 = 9;
        optional int32 f_8 = 10;
      }
      repeated M37 f_2 = 2;
      message M42 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
        optional double f_3 = 4;
        optional int32 f_4 = 5;
        optional int32 f_5 = 6;
        optional fixed64 f_6 = 8;
        optional double f_7 = 9;
        optional int32 f_8 = 10;
        optional int32 f_9 = 11;
        optional fixed64 f_10 = 12;
        optional bool f_11 = 13;
        optional fixed64 f_12 = 14;
      }
      repeated M42 f_3 = 3;
    }
    optional M16 f_3 = 3;
  }
  optional M4 f_37 = 37;
  message M5 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional int32 f_2 = 3;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 1;
      E2_CONST_2 = 14;
      E2_CONST_3 = 7;
      E2_CONST_4 = 66;
      E2_CONST_5 = 70;
    }
    optional E2 f_3 = 5;
    optional int32 f_4 = 6;
    optional double f_5 = 7;
    optional double f_6 = 8;
    optional bool f_7 = 10;
    optional int32 f_8 = 11;
    optional double f_9 = 12;
  }
  optional M5 f_38 = 38;
  message M6 {
    optional fixed64 f_0 = 1;
    message M30 {
      optional float f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional double f_4 = 5;
      optional fixed32 f_5 = 6;
      optional bool f_6 = 7;
      optional int32 f_7 = 8;
      optional fixed64 f_8 = 9;
      optional fixed64 f_9 = 10;
      optional fixed64 f_10 = 11;
      optional bool f_11 = 13;
      optional double f_12 = 14;
    }
    optional M30 f_2 = 2;
  }
  repeated M6 f_39 = 39;
  message M7 {
    optional int32 f_0 = 1;
  }
  optional M7 f_40 = 40;
  message M8 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 30;
      E3_CONST_2 = 91;
      E3_CONST_3 = 9;
      E3_CONST_4 = 13;
      E3_CONST_5 = 122;
    }
    optional E3 f_0 = 1;
    message M15 {
      optional double f_0 = 1;
      message M41 {
        optional int32 f_0 = 1;
        message M58 {
          enum E10 {
            E10_UNSPECIFIED = 0;
            E10_CONST_1 = 50;
            E10_CONST_2 = 69;
            E10_CONST_3 = 106;
            E10_CONST_4 = 55;
            E10_CONST_5 = 38;
          }
          optional E10 f_0 = 1;
          optional fixed64 f_1 = 3;
          optional int32 f_2 = 5;
          optional fixed64 f_3 = 6;
          optional double f_4 = 7;
          optional int32 f_5 = 8;
          optional double f_6 = 9;
          optional double f_7 = 10;
          optional int32 f_8 = 11;
          optional int32 f_9 = 13;
          optional fixed64 f_10 = 14;
          optional fixed64 f_11 = 16;
          optional double f_12 = 17;
          optional int32 f_13 = 18;
          optional int64 f_14 = 20;
          optional double f_15 = 21;
          optional fixed64 f_16 = 22;
        }
        optional M58 f_2 = 2;
      }
      optional M41 f_2 = 2;
      message M50 {
        optional double f_0 = 1;
      }
      optional M50 f_4 = 4;
    }
    optional M15 f_2 = 2;
    message M25 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 68;
        E7_CONST_2 = 124;
        E7_CONST_3 = 96;
        E7_CONST_4 = 97;
        E7_CONST_5 = 39;
      }
      repeated E7 f_0 = 1 [packed = true];
      optional double f_1 = 2;
      optional double f_2 = 3;
      message M36 {
        optional int32 f_0 = 1;
      }
      optional M36 f_4 = 4;
      message M44 {
        optional int32 f_0 = 1;
      }
      optional M44 f_5 = 5;
    }
    optional M25 f_3 = 3;
    message M29 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      optional fixed64 f_3 = 5;
      optional int32 f_4 = 6;
      optional double f_5 = 8;
      optional int32 f_6 = 9;
      optional fixed64 f_7 = 10;
      optional fixed64 f_8 = 11;
      optional int64 f_9 = 12;
      optional fixed64 f_10 = 13;
      optional fixed64 f_11 = 14;
      optional double f_12 = 15;
      optional double f_13 = 16;
      optional double f_14 = 17;
      optional fixed64 f_15 = 19;
      optional double f_16 = 20;
      optional bool f_17 = 21;
      optional double f_18 = 22;
      optional double f_19 = 23;
      message M51 {
        optional fixed64 f_0 = 1;
      }
      optional M51 f_24 = 24;
    }
    optional M29 f_5 = 5;
  }
  optional M8 f_41 = 41;
  message M9 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 2;
    message M13 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 4;
      optional double f_4 = 5;
    }
    optional M13 f_3 = 3;
    message M17 {
      optional int32 f_0 = 1;
    }
    optional M17 f_5 = 5;
    message M20 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional bool f_2 = 3;
      optional double f_3 = 4;
      optional double f_4 = 5;
      optional double f_5 = 6;
      optional int32 f_6 = 7;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 65;
        E6_CONST_2 = 103;
        E6_CONST_3 = 117;
        E6_CONST_4 = 52;
        E6_CONST_5 = 83;
      }
      repeated E6 f_7 = 9 [packed = true];
      optional int32 f_8 = 10;
      optional int64 f_9 = 11;
      optional fixed64 f_10 = 12;
      optional fixed64 f_11 = 13;
      message M32 {
        optional fixed64 f_0 = 1;
        optional float f_1 = 2;
        optional int32 f_2 = 4;
        optional double f_3 = 5;
      }
      optional M32 f_14 = 14;
    }
    optional M20 f_6 = 6;
  }
  optional M9 f_42 = 42;
  message M10 {
    optional fixed64 f_0 = 1;
    message M21 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional double f_4 = 5;
      message M31 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional double f_3 = 4;
        optional int32 f_4 = 5;
        optional double f_5 = 6;
        message M57 {
          optional double f_0 = 2;
          message M63 {
            optional int32 f_0 = 2;
            optional int64 f_1 = 3;
            optional double f_2 = 4;
            optional double f_3 = 5;
            optional fixed32 f_4 = 6;
            optional int32 f_5 = 7;
            optional int32 f_6 = 8;
            optional double f_7 = 10;
            enum E11 {
              E11_UNSPECIFIED = 0;
              E11_CONST_1 = 52;
              E11_CONST_2 = 102;
              E11_CONST_3 = 29;
              E11_CONST_4 = 10;
              E11_CONST_5 = 64;
            }
            repeated E11 f_8 = 11 [packed = true];
            optional double f_9 = 13;
            optional fixed64 f_10 = 14;
            optional double f_11 = 15;
            optional int32 f_12 = 16;
            optional double f_13 = 18;
            optional int32 f_14 = 19;
            optional double f_15 = 20;
            optional fixed64 f_16 = 21;
            optional int32 f_17 = 22;
            optional int32 f_18 = 23;
            optional fixed64 f_19 = 24;
            optional bool f_20 = 25;
            message M67 {
              optional double f_0 = 1;
            }
            repeated M67 f_26 = 26;
          }
          repeated M63 f_3 = 3;
        }
        optional M57 f_7 = 7;
      }
      optional M31 f_6 = 6;
    }
    optional M21 f_2 = 2;
  }
  optional M10 f_43 = 43;
  message M11 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    message M24 {
      optional int32 f_0 = 1;
      optional int64 f_1 = 2;
      message M39 {
        optional fixed64 f_0 = 2;
        message M54 {
          optional double f_0 = 1;
          optional double f_1 = 2;
          optional fixed64 f_2 = 3;
        }
        optional M54 f_3 = 3;
      }
      optional M39 f_4 = 4;
      message M48 {
        optional fixed64 f_0 = 1;
      }
      optional M48 f_5 = 5;
    }
    optional M24 f_3 = 3;
  }
  optional M11 f_44 = 44;
  message M12 {
    optional double f_0 = 1;
    optional int32 f_1 = 2;
    message M19 {
      optional double f_0 = 1;
      message M33 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 3;
      }
      optional M33 f_2 = 2;
    }
    optional M19 f_4 = 4;
  }
  optional M12 f_45 = 45;
}
