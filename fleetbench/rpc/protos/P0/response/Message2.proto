// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P0.response.Message2;

message Message2 {
  optional double f_0 = 1;
  optional fixed64 f_1 = 3;
  optional int32 f_2 = 4;
  optional fixed64 f_3 = 6;
  optional int64 f_4 = 7;
  optional int32 f_5 = 9;
  optional double f_6 = 10;
  optional fixed64 f_7 = 11;
  optional fixed64 f_8 = 12;
  optional fixed32 f_9 = 13;
  optional fixed64 f_10 = 14;
  optional int32 f_11 = 16;
  optional fixed64 f_12 = 17;
  optional fixed64 f_13 = 18;
  optional double f_14 = 19;
  optional double f_15 = 20;
  optional bool f_16 = 21;
  optional int64 f_17 = 22;
  optional fixed64 f_18 = 23;
  optional int32 f_19 = 24;
  optional double f_20 = 25;
  optional int32 f_21 = 26;
  optional int32 f_22 = 27;
  optional int32 f_23 = 28;
  optional int32 f_24 = 30;
  optional int32 f_25 = 31;
  optional bool f_26 = 33;
  message M1 {
    optional fixed64 f_0 = 1;
    message M14 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      message M45 {
        optional fixed64 f_0 = 2;
        optional double f_1 = 3;
        optional double f_2 = 5;
        message M66 {
          optional fixed64 f_0 = 1;
          message M69 {
            optional double f_0 = 1;
            optional double f_1 = 2;
            optional fixed64 f_2 = 3;
            optional int32 f_3 = 4;
            message M75 {
              optional fixed64 f_0 = 1;
              optional fixed64 f_1 = 2;
              optional int32 f_2 = 3;
              optional fixed64 f_3 = 5;
            }
            optional M75 f_5 = 5;
            message M77 {
              optional int32 f_0 = 1;
            }
            optional M77 f_7 = 7;
          }
          repeated M69 f_3 = 3;
        }
        optional M66 f_6 = 6;
      }
      repeated M45 f_4 = 4;
    }
    repeated M14 f_2 = 2;
  }
  repeated M1 f_34 = 34;
  message M2 {
    optional int32 f_0 = 1;
    message M25 {
      optional int32 f_0 = 1;
      optional int64 f_1 = 2;
      optional fixed64 f_2 = 5;
      message M39 {
        optional double f_0 = 1;
      }
      optional M39 f_6 = 6;
      message M46 {
        optional double f_0 = 1;
      }
      optional M46 f_7 = 7;
    }
    optional M25 f_2 = 2;
    message M26 {
      optional fixed64 f_0 = 1;
      message M53 {
        optional int32 f_0 = 1;
      }
      optional M53 f_2 = 2;
    }
    optional M26 f_3 = 3;
    message M27 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional int32 f_4 = 6;
      optional double f_5 = 7;
      optional double f_6 = 8;
      optional double f_7 = 9;
      optional double f_8 = 10;
      optional int32 f_9 = 11;
      optional fixed64 f_10 = 12;
      optional double f_11 = 13;
      optional double f_12 = 14;
      optional int32 f_13 = 15;
      optional fixed64 f_14 = 16;
      optional int32 f_15 = 17;
      optional double f_16 = 19;
      optional int32 f_17 = 20;
      optional int32 f_18 = 21;
      message M47 {
        optional int32 f_0 = 1;
        message M63 {
          optional fixed64 f_0 = 2;
          message M72 {
            optional fixed64 f_0 = 1;
            message M78 {
              optional int32 f_0 = 1;
              optional double f_1 = 2;
              optional int32 f_2 = 3;
              optional fixed64 f_3 = 5;
              optional int32 f_4 = 6;
              optional int32 f_5 = 7;
              optional int32 f_6 = 8;
            }
            optional M78 f_2 = 2;
          }
          optional M72 f_5 = 5;
        }
        repeated M63 f_2 = 2;
      }
      repeated M47 f_22 = 22;
      message M50 {
        optional double f_0 = 1;
      }
      optional M50 f_23 = 23;
    }
    optional M27 f_4 = 4;
  }
  optional M2 f_35 = 35;
  message M3 {
    optional double f_0 = 1;
    optional int32 f_1 = 4;
    optional double f_2 = 5;
    optional fixed64 f_3 = 6;
    optional fixed64 f_4 = 9;
    optional int32 f_5 = 10;
    optional fixed64 f_6 = 11;
    optional fixed64 f_7 = 12;
  }
  optional M3 f_37 = 37;
  message M4 {
    optional int32 f_0 = 1;
    message M20 {
      optional fixed64 f_0 = 1;
      message M41 {
        optional fixed64 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 8;
        optional int32 f_4 = 9;
        optional int32 f_5 = 10;
        optional fixed64 f_6 = 11;
        optional double f_7 = 12;
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 101;
          E6_CONST_2 = 22;
          E6_CONST_3 = 60;
          E6_CONST_4 = 32;
          E6_CONST_5 = 18;
        }
        optional E6 f_8 = 14;
        optional double f_9 = 15;
        optional fixed64 f_10 = 16;
        optional double f_11 = 17;
        optional fixed64 f_12 = 18;
        optional int32 f_13 = 19;
        optional int32 f_14 = 21;
        optional double f_15 = 22;
        optional int32 f_16 = 23;
        optional int32 f_17 = 24;
        optional double f_18 = 25;
        optional double f_19 = 26;
        optional int32 f_20 = 27;
        message M59 {
          optional fixed64 f_0 = 1;
          optional double f_1 = 3;
          optional int64 f_2 = 4;
        }
        repeated M59 f_28 = 28;
      }
      optional M41 f_2 = 2;
      message M49 {
        optional int64 f_0 = 1;
        message M64 {
          optional double f_0 = 1;
        }
        optional M64 f_2 = 2;
      }
      optional M49 f_3 = 3;
    }
    optional M20 f_2 = 2;
    message M23 {
      optional bool f_0 = 1;
    }
    optional M23 f_3 = 3;
    message M28 {
      optional double f_0 = 1;
      optional int64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 4;
      optional int32 f_4 = 5;
      optional double f_5 = 6;
      optional fixed64 f_6 = 8;
      optional fixed64 f_7 = 9;
      optional fixed64 f_8 = 10;
      optional fixed64 f_9 = 11;
      optional int32 f_10 = 12;
      optional double f_11 = 13;
    }
    optional M28 f_4 = 4;
    message M34 {
      optional double f_0 = 1;
    }
    repeated M34 f_5 = 5;
  }
  repeated M4 f_38 = 38;
  message M5 {
    optional int32 f_0 = 1;
    message M30 {
      optional bool f_0 = 1;
    }
    optional M30 f_2 = 2;
  }
  repeated M5 f_39 = 39;
  message M6 {
    optional double f_0 = 1;
    optional fixed64 f_1 = 2;
    message M15 {
      optional int32 f_0 = 1;
    }
    repeated M15 f_3 = 3;
    message M24 {
      optional float f_0 = 1;
      message M52 {
        optional fixed64 f_0 = 1;
        message M61 {
          optional fixed64 f_0 = 1;
          optional double f_1 = 2;
          optional double f_2 = 4;
          message M67 {
            optional double f_0 = 1;
            optional fixed64 f_1 = 2;
            optional int32 f_2 = 3;
            optional double f_3 = 4;
            optional int32 f_4 = 5;
            optional double f_5 = 7;
            optional int32 f_6 = 8;
            optional int32 f_7 = 9;
          }
          repeated M67 f_5 = 5;
        }
        optional M61 f_2 = 2;
        message M62 {
          optional bool f_0 = 1;
          optional fixed64 f_1 = 2;
          enum E7 {
            E7_UNSPECIFIED = 0;
            E7_CONST_1 = 39;
            E7_CONST_2 = 18;
            E7_CONST_3 = 116;
            E7_CONST_4 = 108;
            E7_CONST_5 = 74;
          }
          optional E7 f_2 = 3;
          optional fixed64 f_3 = 4;
          optional int32 f_4 = 5;
        }
        repeated M62 f_3 = 3;
        message M65 {
          optional int64 f_0 = 1;
          message M68 {
            optional int32 f_0 = 2;
            optional double f_1 = 4;
            optional double f_2 = 5;
            optional int32 f_3 = 6;
            optional int32 f_4 = 7;
            optional double f_5 = 8;
            message M74 {
              optional double f_0 = 1;
            }
            repeated M74 f_9 = 9;
          }
          optional M68 f_2 = 2;
        }
        optional M65 f_4 = 4;
      }
      optional M52 f_2 = 2;
      message M55 {
        optional bool f_0 = 2;
      }
      optional M55 f_3 = 3;
    }
    optional M24 f_4 = 4;
  }
  repeated M6 f_41 = 41;
  message M7 {
    optional double f_0 = 1;
    message M13 {
      optional fixed64 f_0 = 1;
      message M42 {
        optional int32 f_0 = 1;
        message M58 {
          optional int32 f_0 = 1;
        }
        optional M58 f_2 = 2;
      }
      optional M42 f_2 = 2;
    }
    optional M13 f_2 = 2;
    message M16 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M16 f_3 = 3;
    message M31 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      optional double f_2 = 4;
      optional int64 f_3 = 5;
      message M54 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 3;
        optional bool f_3 = 4;
        optional fixed64 f_4 = 5;
      }
      optional M54 f_6 = 6;
    }
    repeated M31 f_4 = 4;
    message M33 {
      optional double f_0 = 1;
      message M37 {
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 2;
          E4_CONST_2 = 98;
          E4_CONST_3 = 74;
          E4_CONST_4 = 70;
          E4_CONST_5 = 112;
        }
        repeated E4 f_0 = 1 [packed = true];
        optional int64 f_1 = 3;
        optional int32 f_2 = 4;
        optional double f_3 = 5;
        enum E5 {
          E5_UNSPECIFIED = 0;
          E5_CONST_1 = 21;
          E5_CONST_2 = 32;
          E5_CONST_3 = 94;
          E5_CONST_4 = 2;
          E5_CONST_5 = 79;
        }
        optional E5 f_4 = 6;
        optional int32 f_5 = 7;
        optional double f_6 = 8;
        optional int64 f_7 = 9;
      }
      optional M37 f_2 = 2;
      message M51 {
        optional int32 f_0 = 1;
      }
      optional M51 f_3 = 3;
      message M56 {
        optional double f_0 = 1;
      }
      repeated M56 f_4 = 4;
    }
    optional M33 f_5 = 5;
  }
  optional M7 f_42 = 42;
  message M8 {
    optional fixed64 f_0 = 1;
    optional double f_1 = 3;
    optional fixed64 f_2 = 4;
    optional double f_3 = 5;
  }
  optional M8 f_43 = 43;
  message M9 {
    optional int32 f_0 = 1;
    message M18 {
      optional double f_0 = 1;
    }
    optional M18 f_3 = 3;
    message M29 {
      optional fixed64 f_0 = 1;
    }
    optional M29 f_4 = 4;
    message M35 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 4;
      optional fixed64 f_3 = 5;
      message M48 {
        optional double f_0 = 1;
      }
      optional M48 f_6 = 6;
      message M57 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
        optional int64 f_4 = 5;
        optional double f_5 = 6;
        optional double f_6 = 7;
        optional fixed64 f_7 = 9;
        optional int32 f_8 = 10;
        optional double f_9 = 11;
        optional double f_10 = 12;
        optional bool f_11 = 13;
        message M60 {
          optional fixed32 f_0 = 1;
          optional int32 f_1 = 2;
          message M70 {
            optional int32 f_0 = 1;
          }
          optional M70 f_3 = 3;
          message M71 {
            optional int32 f_0 = 1;
            message M73 {
              optional double f_0 = 1;
              optional bool f_1 = 2;
              optional fixed64 f_2 = 3;
              enum E8 {
                E8_UNSPECIFIED = 0;
                E8_CONST_1 = 24;
                E8_CONST_2 = 123;
                E8_CONST_3 = 72;
                E8_CONST_4 = 82;
                E8_CONST_5 = 15;
              }
              optional E8 f_3 = 4;
              optional int32 f_4 = 6;
              optional fixed64 f_5 = 8;
              optional int32 f_6 = 9;
              optional fixed64 f_7 = 10;
              optional double f_8 = 11;
              enum E9 {
                E9_UNSPECIFIED = 0;
                E9_CONST_1 = 27;
                E9_CONST_2 = 48;
                E9_CONST_3 = 14;
                E9_CONST_4 = 117;
                E9_CONST_5 = 110;
              }
              repeated E9 f_9 = 12 [packed = true];
              optional double f_10 = 13;
              optional double f_11 = 15;
              optional double f_12 = 16;
            }
            optional M73 f_2 = 2;
            message M76 {
              optional int64 f_0 = 1;
            }
            optional M76 f_3 = 3;
          }
          optional M71 f_4 = 4;
        }
        repeated M60 f_14 = 14;
      }
      repeated M57 f_8 = 8;
    }
    repeated M35 f_5 = 5;
  }
  optional M9 f_44 = 44;
  message M10 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    message M17 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      enum E1 {
        E1_UNSPECIFIED = 0;
        E1_CONST_1 = 11;
        E1_CONST_2 = 122;
        E1_CONST_3 = 82;
        E1_CONST_4 = 56;
        E1_CONST_5 = 26;
      }
      optional E1 f_2 = 3;
      optional int32 f_3 = 4;
      message M43 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 3;
        optional fixed64 f_3 = 4;
      }
      optional M43 f_5 = 5;
    }
    optional M17 f_3 = 3;
    message M32 {
      optional bool f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional int32 f_3 = 5;
      optional double f_4 = 6;
      optional int64 f_5 = 7;
      optional double f_6 = 8;
      optional int32 f_7 = 9;
      optional int32 f_8 = 11;
      optional int32 f_9 = 12;
      optional int32 f_10 = 13;
    }
    optional M32 f_5 = 5;
  }
  optional M10 f_45 = 45;
  message M11 {
    optional int32 f_0 = 1;
    message M22 {
      optional int32 f_0 = 1;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 88;
        E3_CONST_2 = 2;
        E3_CONST_3 = 99;
        E3_CONST_4 = 41;
        E3_CONST_5 = 78;
      }
      optional E3 f_1 = 2;
    }
    optional M22 f_2 = 2;
    message M36 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional double f_4 = 5;
      optional fixed64 f_5 = 6;
      optional int32 f_6 = 7;
      optional int32 f_7 = 8;
      optional fixed64 f_8 = 9;
    }
    optional M36 f_3 = 3;
  }
  optional M11 f_46 = 46;
  message M12 {
    optional fixed64 f_0 = 1;
    optional double f_1 = 2;
    optional double f_2 = 3;
    optional double f_3 = 4;
    optional fixed64 f_4 = 5;
    optional fixed64 f_5 = 6;
    optional int32 f_6 = 7;
    optional fixed64 f_7 = 8;
    optional fixed64 f_8 = 9;
    optional double f_9 = 10;
    message M19 {
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 17;
        E2_CONST_2 = 22;
        E2_CONST_3 = 9;
        E2_CONST_4 = 114;
        E2_CONST_5 = 96;
      }
      optional E2 f_0 = 1;
      message M40 {
        optional fixed64 f_0 = 1;
      }
      repeated M40 f_2 = 2;
    }
    optional M19 f_11 = 11;
    message M21 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 4;
      message M38 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional fixed64 f_3 = 5;
        optional fixed64 f_4 = 6;
      }
      optional M38 f_5 = 5;
      message M44 {
        optional double f_0 = 2;
      }
      repeated M44 f_6 = 6;
    }
    optional M21 f_12 = 12;
  }
  repeated M12 f_47 = 47;
}
