// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P0.response.Message0;

message Message0 {
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 11;
    E1_CONST_2 = 126;
    E1_CONST_3 = 28;
    E1_CONST_4 = 113;
    E1_CONST_5 = 88;
  }
  optional E1 f_0 = 3;
  message M1 {
    optional double f_0 = 2;
    message M3 {
      optional int64 f_0 = 2;
      optional bytes f_1 = 3 [ctype = CORD];
      optional bool f_2 = 5;
      optional double f_3 = 7;
      message M4 {
        optional int32 f_0 = 2;
      }
      repeated M4 f_9 = 9;
      message M5 {
        optional uint32 f_0 = 2;
        repeated string f_1 = 3;
        optional int64 f_2 = 4;
        message M8 {
          repeated string f_0 = 2;
        }
        optional M8 f_5 = 5;
      }
      repeated M5 f_10 = 10;
      message M6 {
        enum E3 {
          E3_UNSPECIFIED = 0;
          E3_CONST_1 = 126;
          E3_CONST_2 = 34;
          E3_CONST_3 = 29;
          E3_CONST_4 = 31;
          E3_CONST_5 = 24;
        }
        optional E3 f_0 = 5;
        message M9 {
          optional float f_0 = 1;
          enum E4 {
            E4_UNSPECIFIED = 0;
            E4_CONST_1 = 89;
            E4_CONST_2 = 82;
            E4_CONST_3 = 67;
            E4_CONST_4 = 6;
            E4_CONST_5 = 41;
          }
          optional E4 f_1 = 2;
          message M10 {
            enum E5 {
              E5_UNSPECIFIED = 0;
              E5_CONST_1 = 61;
              E5_CONST_2 = 108;
              E5_CONST_3 = 82;
              E5_CONST_4 = 119;
              E5_CONST_5 = 20;
            }
            optional E5 f_0 = 1;
            message M11 {
              optional bytes f_0 = 3 [ctype = CORD];
              message M12 {
                optional bool f_0 = 2;
                optional int64 f_1 = 3;
                optional float f_2 = 4;
                optional int32 f_3 = 6;
                optional bytes f_4 = 8 [ctype = CORD];
              }
              optional M12 f_4 = 4;
            }
            optional M11 f_2 = 2;
          }
          repeated M10 f_3 = 3;
        }
        optional M9 f_6 = 6;
      }
      optional M6 f_11 = 11;
      message M7 {
        optional bool f_0 = 3;
        optional string f_1 = 4;
      }
      optional M7 f_13 = 13;
    }
    optional M3 f_4 = 4;
  }
  optional M1 f_5 = 5;
  message M2 {
    optional int32 f_0 = 1;
    optional uint64 f_1 = 4;
    optional string f_2 = 6;
    optional fixed64 f_3 = 7;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 14;
      E2_CONST_2 = 46;
      E2_CONST_3 = 115;
      E2_CONST_4 = 30;
      E2_CONST_5 = 50;
    }
    optional E2 f_4 = 8;
  }
  optional M2 f_6 = 6;
}
