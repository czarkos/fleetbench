// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P0.request.Message0;

message Message0 {
  optional int32 f_0 = 2;
  optional fixed64 f_1 = 5;
  optional int32 f_2 = 6;
  optional fixed64 f_3 = 7;
  optional bool f_4 = 9;
  optional int32 f_5 = 11;
  optional string f_6 = 13;
  optional int32 f_7 = 14;
  optional int32 f_8 = 17;
  optional fixed64 f_9 = 18;
  optional string f_10 = 20;
  optional fixed64 f_11 = 21;
  optional fixed64 f_12 = 22;
  optional int32 f_13 = 24;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 92;
    E1_CONST_2 = 44;
    E1_CONST_3 = 68;
    E1_CONST_4 = 34;
    E1_CONST_5 = 111;
  }
  repeated E1 f_14 = 25 [packed = true];
  optional int32 f_15 = 27;
  optional fixed64 f_16 = 29;
  optional string f_17 = 31;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 109;
    E2_CONST_2 = 2;
    E2_CONST_3 = 60;
    E2_CONST_4 = 80;
    E2_CONST_5 = 50;
  }
  optional E2 f_18 = 33;
  optional int64 f_19 = 37;
  optional int32 f_20 = 38;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 60;
    E3_CONST_2 = 106;
    E3_CONST_3 = 120;
    E3_CONST_4 = 62;
    E3_CONST_5 = 55;
  }
  repeated E3 f_21 = 40 [packed = true];
  optional fixed64 f_22 = 42;
  optional fixed64 f_23 = 44;
  optional fixed64 f_24 = 48;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 71;
    E4_CONST_2 = 59;
    E4_CONST_3 = 34;
    E4_CONST_4 = 116;
    E4_CONST_5 = 58;
  }
  repeated E4 f_25 = 49 [packed = true];
  optional double f_26 = 50;
  optional int32 f_27 = 51;
  optional fixed32 f_28 = 53;
  message M1 {
    optional int32 f_0 = 1;
    optional string f_1 = 2;
    optional int32 f_2 = 3;
    optional fixed32 f_3 = 5;
    optional string f_4 = 6;
    optional int32 f_5 = 7;
    optional fixed64 f_6 = 9;
    message M18 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 9;
      optional string f_3 = 11;
      optional double f_4 = 14;
      optional string f_5 = 15;
      optional int32 f_6 = 16;
      optional fixed64 f_7 = 17;
      optional fixed64 f_8 = 18;
      optional fixed64 f_9 = 21;
      optional fixed64 f_10 = 23;
      optional string f_11 = 24;
      optional fixed64 f_12 = 25;
      optional int32 f_13 = 28;
      optional string f_14 = 31;
      optional fixed64 f_15 = 33;
      optional int32 f_16 = 34;
      optional fixed32 f_17 = 35;
      optional string f_18 = 38;
      optional string f_19 = 39;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 86;
        E10_CONST_2 = 57;
        E10_CONST_3 = 15;
        E10_CONST_4 = 68;
        E10_CONST_5 = 115;
      }
      optional E10 f_20 = 41;
      optional int32 f_21 = 43;
      optional bytes f_22 = 45;
      message M20 {
        optional fixed64 f_0 = 3;
      }
      optional M20 f_47 = 47;
      message M24 {
        optional fixed64 f_0 = 1;
      }
      repeated M24 f_48 = 48;
      message M25 {
        optional int32 f_0 = 2;
        optional fixed32 f_1 = 4;
        optional int32 f_2 = 5;
        optional fixed64 f_3 = 6;
        optional double f_4 = 8;
        message M40 {
          optional fixed64 f_0 = 2;
          message M44 {
            optional fixed64 f_0 = 2;
            optional string f_1 = 6;
            optional string f_2 = 7;
          }
          optional M44 f_5 = 5;
          message M45 {
            optional int32 f_0 = 4;
          }
          repeated M45 f_6 = 6;
        }
        optional M40 f_10 = 10;
      }
      optional M25 f_49 = 49;
      message M34 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 4;
      }
      optional M34 f_50 = 50;
    }
    optional M18 f_13 = 13;
  }
  optional M1 f_54 = 54;
  message M2 {
    optional string f_0 = 2;
    message M11 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 2;
      optional fixed32 f_2 = 3;
      message M28 {
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 4;
          E11_CONST_2 = 119;
          E11_CONST_3 = 90;
          E11_CONST_4 = 27;
          E11_CONST_5 = 81;
        }
        repeated E11 f_0 = 4 [packed = true];
        optional string f_1 = 5;
        optional fixed32 f_2 = 6;
        optional string f_3 = 8;
        optional string f_4 = 9;
        optional int32 f_5 = 10;
        optional string f_6 = 12;
        optional fixed64 f_7 = 13;
        optional bool f_8 = 14;
        optional fixed64 f_9 = 15;
        optional fixed32 f_10 = 16;
        optional double f_11 = 19;
        optional int32 f_12 = 20;
        message M38 {
          optional int32 f_0 = 1;
        }
        optional M38 f_21 = 21;
      }
      optional M28 f_6 = 6;
    }
    optional M11 f_3 = 3;
    message M15 {
      optional fixed64 f_0 = 2;
      optional bool f_1 = 3;
      message M23 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 3;
        message M42 {
          optional int32 f_0 = 3;
          optional fixed32 f_1 = 4;
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 96;
            E18_CONST_2 = 41;
            E18_CONST_3 = 46;
            E18_CONST_4 = 72;
            E18_CONST_5 = 24;
          }
          repeated E18 f_2 = 7 [packed = true];
          optional int32 f_3 = 9;
          optional int32 f_4 = 10;
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 88;
            E19_CONST_2 = 84;
            E19_CONST_3 = 8;
            E19_CONST_4 = 11;
            E19_CONST_5 = 35;
          }
          optional E19 f_5 = 11;
          optional fixed64 f_6 = 13;
          optional fixed64 f_7 = 14;
          optional fixed64 f_8 = 16;
          optional bool f_9 = 17;
          optional fixed64 f_10 = 20;
          optional int32 f_11 = 22;
          optional string f_12 = 26;
          optional int32 f_13 = 27;
          optional fixed64 f_14 = 28;
          optional fixed64 f_15 = 29;
          optional int32 f_16 = 30;
          enum E20 {
            E20_UNSPECIFIED = 0;
            E20_CONST_1 = 15;
            E20_CONST_2 = 116;
            E20_CONST_3 = 67;
            E20_CONST_4 = 24;
            E20_CONST_5 = 82;
          }
          repeated E20 f_17 = 32 [packed = true];
          optional int32 f_18 = 34;
          optional int32 f_19 = 36;
          optional bool f_20 = 39;
          optional int32 f_21 = 41;
          optional string f_22 = 43;
          optional int32 f_23 = 45;
          optional bool f_24 = 46;
          optional bool f_25 = 49;
          optional bool f_26 = 50;
          optional fixed64 f_27 = 52;
          optional int32 f_28 = 55;
          optional fixed32 f_29 = 56;
          optional int32 f_30 = 57;
          optional fixed32 f_31 = 58;
          optional string f_32 = 60;
        }
        repeated M42 f_4 = 4;
      }
      optional M23 f_5 = 5;
      message M32 {
        optional int32 f_0 = 2;
      }
      optional M32 f_7 = 7;
      message M33 {
        optional int32 f_0 = 4;
      }
      optional M33 f_9 = 9;
    }
    optional M15 f_6 = 6;
  }
  repeated M2 f_55 = 55;
  message M3 {
    optional int32 f_0 = 5;
    optional fixed64 f_1 = 6;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 64;
      E5_CONST_2 = 17;
      E5_CONST_3 = 2;
      E5_CONST_4 = 106;
      E5_CONST_5 = 66;
    }
    repeated E5 f_2 = 8 [packed = true];
    message M17 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 5;
      optional int32 f_3 = 7;
      optional string f_4 = 8;
      optional fixed32 f_5 = 9;
      optional int32 f_6 = 12;
      optional fixed32 f_7 = 14;
      optional fixed32 f_8 = 15;
      optional int32 f_9 = 17;
      optional string f_10 = 19;
      optional fixed64 f_11 = 21;
      optional int32 f_12 = 23;
      optional fixed64 f_13 = 26;
      optional string f_14 = 27;
      optional string f_15 = 29;
      optional int32 f_16 = 30;
      optional fixed64 f_17 = 32;
      optional int32 f_18 = 33;
      optional fixed64 f_19 = 35;
      optional fixed64 f_20 = 36;
      optional int32 f_21 = 37;
      optional bytes f_22 = 38;
      optional int32 f_23 = 40;
      optional int32 f_24 = 42;
      optional bool f_25 = 45;
      optional int32 f_26 = 47;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 67;
        E9_CONST_2 = 105;
        E9_CONST_3 = 71;
        E9_CONST_4 = 41;
        E9_CONST_5 = 24;
      }
      repeated E9 f_27 = 48 [packed = true];
      optional fixed64 f_28 = 50;
      optional string f_29 = 52;
      optional fixed64 f_30 = 54;
      optional double f_31 = 57;
      message M26 {
        optional fixed32 f_0 = 1;
      }
      optional M26 f_59 = 59;
      message M37 {
        optional string f_0 = 1;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 69;
          E16_CONST_2 = 67;
          E16_CONST_3 = 5;
          E16_CONST_4 = 81;
          E16_CONST_5 = 87;
        }
        optional E16 f_1 = 4;
        optional int32 f_2 = 6;
        optional bool f_3 = 8;
        optional fixed64 f_4 = 9;
        optional string f_5 = 11;
        optional fixed64 f_6 = 15;
        optional fixed64 f_7 = 16;
        optional fixed64 f_8 = 20;
        optional fixed32 f_9 = 21;
        optional int32 f_10 = 22;
        optional string f_11 = 24;
        optional string f_12 = 26;
        optional string f_13 = 27;
        optional fixed32 f_14 = 29;
        optional string f_15 = 30;
        optional string f_16 = 31;
        optional string f_17 = 32;
        optional fixed64 f_18 = 34;
        optional int32 f_19 = 36;
        optional bool f_20 = 39;
        optional string f_21 = 40;
        optional fixed64 f_22 = 41;
        optional string f_23 = 43;
        optional string f_24 = 44;
        optional int32 f_25 = 45;
        optional double f_26 = 46;
        optional bool f_27 = 47;
        optional fixed32 f_28 = 48;
        optional fixed64 f_29 = 51;
        optional fixed64 f_30 = 52;
        optional string f_31 = 55;
        optional int32 f_32 = 56;
      }
      optional M37 f_61 = 61;
    }
    repeated M17 f_9 = 9;
  }
  repeated M3 f_58 = 58;
  message M4 {
    optional fixed32 f_0 = 1;
    message M13 {
      optional fixed32 f_0 = 1;
      message M35 {
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 4;
          E14_CONST_2 = 105;
          E14_CONST_3 = 115;
          E14_CONST_4 = 38;
          E14_CONST_5 = 111;
        }
        repeated E14 f_0 = 1 [packed = true];
        message M39 {
          optional string f_0 = 1;
          optional fixed32 f_1 = 2;
          optional fixed32 f_2 = 4;
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 26;
            E17_CONST_2 = 98;
            E17_CONST_3 = 29;
            E17_CONST_4 = 71;
            E17_CONST_5 = 4;
          }
          repeated E17 f_3 = 6 [packed = true];
          optional fixed64 f_4 = 7;
          message M43 {
            optional fixed64 f_0 = 2;
            optional fixed64 f_1 = 3;
            optional int32 f_2 = 4;
            optional fixed64 f_3 = 6;
            optional bool f_4 = 9;
          }
          optional M43 f_8 = 8;
        }
        repeated M39 f_2 = 2;
      }
      optional M35 f_2 = 2;
    }
    repeated M13 f_4 = 4;
  }
  repeated M4 f_59 = 59;
  message M5 {
    optional double f_0 = 2;
    optional int32 f_1 = 3;
    message M12 {
      optional string f_0 = 1;
      message M22 {
        optional double f_0 = 3;
        message M41 {
          optional bool f_0 = 2;
          optional double f_1 = 3;
        }
        repeated M41 f_5 = 5;
      }
      repeated M22 f_2 = 2;
    }
    repeated M12 f_4 = 4;
    message M14 {
      optional int32 f_0 = 1;
      message M19 {
        optional fixed64 f_0 = 1;
      }
      optional M19 f_4 = 4;
      message M21 {
        optional string f_0 = 1;
      }
      repeated M21 f_5 = 5;
      message M29 {
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 81;
          E12_CONST_2 = 44;
          E12_CONST_3 = 92;
          E12_CONST_4 = 22;
          E12_CONST_5 = 68;
        }
        repeated E12 f_0 = 1 [packed = true];
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 25;
          E13_CONST_2 = 90;
          E13_CONST_3 = 78;
          E13_CONST_4 = 114;
          E13_CONST_5 = 75;
        }
        repeated E13 f_1 = 5 [packed = true];
        optional string f_2 = 7;
        optional bool f_3 = 10;
      }
      optional M29 f_8 = 8;
    }
    optional M14 f_6 = 6;
  }
  optional M5 f_61 = 61;
  message M6 {
    optional bool f_0 = 1;
    optional string f_1 = 2;
    optional bool f_2 = 4;
    optional string f_3 = 5;
    optional int32 f_4 = 8;
    optional int32 f_5 = 11;
    optional double f_6 = 13;
    message M10 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 102;
        E7_CONST_2 = 28;
        E7_CONST_3 = 31;
        E7_CONST_4 = 91;
        E7_CONST_5 = 76;
      }
      optional E7 f_0 = 2;
      message M30 {
        optional string f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
      }
      repeated M30 f_5 = 5;
    }
    optional M10 f_15 = 15;
    message M16 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 11;
        E8_CONST_2 = 71;
        E8_CONST_3 = 24;
        E8_CONST_4 = 42;
        E8_CONST_5 = 96;
      }
      optional E8 f_0 = 1;
      message M27 {
        optional bool f_0 = 1;
      }
      optional M27 f_3 = 3;
      message M31 {
        optional int32 f_0 = 3;
      }
      optional M31 f_5 = 5;
      message M36 {
        optional bool f_0 = 1;
        optional double f_1 = 2;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 78;
          E15_CONST_2 = 65;
          E15_CONST_3 = 125;
          E15_CONST_4 = 59;
          E15_CONST_5 = 114;
        }
        repeated E15 f_2 = 4 [packed = true];
      }
      optional M36 f_7 = 7;
    }
    optional M16 f_18 = 18;
  }
  repeated M6 f_62 = 62;
  message M7 {
    optional fixed64 f_0 = 1;
  }
  optional M7 f_63 = 63;
  message M8 {
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 115;
      E6_CONST_2 = 106;
      E6_CONST_3 = 28;
      E6_CONST_4 = 68;
      E6_CONST_5 = 5;
    }
    repeated E6 f_0 = 2 [packed = true];
    optional int32 f_1 = 6;
    optional fixed64 f_2 = 7;
  }
  optional M8 f_65 = 65;
  message M9 {
    optional int32 f_0 = 2;
    optional int32 f_1 = 6;
    optional fixed64 f_2 = 7;
    optional fixed64 f_3 = 9;
    optional double f_4 = 11;
    optional string f_5 = 14;
  }
  optional M9 f_68 = 68;
}
