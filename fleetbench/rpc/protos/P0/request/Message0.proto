// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P0.request.Message0;

message Message0 {
  optional int32 f_0 = 1;
  optional string f_1 = 3;
  optional int32 f_2 = 4;
  optional bool f_3 = 5;
  optional uint32 f_4 = 8;
  optional string f_5 = 11;
  optional uint64 f_6 = 12;
  message M1 {
    optional bool f_0 = 3;
    message M7 {
      optional bytes f_0 = 4;
      optional int64 f_1 = 6;
      optional bytes f_2 = 7;
      optional int32 f_3 = 9;
      optional int32 f_4 = 10;
      optional int64 f_5 = 11;
      optional int64 f_6 = 12;
      optional int64 f_7 = 14;
      optional int64 f_8 = 16;
      optional int64 f_9 = 17;
      optional double f_10 = 18;
      optional bytes f_11 = 21 [ctype = CORD];
      enum E1 {
        E1_UNSPECIFIED = 0;
        E1_CONST_1 = 16;
        E1_CONST_2 = 103;
        E1_CONST_3 = 82;
        E1_CONST_4 = 84;
        E1_CONST_5 = 112;
      }
      optional E1 f_12 = 24;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 40;
        E2_CONST_2 = 106;
        E2_CONST_3 = 48;
        E2_CONST_4 = 122;
        E2_CONST_5 = 32;
      }
      optional E2 f_13 = 25;
      optional int64 f_14 = 26;
      optional string f_15 = 28;
    }
    optional M7 f_4 = 4;
  }
  optional M1 f_14 = 14;
  message M2 {
    optional bool f_0 = 2;
    message M5 {
      optional double f_0 = 1;
      optional int64 f_1 = 3;
      optional int64 f_2 = 5;
    }
    optional M5 f_3 = 3;
  }
  optional M2 f_16 = 16;
  message M3 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 5;
    optional uint64 f_2 = 7;
    optional bytes f_3 = 10;
    optional int64 f_4 = 11;
    optional int32 f_5 = 12;
    optional bool f_6 = 13;
    optional int64 f_7 = 15;
    optional string f_8 = 17;
    optional fixed64 f_9 = 19;
    optional int32 f_10 = 21;
    optional int32 f_11 = 22;
    optional bytes f_12 = 24 [ctype = CORD];
    optional int32 f_13 = 26;
    optional int32 f_14 = 27;
    optional int32 f_15 = 28;
    optional double f_16 = 29;
    message M4 {
      optional fixed64 f_0 = 3;
      optional int64 f_1 = 4;
      message M8 {
        optional fixed64 f_0 = 3;
        optional bytes f_1 = 4;
        optional double f_2 = 5;
        message M11 {
          optional bytes f_0 = 1;
        }
        optional M11 f_6 = 6;
        message M12 {
          optional int64 f_0 = 1;
          optional int32 f_1 = 5;
          enum E3 {
            E3_UNSPECIFIED = 0;
            E3_CONST_1 = 99;
            E3_CONST_2 = 9;
            E3_CONST_3 = 7;
            E3_CONST_4 = 28;
            E3_CONST_5 = 36;
          }
          optional E3 f_2 = 8;
          optional fixed64 f_3 = 10;
          optional int32 f_4 = 11;
          optional bool f_5 = 12;
          optional bool f_6 = 14;
          optional bool f_7 = 15;
          optional int32 f_8 = 16;
          enum E4 {
            E4_UNSPECIFIED = 0;
            E4_CONST_1 = 89;
            E4_CONST_2 = 120;
            E4_CONST_3 = 68;
            E4_CONST_4 = 108;
            E4_CONST_5 = 5;
          }
          optional E4 f_9 = 17;
          optional uint32 f_10 = 19;
          optional int32 f_11 = 21;
          optional uint32 f_12 = 22;
          optional int64 f_13 = 23;
          optional string f_14 = 29;
          optional bool f_15 = 30;
          message M13 {
            optional bool f_0 = 1;
          }
          optional M13 f_33 = 33;
        }
        optional M12 f_7 = 7;
      }
      optional M8 f_6 = 6;
    }
    optional M4 f_31 = 31;
    message M6 {
      optional bool f_0 = 2;
      message M9 {
        optional fixed64 f_0 = 1;
      }
      optional M9 f_5 = 5;
      message M10 {
        optional int64 f_0 = 2;
        optional int64 f_1 = 3;
        optional bool f_2 = 5;
        optional uint32 f_3 = 6;
      }
      optional M10 f_6 = 6;
    }
    optional M6 f_32 = 32;
  }
  optional M3 f_18 = 18;
}
