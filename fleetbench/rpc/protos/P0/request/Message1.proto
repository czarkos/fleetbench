// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P0.request.Message1;

message Message1 {
  optional fixed32 f_0 = 1;
  optional int64 f_1 = 2;
  optional int32 f_2 = 3;
  optional fixed64 f_3 = 4;
  optional fixed64 f_4 = 5;
  optional fixed64 f_5 = 6;
  optional string f_6 = 7;
  optional fixed64 f_7 = 9;
  optional double f_8 = 10;
  optional int32 f_9 = 13;
  optional fixed64 f_10 = 15;
  optional string f_11 = 16;
  optional fixed32 f_12 = 17;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 14;
    E1_CONST_2 = 108;
    E1_CONST_3 = 88;
    E1_CONST_4 = 51;
    E1_CONST_5 = 109;
  }
  repeated E1 f_13 = 18 [packed = true];
  optional string f_14 = 21;
  optional bool f_15 = 23;
  optional string f_16 = 25;
  optional int32 f_17 = 26;
  optional fixed64 f_18 = 28;
  optional string f_19 = 29;
  optional fixed64 f_20 = 30;
  optional bool f_21 = 31;
  optional double f_22 = 32;
  optional fixed32 f_23 = 33;
  optional fixed64 f_24 = 34;
  optional string f_25 = 36;
  optional double f_26 = 38;
  optional fixed32 f_27 = 40;
  optional fixed64 f_28 = 42;
  optional int32 f_29 = 43;
  optional fixed64 f_30 = 44;
  message M1 {
    optional int32 f_0 = 1;
    message M4 {
      optional int32 f_0 = 2;
      optional string f_1 = 3;
      message M60 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 5;
        optional int32 f_4 = 7;
        optional fixed64 f_5 = 9;
        optional int32 f_6 = 10;
      }
      optional M60 f_4 = 4;
    }
    optional M4 f_5 = 5;
    message M6 {
      optional fixed64 f_0 = 1;
    }
    optional M6 f_6 = 6;
    message M8 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 6;
    }
    optional M8 f_7 = 7;
    message M9 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 4;
    }
    repeated M9 f_8 = 8;
    message M10 {
      optional fixed32 f_0 = 1;
      optional bool f_1 = 2;
    }
    repeated M10 f_10 = 10;
    message M11 {
      optional string f_0 = 2;
      message M58 {
        optional int64 f_0 = 1;
        message M78 {
          optional fixed32 f_0 = 3;
          optional fixed64 f_1 = 4;
          optional int32 f_2 = 6;
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 36;
            E13_CONST_2 = 122;
            E13_CONST_3 = 18;
            E13_CONST_4 = 69;
            E13_CONST_5 = 15;
          }
          repeated E13 f_3 = 7 [packed = true];
        }
        repeated M78 f_2 = 2;
      }
      optional M58 f_4 = 4;
    }
    optional M11 f_11 = 11;
    message M15 {
      optional int32 f_0 = 1;
    }
    optional M15 f_12 = 12;
    message M19 {
      optional int32 f_0 = 1;
      message M65 {
        optional string f_0 = 1;
        message M85 {
          optional fixed64 f_0 = 2;
        }
        optional M85 f_2 = 2;
      }
      repeated M65 f_2 = 2;
    }
    optional M19 f_14 = 14;
    message M20 {
      optional fixed64 f_0 = 1;
    }
    optional M20 f_16 = 16;
    message M22 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 4;
      message M70 {
        optional fixed32 f_0 = 1;
      }
      optional M70 f_5 = 5;
    }
    repeated M22 f_19 = 19;
    message M24 {
      optional fixed64 f_0 = 2;
      optional fixed32 f_1 = 4;
      optional string f_2 = 5;
      optional fixed32 f_3 = 6;
      message M67 {
        optional fixed32 f_0 = 2;
        optional int32 f_1 = 3;
        optional int32 f_2 = 4;
        optional string f_3 = 5;
        message M88 {
          optional int32 f_0 = 1;
        }
        optional M88 f_7 = 7;
      }
      optional M67 f_8 = 8;
    }
    optional M24 f_21 = 21;
    message M25 {
      optional bool f_0 = 2;
    }
    repeated M25 f_22 = 22;
    message M26 {
      optional string f_0 = 2;
    }
    optional M26 f_24 = 24;
    message M28 {
      optional int32 f_0 = 1;
    }
    optional M28 f_25 = 25;
    message M30 {
      optional fixed32 f_0 = 1;
    }
    repeated M30 f_28 = 28;
    message M34 {
      optional int32 f_0 = 1;
    }
    repeated M34 f_29 = 29;
    message M35 {
      optional int32 f_0 = 1;
    }
    repeated M35 f_32 = 32;
    message M37 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 5;
      optional double f_4 = 7;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 80;
        E6_CONST_2 = 14;
        E6_CONST_3 = 62;
        E6_CONST_4 = 73;
        E6_CONST_5 = 30;
      }
      repeated E6 f_5 = 8 [packed = true];
      optional string f_6 = 9;
      optional int32 f_7 = 11;
      optional fixed64 f_8 = 12;
      optional int32 f_9 = 13;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 23;
        E7_CONST_2 = 88;
        E7_CONST_3 = 106;
        E7_CONST_4 = 113;
        E7_CONST_5 = 36;
      }
      repeated E7 f_10 = 14 [packed = true];
      optional fixed64 f_11 = 15;
      optional fixed32 f_12 = 16;
      optional int32 f_13 = 17;
      optional double f_14 = 18;
      optional fixed64 f_15 = 19;
      optional int32 f_16 = 22;
      optional bool f_17 = 24;
      optional string f_18 = 25;
      optional fixed64 f_19 = 26;
      optional int32 f_20 = 27;
      optional int32 f_21 = 29;
      optional fixed64 f_22 = 31;
      optional int32 f_23 = 32;
      optional int32 f_24 = 35;
      optional fixed64 f_25 = 37;
      optional fixed64 f_26 = 39;
      optional bool f_27 = 40;
      optional string f_28 = 43;
      optional int32 f_29 = 44;
      optional fixed32 f_30 = 49;
    }
    repeated M37 f_33 = 33;
    message M40 {
      optional string f_0 = 2;
      message M51 {
        optional bool f_0 = 2;
        optional string f_1 = 3;
        optional int32 f_2 = 5;
        optional string f_3 = 7;
        optional double f_4 = 8;
      }
      repeated M51 f_4 = 4;
    }
    optional M40 f_34 = 34;
    message M43 {
      optional fixed64 f_0 = 1;
    }
    optional M43 f_35 = 35;
  }
  optional M1 f_45 = 45;
  message M2 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional string f_2 = 3;
    optional fixed64 f_3 = 6;
    optional bool f_4 = 7;
    optional string f_5 = 10;
    optional fixed64 f_6 = 11;
    optional int32 f_7 = 12;
    optional fixed64 f_8 = 14;
    optional string f_9 = 15;
    optional double f_10 = 16;
    optional int32 f_11 = 18;
    optional string f_12 = 21;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 15;
      E2_CONST_2 = 21;
      E2_CONST_3 = 87;
      E2_CONST_4 = 12;
      E2_CONST_5 = 30;
    }
    optional E2 f_13 = 24;
    optional fixed64 f_14 = 25;
    optional fixed64 f_15 = 26;
    optional fixed64 f_16 = 29;
    optional fixed64 f_17 = 31;
    optional int32 f_18 = 32;
    optional fixed32 f_19 = 36;
    optional fixed64 f_20 = 38;
    optional fixed64 f_21 = 39;
    optional double f_22 = 41;
    optional fixed64 f_23 = 43;
    optional string f_24 = 45;
    optional fixed64 f_25 = 47;
    optional string f_26 = 48;
    optional fixed64 f_27 = 49;
    optional string f_28 = 51;
    optional int32 f_29 = 52;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 105;
      E3_CONST_2 = 50;
      E3_CONST_3 = 37;
      E3_CONST_4 = 7;
      E3_CONST_5 = 111;
    }
    repeated E3 f_30 = 55 [packed = true];
    optional string f_31 = 56;
    message M3 {
      optional int32 f_0 = 1;
      message M48 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
        optional int32 f_3 = 4;
        optional int32 f_4 = 6;
        optional int32 f_5 = 7;
        optional bool f_6 = 9;
        optional string f_7 = 11;
        optional fixed64 f_8 = 13;
        optional fixed64 f_9 = 15;
        optional bool f_10 = 17;
        optional fixed64 f_11 = 18;
        optional fixed64 f_12 = 19;
        optional string f_13 = 20;
        optional string f_14 = 21;
        optional int32 f_15 = 22;
        optional fixed32 f_16 = 23;
        optional string f_17 = 24;
        optional int32 f_18 = 26;
        optional fixed32 f_19 = 29;
        optional string f_20 = 30;
        optional string f_21 = 31;
        optional fixed64 f_22 = 32;
        optional int32 f_23 = 33;
        optional fixed64 f_24 = 35;
        optional bool f_25 = 36;
        optional fixed64 f_26 = 38;
        optional string f_27 = 41;
        optional string f_28 = 42;
        optional int32 f_29 = 44;
        optional string f_30 = 46;
        message M81 {
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 22;
            E14_CONST_2 = 30;
            E14_CONST_3 = 117;
            E14_CONST_4 = 17;
            E14_CONST_5 = 101;
          }
          optional E14 f_0 = 2;
        }
        optional M81 f_47 = 47;
      }
      optional M48 f_5 = 5;
      message M54 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        message M91 {
          optional fixed64 f_0 = 1;
          message M95 {
            optional double f_0 = 2;
            optional fixed64 f_1 = 4;
            optional fixed64 f_2 = 5;
            optional fixed64 f_3 = 7;
            optional double f_4 = 8;
          }
          repeated M95 f_2 = 2;
          message M96 {
            repeated int32 f_0 = 1 [packed = true];
            optional fixed64 f_1 = 2;
            optional int32 f_2 = 3;
            optional int32 f_3 = 4;
            message M98 {
              optional fixed64 f_0 = 3;
            }
            repeated M98 f_5 = 5;
          }
          optional M96 f_4 = 4;
        }
        optional M91 f_3 = 3;
      }
      optional M54 f_6 = 6;
    }
    repeated M3 f_57 = 57;
    message M5 {
      optional int32 f_0 = 4;
      message M50 {
        optional int32 f_0 = 1;
      }
      optional M50 f_7 = 7;
    }
    optional M5 f_58 = 58;
    message M7 {
      optional int32 f_0 = 3;
      optional double f_1 = 4;
      message M46 {
        optional string f_0 = 1;
      }
      optional M46 f_5 = 5;
    }
    optional M7 f_59 = 59;
    message M12 {
      optional string f_0 = 1;
      message M71 {
        optional int32 f_0 = 1;
        message M87 {
          optional bool f_0 = 2;
          optional fixed64 f_1 = 3;
          optional int32 f_2 = 4;
        }
        optional M87 f_3 = 3;
      }
      optional M71 f_2 = 2;
    }
    optional M12 f_60 = 60;
    message M13 {
      optional string f_0 = 1;
    }
    repeated M13 f_61 = 61;
    message M14 {
      optional bool f_0 = 2;
      optional fixed32 f_1 = 3;
      message M62 {
        optional int32 f_0 = 1;
        optional bool f_1 = 2;
        message M77 {
          optional bool f_0 = 2;
          optional fixed64 f_1 = 3;
          optional int32 f_2 = 4;
          optional fixed64 f_3 = 5;
          optional fixed64 f_4 = 6;
          optional int32 f_5 = 7;
        }
        optional M77 f_4 = 4;
      }
      repeated M62 f_5 = 5;
    }
    repeated M14 f_62 = 62;
    message M16 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional int32 f_4 = 5;
      optional string f_5 = 6;
      optional int32 f_6 = 7;
      optional fixed64 f_7 = 8;
      optional int32 f_8 = 10;
      optional int32 f_9 = 12;
      optional string f_10 = 13;
      message M57 {
        optional fixed64 f_0 = 2;
      }
      optional M57 f_14 = 14;
    }
    optional M16 f_63 = 63;
    message M17 {
      optional fixed64 f_0 = 2;
      message M52 {
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 1;
          E9_CONST_2 = 119;
          E9_CONST_3 = 100;
          E9_CONST_4 = 70;
          E9_CONST_5 = 113;
        }
        repeated E9 f_0 = 3 [packed = true];
        optional int32 f_1 = 4;
        optional int32 f_2 = 5;
        message M89 {
          optional fixed64 f_0 = 3;
        }
        optional M89 f_6 = 6;
        message M92 {
          optional int32 f_0 = 1;
        }
        optional M92 f_7 = 7;
      }
      optional M52 f_3 = 3;
    }
    repeated M17 f_64 = 64;
    message M18 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 49;
        E4_CONST_2 = 121;
        E4_CONST_3 = 78;
        E4_CONST_4 = 47;
        E4_CONST_5 = 58;
      }
      optional E4 f_2 = 4;
      optional int32 f_3 = 5;
      message M47 {
        optional fixed64 f_0 = 2;
        message M90 {
          optional int32 f_0 = 2;
        }
        optional M90 f_4 = 4;
      }
      repeated M47 f_7 = 7;
      message M49 {
        optional int32 f_0 = 1;
        optional string f_1 = 3;
        optional int64 f_2 = 4;
        message M73 {
          optional int32 f_0 = 2;
        }
        optional M73 f_5 = 5;
        message M74 {
          optional fixed64 f_0 = 1;
        }
        optional M74 f_7 = 7;
      }
      optional M49 f_8 = 8;
      message M66 {
        optional string f_0 = 2;
        message M82 {
          optional double f_0 = 1;
          optional int32 f_1 = 2;
          optional fixed64 f_2 = 4;
          optional int32 f_3 = 5;
        }
        optional M82 f_4 = 4;
      }
      repeated M66 f_9 = 9;
    }
    repeated M18 f_66 = 66;
    message M21 {
      optional bool f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional fixed64 f_4 = 5;
    }
    optional M21 f_67 = 67;
    message M23 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 3;
        E5_CONST_2 = 89;
        E5_CONST_3 = 107;
        E5_CONST_4 = 41;
        E5_CONST_5 = 67;
      }
      optional E5 f_2 = 4;
      optional fixed64 f_3 = 5;
      message M56 {
        optional int64 f_0 = 1;
      }
      optional M56 f_6 = 6;
    }
    optional M23 f_68 = 68;
    message M27 {
      optional fixed64 f_0 = 2;
      message M68 {
        optional fixed64 f_0 = 1;
      }
      optional M68 f_3 = 3;
    }
    repeated M27 f_69 = 69;
    message M29 {
      optional bool f_0 = 2;
    }
    optional M29 f_70 = 70;
    message M31 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      message M59 {
        optional int32 f_0 = 1;
        message M86 {
          optional int32 f_0 = 1;
        }
        optional M86 f_2 = 2;
      }
      optional M59 f_6 = 6;
      message M69 {
        optional int32 f_0 = 1;
      }
      optional M69 f_7 = 7;
    }
    optional M31 f_71 = 71;
    message M32 {
      optional fixed64 f_0 = 1;
      message M63 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 2;
        optional fixed64 f_2 = 3;
        optional bool f_3 = 5;
        optional int32 f_4 = 7;
        optional int64 f_5 = 9;
        optional fixed64 f_6 = 10;
        optional string f_7 = 12;
        optional string f_8 = 13;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 32;
          E10_CONST_2 = 23;
          E10_CONST_3 = 126;
          E10_CONST_4 = 33;
          E10_CONST_5 = 63;
        }
        optional E10 f_9 = 15;
        optional int32 f_10 = 16;
        optional string f_11 = 17;
        optional bool f_12 = 18;
        optional string f_13 = 19;
        optional int32 f_14 = 20;
        optional int32 f_15 = 21;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 3;
          E11_CONST_2 = 73;
          E11_CONST_3 = 71;
          E11_CONST_4 = 62;
          E11_CONST_5 = 22;
        }
        optional E11 f_16 = 22;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 2;
          E12_CONST_2 = 116;
          E12_CONST_3 = 51;
          E12_CONST_4 = 113;
          E12_CONST_5 = 72;
        }
        repeated E12 f_17 = 23 [packed = true];
        optional fixed64 f_18 = 25;
        optional fixed64 f_19 = 27;
        optional int32 f_20 = 28;
        optional fixed64 f_21 = 30;
      }
      optional M63 f_2 = 2;
    }
    optional M32 f_72 = 72;
    message M33 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional fixed64 f_3 = 7;
      optional int64 f_4 = 8;
      optional fixed32 f_5 = 9;
      optional bool f_6 = 10;
      optional fixed64 f_7 = 11;
      optional string f_8 = 13;
      optional fixed32 f_9 = 14;
      optional string f_10 = 15;
    }
    repeated M33 f_73 = 73;
    message M36 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 3;
      message M55 {
        optional int64 f_0 = 1;
        optional int32 f_1 = 2;
        message M76 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 3;
          optional fixed64 f_2 = 4;
          optional fixed64 f_3 = 6;
          optional int32 f_4 = 8;
        }
        optional M76 f_4 = 4;
      }
      optional M55 f_4 = 4;
    }
    optional M36 f_74 = 74;
    message M38 {
      optional int32 f_0 = 1;
      message M64 {
        optional string f_0 = 2;
        optional fixed64 f_1 = 4;
      }
      optional M64 f_3 = 3;
    }
    optional M38 f_75 = 75;
    message M39 {
      optional int32 f_0 = 2;
      optional bool f_1 = 3;
    }
    optional M39 f_76 = 76;
    message M41 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed32 f_3 = 5;
      optional fixed64 f_4 = 6;
      message M53 {
        optional int32 f_0 = 2;
        message M79 {
          optional fixed64 f_0 = 3;
        }
        repeated M79 f_3 = 3;
      }
      repeated M53 f_9 = 9;
      message M61 {
        optional fixed64 f_0 = 4;
        optional fixed64 f_1 = 5;
        message M80 {
          optional bool f_0 = 2;
          optional string f_1 = 4;
        }
        optional M80 f_6 = 6;
        message M83 {
          optional string f_0 = 2;
          optional fixed64 f_1 = 3;
          optional fixed32 f_2 = 4;
          optional fixed64 f_3 = 6;
          optional fixed64 f_4 = 8;
          optional int32 f_5 = 9;
          message M94 {
            optional string f_0 = 1;
            optional bool f_1 = 2;
            optional int32 f_2 = 3;
            optional int32 f_3 = 6;
            optional fixed64 f_4 = 7;
            optional string f_5 = 8;
            optional int32 f_6 = 9;
            optional int32 f_7 = 11;
            optional int64 f_8 = 13;
            optional fixed64 f_9 = 14;
            optional double f_10 = 15;
            optional int32 f_11 = 16;
            optional int32 f_12 = 17;
            optional bool f_13 = 19;
            optional fixed64 f_14 = 21;
            optional int32 f_15 = 23;
            optional int32 f_16 = 24;
            optional int32 f_17 = 25;
            optional string f_18 = 28;
            optional string f_19 = 30;
            optional int32 f_20 = 31;
            optional fixed64 f_21 = 33;
            optional fixed64 f_22 = 34;
            optional int32 f_23 = 36;
            optional double f_24 = 37;
            optional int32 f_25 = 39;
            optional bool f_26 = 40;
            optional bool f_27 = 41;
            optional fixed64 f_28 = 43;
            optional int32 f_29 = 44;
            optional fixed64 f_30 = 45;
            message M97 {
              optional fixed64 f_0 = 1;
            }
            optional M97 f_46 = 46;
          }
          optional M94 f_10 = 10;
        }
        repeated M83 f_7 = 7;
        message M84 {
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 77;
            E15_CONST_2 = 13;
            E15_CONST_3 = 67;
            E15_CONST_4 = 61;
            E15_CONST_5 = 90;
          }
          repeated E15 f_0 = 2 [packed = true];
          optional int32 f_1 = 3;
          optional double f_2 = 4;
          optional fixed64 f_3 = 5;
          optional bool f_4 = 7;
          message M93 {
            optional fixed32 f_0 = 1;
            message M99 {
              optional bool f_0 = 1;
              optional string f_1 = 2;
              optional double f_2 = 4;
              optional bool f_3 = 5;
              optional string f_4 = 7;
              optional string f_5 = 8;
            }
            repeated M99 f_5 = 5;
            message M100 {
              optional fixed64 f_0 = 3;
              optional double f_1 = 4;
            }
            optional M100 f_7 = 7;
          }
          optional M93 f_9 = 9;
        }
        optional M84 f_8 = 8;
      }
      optional M61 f_11 = 11;
    }
    repeated M41 f_77 = 77;
    message M42 {
      optional fixed64 f_0 = 2;
    }
    optional M42 f_78 = 78;
    message M44 {
      optional fixed64 f_0 = 2;
    }
    optional M44 f_79 = 79;
    message M45 {
      optional int32 f_0 = 2;
      optional string f_1 = 4;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 38;
        E8_CONST_2 = 76;
        E8_CONST_3 = 41;
        E8_CONST_4 = 40;
        E8_CONST_5 = 16;
      }
      repeated E8 f_2 = 6 [packed = true];
      optional fixed64 f_3 = 9;
      optional fixed64 f_4 = 10;
      message M72 {
        optional string f_0 = 1;
        message M75 {
          optional int32 f_0 = 3;
        }
        optional M75 f_3 = 3;
      }
      optional M72 f_11 = 11;
    }
    repeated M45 f_80 = 80;
  }
  optional M2 f_47 = 47;
}
