// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P0.request.Message1;

message Message1 {
  optional fixed64 f_0 = 1;
  optional string f_1 = 4;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 21;
    E1_CONST_2 = 71;
    E1_CONST_3 = 89;
    E1_CONST_4 = 28;
    E1_CONST_5 = 121;
  }
  optional E1 f_2 = 7;
  optional fixed64 f_3 = 9;
  optional bool f_4 = 10;
  optional string f_5 = 11;
  optional fixed32 f_6 = 12;
  optional fixed64 f_7 = 15;
  optional int32 f_8 = 18;
  optional fixed64 f_9 = 19;
  optional string f_10 = 21;
  optional fixed64 f_11 = 23;
  optional int32 f_12 = 25;
  optional fixed64 f_13 = 27;
  optional fixed64 f_14 = 30;
  optional int32 f_15 = 32;
  optional bool f_16 = 34;
  optional fixed64 f_17 = 35;
  optional string f_18 = 36;
  optional string f_19 = 39;
  optional fixed64 f_20 = 41;
  optional double f_21 = 43;
  optional int32 f_22 = 44;
  optional int32 f_23 = 46;
  optional bool f_24 = 50;
  optional string f_25 = 51;
  optional fixed64 f_26 = 53;
  optional bool f_27 = 56;
  optional fixed64 f_28 = 57;
  message M1 {
    optional fixed64 f_0 = 2;
    message M9 {
      optional fixed32 f_0 = 2;
      optional string f_1 = 5;
      optional int64 f_2 = 7;
      optional string f_3 = 8;
      optional int32 f_4 = 12;
      message M18 {
        optional fixed64 f_0 = 1;
      }
      optional M18 f_13 = 13;
      message M27 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 5;
        message M37 {
          optional int32 f_0 = 1;
        }
        optional M37 f_6 = 6;
      }
      optional M27 f_14 = 14;
    }
    optional M9 f_4 = 4;
    message M14 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 5;
      optional fixed32 f_4 = 7;
      optional int32 f_5 = 8;
      optional fixed64 f_6 = 10;
      optional bool f_7 = 11;
      optional string f_8 = 12;
      optional string f_9 = 15;
      optional int32 f_10 = 17;
      optional fixed32 f_11 = 19;
      optional string f_12 = 21;
      optional fixed64 f_13 = 23;
      optional fixed64 f_14 = 24;
      optional bytes f_15 = 25;
      optional fixed64 f_16 = 26;
      optional string f_17 = 28;
      optional double f_18 = 29;
      optional int32 f_19 = 31;
      optional fixed64 f_20 = 33;
      optional fixed64 f_21 = 34;
      optional string f_22 = 35;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 104;
        E7_CONST_2 = 36;
        E7_CONST_3 = 50;
        E7_CONST_4 = 87;
        E7_CONST_5 = 88;
      }
      repeated E7 f_23 = 36 [packed = true];
      optional string f_24 = 37;
      optional fixed64 f_25 = 40;
      optional string f_26 = 41;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 50;
        E8_CONST_2 = 99;
        E8_CONST_3 = 34;
        E8_CONST_4 = 101;
        E8_CONST_5 = 96;
      }
      repeated E8 f_27 = 43 [packed = true];
      optional int32 f_28 = 44;
      optional fixed64 f_29 = 45;
      optional string f_30 = 46;
    }
    optional M14 f_6 = 6;
  }
  repeated M1 f_58 = 58;
  message M2 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional bool f_2 = 5;
    message M10 {
      optional double f_0 = 1;
      message M24 {
        optional int32 f_0 = 2;
        optional bool f_1 = 5;
        optional double f_2 = 6;
        optional fixed64 f_3 = 7;
        optional double f_4 = 9;
        optional int32 f_5 = 11;
      }
      optional M24 f_4 = 4;
      message M28 {
        optional bool f_0 = 2;
      }
      repeated M28 f_6 = 6;
      message M30 {
        optional string f_0 = 3;
        optional string f_1 = 5;
      }
      optional M30 f_7 = 7;
    }
    repeated M10 f_8 = 8;
    message M13 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 3;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 101;
        E6_CONST_2 = 60;
        E6_CONST_3 = 86;
        E6_CONST_4 = 104;
        E6_CONST_5 = 4;
      }
      repeated E6 f_2 = 5 [packed = true];
      optional fixed64 f_3 = 6;
    }
    optional M13 f_9 = 9;
    message M17 {
      optional string f_0 = 2;
      optional fixed32 f_1 = 3;
      optional int32 f_2 = 4;
      optional string f_3 = 5;
      optional int32 f_4 = 6;
      message M19 {
        optional int32 f_0 = 1;
      }
      repeated M19 f_7 = 7;
      message M20 {
        optional bool f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 6;
      }
      optional M20 f_8 = 8;
      message M32 {
        optional string f_0 = 2;
      }
      repeated M32 f_11 = 11;
      message M33 {
        optional int32 f_0 = 1;
      }
      optional M33 f_15 = 15;
    }
    repeated M17 f_10 = 10;
  }
  optional M2 f_60 = 60;
  message M3 {
    optional fixed64 f_0 = 1;
  }
  optional M3 f_63 = 63;
  message M4 {
    optional fixed32 f_0 = 1;
    message M15 {
      optional int32 f_0 = 1;
      message M21 {
        optional fixed64 f_0 = 3;
        optional int32 f_1 = 4;
        optional fixed64 f_2 = 6;
        optional fixed64 f_3 = 9;
        message M35 {
          optional fixed64 f_0 = 2;
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 76;
            E13_CONST_2 = 22;
            E13_CONST_3 = 111;
            E13_CONST_4 = 114;
            E13_CONST_5 = 87;
          }
          repeated E13 f_1 = 3 [packed = true];
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 92;
            E14_CONST_2 = 114;
            E14_CONST_3 = 43;
            E14_CONST_4 = 34;
            E14_CONST_5 = 31;
          }
          repeated E14 f_2 = 5 [packed = true];
          optional fixed32 f_3 = 6;
          optional string f_4 = 7;
          optional bool f_5 = 9;
          optional int32 f_6 = 10;
          optional double f_7 = 12;
          optional fixed64 f_8 = 15;
          optional string f_9 = 16;
          optional double f_10 = 17;
          optional int32 f_11 = 18;
          optional fixed64 f_12 = 19;
          optional string f_13 = 20;
          optional string f_14 = 22;
          optional int32 f_15 = 23;
          optional int32 f_16 = 24;
          optional fixed32 f_17 = 25;
          optional fixed64 f_18 = 26;
          optional fixed64 f_19 = 28;
        }
        optional M35 f_10 = 10;
      }
      optional M21 f_6 = 6;
      message M29 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
      }
      repeated M29 f_7 = 7;
    }
    repeated M15 f_2 = 2;
  }
  optional M4 f_65 = 65;
  message M5 {
    optional bool f_0 = 1;
    message M12 {
      optional int32 f_0 = 2;
      optional string f_1 = 4;
      optional fixed64 f_2 = 6;
      optional int32 f_3 = 7;
      optional fixed32 f_4 = 10;
      message M26 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 3;
        optional string f_2 = 5;
      }
      repeated M26 f_11 = 11;
    }
    repeated M12 f_3 = 3;
  }
  repeated M5 f_66 = 66;
  message M6 {
    optional double f_0 = 2;
    message M11 {
      optional fixed64 f_0 = 3;
      message M22 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 3;
        optional fixed64 f_2 = 4;
        optional fixed64 f_3 = 6;
      }
      optional M22 f_4 = 4;
    }
    optional M11 f_3 = 3;
    message M16 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed32 f_3 = 6;
      optional int32 f_4 = 8;
      optional bool f_5 = 10;
      message M23 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 6;
        optional string f_4 = 9;
        optional fixed64 f_5 = 10;
        optional string f_6 = 12;
        optional int32 f_7 = 15;
        optional fixed32 f_8 = 17;
        optional int32 f_9 = 19;
        optional fixed64 f_10 = 20;
        optional fixed64 f_11 = 21;
        optional fixed64 f_12 = 23;
        optional int32 f_13 = 24;
        optional fixed64 f_14 = 25;
        optional int32 f_15 = 27;
        optional fixed32 f_16 = 28;
        optional fixed32 f_17 = 30;
        message M39 {
          optional string f_0 = 1;
          optional string f_1 = 2;
          optional bool f_2 = 3;
          optional fixed64 f_3 = 5;
          optional fixed64 f_4 = 6;
          optional bool f_5 = 9;
        }
        optional M39 f_31 = 31;
      }
      optional M23 f_11 = 11;
      message M25 {
        optional fixed64 f_0 = 2;
      }
      optional M25 f_12 = 12;
      message M31 {
        optional int32 f_0 = 1;
        message M36 {
          optional int32 f_0 = 1;
          message M40 {
            optional bool f_0 = 3;
          }
          optional M40 f_2 = 2;
        }
        optional M36 f_3 = 3;
      }
      optional M31 f_14 = 14;
      message M34 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 3;
        optional int32 f_2 = 6;
        optional fixed64 f_3 = 8;
        optional int32 f_4 = 9;
        optional int32 f_5 = 10;
        optional string f_6 = 11;
        optional fixed64 f_7 = 12;
        optional int32 f_8 = 13;
        optional string f_9 = 14;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 60;
          E9_CONST_2 = 34;
          E9_CONST_3 = 29;
          E9_CONST_4 = 32;
          E9_CONST_5 = 85;
        }
        repeated E9 f_10 = 16 [packed = true];
        optional int32 f_11 = 17;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 108;
          E10_CONST_2 = 10;
          E10_CONST_3 = 111;
          E10_CONST_4 = 54;
          E10_CONST_5 = 61;
        }
        repeated E10 f_12 = 18 [packed = true];
        optional double f_13 = 19;
        optional string f_14 = 20;
        optional int32 f_15 = 21;
        optional int32 f_16 = 22;
        optional fixed64 f_17 = 23;
        optional string f_18 = 25;
        optional int32 f_19 = 26;
        optional int32 f_20 = 28;
        optional int32 f_21 = 29;
        optional fixed64 f_22 = 30;
        optional fixed32 f_23 = 32;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 116;
          E11_CONST_2 = 69;
          E11_CONST_3 = 68;
          E11_CONST_4 = 13;
          E11_CONST_5 = 27;
        }
        repeated E11 f_24 = 33 [packed = true];
        optional bool f_25 = 37;
        optional fixed32 f_26 = 41;
        optional fixed64 f_27 = 42;
        optional int32 f_28 = 43;
        optional bool f_29 = 45;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 32;
          E12_CONST_2 = 39;
          E12_CONST_3 = 90;
          E12_CONST_4 = 80;
          E12_CONST_5 = 82;
        }
        repeated E12 f_30 = 46 [packed = true];
        optional fixed64 f_31 = 48;
        optional string f_32 = 49;
        message M38 {
          optional fixed64 f_0 = 2;
          message M41 {
            optional int32 f_0 = 3;
            optional int32 f_1 = 6;
            optional double f_2 = 7;
            optional fixed32 f_3 = 9;
          }
          optional M41 f_3 = 3;
          message M42 {
            optional fixed64 f_0 = 3;
            optional bool f_1 = 4;
            optional int32 f_2 = 8;
            optional string f_3 = 9;
          }
          optional M42 f_7 = 7;
        }
        optional M38 f_50 = 50;
      }
      optional M34 f_16 = 16;
    }
    optional M16 f_5 = 5;
  }
  repeated M6 f_69 = 69;
  message M7 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    optional bool f_2 = 4;
    optional int32 f_3 = 5;
    optional fixed32 f_4 = 6;
    optional int32 f_5 = 9;
    optional string f_6 = 10;
    optional string f_7 = 11;
    optional fixed64 f_8 = 12;
    optional int32 f_9 = 14;
  }
  repeated M7 f_70 = 70;
  message M8 {
    optional fixed64 f_0 = 1;
    optional string f_1 = 3;
    optional int32 f_2 = 6;
    optional string f_3 = 10;
    optional int32 f_4 = 11;
    optional fixed64 f_5 = 13;
    optional string f_6 = 14;
    optional string f_7 = 15;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 55;
      E2_CONST_2 = 40;
      E2_CONST_3 = 64;
      E2_CONST_4 = 77;
      E2_CONST_5 = 60;
    }
    repeated E2 f_8 = 17 [packed = true];
    optional string f_9 = 18;
    optional int32 f_10 = 19;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 66;
      E3_CONST_2 = 64;
      E3_CONST_3 = 74;
      E3_CONST_4 = 112;
      E3_CONST_5 = 75;
    }
    repeated E3 f_11 = 21 [packed = true];
    optional string f_12 = 22;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 25;
      E4_CONST_2 = 37;
      E4_CONST_3 = 77;
      E4_CONST_4 = 16;
      E4_CONST_5 = 8;
    }
    repeated E4 f_13 = 24 [packed = true];
    optional string f_14 = 26;
    optional double f_15 = 27;
    optional string f_16 = 30;
    optional fixed64 f_17 = 31;
    optional fixed64 f_18 = 32;
    optional fixed64 f_19 = 34;
    optional int32 f_20 = 35;
    optional string f_21 = 37;
    optional int32 f_22 = 40;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 95;
      E5_CONST_2 = 6;
      E5_CONST_3 = 80;
      E5_CONST_4 = 121;
      E5_CONST_5 = 61;
    }
    repeated E5 f_23 = 43 [packed = true];
    optional double f_24 = 45;
    optional fixed64 f_25 = 48;
    optional int32 f_26 = 49;
    optional fixed32 f_27 = 53;
    optional string f_28 = 54;
    optional string f_29 = 55;
    optional int64 f_30 = 56;
    optional int32 f_31 = 58;
    optional int32 f_32 = 61;
  }
  repeated M8 f_72 = 72;
}
