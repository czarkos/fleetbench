// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P0.request.Message1;

message Message1 {
  optional string f_0 = 1;
  optional bytes f_1 = 3;
  optional bytes f_2 = 4;
  optional int32 f_3 = 7;
  optional double f_4 = 12;
  optional double f_5 = 13;
  optional bytes f_6 = 14 [ctype = CORD];
  message M1 {
    optional bool f_0 = 3;
    message M7 {
      optional bool f_0 = 4;
      optional int64 f_1 = 7;
      optional int64 f_2 = 8;
    }
    repeated M7 f_5 = 5;
    message M8 {
      optional int64 f_0 = 1;
      optional uint64 f_1 = 2;
    }
    repeated M8 f_7 = 7;
    message M13 {
      optional bytes f_0 = 4;
    }
    optional M13 f_9 = 9;
    message M14 {
      optional bool f_0 = 3;
      optional int32 f_1 = 5;
    }
    optional M14 f_10 = 10;
  }
  optional M1 f_15 = 15;
  message M2 {
    optional bool f_0 = 2;
    message M5 {
      optional bool f_0 = 1;
      message M17 {
        optional int32 f_0 = 3;
        optional bool f_1 = 4;
        message M20 {
          enum E3 {
            E3_UNSPECIFIED = 0;
            E3_CONST_1 = 102;
            E3_CONST_2 = 69;
            E3_CONST_3 = 12;
            E3_CONST_4 = 53;
            E3_CONST_5 = 35;
          }
          optional E3 f_0 = 2;
          enum E4 {
            E4_UNSPECIFIED = 0;
            E4_CONST_1 = 90;
            E4_CONST_2 = 66;
            E4_CONST_3 = 12;
            E4_CONST_4 = 97;
            E4_CONST_5 = 98;
          }
          optional E4 f_1 = 3;
          optional int64 f_2 = 4;
          optional bool f_3 = 6;
          enum E5 {
            E5_UNSPECIFIED = 0;
            E5_CONST_1 = 45;
            E5_CONST_2 = 25;
            E5_CONST_3 = 60;
            E5_CONST_4 = 82;
            E5_CONST_5 = 36;
          }
          optional E5 f_4 = 8;
          optional uint32 f_5 = 11;
          optional int64 f_6 = 13;
          optional int64 f_7 = 15;
          optional string f_8 = 16;
          optional uint32 f_9 = 17;
          optional int64 f_10 = 19;
          optional bool f_11 = 20;
          optional bytes f_12 = 21;
          optional int64 f_13 = 22;
          optional int32 f_14 = 23;
          optional bool f_15 = 24;
          optional int32 f_16 = 26;
          optional double f_17 = 27;
          optional bytes f_18 = 30;
          optional int32 f_19 = 32;
          optional int64 f_20 = 33;
          optional double f_21 = 35;
          optional bool f_22 = 37;
          optional bool f_23 = 40;
          optional int32 f_24 = 42;
          optional int32 f_25 = 43;
          optional int64 f_26 = 44;
          optional int64 f_27 = 46;
          optional double f_28 = 49;
          optional double f_29 = 50;
          optional int32 f_30 = 52;
          optional string f_31 = 53;
          optional bytes f_32 = 55 [ctype = CORD];
          optional double f_33 = 56;
          optional string f_34 = 57;
          optional bytes f_35 = 61;
          optional bool f_36 = 63;
          optional int64 f_37 = 66;
          optional uint64 f_38 = 67;
          optional int64 f_39 = 68;
          optional double f_40 = 71;
          optional int64 f_41 = 73;
          optional uint32 f_42 = 76;
          optional bool f_43 = 77;
        }
        optional M20 f_6 = 6;
      }
      repeated M17 f_2 = 2;
    }
    optional M5 f_3 = 3;
    message M11 {
      optional bytes f_0 = 2;
      message M18 {
        enum E2 {
          E2_UNSPECIFIED = 0;
          E2_CONST_1 = 37;
          E2_CONST_2 = 38;
          E2_CONST_3 = 77;
          E2_CONST_4 = 34;
          E2_CONST_5 = 120;
        }
        optional E2 f_0 = 1;
        optional int32 f_1 = 2;
      }
      repeated M18 f_4 = 4;
    }
    optional M11 f_5 = 5;
    message M12 {
      optional bytes f_0 = 1;
    }
    optional M12 f_6 = 6;
  }
  repeated M2 f_16 = 16;
  message M3 {
    optional uint32 f_0 = 2;
    optional int32 f_1 = 3;
    message M9 {
      optional bool f_0 = 1;
    }
    optional M9 f_6 = 6;
    message M16 {
      optional bool f_0 = 1;
      optional string f_1 = 3;
      optional string f_2 = 5;
      optional int64 f_3 = 6;
      optional bytes f_4 = 8;
      optional bool f_5 = 9;
      optional bool f_6 = 10;
      optional bytes f_7 = 12;
      optional int64 f_8 = 14;
      optional bool f_9 = 15;
      optional fixed64 f_10 = 16;
      optional string f_11 = 18;
      optional bool f_12 = 19;
      enum E1 {
        E1_UNSPECIFIED = 0;
        E1_CONST_1 = 43;
        E1_CONST_2 = 104;
        E1_CONST_3 = 121;
        E1_CONST_4 = 41;
        E1_CONST_5 = 122;
      }
      optional E1 f_13 = 21;
      optional bytes f_14 = 22;
    }
    optional M16 f_10 = 10;
  }
  repeated M3 f_17 = 17;
  message M4 {
    optional int64 f_0 = 1;
    optional int32 f_1 = 4;
    optional bytes f_2 = 6;
    message M6 {
      optional int32 f_0 = 1;
      message M19 {
        optional bytes f_0 = 2;
        optional uint64 f_1 = 5;
        optional bytes f_2 = 7;
        optional fixed64 f_3 = 8;
      }
      optional M19 f_2 = 2;
    }
    repeated M6 f_8 = 8;
    message M10 {
      optional int64 f_0 = 1;
    }
    optional M10 f_10 = 10;
    message M15 {
      optional double f_0 = 1;
    }
    optional M15 f_11 = 11;
  }
  optional M4 f_18 = 18;
}
