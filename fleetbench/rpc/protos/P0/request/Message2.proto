// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P0.request.Message2;

message Message2 {
  optional fixed64 f_0 = 3;
  optional bool f_1 = 4;
  optional string f_2 = 6;
  optional fixed64 f_3 = 9;
  optional bool f_4 = 10;
  optional fixed64 f_5 = 11;
  optional int32 f_6 = 12;
  optional fixed64 f_7 = 13;
  optional fixed64 f_8 = 15;
  optional int32 f_9 = 16;
  optional string f_10 = 17;
  optional fixed32 f_11 = 21;
  optional fixed64 f_12 = 25;
  optional int32 f_13 = 26;
  optional bool f_14 = 27;
  optional string f_15 = 28;
  optional fixed32 f_16 = 29;
  optional string f_17 = 30;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 66;
    E1_CONST_2 = 15;
    E1_CONST_3 = 24;
    E1_CONST_4 = 98;
    E1_CONST_5 = 123;
  }
  repeated E1 f_18 = 32 [packed = true];
  optional int32 f_19 = 33;
  optional fixed64 f_20 = 36;
  optional fixed32 f_21 = 38;
  optional int32 f_22 = 39;
  optional fixed64 f_23 = 41;
  optional int32 f_24 = 42;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 54;
    E2_CONST_2 = 24;
    E2_CONST_3 = 95;
    E2_CONST_4 = 120;
    E2_CONST_5 = 79;
  }
  repeated E2 f_25 = 43 [packed = true];
  optional string f_26 = 45;
  optional double f_27 = 46;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 87;
    E3_CONST_2 = 38;
    E3_CONST_3 = 100;
    E3_CONST_4 = 32;
    E3_CONST_5 = 71;
  }
  optional E3 f_28 = 48;
  message M1 {
    optional string f_0 = 2;
    optional fixed64 f_1 = 5;
    optional bool f_2 = 7;
    optional int32 f_3 = 9;
    optional fixed32 f_4 = 10;
    optional double f_5 = 11;
    optional bool f_6 = 13;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 7;
      E4_CONST_2 = 86;
      E4_CONST_3 = 44;
      E4_CONST_4 = 53;
      E4_CONST_5 = 60;
    }
    repeated E4 f_7 = 15 [packed = true];
    optional string f_8 = 18;
    optional int32 f_9 = 20;
    optional fixed32 f_10 = 22;
    optional int32 f_11 = 24;
    optional int32 f_12 = 26;
    optional bool f_13 = 28;
    optional int32 f_14 = 30;
    optional fixed64 f_15 = 31;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 113;
      E5_CONST_2 = 63;
      E5_CONST_3 = 59;
      E5_CONST_4 = 1;
      E5_CONST_5 = 17;
    }
    repeated E5 f_16 = 33 [packed = true];
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 114;
      E6_CONST_2 = 39;
      E6_CONST_3 = 1;
      E6_CONST_4 = 69;
      E6_CONST_5 = 47;
    }
    repeated E6 f_17 = 34 [packed = true];
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 105;
      E7_CONST_2 = 41;
      E7_CONST_3 = 114;
      E7_CONST_4 = 48;
      E7_CONST_5 = 29;
    }
    repeated E7 f_18 = 36 [packed = true];
    optional fixed64 f_19 = 37;
    optional fixed64 f_20 = 39;
    optional fixed64 f_21 = 41;
    optional fixed64 f_22 = 43;
    optional string f_23 = 44;
    optional fixed64 f_24 = 45;
    optional string f_25 = 46;
    optional string f_26 = 47;
    optional fixed32 f_27 = 49;
    optional int32 f_28 = 52;
    optional int32 f_29 = 54;
    optional string f_30 = 56;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 96;
      E8_CONST_2 = 2;
      E8_CONST_3 = 33;
      E8_CONST_4 = 48;
      E8_CONST_5 = 24;
    }
    optional E8 f_31 = 58;
    message M2 {
      optional fixed32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 4;
    }
    repeated M2 f_59 = 59;
    message M3 {
      optional int32 f_0 = 1;
      message M31 {
        optional fixed64 f_0 = 3;
      }
      optional M31 f_4 = 4;
      message M32 {
        optional string f_0 = 2;
        optional int32 f_1 = 3;
        optional int32 f_2 = 4;
        optional fixed32 f_3 = 6;
        optional string f_4 = 8;
        optional fixed32 f_5 = 10;
      }
      optional M32 f_6 = 6;
      message M54 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 5;
        optional fixed32 f_2 = 8;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 119;
          E11_CONST_2 = 23;
          E11_CONST_3 = 70;
          E11_CONST_4 = 6;
          E11_CONST_5 = 62;
        }
        repeated E11 f_3 = 13 [packed = true];
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 41;
          E12_CONST_2 = 12;
          E12_CONST_3 = 74;
          E12_CONST_4 = 55;
          E12_CONST_5 = 45;
        }
        optional E12 f_4 = 14;
        message M67 {
          optional string f_0 = 1;
        }
        optional M67 f_15 = 15;
        message M69 {
          optional string f_0 = 4;
          optional int32 f_1 = 6;
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 55;
            E16_CONST_2 = 69;
            E16_CONST_3 = 40;
            E16_CONST_4 = 116;
            E16_CONST_5 = 114;
          }
          repeated E16 f_2 = 9 [packed = true];
          optional int32 f_3 = 12;
          optional double f_4 = 13;
          optional bool f_5 = 16;
          optional double f_6 = 18;
          message M75 {
            optional int32 f_0 = 3;
            optional int32 f_1 = 4;
            optional string f_2 = 8;
            optional int32 f_3 = 11;
            optional string f_4 = 14;
            optional fixed64 f_5 = 17;
            optional string f_6 = 19;
            optional string f_7 = 20;
            optional int32 f_8 = 21;
            optional fixed32 f_9 = 22;
            optional int32 f_10 = 24;
            optional double f_11 = 25;
            optional string f_12 = 28;
            optional string f_13 = 29;
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 23;
              E17_CONST_2 = 22;
              E17_CONST_3 = 54;
              E17_CONST_4 = 75;
              E17_CONST_5 = 108;
            }
            repeated E17 f_14 = 33 [packed = true];
            optional int32 f_15 = 34;
            optional fixed64 f_16 = 37;
            optional int32 f_17 = 38;
            optional int64 f_18 = 39;
            optional int32 f_19 = 41;
            optional bool f_20 = 42;
            optional int32 f_21 = 45;
            optional fixed64 f_22 = 48;
            optional int32 f_23 = 50;
            optional int32 f_24 = 51;
            optional fixed64 f_25 = 52;
            optional string f_26 = 53;
            optional fixed64 f_27 = 54;
            optional int32 f_28 = 55;
            optional double f_29 = 56;
            optional int32 f_30 = 57;
            optional fixed64 f_31 = 58;
          }
          optional M75 f_19 = 19;
        }
        optional M69 f_16 = 16;
      }
      optional M54 f_8 = 8;
    }
    repeated M3 f_61 = 61;
    message M4 {
      optional string f_0 = 1;
    }
    optional M4 f_63 = 63;
    message M5 {
      optional string f_0 = 3;
      optional int32 f_1 = 5;
      optional fixed64 f_2 = 6;
      message M38 {
        optional double f_0 = 2;
      }
      optional M38 f_8 = 8;
    }
    optional M5 f_64 = 64;
    message M6 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 4;
    }
    repeated M6 f_65 = 65;
    message M7 {
      optional fixed32 f_0 = 2;
      message M44 {
        optional int32 f_0 = 1;
        message M66 {
          optional string f_0 = 2;
        }
        optional M66 f_2 = 2;
      }
      optional M44 f_3 = 3;
    }
    optional M7 f_66 = 66;
    message M8 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional fixed32 f_2 = 4;
      message M41 {
        optional fixed64 f_0 = 2;
      }
      repeated M41 f_5 = 5;
      message M62 {
        optional fixed64 f_0 = 2;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 64;
          E15_CONST_2 = 78;
          E15_CONST_3 = 37;
          E15_CONST_4 = 120;
          E15_CONST_5 = 85;
        }
        optional E15 f_1 = 3;
        optional fixed64 f_2 = 5;
        optional fixed64 f_3 = 7;
      }
      optional M62 f_8 = 8;
    }
    optional M8 f_67 = 67;
    message M9 {
      optional fixed64 f_0 = 3;
      message M28 {
        optional string f_0 = 3;
      }
      optional M28 f_4 = 4;
      message M45 {
        optional bool f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 4;
        optional fixed64 f_3 = 5;
        optional fixed32 f_4 = 7;
        message M68 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed64 f_2 = 4;
          optional int32 f_3 = 6;
          optional fixed64 f_4 = 7;
          optional fixed64 f_5 = 8;
        }
        optional M68 f_8 = 8;
      }
      optional M45 f_5 = 5;
    }
    optional M9 f_68 = 68;
    message M10 {
      optional string f_0 = 1;
      optional int32 f_1 = 3;
      message M36 {
        optional int32 f_0 = 1;
      }
      repeated M36 f_5 = 5;
    }
    optional M10 f_69 = 69;
    message M11 {
      optional string f_0 = 2;
      message M29 {
        optional fixed64 f_0 = 2;
        message M65 {
          optional fixed64 f_0 = 1;
        }
        repeated M65 f_5 = 5;
      }
      repeated M29 f_4 = 4;
      message M30 {
        optional int32 f_0 = 4;
      }
      optional M30 f_5 = 5;
      message M39 {
        optional int32 f_0 = 1;
      }
      optional M39 f_7 = 7;
      message M48 {
        optional fixed64 f_0 = 1;
        message M73 {
          optional int32 f_0 = 2;
          optional fixed64 f_1 = 3;
        }
        optional M73 f_2 = 2;
      }
      repeated M48 f_10 = 10;
      message M50 {
        optional fixed32 f_0 = 1;
      }
      repeated M50 f_13 = 13;
    }
    repeated M11 f_70 = 70;
    message M12 {
      optional string f_0 = 1;
      message M55 {
        optional int64 f_0 = 1;
      }
      optional M55 f_3 = 3;
    }
    optional M12 f_72 = 72;
    message M13 {
      optional string f_0 = 3;
      optional bool f_1 = 5;
      optional fixed64 f_2 = 6;
      message M46 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 3;
        optional int32 f_2 = 4;
        optional int32 f_3 = 5;
        optional int32 f_4 = 6;
        optional fixed32 f_5 = 7;
      }
      optional M46 f_7 = 7;
      message M57 {
        optional int32 f_0 = 2;
      }
      optional M57 f_8 = 8;
    }
    optional M13 f_74 = 74;
    message M14 {
      optional fixed64 f_0 = 2;
      message M43 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 4;
        optional int32 f_2 = 5;
        optional fixed64 f_3 = 6;
        message M64 {
          optional fixed64 f_0 = 1;
        }
        optional M64 f_8 = 8;
      }
      optional M43 f_4 = 4;
      message M49 {
        optional int32 f_0 = 1;
        message M63 {
          optional int32 f_0 = 2;
        }
        repeated M63 f_2 = 2;
      }
      optional M49 f_5 = 5;
    }
    repeated M14 f_75 = 75;
    message M15 {
      optional fixed32 f_0 = 3;
      message M56 {
        optional int32 f_0 = 2;
      }
      repeated M56 f_4 = 4;
    }
    repeated M15 f_77 = 77;
    message M16 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional double f_2 = 4;
      optional int32 f_3 = 5;
    }
    optional M16 f_78 = 78;
    message M17 {
      optional fixed32 f_0 = 2;
      message M34 {
        optional int64 f_0 = 1;
        message M74 {
          optional fixed32 f_0 = 3;
          optional double f_1 = 6;
          optional bool f_2 = 8;
          optional int32 f_3 = 10;
        }
        optional M74 f_2 = 2;
      }
      optional M34 f_4 = 4;
      message M52 {
        optional fixed64 f_0 = 4;
      }
      repeated M52 f_5 = 5;
    }
    optional M17 f_79 = 79;
    message M18 {
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 78;
        E9_CONST_2 = 65;
        E9_CONST_3 = 45;
        E9_CONST_4 = 24;
        E9_CONST_5 = 92;
      }
      repeated E9 f_0 = 1 [packed = true];
      message M33 {
        optional fixed32 f_0 = 1;
      }
      optional M33 f_2 = 2;
      message M61 {
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 96;
          E14_CONST_2 = 9;
          E14_CONST_3 = 121;
          E14_CONST_4 = 116;
          E14_CONST_5 = 19;
        }
        optional E14 f_0 = 1;
      }
      optional M61 f_3 = 3;
    }
    optional M18 f_81 = 81;
    message M19 {
      optional fixed64 f_0 = 3;
    }
    repeated M19 f_83 = 83;
    message M20 {
      optional string f_0 = 1;
    }
    optional M20 f_85 = 85;
    message M21 {
      optional fixed32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 4;
      optional int32 f_3 = 6;
      optional fixed64 f_4 = 8;
      optional fixed64 f_5 = 10;
      optional fixed64 f_6 = 12;
      message M47 {
        optional fixed64 f_0 = 1;
      }
      repeated M47 f_14 = 14;
      message M58 {
        optional string f_0 = 3;
      }
      optional M58 f_16 = 16;
    }
    optional M21 f_88 = 88;
    message M22 {
      optional double f_0 = 2;
      message M40 {
        optional fixed64 f_0 = 3;
        message M72 {
          optional fixed64 f_0 = 2;
        }
        repeated M72 f_4 = 4;
      }
      optional M40 f_4 = 4;
    }
    optional M22 f_90 = 90;
    message M23 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 4;
      message M35 {
        optional int32 f_0 = 4;
      }
      optional M35 f_6 = 6;
    }
    repeated M23 f_91 = 91;
    message M24 {
      optional string f_0 = 2;
      message M60 {
        optional bool f_0 = 2;
        optional fixed64 f_1 = 4;
        optional fixed64 f_2 = 7;
        optional string f_3 = 10;
        optional int32 f_4 = 11;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 78;
          E13_CONST_2 = 59;
          E13_CONST_3 = 114;
          E13_CONST_4 = 50;
          E13_CONST_5 = 60;
        }
        repeated E13 f_5 = 14 [packed = true];
      }
      optional M60 f_4 = 4;
    }
    optional M24 f_93 = 93;
    message M25 {
      optional string f_0 = 2;
      message M59 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 5;
        optional string f_2 = 7;
        message M70 {
          optional bool f_0 = 1;
        }
        repeated M70 f_9 = 9;
      }
      repeated M59 f_3 = 3;
    }
    optional M25 f_94 = 94;
    message M26 {
      optional fixed64 f_0 = 2;
      message M37 {
        optional fixed64 f_0 = 2;
        message M71 {
          optional int32 f_0 = 2;
        }
        repeated M71 f_3 = 3;
      }
      repeated M37 f_4 = 4;
      message M51 {
        optional int32 f_0 = 3;
        optional int32 f_1 = 6;
      }
      optional M51 f_6 = 6;
      message M53 {
        optional fixed64 f_0 = 2;
      }
      optional M53 f_7 = 7;
    }
    optional M26 f_96 = 96;
    message M27 {
      optional string f_0 = 1;
      optional int32 f_1 = 4;
      optional int32 f_2 = 5;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 66;
        E10_CONST_2 = 27;
        E10_CONST_3 = 126;
        E10_CONST_4 = 108;
        E10_CONST_5 = 50;
      }
      repeated E10 f_3 = 6 [packed = true];
      optional fixed32 f_4 = 7;
      optional fixed64 f_5 = 9;
      optional double f_6 = 10;
      optional string f_7 = 11;
      optional fixed64 f_8 = 12;
      optional fixed64 f_9 = 13;
      optional int32 f_10 = 16;
      message M42 {
        optional fixed64 f_0 = 1;
      }
      repeated M42 f_17 = 17;
    }
    optional M27 f_97 = 97;
  }
  optional M1 f_49 = 49;
}
