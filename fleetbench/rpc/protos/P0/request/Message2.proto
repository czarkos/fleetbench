// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P0.request.Message2;

message Message2 {
  optional bool f_0 = 3;
  optional fixed64 f_1 = 5;
  optional double f_2 = 7;
  optional fixed64 f_3 = 8;
  optional fixed64 f_4 = 11;
  optional fixed64 f_5 = 12;
  optional fixed64 f_6 = 14;
  optional int32 f_7 = 16;
  optional int32 f_8 = 17;
  optional int32 f_9 = 19;
  optional int32 f_10 = 20;
  optional fixed64 f_11 = 22;
  optional string f_12 = 23;
  optional fixed64 f_13 = 26;
  optional string f_14 = 27;
  optional fixed64 f_15 = 28;
  optional fixed64 f_16 = 30;
  optional string f_17 = 31;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 125;
    E1_CONST_2 = 42;
    E1_CONST_3 = 17;
    E1_CONST_4 = 7;
    E1_CONST_5 = 99;
  }
  repeated E1 f_18 = 32 [packed = true];
  optional int32 f_19 = 33;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 20;
    E2_CONST_2 = 60;
    E2_CONST_3 = 10;
    E2_CONST_4 = 45;
    E2_CONST_5 = 22;
  }
  repeated E2 f_20 = 34 [packed = true];
  optional double f_21 = 35;
  optional int32 f_22 = 38;
  optional fixed32 f_23 = 39;
  optional int32 f_24 = 40;
  optional string f_25 = 42;
  optional int32 f_26 = 43;
  optional string f_27 = 44;
  optional bool f_28 = 45;
  optional int32 f_29 = 47;
  message M1 {
    optional string f_0 = 1;
    optional double f_1 = 2;
    optional fixed32 f_2 = 4;
    optional int32 f_3 = 5;
    optional fixed64 f_4 = 7;
    optional double f_5 = 9;
    message M12 {
      optional string f_0 = 2;
      message M64 {
        optional fixed64 f_0 = 2;
        optional fixed64 f_1 = 4;
      }
      optional M64 f_3 = 3;
    }
    repeated M12 f_10 = 10;
    message M29 {
      optional fixed32 f_0 = 2;
    }
    repeated M29 f_12 = 12;
    message M30 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 4;
      optional int32 f_4 = 5;
      message M48 {
        optional fixed64 f_0 = 1;
        message M91 {
          optional int32 f_0 = 1;
          optional int32 f_1 = 2;
          message M99 {
            optional int64 f_0 = 1;
          }
          optional M99 f_3 = 3;
        }
        optional M91 f_2 = 2;
      }
      optional M48 f_7 = 7;
    }
    repeated M30 f_14 = 14;
  }
  optional M1 f_48 = 48;
  message M2 {
    optional double f_0 = 1;
    message M23 {
      optional int32 f_0 = 2;
      message M58 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 3;
        optional int32 f_2 = 4;
        optional fixed64 f_3 = 6;
        message M82 {
          optional int32 f_0 = 2;
          optional string f_1 = 3;
          optional fixed64 f_2 = 4;
          message M95 {
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 86;
              E17_CONST_2 = 58;
              E17_CONST_3 = 18;
              E17_CONST_4 = 106;
              E17_CONST_5 = 89;
            }
            optional E17 f_0 = 1;
          }
          optional M95 f_5 = 5;
          message M97 {
            optional int32 f_0 = 1;
          }
          optional M97 f_7 = 7;
          message M101 {
            optional int32 f_0 = 2;
          }
          optional M101 f_8 = 8;
          message M105 {
            optional double f_0 = 2;
          }
          optional M105 f_10 = 10;
        }
        optional M82 f_8 = 8;
      }
      optional M58 f_3 = 3;
      message M62 {
        optional bool f_0 = 1;
      }
      optional M62 f_4 = 4;
      message M70 {
        optional int32 f_0 = 2;
      }
      optional M70 f_6 = 6;
    }
    optional M23 f_2 = 2;
    message M31 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 3;
      optional fixed32 f_2 = 4;
      optional bool f_3 = 5;
      optional int32 f_4 = 6;
      optional fixed64 f_5 = 8;
      optional string f_6 = 10;
      optional bool f_7 = 11;
      optional int32 f_8 = 14;
      optional int32 f_9 = 16;
      optional int32 f_10 = 17;
      optional int32 f_11 = 19;
      optional string f_12 = 20;
      optional string f_13 = 21;
      optional int32 f_14 = 22;
      optional string f_15 = 23;
      optional int32 f_16 = 24;
      optional string f_17 = 25;
      optional int64 f_18 = 27;
      optional int32 f_19 = 28;
      optional int32 f_20 = 29;
      message M54 {
        optional int32 f_0 = 1;
        optional string f_1 = 2;
        message M93 {
          optional fixed64 f_0 = 1;
          message M102 {
            optional int32 f_0 = 2;
            message M110 {
              optional int32 f_0 = 1;
            }
            repeated M110 f_3 = 3;
          }
          optional M102 f_3 = 3;
        }
        optional M93 f_3 = 3;
      }
      repeated M54 f_31 = 31;
      message M76 {
        optional double f_0 = 1;
        optional string f_1 = 3;
        optional string f_2 = 5;
        optional string f_3 = 6;
        optional int32 f_4 = 7;
        optional int32 f_5 = 8;
        message M88 {
          optional fixed64 f_0 = 2;
          message M107 {
            optional fixed32 f_0 = 1;
          }
          optional M107 f_5 = 5;
        }
        optional M88 f_9 = 9;
      }
      optional M76 f_32 = 32;
    }
    optional M31 f_3 = 3;
    message M36 {
      optional int32 f_0 = 2;
      message M51 {
        optional int32 f_0 = 3;
      }
      optional M51 f_3 = 3;
      message M61 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 2;
        optional int32 f_2 = 5;
        optional bool f_3 = 6;
        message M89 {
          optional fixed64 f_0 = 1;
          optional bool f_1 = 2;
          optional int32 f_2 = 3;
          optional int32 f_3 = 4;
          optional int32 f_4 = 6;
          optional fixed64 f_5 = 7;
        }
        repeated M89 f_7 = 7;
      }
      optional M61 f_5 = 5;
    }
    repeated M36 f_5 = 5;
  }
  repeated M2 f_50 = 50;
  message M3 {
    optional int32 f_0 = 1;
    message M43 {
      optional bool f_0 = 1;
      message M69 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 4;
        optional bool f_2 = 5;
        optional int32 f_3 = 6;
        optional int32 f_4 = 8;
        optional int32 f_5 = 9;
      }
      repeated M69 f_2 = 2;
    }
    optional M43 f_2 = 2;
  }
  optional M3 f_51 = 51;
  message M4 {
    optional int32 f_0 = 3;
    message M20 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 33;
        E7_CONST_2 = 109;
        E7_CONST_3 = 42;
        E7_CONST_4 = 46;
        E7_CONST_5 = 88;
      }
      repeated E7 f_0 = 1 [packed = true];
      optional fixed32 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed32 f_3 = 5;
      optional int32 f_4 = 6;
      optional string f_5 = 7;
      optional int32 f_6 = 9;
      optional fixed64 f_7 = 10;
      optional string f_8 = 12;
      optional string f_9 = 13;
      optional string f_10 = 15;
      optional fixed32 f_11 = 16;
      optional bool f_12 = 17;
    }
    repeated M20 f_4 = 4;
    message M22 {
      optional int32 f_0 = 1;
      message M55 {
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 15;
          E11_CONST_2 = 5;
          E11_CONST_3 = 59;
          E11_CONST_4 = 66;
          E11_CONST_5 = 103;
        }
        repeated E11 f_0 = 4 [packed = true];
      }
      optional M55 f_2 = 2;
      message M57 {
        optional fixed32 f_0 = 1;
        optional bool f_1 = 3;
      }
      optional M57 f_3 = 3;
      message M63 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 3;
        optional fixed64 f_2 = 4;
        message M84 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 3;
          optional fixed64 f_2 = 5;
          optional fixed64 f_3 = 6;
        }
        optional M84 f_6 = 6;
      }
      optional M63 f_5 = 5;
      message M71 {
        optional fixed64 f_0 = 1;
      }
      optional M71 f_6 = 6;
    }
    optional M22 f_6 = 6;
  }
  repeated M4 f_53 = 53;
  message M5 {
    optional int32 f_0 = 2;
    message M13 {
      optional fixed64 f_0 = 3;
      message M59 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional string f_2 = 3;
      }
      optional M59 f_5 = 5;
    }
    optional M13 f_4 = 4;
    message M24 {
      optional int32 f_0 = 1;
      message M60 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 3;
        optional int32 f_2 = 5;
        optional string f_3 = 6;
        optional int32 f_4 = 7;
        message M83 {
          optional fixed32 f_0 = 1;
          optional double f_1 = 2;
          optional string f_2 = 5;
          optional fixed64 f_3 = 7;
          optional fixed64 f_4 = 8;
          optional string f_5 = 9;
          message M100 {
            optional fixed64 f_0 = 1;
            optional double f_1 = 5;
            optional fixed64 f_2 = 7;
            optional int32 f_3 = 9;
            optional bool f_4 = 10;
            enum E18 {
              E18_UNSPECIFIED = 0;
              E18_CONST_1 = 78;
              E18_CONST_2 = 30;
              E18_CONST_3 = 66;
              E18_CONST_4 = 5;
              E18_CONST_5 = 6;
            }
            repeated E18 f_5 = 11 [packed = true];
          }
          optional M100 f_11 = 11;
        }
        repeated M83 f_8 = 8;
      }
      optional M60 f_2 = 2;
      message M73 {
        optional int32 f_0 = 1;
      }
      optional M73 f_3 = 3;
    }
    optional M24 f_5 = 5;
  }
  optional M5 f_54 = 54;
  message M6 {
    optional fixed64 f_0 = 1;
    optional fixed32 f_1 = 3;
    optional bool f_2 = 4;
    optional int32 f_3 = 5;
    message M16 {
      optional fixed64 f_0 = 1;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 46;
        E3_CONST_2 = 38;
        E3_CONST_3 = 62;
        E3_CONST_4 = 108;
        E3_CONST_5 = 55;
      }
      optional E3 f_1 = 4;
      optional int32 f_2 = 5;
      optional string f_3 = 6;
      optional bool f_4 = 8;
      optional int32 f_5 = 10;
      optional int32 f_6 = 11;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 5;
        E4_CONST_2 = 62;
        E4_CONST_3 = 6;
        E4_CONST_4 = 96;
        E4_CONST_5 = 114;
      }
      optional E4 f_7 = 13;
      optional string f_8 = 18;
      optional fixed64 f_9 = 19;
      optional double f_10 = 20;
      optional string f_11 = 22;
      optional string f_12 = 23;
      optional fixed32 f_13 = 25;
      optional int32 f_14 = 26;
      optional fixed32 f_15 = 27;
      optional string f_16 = 28;
      optional fixed64 f_17 = 29;
      optional string f_18 = 30;
      optional string f_19 = 32;
      optional string f_20 = 33;
      optional string f_21 = 34;
      optional int32 f_22 = 35;
      optional fixed64 f_23 = 36;
      optional int32 f_24 = 37;
      optional fixed64 f_25 = 38;
      optional fixed64 f_26 = 41;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 110;
        E5_CONST_2 = 76;
        E5_CONST_3 = 84;
        E5_CONST_4 = 89;
        E5_CONST_5 = 73;
      }
      optional E5 f_27 = 42;
      optional bool f_28 = 43;
      optional fixed64 f_29 = 45;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 45;
        E6_CONST_2 = 85;
        E6_CONST_3 = 88;
        E6_CONST_4 = 50;
        E6_CONST_5 = 114;
      }
      repeated E6 f_30 = 46 [packed = true];
      message M47 {
        optional fixed32 f_0 = 2;
      }
      repeated M47 f_47 = 47;
      message M67 {
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 25;
          E13_CONST_2 = 116;
          E13_CONST_3 = 31;
          E13_CONST_4 = 51;
          E13_CONST_5 = 93;
        }
        repeated E13 f_0 = 2 [packed = true];
        message M85 {
          optional fixed64 f_0 = 2;
        }
        repeated M85 f_3 = 3;
        message M90 {
          optional int32 f_0 = 1;
          message M103 {
            optional int32 f_0 = 2;
            optional fixed64 f_1 = 5;
            optional int32 f_2 = 7;
          }
          optional M103 f_2 = 2;
          message M109 {
            optional int32 f_0 = 2;
            optional fixed64 f_1 = 4;
            optional fixed64 f_2 = 6;
            optional int32 f_3 = 7;
          }
          optional M109 f_3 = 3;
        }
        repeated M90 f_4 = 4;
        message M94 {
          optional fixed64 f_0 = 1;
          message M106 {
            optional int32 f_0 = 1;
            optional int32 f_1 = 2;
            optional string f_2 = 6;
            optional int32 f_3 = 7;
          }
          repeated M106 f_2 = 2;
        }
        optional M94 f_6 = 6;
      }
      repeated M67 f_49 = 49;
    }
    repeated M16 f_6 = 6;
    message M19 {
      optional string f_0 = 1;
    }
    optional M19 f_7 = 7;
    message M28 {
      optional bool f_0 = 1;
      optional string f_1 = 2;
      optional bool f_2 = 4;
      optional fixed64 f_3 = 5;
      optional fixed64 f_4 = 6;
    }
    repeated M28 f_9 = 9;
    message M41 {
      optional fixed32 f_0 = 2;
      optional string f_1 = 4;
      optional fixed64 f_2 = 7;
      optional fixed32 f_3 = 9;
    }
    optional M41 f_10 = 10;
  }
  optional M6 f_57 = 57;
  message M7 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional int32 f_2 = 4;
    message M32 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional string f_3 = 5;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 69;
        E8_CONST_2 = 23;
        E8_CONST_3 = 107;
        E8_CONST_4 = 5;
        E8_CONST_5 = 57;
      }
      repeated E8 f_4 = 6 [packed = true];
      optional bool f_5 = 7;
      optional string f_6 = 8;
      optional bool f_7 = 10;
      optional fixed64 f_8 = 11;
      optional fixed64 f_9 = 12;
      message M49 {
        optional string f_0 = 1;
      }
      repeated M49 f_13 = 13;
      message M72 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 2;
      }
      repeated M72 f_14 = 14;
    }
    repeated M32 f_5 = 5;
    message M37 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 7;
      optional string f_3 = 10;
      message M74 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 2;
        optional bool f_2 = 3;
        optional fixed64 f_3 = 6;
        optional bool f_4 = 8;
      }
      optional M74 f_11 = 11;
    }
    repeated M37 f_6 = 6;
  }
  optional M7 f_58 = 58;
  message M8 {
    optional fixed64 f_0 = 3;
    message M18 {
      optional fixed64 f_0 = 1;
    }
    optional M18 f_5 = 5;
    message M21 {
      optional string f_0 = 1;
      message M46 {
        optional fixed64 f_0 = 4;
        optional bool f_1 = 5;
        optional int32 f_2 = 6;
      }
      repeated M46 f_2 = 2;
    }
    optional M21 f_6 = 6;
    message M33 {
      optional fixed64 f_0 = 1;
      message M52 {
        optional double f_0 = 1;
      }
      repeated M52 f_3 = 3;
    }
    optional M33 f_7 = 7;
  }
  optional M8 f_59 = 59;
  message M9 {
    optional fixed32 f_0 = 1;
    optional int32 f_1 = 2;
    message M17 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
    }
    repeated M17 f_3 = 3;
    message M34 {
      optional int32 f_0 = 1;
      message M68 {
        optional fixed64 f_0 = 1;
      }
      optional M68 f_2 = 2;
    }
    repeated M34 f_5 = 5;
    message M35 {
      optional int32 f_0 = 1;
      message M53 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 6;
        optional int32 f_3 = 7;
        optional int32 f_4 = 8;
        message M81 {
          optional fixed64 f_0 = 2;
          message M108 {
            optional int32 f_0 = 1;
            optional int32 f_1 = 2;
            optional string f_2 = 3;
            optional fixed64 f_3 = 5;
          }
          optional M108 f_3 = 3;
        }
        optional M81 f_10 = 10;
      }
      optional M53 f_3 = 3;
    }
    optional M35 f_6 = 6;
    message M38 {
      optional string f_0 = 2;
    }
    repeated M38 f_7 = 7;
    message M42 {
      optional fixed64 f_0 = 1;
      message M66 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 4;
        message M80 {
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 76;
            E15_CONST_2 = 71;
            E15_CONST_3 = 36;
            E15_CONST_4 = 82;
            E15_CONST_5 = 74;
          }
          repeated E15 f_0 = 2 [packed = true];
        }
        optional M80 f_5 = 5;
        message M86 {
          optional int32 f_0 = 1;
        }
        repeated M86 f_6 = 6;
        message M87 {
          optional bool f_0 = 2;
          optional int32 f_1 = 3;
          optional string f_2 = 4;
          optional bool f_3 = 5;
          optional fixed64 f_4 = 6;
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 57;
            E16_CONST_2 = 7;
            E16_CONST_3 = 117;
            E16_CONST_4 = 52;
            E16_CONST_5 = 26;
          }
          repeated E16 f_5 = 7 [packed = true];
          optional int32 f_6 = 8;
          optional fixed64 f_7 = 9;
          optional fixed32 f_8 = 10;
          optional fixed64 f_9 = 11;
          optional int32 f_10 = 13;
          optional int32 f_11 = 14;
          optional fixed64 f_12 = 15;
        }
        optional M87 f_8 = 8;
      }
      optional M66 f_2 = 2;
      message M75 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 4;
      }
      optional M75 f_3 = 3;
    }
    repeated M42 f_10 = 10;
  }
  optional M9 f_60 = 60;
  message M10 {
    optional fixed32 f_0 = 1;
    message M14 {
      optional bool f_0 = 1;
    }
    repeated M14 f_4 = 4;
    message M15 {
      optional string f_0 = 2;
      message M78 {
        optional int32 f_0 = 2;
        optional string f_1 = 3;
        optional int32 f_2 = 4;
        optional string f_3 = 6;
        optional string f_4 = 7;
        optional fixed32 f_5 = 9;
        optional fixed64 f_6 = 10;
        optional int32 f_7 = 11;
        optional bool f_8 = 12;
        optional int32 f_9 = 16;
        optional int32 f_10 = 19;
        optional string f_11 = 20;
        optional fixed32 f_12 = 21;
        optional fixed64 f_13 = 24;
        optional bool f_14 = 25;
        optional fixed64 f_15 = 27;
        optional fixed64 f_16 = 28;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 102;
          E14_CONST_2 = 64;
          E14_CONST_3 = 73;
          E14_CONST_4 = 101;
          E14_CONST_5 = 15;
        }
        repeated E14 f_17 = 30 [packed = true];
        optional fixed64 f_18 = 31;
        optional string f_19 = 34;
        optional bool f_20 = 35;
        optional int32 f_21 = 36;
        optional string f_22 = 37;
        optional int32 f_23 = 38;
        optional int32 f_24 = 39;
        optional int32 f_25 = 40;
        optional fixed64 f_26 = 41;
        optional int32 f_27 = 43;
        optional fixed64 f_28 = 44;
      }
      repeated M78 f_3 = 3;
    }
    repeated M15 f_5 = 5;
    message M25 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 8;
      optional string f_3 = 10;
      optional fixed64 f_4 = 12;
    }
    optional M25 f_6 = 6;
    message M26 {
      optional string f_0 = 1;
      message M56 {
        optional string f_0 = 1;
      }
      repeated M56 f_2 = 2;
    }
    optional M26 f_7 = 7;
    message M45 {
      optional int32 f_0 = 2;
      message M77 {
        optional string f_0 = 2;
      }
      repeated M77 f_3 = 3;
    }
    repeated M45 f_8 = 8;
  }
  repeated M10 f_61 = 61;
  message M11 {
    optional int32 f_0 = 2;
    optional int32 f_1 = 3;
    optional fixed64 f_2 = 6;
    optional int32 f_3 = 9;
    optional string f_4 = 12;
    optional int32 f_5 = 14;
    optional bool f_6 = 15;
    optional string f_7 = 16;
    optional double f_8 = 17;
    optional string f_9 = 18;
    optional fixed32 f_10 = 20;
    optional int32 f_11 = 21;
    optional bool f_12 = 22;
    message M27 {
      optional fixed64 f_0 = 1;
    }
    optional M27 f_27 = 27;
    message M39 {
      optional int32 f_0 = 1;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 80;
        E9_CONST_2 = 62;
        E9_CONST_3 = 19;
        E9_CONST_4 = 54;
        E9_CONST_5 = 17;
      }
      repeated E9 f_1 = 2 [packed = true];
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 5;
      optional fixed64 f_4 = 6;
    }
    repeated M39 f_28 = 28;
    message M40 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
    }
    optional M40 f_29 = 29;
    message M44 {
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 32;
        E10_CONST_2 = 96;
        E10_CONST_3 = 43;
        E10_CONST_4 = 34;
        E10_CONST_5 = 7;
      }
      repeated E10 f_0 = 1 [packed = true];
      message M50 {
        optional fixed32 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
        message M79 {
          optional int32 f_0 = 1;
          optional string f_1 = 3;
          optional fixed64 f_2 = 4;
          optional int32 f_3 = 5;
          optional bool f_4 = 6;
          optional bool f_5 = 7;
          optional string f_6 = 9;
          message M104 {
            optional string f_0 = 1;
            message M113 {
              optional fixed64 f_0 = 1;
            }
            optional M113 f_2 = 2;
          }
          optional M104 f_10 = 10;
        }
        optional M79 f_5 = 5;
        message M92 {
          optional bool f_0 = 2;
          message M96 {
            optional string f_0 = 2;
            optional string f_1 = 3;
            optional int32 f_2 = 4;
            optional string f_3 = 6;
            optional int32 f_4 = 7;
            optional string f_5 = 10;
            optional string f_6 = 11;
          }
          optional M96 f_4 = 4;
          message M98 {
            optional int32 f_0 = 1;
            message M111 {
              optional int32 f_0 = 1;
            }
            optional M111 f_2 = 2;
            message M112 {
              optional string f_0 = 1;
              optional int32 f_1 = 2;
              optional bool f_2 = 3;
            }
            optional M112 f_4 = 4;
          }
          optional M98 f_5 = 5;
        }
        repeated M92 f_6 = 6;
      }
      optional M50 f_3 = 3;
      message M65 {
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 76;
          E12_CONST_2 = 123;
          E12_CONST_3 = 119;
          E12_CONST_4 = 21;
          E12_CONST_5 = 89;
        }
        optional E12 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional bool f_2 = 4;
      }
      repeated M65 f_5 = 5;
    }
    optional M44 f_31 = 31;
  }
  repeated M11 f_63 = 63;
}
