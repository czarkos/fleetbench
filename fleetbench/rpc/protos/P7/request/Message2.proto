// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.request.Message2;

message Message2 {
  optional fixed32 f_0 = 2;
  optional string f_1 = 5;
  optional string f_2 = 6;
  optional fixed64 f_3 = 7;
  optional string f_4 = 8;
  optional fixed64 f_5 = 10;
  optional double f_6 = 11;
  optional fixed64 f_7 = 13;
  optional int32 f_8 = 15;
  optional fixed64 f_9 = 17;
  optional string f_10 = 18;
  optional fixed64 f_11 = 22;
  optional fixed64 f_12 = 23;
  optional fixed64 f_13 = 24;
  optional int32 f_14 = 25;
  optional fixed64 f_15 = 26;
  optional fixed64 f_16 = 27;
  optional bool f_17 = 29;
  optional bool f_18 = 33;
  optional bool f_19 = 34;
  optional fixed64 f_20 = 37;
  optional fixed32 f_21 = 39;
  optional int32 f_22 = 41;
  optional int64 f_23 = 42;
  optional int32 f_24 = 45;
  optional int32 f_25 = 46;
  optional fixed32 f_26 = 48;
  optional int32 f_27 = 50;
  optional fixed64 f_28 = 51;
  optional string f_29 = 54;
  message M1 {
    optional bool f_0 = 2;
    optional int32 f_1 = 3;
    message M26 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 2;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 82;
        E4_CONST_2 = 114;
        E4_CONST_3 = 102;
        E4_CONST_4 = 14;
        E4_CONST_5 = 110;
      }
      repeated E4 f_2 = 3 [packed = true];
      optional fixed64 f_3 = 4;
      optional string f_4 = 6;
      optional string f_5 = 8;
      optional bool f_6 = 10;
      message M62 {
        optional bool f_0 = 2;
        optional string f_1 = 3;
        optional fixed32 f_2 = 4;
        optional bool f_3 = 5;
        optional string f_4 = 6;
        optional double f_5 = 8;
      }
      optional M62 f_11 = 11;
    }
    optional M26 f_4 = 4;
  }
  optional M1 f_58 = 58;
  message M2 {
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 52;
      E1_CONST_2 = 102;
      E1_CONST_3 = 93;
      E1_CONST_4 = 90;
      E1_CONST_5 = 108;
    }
    repeated E1 f_0 = 1 [packed = true];
  }
  optional M2 f_60 = 60;
  message M3 {
    optional int32 f_0 = 1;
    message M23 {
      optional string f_0 = 1;
    }
    optional M23 f_3 = 3;
    message M38 {
      optional int32 f_0 = 1;
      optional int64 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional string f_3 = 6;
    }
    repeated M38 f_5 = 5;
  }
  optional M3 f_61 = 61;
  message M4 {
    optional string f_0 = 2;
    optional int32 f_1 = 3;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 39;
      E2_CONST_2 = 23;
      E2_CONST_3 = 59;
      E2_CONST_4 = 74;
      E2_CONST_5 = 8;
    }
    optional E2 f_2 = 6;
    optional bool f_3 = 7;
    optional double f_4 = 8;
    message M20 {
      optional fixed64 f_0 = 1;
      message M54 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 4;
        optional int32 f_2 = 6;
        optional int32 f_3 = 7;
        optional fixed64 f_4 = 8;
        optional fixed64 f_5 = 9;
      }
      optional M54 f_2 = 2;
      message M57 {
        optional bool f_0 = 2;
        optional int32 f_1 = 4;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 88;
          E10_CONST_2 = 36;
          E10_CONST_3 = 108;
          E10_CONST_4 = 40;
          E10_CONST_5 = 13;
        }
        repeated E10 f_2 = 6 [packed = true];
        optional int32 f_3 = 7;
        optional bool f_4 = 8;
        optional string f_5 = 9;
        optional string f_6 = 12;
        message M68 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 3;
          optional double f_2 = 4;
          message M73 {
            optional fixed64 f_0 = 1;
            optional fixed64 f_1 = 3;
            optional fixed64 f_2 = 5;
            optional fixed64 f_3 = 6;
            optional string f_4 = 7;
            optional bool f_5 = 8;
          }
          optional M73 f_6 = 6;
          message M77 {
            optional string f_0 = 1;
            optional fixed32 f_1 = 2;
            optional fixed64 f_2 = 3;
            optional fixed32 f_3 = 5;
            message M85 {
              optional string f_0 = 2;
              optional int32 f_1 = 3;
            }
            optional M85 f_7 = 7;
          }
          repeated M77 f_7 = 7;
          message M80 {
            optional int32 f_0 = 1;
            optional string f_1 = 2;
            optional int32 f_2 = 3;
            optional fixed64 f_3 = 4;
            optional string f_4 = 6;
            message M87 {
              optional int32 f_0 = 1;
              optional bool f_1 = 2;
              optional fixed64 f_2 = 5;
              optional string f_3 = 6;
            }
            optional M87 f_7 = 7;
          }
          optional M80 f_9 = 9;
        }
        repeated M68 f_13 = 13;
        message M70 {
          optional int32 f_0 = 3;
          optional int32 f_1 = 5;
          optional bool f_2 = 7;
          optional fixed64 f_3 = 9;
          optional fixed64 f_4 = 10;
          enum E12 {
            E12_UNSPECIFIED = 0;
            E12_CONST_1 = 51;
            E12_CONST_2 = 16;
            E12_CONST_3 = 6;
            E12_CONST_4 = 72;
            E12_CONST_5 = 106;
          }
          repeated E12 f_5 = 11 [packed = true];
          optional fixed64 f_6 = 13;
          optional double f_7 = 14;
          optional fixed64 f_8 = 16;
          optional int32 f_9 = 18;
          optional string f_10 = 20;
          optional string f_11 = 21;
          message M75 {
            optional string f_0 = 1;
          }
          optional M75 f_22 = 22;
        }
        optional M70 f_14 = 14;
      }
      optional M57 f_4 = 4;
      message M59 {
        optional string f_0 = 1;
      }
      optional M59 f_6 = 6;
    }
    repeated M20 f_10 = 10;
    message M21 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int64 f_2 = 5;
      message M49 {
        optional fixed32 f_0 = 1;
      }
      repeated M49 f_6 = 6;
    }
    repeated M21 f_11 = 11;
    message M34 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 42;
        E5_CONST_2 = 65;
        E5_CONST_3 = 53;
        E5_CONST_4 = 109;
        E5_CONST_5 = 66;
      }
      repeated E5 f_0 = 5 [packed = true];
      message M40 {
        optional fixed32 f_0 = 3;
      }
      optional M40 f_7 = 7;
      message M47 {
        optional int32 f_0 = 2;
      }
      optional M47 f_8 = 8;
    }
    optional M34 f_12 = 12;
  }
  optional M4 f_63 = 63;
  message M5 {
    optional int32 f_0 = 2;
    optional fixed64 f_1 = 3;
    optional fixed64 f_2 = 6;
    message M15 {
      optional string f_0 = 1;
      optional string f_1 = 3;
      optional fixed64 f_2 = 6;
      optional int32 f_3 = 9;
      optional string f_4 = 11;
      message M53 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 3;
        optional bool f_2 = 4;
        optional string f_3 = 5;
      }
      optional M53 f_13 = 13;
    }
    optional M15 f_7 = 7;
    message M19 {
      optional string f_0 = 1;
      optional string f_1 = 2;
    }
    repeated M19 f_10 = 10;
    message M36 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      optional bool f_2 = 4;
      optional int32 f_3 = 6;
      optional fixed64 f_4 = 8;
    }
    optional M36 f_11 = 11;
  }
  optional M5 f_64 = 64;
  message M6 {
    optional int32 f_0 = 2;
    optional fixed64 f_1 = 3;
    optional fixed64 f_2 = 5;
    message M14 {
      optional bool f_0 = 2;
      optional fixed64 f_1 = 4;
      optional fixed32 f_2 = 5;
      optional string f_3 = 6;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 4;
        E3_CONST_2 = 114;
        E3_CONST_3 = 12;
        E3_CONST_4 = 56;
        E3_CONST_5 = 38;
      }
      optional E3 f_4 = 8;
      message M58 {
        optional string f_0 = 3;
        repeated int32 f_1 = 5 [packed = true];
        optional string f_2 = 8;
        optional bool f_3 = 9;
        optional string f_4 = 11;
        optional string f_5 = 13;
      }
      optional M58 f_10 = 10;
      message M63 {
        optional int32 f_0 = 5;
        message M69 {
          enum E11 {
            E11_UNSPECIFIED = 0;
            E11_CONST_1 = 109;
            E11_CONST_2 = 7;
            E11_CONST_3 = 4;
            E11_CONST_4 = 41;
            E11_CONST_5 = 111;
          }
          repeated E11 f_0 = 2 [packed = true];
          message M78 {
            optional int32 f_0 = 1;
          }
          repeated M78 f_4 = 4;
        }
        optional M69 f_7 = 7;
      }
      optional M63 f_12 = 12;
    }
    optional M14 f_6 = 6;
  }
  optional M6 f_66 = 66;
  message M7 {
    optional fixed64 f_0 = 1;
    message M17 {
      optional int32 f_0 = 2;
      optional string f_1 = 4;
      optional fixed64 f_2 = 5;
      optional string f_3 = 6;
      optional string f_4 = 10;
      optional string f_5 = 14;
    }
    optional M17 f_2 = 2;
    message M22 {
      optional fixed32 f_0 = 1;
      optional string f_1 = 3;
      optional int32 f_2 = 4;
      message M42 {
        optional string f_0 = 2;
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 74;
          E6_CONST_2 = 105;
          E6_CONST_3 = 26;
          E6_CONST_4 = 6;
          E6_CONST_5 = 30;
        }
        repeated E6 f_1 = 3 [packed = true];
        optional int64 f_2 = 4;
        optional int32 f_3 = 5;
        optional fixed64 f_4 = 7;
      }
      optional M42 f_6 = 6;
    }
    optional M22 f_3 = 3;
  }
  optional M7 f_68 = 68;
  message M8 {
    optional string f_0 = 2;
    message M25 {
      optional fixed64 f_0 = 2;
      message M50 {
        optional fixed64 f_0 = 1;
      }
      optional M50 f_3 = 3;
      message M51 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 5;
        optional string f_2 = 6;
        optional string f_3 = 7;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 73;
          E7_CONST_2 = 122;
          E7_CONST_3 = 108;
          E7_CONST_4 = 23;
          E7_CONST_5 = 45;
        }
        optional E7 f_4 = 9;
        optional string f_5 = 11;
        optional string f_6 = 12;
        optional fixed64 f_7 = 15;
        optional fixed64 f_8 = 16;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 9;
          E8_CONST_2 = 82;
          E8_CONST_3 = 87;
          E8_CONST_4 = 115;
          E8_CONST_5 = 69;
        }
        repeated E8 f_9 = 17 [packed = true];
        optional string f_10 = 19;
        optional int32 f_11 = 20;
        optional fixed64 f_12 = 21;
        optional int32 f_13 = 23;
      }
      optional M51 f_7 = 7;
      message M61 {
        optional int32 f_0 = 2;
        optional fixed32 f_1 = 4;
      }
      optional M61 f_8 = 8;
    }
    optional M25 f_3 = 3;
    message M37 {
      optional fixed32 f_0 = 1;
      optional bool f_1 = 2;
      optional string f_2 = 3;
      optional fixed64 f_3 = 4;
      message M55 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 4;
        optional bool f_2 = 5;
        optional int32 f_3 = 8;
        message M65 {
          optional double f_0 = 1;
          message M72 {
            optional int32 f_0 = 2;
          }
          optional M72 f_3 = 3;
          message M74 {
            optional int32 f_0 = 1;
          }
          repeated M74 f_4 = 4;
        }
        optional M65 f_9 = 9;
      }
      optional M55 f_5 = 5;
    }
    optional M37 f_7 = 7;
  }
  repeated M8 f_69 = 69;
  message M9 {
    optional bool f_0 = 4;
    optional int32 f_1 = 5;
    message M29 {
      optional string f_0 = 2;
    }
    optional M29 f_6 = 6;
    message M31 {
      optional int32 f_0 = 1;
    }
    repeated M31 f_7 = 7;
    message M39 {
      optional double f_0 = 1;
      optional string f_1 = 4;
      optional string f_2 = 6;
      optional fixed64 f_3 = 7;
      optional fixed64 f_4 = 9;
      optional fixed64 f_5 = 11;
      optional string f_6 = 12;
      optional int32 f_7 = 14;
      optional fixed32 f_8 = 15;
      optional int32 f_9 = 17;
      optional int32 f_10 = 19;
      optional fixed32 f_11 = 20;
      optional int32 f_12 = 21;
      optional fixed64 f_13 = 23;
      optional fixed64 f_14 = 24;
      optional fixed64 f_15 = 25;
      optional int32 f_16 = 27;
      optional string f_17 = 28;
      optional fixed64 f_18 = 31;
      optional int32 f_19 = 32;
      optional int32 f_20 = 33;
      optional fixed32 f_21 = 35;
      optional string f_22 = 36;
      optional int32 f_23 = 38;
      optional int32 f_24 = 39;
      optional int32 f_25 = 40;
      optional string f_26 = 42;
      optional fixed32 f_27 = 44;
      optional fixed64 f_28 = 45;
      optional int32 f_29 = 46;
    }
    optional M39 f_12 = 12;
  }
  repeated M9 f_71 = 71;
  message M10 {
    optional fixed32 f_0 = 1;
    optional fixed64 f_1 = 3;
    optional string f_2 = 4;
    optional string f_3 = 5;
    optional int32 f_4 = 6;
    optional int32 f_5 = 10;
    optional int32 f_6 = 12;
    optional fixed64 f_7 = 13;
    optional string f_8 = 14;
    message M16 {
      optional bool f_0 = 3;
      optional int32 f_1 = 5;
      optional fixed64 f_2 = 7;
      optional string f_3 = 10;
      message M48 {
        optional fixed64 f_0 = 2;
      }
      optional M48 f_12 = 12;
    }
    repeated M16 f_15 = 15;
    message M27 {
      optional fixed64 f_0 = 2;
      message M60 {
        optional string f_0 = 1;
      }
      optional M60 f_3 = 3;
    }
    optional M27 f_16 = 16;
    message M32 {
      optional int32 f_0 = 1;
      optional string f_1 = 4;
      message M64 {
        optional double f_0 = 4;
        optional fixed64 f_1 = 5;
        optional fixed64 f_2 = 8;
        optional fixed64 f_3 = 9;
        message M67 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 3;
          optional int32 f_2 = 5;
          optional string f_3 = 7;
          optional int32 f_4 = 8;
          optional string f_5 = 10;
          optional bool f_6 = 11;
          optional string f_7 = 12;
          optional int32 f_8 = 13;
          optional int32 f_9 = 17;
          optional fixed64 f_10 = 20;
          optional fixed64 f_11 = 21;
          optional fixed64 f_12 = 22;
          optional fixed64 f_13 = 25;
          optional fixed64 f_14 = 26;
          optional fixed64 f_15 = 28;
          optional int64 f_16 = 29;
          optional bool f_17 = 31;
          optional bool f_18 = 32;
          optional fixed64 f_19 = 35;
          optional fixed64 f_20 = 37;
          optional bool f_21 = 38;
          optional fixed64 f_22 = 39;
          optional int32 f_23 = 40;
          optional fixed64 f_24 = 41;
          optional fixed64 f_25 = 42;
          optional string f_26 = 45;
          optional int32 f_27 = 46;
          message M79 {
            optional int32 f_0 = 2;
          }
          repeated M79 f_47 = 47;
        }
        optional M67 f_11 = 11;
      }
      optional M64 f_5 = 5;
    }
    optional M32 f_20 = 20;
    message M33 {
      optional string f_0 = 2;
      optional int32 f_1 = 4;
      optional fixed64 f_2 = 5;
      optional int32 f_3 = 6;
      optional fixed64 f_4 = 7;
    }
    repeated M33 f_21 = 21;
  }
  optional M10 f_74 = 74;
  message M11 {
    optional fixed64 f_0 = 1;
    message M24 {
      optional int32 f_0 = 1;
      message M41 {
        optional string f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 4;
        optional bool f_3 = 5;
        optional string f_4 = 7;
      }
      optional M41 f_2 = 2;
    }
    repeated M24 f_2 = 2;
    message M30 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 4;
      message M44 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 4;
        optional int32 f_2 = 5;
        optional fixed32 f_3 = 6;
      }
      optional M44 f_5 = 5;
    }
    repeated M30 f_3 = 3;
  }
  optional M11 f_75 = 75;
  message M12 {
    optional fixed64 f_0 = 1;
    message M18 {
      optional fixed32 f_0 = 3;
      optional fixed64 f_1 = 5;
      optional fixed64 f_2 = 6;
      message M56 {
        optional fixed64 f_0 = 1;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 29;
          E9_CONST_2 = 74;
          E9_CONST_3 = 66;
          E9_CONST_4 = 123;
          E9_CONST_5 = 118;
        }
        optional E9 f_1 = 3;
      }
      optional M56 f_7 = 7;
    }
    repeated M18 f_3 = 3;
    message M35 {
      optional int32 f_0 = 1;
      message M45 {
        optional fixed64 f_0 = 2;
        optional fixed64 f_1 = 4;
      }
      optional M45 f_2 = 2;
    }
    optional M35 f_5 = 5;
  }
  optional M12 f_76 = 76;
  message M13 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    optional fixed64 f_2 = 4;
    optional string f_3 = 5;
    optional fixed64 f_4 = 9;
    optional int32 f_5 = 11;
    message M28 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 4;
      message M43 {
        optional int32 f_0 = 3;
        message M66 {
          optional fixed64 f_0 = 1;
          message M71 {
            optional fixed64 f_0 = 1;
          }
          repeated M71 f_2 = 2;
          message M76 {
            optional int32 f_0 = 1;
            message M84 {
              optional fixed64 f_0 = 1;
            }
            optional M84 f_2 = 2;
          }
          repeated M76 f_3 = 3;
          message M81 {
            optional bool f_0 = 2;
          }
          optional M81 f_4 = 4;
          message M82 {
            enum E13 {
              E13_UNSPECIFIED = 0;
              E13_CONST_1 = 50;
              E13_CONST_2 = 29;
              E13_CONST_3 = 31;
              E13_CONST_4 = 106;
              E13_CONST_5 = 99;
            }
            repeated E13 f_0 = 2 [packed = true];
            message M86 {
              optional string f_0 = 1;
              optional int32 f_1 = 2;
            }
            repeated M86 f_7 = 7;
          }
          optional M82 f_7 = 7;
          message M83 {
            optional double f_0 = 1;
            optional fixed64 f_1 = 2;
            optional fixed64 f_2 = 3;
            optional fixed64 f_3 = 5;
            optional string f_4 = 6;
            optional fixed32 f_5 = 7;
            optional bool f_6 = 9;
            optional int32 f_7 = 11;
            optional string f_8 = 13;
            optional int32 f_9 = 14;
            optional string f_10 = 18;
            optional string f_11 = 20;
            optional fixed64 f_12 = 23;
            optional int32 f_13 = 24;
            optional int32 f_14 = 25;
            optional int32 f_15 = 26;
            optional string f_16 = 28;
            optional int32 f_17 = 32;
            optional double f_18 = 34;
            optional int64 f_19 = 36;
            optional string f_20 = 37;
            optional fixed64 f_21 = 38;
            optional string f_22 = 40;
            optional int32 f_23 = 42;
            optional int32 f_24 = 43;
            optional fixed64 f_25 = 45;
            optional fixed32 f_26 = 48;
            optional int64 f_27 = 52;
          }
          optional M83 f_9 = 9;
        }
        optional M66 f_5 = 5;
      }
      optional M43 f_7 = 7;
      message M46 {
        optional int32 f_0 = 5;
        optional fixed64 f_1 = 6;
      }
      optional M46 f_8 = 8;
      message M52 {
        optional fixed32 f_0 = 1;
        optional bool f_1 = 2;
        optional int32 f_2 = 3;
        optional string f_3 = 4;
        optional fixed64 f_4 = 6;
        optional string f_5 = 7;
        optional bool f_6 = 8;
      }
      optional M52 f_11 = 11;
    }
    repeated M28 f_12 = 12;
  }
  repeated M13 f_79 = 79;
}
