// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.request.Message2;

message Message2 {
  optional bool f_0 = 1;
  optional fixed64 f_1 = 2;
  optional string f_2 = 4;
  optional string f_3 = 5;
  optional string f_4 = 7;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 59;
    E1_CONST_2 = 21;
    E1_CONST_3 = 35;
    E1_CONST_4 = 101;
    E1_CONST_5 = 40;
  }
  repeated E1 f_5 = 9 [packed = true];
  optional fixed32 f_6 = 10;
  optional int32 f_7 = 11;
  optional fixed64 f_8 = 12;
  optional fixed32 f_9 = 14;
  optional string f_10 = 15;
  optional bool f_11 = 16;
  optional string f_12 = 19;
  optional string f_13 = 20;
  optional string f_14 = 22;
  optional string f_15 = 23;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 86;
    E2_CONST_2 = 87;
    E2_CONST_3 = 108;
    E2_CONST_4 = 33;
    E2_CONST_5 = 122;
  }
  repeated E2 f_16 = 24 [packed = true];
  optional string f_17 = 25;
  optional int32 f_18 = 27;
  optional string f_19 = 28;
  optional bool f_20 = 29;
  optional string f_21 = 30;
  optional string f_22 = 32;
  optional fixed64 f_23 = 34;
  optional fixed64 f_24 = 36;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 45;
    E3_CONST_2 = 31;
    E3_CONST_3 = 105;
    E3_CONST_4 = 35;
    E3_CONST_5 = 58;
  }
  repeated E3 f_25 = 37 [packed = true];
  optional fixed64 f_26 = 39;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 20;
    E4_CONST_2 = 63;
    E4_CONST_3 = 40;
    E4_CONST_4 = 13;
    E4_CONST_5 = 4;
  }
  repeated E4 f_27 = 40 [packed = true];
  optional int32 f_28 = 41;
  message M1 {
    optional fixed64 f_0 = 1;
    message M14 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 6;
      optional int32 f_3 = 8;
      optional fixed64 f_4 = 10;
      optional int32 f_5 = 13;
      optional int64 f_6 = 15;
      optional string f_7 = 17;
      optional string f_8 = 18;
      optional string f_9 = 21;
      optional int32 f_10 = 22;
      optional fixed64 f_11 = 24;
      optional int32 f_12 = 28;
      optional int32 f_13 = 30;
      optional fixed32 f_14 = 33;
      optional int32 f_15 = 35;
      optional string f_16 = 37;
      optional string f_17 = 38;
      optional fixed64 f_18 = 40;
      optional int32 f_19 = 41;
      optional fixed64 f_20 = 43;
      optional fixed64 f_21 = 45;
      optional fixed32 f_22 = 46;
      optional string f_23 = 49;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 89;
        E8_CONST_2 = 115;
        E8_CONST_3 = 13;
        E8_CONST_4 = 63;
        E8_CONST_5 = 41;
      }
      repeated E8 f_24 = 53 [packed = true];
      optional int32 f_25 = 57;
      optional fixed64 f_26 = 60;
      message M21 {
        optional bool f_0 = 3;
        optional bool f_1 = 6;
        message M42 {
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 19;
            E17_CONST_2 = 70;
            E17_CONST_3 = 94;
            E17_CONST_4 = 117;
            E17_CONST_5 = 73;
          }
          optional E17 f_0 = 3;
        }
        optional M42 f_8 = 8;
      }
      optional M21 f_62 = 62;
      message M26 {
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 7;
          E16_CONST_2 = 61;
          E16_CONST_3 = 30;
          E16_CONST_4 = 104;
          E16_CONST_5 = 123;
        }
        repeated E16 f_0 = 1 [packed = true];
      }
      repeated M26 f_63 = 63;
    }
    optional M14 f_2 = 2;
  }
  repeated M1 f_42 = 42;
  message M2 {
    optional string f_0 = 4;
  }
  repeated M2 f_44 = 44;
  message M3 {
    optional double f_0 = 2;
    optional int32 f_1 = 3;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 36;
      E5_CONST_2 = 107;
      E5_CONST_3 = 21;
      E5_CONST_4 = 17;
      E5_CONST_5 = 88;
    }
    optional E5 f_2 = 4;
    optional fixed64 f_3 = 5;
    optional string f_4 = 8;
    message M13 {
      optional int32 f_0 = 1;
      message M20 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        optional bool f_2 = 3;
        optional string f_3 = 4;
        optional string f_4 = 7;
        optional bool f_5 = 8;
        optional string f_6 = 11;
        optional fixed64 f_7 = 12;
        optional string f_8 = 14;
        optional string f_9 = 16;
        optional fixed32 f_10 = 17;
        optional int32 f_11 = 18;
        optional fixed32 f_12 = 20;
        optional fixed64 f_13 = 22;
        optional fixed64 f_14 = 23;
        optional string f_15 = 24;
        optional fixed64 f_16 = 27;
        optional int32 f_17 = 28;
        optional bool f_18 = 29;
        optional bool f_19 = 31;
        optional string f_20 = 33;
        optional fixed64 f_21 = 34;
        optional int32 f_22 = 35;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 49;
          E14_CONST_2 = 116;
          E14_CONST_3 = 119;
          E14_CONST_4 = 41;
          E14_CONST_5 = 67;
        }
        repeated E14 f_23 = 37 [packed = true];
        optional int32 f_24 = 39;
        optional fixed64 f_25 = 40;
        optional int32 f_26 = 42;
        optional fixed64 f_27 = 45;
        optional int32 f_28 = 47;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 89;
          E15_CONST_2 = 26;
          E15_CONST_3 = 43;
          E15_CONST_4 = 35;
          E15_CONST_5 = 13;
        }
        optional E15 f_29 = 48;
      }
      repeated M20 f_2 = 2;
      message M22 {
        optional string f_0 = 1;
        message M39 {
          repeated int32 f_0 = 2 [packed = true];
          optional string f_1 = 4;
          optional int32 f_2 = 5;
          message M49 {
            optional string f_0 = 1;
            optional fixed64 f_1 = 3;
          }
          optional M49 f_7 = 7;
        }
        optional M39 f_2 = 2;
        message M41 {
          optional fixed64 f_0 = 1;
        }
        optional M41 f_4 = 4;
      }
      repeated M22 f_3 = 3;
      message M23 {
        optional double f_0 = 3;
        message M45 {
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 70;
            E18_CONST_2 = 85;
            E18_CONST_3 = 107;
            E18_CONST_4 = 4;
            E18_CONST_5 = 26;
          }
          optional E18 f_0 = 2;
          message M50 {
            optional fixed64 f_0 = 1;
            optional fixed64 f_1 = 2;
            enum E21 {
              E21_UNSPECIFIED = 0;
              E21_CONST_1 = 12;
              E21_CONST_2 = 80;
              E21_CONST_3 = 74;
              E21_CONST_4 = 105;
              E21_CONST_5 = 108;
            }
            repeated E21 f_2 = 3 [packed = true];
            enum E22 {
              E22_UNSPECIFIED = 0;
              E22_CONST_1 = 31;
              E22_CONST_2 = 13;
              E22_CONST_3 = 109;
              E22_CONST_4 = 119;
              E22_CONST_5 = 96;
            }
            repeated E22 f_3 = 4 [packed = true];
            optional int32 f_4 = 5;
          }
          repeated M50 f_4 = 4;
        }
        optional M45 f_4 = 4;
      }
      repeated M23 f_4 = 4;
      message M28 {
        optional int32 f_0 = 2;
      }
      optional M28 f_5 = 5;
      message M30 {
        optional string f_0 = 1;
      }
      optional M30 f_7 = 7;
      message M33 {
        optional uint64 f_0 = 1;
      }
      optional M33 f_8 = 8;
    }
    optional M13 f_11 = 11;
  }
  optional M3 f_45 = 45;
  message M4 {
    optional bool f_0 = 2;
    message M16 {
      optional bool f_0 = 3;
      optional int32 f_1 = 7;
      optional fixed64 f_2 = 8;
      optional string f_3 = 10;
      optional fixed64 f_4 = 11;
      optional int32 f_5 = 14;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 43;
        E10_CONST_2 = 118;
        E10_CONST_3 = 119;
        E10_CONST_4 = 47;
        E10_CONST_5 = 18;
      }
      optional E10 f_6 = 16;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 19;
        E11_CONST_2 = 73;
        E11_CONST_3 = 80;
        E11_CONST_4 = 112;
        E11_CONST_5 = 77;
      }
      repeated E11 f_7 = 17 [packed = true];
      optional fixed64 f_8 = 20;
      optional int32 f_9 = 22;
      optional bool f_10 = 24;
      optional fixed64 f_11 = 25;
      optional double f_12 = 26;
      optional int32 f_13 = 27;
      optional bool f_14 = 30;
      optional bool f_15 = 32;
      optional fixed32 f_16 = 33;
      optional fixed64 f_17 = 37;
      optional int32 f_18 = 38;
      optional fixed32 f_19 = 40;
      optional bool f_20 = 44;
      optional string f_21 = 45;
      optional fixed64 f_22 = 47;
      optional int32 f_23 = 48;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 96;
        E12_CONST_2 = 44;
        E12_CONST_3 = 55;
        E12_CONST_4 = 80;
        E12_CONST_5 = 107;
      }
      repeated E12 f_24 = 50 [packed = true];
      optional string f_25 = 52;
      optional string f_26 = 53;
      optional fixed64 f_27 = 54;
      optional fixed64 f_28 = 55;
      optional fixed64 f_29 = 56;
      optional int32 f_30 = 58;
      optional fixed64 f_31 = 59;
      message M24 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
      }
      repeated M24 f_63 = 63;
      message M31 {
        optional fixed64 f_0 = 2;
      }
      optional M31 f_67 = 67;
      message M37 {
        optional fixed64 f_0 = 1;
        message M40 {
          optional int32 f_0 = 1;
          optional fixed32 f_1 = 3;
          optional int32 f_2 = 5;
          optional fixed32 f_3 = 7;
          optional string f_4 = 8;
        }
        optional M40 f_3 = 3;
      }
      repeated M37 f_70 = 70;
    }
    optional M16 f_3 = 3;
  }
  optional M4 f_47 = 47;
  message M5 {
    optional string f_0 = 1;
    optional bool f_1 = 2;
    message M11 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 2;
      optional fixed64 f_2 = 3;
      message M17 {
        optional int32 f_0 = 4;
        optional int32 f_1 = 6;
        optional int64 f_2 = 8;
      }
      optional M17 f_4 = 4;
      message M18 {
        optional string f_0 = 2;
        optional string f_1 = 5;
        message M46 {
          optional string f_0 = 4;
        }
        optional M46 f_9 = 9;
      }
      repeated M18 f_6 = 6;
      message M19 {
        optional bool f_0 = 1;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 36;
          E13_CONST_2 = 40;
          E13_CONST_3 = 70;
          E13_CONST_4 = 106;
          E13_CONST_5 = 41;
        }
        optional E13 f_1 = 4;
        optional int32 f_2 = 8;
        optional double f_3 = 9;
      }
      optional M19 f_7 = 7;
      message M27 {
        optional int64 f_0 = 1;
        message M44 {
          optional string f_0 = 2;
        }
        repeated M44 f_3 = 3;
        message M48 {
          optional int32 f_0 = 3;
          optional bool f_1 = 4;
          optional int32 f_2 = 6;
          optional fixed64 f_3 = 7;
          optional fixed64 f_4 = 9;
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 70;
            E19_CONST_2 = 73;
            E19_CONST_3 = 36;
            E19_CONST_4 = 28;
            E19_CONST_5 = 15;
          }
          optional E19 f_5 = 11;
          optional int32 f_6 = 13;
          optional string f_7 = 14;
          optional string f_8 = 17;
          optional int32 f_9 = 18;
          enum E20 {
            E20_UNSPECIFIED = 0;
            E20_CONST_1 = 28;
            E20_CONST_2 = 22;
            E20_CONST_3 = 37;
            E20_CONST_4 = 33;
            E20_CONST_5 = 125;
          }
          repeated E20 f_10 = 20 [packed = true];
          optional fixed64 f_11 = 22;
        }
        optional M48 f_4 = 4;
      }
      optional M27 f_8 = 8;
    }
    optional M11 f_3 = 3;
    message M12 {
      optional fixed64 f_0 = 4;
      message M25 {
        optional double f_0 = 1;
        message M43 {
          optional int32 f_0 = 2;
        }
        repeated M43 f_2 = 2;
      }
      repeated M25 f_6 = 6;
      message M29 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 4;
        optional int32 f_2 = 8;
        optional fixed64 f_3 = 9;
        optional fixed64 f_4 = 11;
        optional int32 f_5 = 13;
        optional fixed64 f_6 = 15;
        optional double f_7 = 17;
      }
      repeated M29 f_7 = 7;
      message M34 {
        optional int64 f_0 = 1;
        message M47 {
          optional string f_0 = 3;
          optional int32 f_1 = 4;
          optional fixed64 f_2 = 5;
          message M51 {
            enum E23 {
              E23_UNSPECIFIED = 0;
              E23_CONST_1 = 36;
              E23_CONST_2 = 86;
              E23_CONST_3 = 27;
              E23_CONST_4 = 32;
              E23_CONST_5 = 13;
            }
            repeated E23 f_0 = 2 [packed = true];
            optional fixed64 f_1 = 4;
            message M52 {
              optional string f_0 = 2;
              optional int32 f_1 = 3;
              optional int32 f_2 = 5;
              optional fixed64 f_3 = 7;
              optional bool f_4 = 9;
              optional int32 f_5 = 10;
              optional int32 f_6 = 12;
              optional string f_7 = 17;
              optional fixed32 f_8 = 20;
              optional int32 f_9 = 21;
              optional fixed64 f_10 = 25;
              optional int32 f_11 = 26;
              optional fixed64 f_12 = 28;
              optional fixed64 f_13 = 29;
              optional fixed64 f_14 = 30;
              optional fixed64 f_15 = 31;
              optional int32 f_16 = 33;
              optional bool f_17 = 36;
              optional bool f_18 = 38;
              optional bool f_19 = 39;
              optional double f_20 = 42;
              optional string f_21 = 45;
              optional fixed64 f_22 = 47;
              optional double f_23 = 50;
              optional string f_24 = 51;
              optional int32 f_25 = 52;
              optional int32 f_26 = 53;
              optional int32 f_27 = 54;
              optional string f_28 = 55;
              optional fixed32 f_29 = 56;
            }
            optional M52 f_7 = 7;
          }
          repeated M51 f_7 = 7;
        }
        optional M47 f_2 = 2;
      }
      optional M34 f_11 = 11;
      message M35 {
        optional fixed64 f_0 = 2;
      }
      repeated M35 f_14 = 14;
      message M36 {
        optional double f_0 = 1;
        optional bool f_1 = 3;
        optional int64 f_2 = 6;
      }
      optional M36 f_16 = 16;
    }
    repeated M12 f_5 = 5;
  }
  optional M5 f_50 = 50;
  message M6 {
    optional string f_0 = 2;
    optional fixed64 f_1 = 3;
    optional fixed64 f_2 = 4;
    optional double f_3 = 6;
    optional string f_4 = 7;
    optional fixed64 f_5 = 8;
    optional bool f_6 = 11;
  }
  optional M6 f_52 = 52;
  message M7 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 4;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 63;
      E6_CONST_2 = 30;
      E6_CONST_3 = 105;
      E6_CONST_4 = 28;
      E6_CONST_5 = 56;
    }
    repeated E6 f_2 = 6 [packed = true];
    optional fixed64 f_3 = 9;
    optional bool f_4 = 12;
    optional string f_5 = 14;
    optional string f_6 = 15;
    optional int32 f_7 = 16;
    optional bool f_8 = 18;
  }
  optional M7 f_54 = 54;
  message M8 {
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 123;
      E7_CONST_2 = 46;
      E7_CONST_3 = 47;
      E7_CONST_4 = 44;
      E7_CONST_5 = 109;
    }
    optional E7 f_0 = 2;
    optional fixed64 f_1 = 4;
  }
  optional M8 f_55 = 55;
  message M9 {
    optional fixed64 f_0 = 1;
  }
  optional M9 f_56 = 56;
  message M10 {
    optional double f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed64 f_2 = 4;
    message M15 {
      optional string f_0 = 2;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 29;
        E9_CONST_2 = 21;
        E9_CONST_3 = 98;
        E9_CONST_4 = 3;
        E9_CONST_5 = 123;
      }
      repeated E9 f_1 = 3 [packed = true];
      optional bool f_2 = 4;
      optional fixed64 f_3 = 5;
      optional string f_4 = 8;
      message M32 {
        optional int32 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional string f_2 = 4;
        optional fixed64 f_3 = 6;
      }
      optional M32 f_9 = 9;
      message M38 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 6;
      }
      optional M38 f_11 = 11;
    }
    optional M15 f_5 = 5;
  }
  repeated M10 f_58 = 58;
}
