// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.request.Message1;

message Message1 {
  optional int32 f_0 = 1;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 56;
    E1_CONST_2 = 27;
    E1_CONST_3 = 53;
    E1_CONST_4 = 66;
    E1_CONST_5 = 30;
  }
  repeated E1 f_1 = 2 [packed = true];
  optional fixed64 f_2 = 4;
  optional int32 f_3 = 6;
  optional bool f_4 = 10;
  optional int32 f_5 = 13;
  optional double f_6 = 15;
  optional string f_7 = 18;
  optional int32 f_8 = 21;
  optional string f_9 = 26;
  optional string f_10 = 27;
  optional bool f_11 = 30;
  optional fixed64 f_12 = 31;
  optional string f_13 = 32;
  optional fixed64 f_14 = 33;
  optional fixed32 f_15 = 35;
  optional string f_16 = 36;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 4;
    E2_CONST_2 = 34;
    E2_CONST_3 = 44;
    E2_CONST_4 = 63;
    E2_CONST_5 = 108;
  }
  repeated E2 f_17 = 37 [packed = true];
  optional fixed32 f_18 = 39;
  optional int32 f_19 = 40;
  optional fixed64 f_20 = 41;
  optional fixed64 f_21 = 43;
  optional int32 f_22 = 44;
  optional fixed32 f_23 = 45;
  optional int32 f_24 = 46;
  optional string f_25 = 48;
  optional fixed64 f_26 = 49;
  optional fixed64 f_27 = 52;
  optional string f_28 = 54;
  optional int32 f_29 = 55;
  message M1 {
    optional fixed64 f_0 = 1;
    optional string f_1 = 2;
    message M14 {
      optional double f_0 = 1;
      message M65 {
        optional int32 f_0 = 2;
        optional string f_1 = 3;
      }
      optional M65 f_3 = 3;
    }
    repeated M14 f_3 = 3;
    message M47 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 104;
        E7_CONST_2 = 19;
        E7_CONST_3 = 61;
        E7_CONST_4 = 15;
        E7_CONST_5 = 106;
      }
      optional E7 f_0 = 1;
      optional fixed32 f_1 = 2;
      optional int32 f_2 = 3;
    }
    optional M47 f_4 = 4;
    message M48 {
      optional fixed64 f_0 = 1;
    }
    repeated M48 f_5 = 5;
  }
  optional M1 f_58 = 58;
  message M2 {
    optional string f_0 = 2;
    message M37 {
      optional fixed32 f_0 = 2;
      optional fixed32 f_1 = 3;
      optional int32 f_2 = 5;
      optional int32 f_3 = 7;
      message M60 {
        optional int32 f_0 = 1;
      }
      optional M60 f_8 = 8;
    }
    optional M37 f_3 = 3;
    message M46 {
      optional double f_0 = 2;
      optional bool f_1 = 3;
      optional int32 f_2 = 6;
      optional fixed64 f_3 = 7;
      optional string f_4 = 8;
      message M63 {
        optional fixed32 f_0 = 2;
        optional string f_1 = 3;
        optional string f_2 = 5;
      }
      repeated M63 f_11 = 11;
      message M79 {
        optional double f_0 = 2;
      }
      repeated M79 f_12 = 12;
    }
    optional M46 f_5 = 5;
  }
  optional M2 f_60 = 60;
  message M3 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 102;
      E3_CONST_2 = 38;
      E3_CONST_3 = 40;
      E3_CONST_4 = 24;
      E3_CONST_5 = 116;
    }
    repeated E3 f_0 = 1 [packed = true];
    message M26 {
      optional bool f_0 = 1;
      message M68 {
        optional string f_0 = 2;
      }
      optional M68 f_2 = 2;
    }
    repeated M26 f_3 = 3;
    message M33 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 4;
      optional fixed64 f_2 = 5;
      optional bool f_3 = 6;
      message M77 {
        optional int32 f_0 = 2;
      }
      optional M77 f_8 = 8;
      message M78 {
        optional int32 f_0 = 2;
      }
      optional M78 f_9 = 9;
    }
    repeated M33 f_5 = 5;
    message M34 {
      optional fixed64 f_0 = 2;
      optional int64 f_1 = 3;
      optional fixed64 f_2 = 5;
    }
    repeated M34 f_6 = 6;
    message M44 {
      optional double f_0 = 1;
      message M70 {
        optional string f_0 = 1;
      }
      optional M70 f_2 = 2;
    }
    optional M44 f_8 = 8;
  }
  optional M3 f_62 = 62;
  message M4 {
    optional int32 f_0 = 1;
    message M19 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 5;
      optional int32 f_3 = 6;
      message M72 {
        optional fixed64 f_0 = 4;
        optional bool f_1 = 5;
      }
      optional M72 f_7 = 7;
      message M73 {
        optional fixed64 f_0 = 1;
      }
      repeated M73 f_9 = 9;
    }
    optional M19 f_2 = 2;
    message M23 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 38;
        E6_CONST_2 = 8;
        E6_CONST_3 = 80;
        E6_CONST_4 = 104;
        E6_CONST_5 = 59;
      }
      repeated E6 f_2 = 4 [packed = true];
      optional string f_3 = 5;
    }
    optional M23 f_3 = 3;
    message M24 {
      optional int32 f_0 = 2;
    }
    optional M24 f_4 = 4;
    message M50 {
      optional string f_0 = 3;
      optional int32 f_1 = 5;
      optional int32 f_2 = 6;
      optional fixed64 f_3 = 7;
      optional string f_4 = 8;
      optional int32 f_5 = 10;
      optional fixed64 f_6 = 12;
      optional int32 f_7 = 14;
      optional fixed32 f_8 = 16;
      optional string f_9 = 19;
      optional fixed64 f_10 = 21;
      optional string f_11 = 24;
      optional int32 f_12 = 25;
      optional string f_13 = 30;
      optional string f_14 = 31;
      optional fixed64 f_15 = 32;
      optional fixed64 f_16 = 33;
      optional fixed32 f_17 = 36;
      optional fixed64 f_18 = 37;
      optional int32 f_19 = 39;
      optional int32 f_20 = 40;
      optional fixed64 f_21 = 42;
      optional fixed64 f_22 = 43;
      optional fixed64 f_23 = 44;
      optional int32 f_24 = 45;
      optional int32 f_25 = 46;
      optional fixed64 f_26 = 47;
      optional string f_27 = 49;
      optional int32 f_28 = 50;
      optional fixed64 f_29 = 51;
      optional int32 f_30 = 52;
      message M81 {
        optional fixed64 f_0 = 2;
      }
      optional M81 f_53 = 53;
    }
    optional M50 f_6 = 6;
  }
  optional M4 f_63 = 63;
  message M5 {
    optional int32 f_0 = 1;
    message M18 {
      optional double f_0 = 1;
      optional bool f_1 = 3;
      optional int32 f_2 = 4;
      message M82 {
        optional int32 f_0 = 2;
      }
      repeated M82 f_5 = 5;
    }
    repeated M18 f_4 = 4;
    message M25 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 3;
      message M64 {
        optional string f_0 = 3;
      }
      optional M64 f_5 = 5;
    }
    optional M25 f_5 = 5;
    message M27 {
      optional fixed64 f_0 = 2;
      message M55 {
        optional string f_0 = 2;
        message M87 {
          optional fixed64 f_0 = 2;
          message M101 {
            optional fixed64 f_0 = 1;
          }
          repeated M101 f_3 = 3;
        }
        optional M87 f_6 = 6;
      }
      optional M55 f_3 = 3;
    }
    optional M27 f_7 = 7;
    message M29 {
      optional int32 f_0 = 1;
      optional double f_1 = 3;
      message M59 {
        optional bool f_0 = 1;
        optional bool f_1 = 2;
      }
      optional M59 f_4 = 4;
    }
    optional M29 f_8 = 8;
    message M41 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 2;
      optional fixed64 f_2 = 4;
      optional int32 f_3 = 5;
      message M74 {
        optional fixed64 f_0 = 2;
      }
      optional M74 f_7 = 7;
    }
    optional M41 f_9 = 9;
    message M43 {
      optional fixed64 f_0 = 1;
      message M75 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional string f_2 = 6;
        optional string f_3 = 8;
        optional int64 f_4 = 10;
        optional string f_5 = 11;
        message M86 {
          optional int32 f_0 = 2;
          optional bool f_1 = 4;
          message M95 {
            enum E13 {
              E13_UNSPECIFIED = 0;
              E13_CONST_1 = 20;
              E13_CONST_2 = 62;
              E13_CONST_3 = 123;
              E13_CONST_4 = 104;
              E13_CONST_5 = 120;
            }
            repeated E13 f_0 = 2 [packed = true];
          }
          optional M95 f_6 = 6;
          message M102 {
            optional int32 f_0 = 1;
            optional string f_1 = 2;
            optional fixed64 f_2 = 3;
          }
          optional M102 f_8 = 8;
        }
        optional M86 f_12 = 12;
      }
      optional M75 f_4 = 4;
    }
    repeated M43 f_12 = 12;
  }
  optional M5 f_64 = 64;
  message M6 {
    optional fixed64 f_0 = 1;
    message M15 {
      optional fixed32 f_0 = 2;
      optional int32 f_1 = 4;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 105;
        E5_CONST_2 = 69;
        E5_CONST_3 = 97;
        E5_CONST_4 = 118;
        E5_CONST_5 = 16;
      }
      optional E5 f_2 = 6;
      optional fixed64 f_3 = 7;
      optional string f_4 = 9;
    }
    optional M15 f_2 = 2;
    message M17 {
      optional string f_0 = 1;
      optional string f_1 = 2;
    }
    optional M17 f_6 = 6;
    message M21 {
      optional fixed64 f_0 = 3;
      optional bool f_1 = 4;
    }
    repeated M21 f_7 = 7;
    message M38 {
      optional fixed32 f_0 = 2;
      optional int32 f_1 = 4;
      optional string f_2 = 5;
      message M52 {
        optional int32 f_0 = 1;
        message M85 {
          optional string f_0 = 1;
          optional string f_1 = 3;
          optional int32 f_2 = 6;
          optional fixed64 f_3 = 8;
          message M91 {
            optional int32 f_0 = 2;
          }
          repeated M91 f_9 = 9;
          message M93 {
            optional bool f_0 = 1;
          }
          optional M93 f_11 = 11;
        }
        repeated M85 f_2 = 2;
      }
      optional M52 f_7 = 7;
      message M84 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 3;
      }
      repeated M84 f_8 = 8;
    }
    optional M38 f_8 = 8;
  }
  optional M6 f_65 = 65;
  message M7 {
    optional int32 f_0 = 2;
    message M16 {
      optional fixed32 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 5;
      optional int32 f_3 = 8;
      optional int32 f_4 = 12;
      message M56 {
        optional fixed64 f_0 = 1;
      }
      repeated M56 f_13 = 13;
    }
    repeated M16 f_3 = 3;
    message M20 {
      optional string f_0 = 2;
      message M54 {
        optional double f_0 = 2;
        message M90 {
          optional fixed64 f_0 = 1;
          optional double f_1 = 3;
          optional fixed64 f_2 = 4;
          optional int32 f_3 = 7;
          optional bool f_4 = 8;
          optional string f_5 = 9;
          optional string f_6 = 11;
          optional int32 f_7 = 12;
          optional bool f_8 = 13;
          optional fixed64 f_9 = 15;
          optional fixed64 f_10 = 16;
          optional int32 f_11 = 18;
          optional bool f_12 = 21;
          optional bool f_13 = 22;
          message M94 {
            enum E12 {
              E12_UNSPECIFIED = 0;
              E12_CONST_1 = 99;
              E12_CONST_2 = 20;
              E12_CONST_3 = 114;
              E12_CONST_4 = 14;
              E12_CONST_5 = 116;
            }
            optional E12 f_0 = 2;
            optional int32 f_1 = 4;
          }
          optional M94 f_24 = 24;
          message M97 {
            enum E14 {
              E14_UNSPECIFIED = 0;
              E14_CONST_1 = 24;
              E14_CONST_2 = 114;
              E14_CONST_3 = 65;
              E14_CONST_4 = 10;
              E14_CONST_5 = 75;
            }
            optional E14 f_0 = 1;
          }
          optional M97 f_25 = 25;
          message M100 {
            optional int32 f_0 = 3;
            enum E15 {
              E15_UNSPECIFIED = 0;
              E15_CONST_1 = 25;
              E15_CONST_2 = 80;
              E15_CONST_3 = 17;
              E15_CONST_4 = 108;
              E15_CONST_5 = 121;
            }
            repeated E15 f_1 = 5 [packed = true];
            optional int32 f_2 = 6;
            optional string f_3 = 8;
            enum E16 {
              E16_UNSPECIFIED = 0;
              E16_CONST_1 = 124;
              E16_CONST_2 = 40;
              E16_CONST_3 = 110;
              E16_CONST_4 = 104;
              E16_CONST_5 = 88;
            }
            repeated E16 f_4 = 9 [packed = true];
            optional string f_5 = 11;
            optional string f_6 = 12;
            optional double f_7 = 13;
            optional string f_8 = 15;
            optional int32 f_9 = 16;
            optional double f_10 = 17;
            optional int32 f_11 = 18;
            optional string f_12 = 20;
            optional fixed64 f_13 = 23;
            message M103 {
              optional int32 f_0 = 1;
              optional int32 f_1 = 3;
              optional int32 f_2 = 6;
              optional bool f_3 = 7;
              enum E17 {
                E17_UNSPECIFIED = 0;
                E17_CONST_1 = 52;
                E17_CONST_2 = 44;
                E17_CONST_3 = 81;
                E17_CONST_4 = 120;
                E17_CONST_5 = 39;
              }
              repeated E17 f_4 = 8 [packed = true];
              optional int32 f_5 = 9;
              optional fixed64 f_6 = 11;
              optional string f_7 = 12;
              optional bool f_8 = 14;
              optional fixed64 f_9 = 15;
              optional string f_10 = 19;
              optional fixed64 f_11 = 22;
              optional string f_12 = 23;
              optional bool f_13 = 25;
              optional fixed64 f_14 = 26;
              optional fixed64 f_15 = 28;
              optional fixed64 f_16 = 29;
              optional string f_17 = 30;
              optional fixed64 f_18 = 33;
              optional int64 f_19 = 35;
              optional bool f_20 = 36;
              optional string f_21 = 37;
              enum E18 {
                E18_UNSPECIFIED = 0;
                E18_CONST_1 = 60;
                E18_CONST_2 = 123;
                E18_CONST_3 = 36;
                E18_CONST_4 = 99;
                E18_CONST_5 = 26;
              }
              optional E18 f_22 = 38;
              optional string f_23 = 40;
              optional int32 f_24 = 42;
              optional int32 f_25 = 43;
              optional fixed64 f_26 = 44;
              optional string f_27 = 46;
              optional string f_28 = 47;
              optional string f_29 = 48;
              optional fixed32 f_30 = 49;
            }
            optional M103 f_26 = 26;
          }
          optional M100 f_27 = 27;
        }
        optional M90 f_4 = 4;
      }
      repeated M54 f_3 = 3;
      message M62 {
        optional string f_0 = 4;
        optional bool f_1 = 6;
        optional fixed64 f_2 = 8;
        optional string f_3 = 10;
        optional string f_4 = 11;
        optional bool f_5 = 13;
        optional string f_6 = 16;
        optional fixed64 f_7 = 17;
        optional int32 f_8 = 19;
        optional fixed64 f_9 = 21;
        optional fixed64 f_10 = 25;
        optional int32 f_11 = 26;
        optional fixed64 f_12 = 28;
        optional fixed64 f_13 = 30;
        optional int32 f_14 = 31;
        message M88 {
          optional int32 f_0 = 1;
          message M96 {
            optional int32 f_0 = 1;
          }
          optional M96 f_3 = 3;
          message M98 {
            optional string f_0 = 1;
            optional fixed64 f_1 = 2;
            optional string f_2 = 4;
            optional fixed32 f_3 = 6;
          }
          optional M98 f_5 = 5;
        }
        optional M88 f_32 = 32;
      }
      optional M62 f_6 = 6;
    }
    optional M20 f_4 = 4;
  }
  optional M7 f_67 = 67;
  message M8 {
    optional fixed64 f_0 = 2;
  }
  optional M8 f_69 = 69;
  message M9 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 3;
    optional string f_2 = 4;
    optional int32 f_3 = 5;
    optional double f_4 = 6;
    optional int32 f_5 = 7;
    optional int32 f_6 = 10;
    optional int32 f_7 = 12;
    optional double f_8 = 14;
    optional int32 f_9 = 15;
    message M40 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 5;
      message M76 {
        optional fixed64 f_0 = 1;
      }
      repeated M76 f_6 = 6;
    }
    optional M40 f_16 = 16;
    message M49 {
      optional fixed64 f_0 = 1;
      message M58 {
        optional fixed64 f_0 = 2;
        optional bool f_1 = 4;
        optional fixed64 f_2 = 6;
        optional fixed64 f_3 = 8;
      }
      optional M58 f_3 = 3;
    }
    repeated M49 f_17 = 17;
  }
  repeated M9 f_70 = 70;
  message M10 {
    optional fixed64 f_0 = 2;
    optional string f_1 = 3;
    optional fixed64 f_2 = 4;
    message M28 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional string f_2 = 4;
      optional double f_3 = 5;
      message M69 {
        optional int32 f_0 = 1;
      }
      optional M69 f_7 = 7;
      message M71 {
        optional int32 f_0 = 2;
      }
      optional M71 f_8 = 8;
      message M80 {
        optional string f_0 = 2;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional bool f_3 = 5;
        optional fixed32 f_4 = 6;
        optional string f_5 = 7;
        optional int32 f_6 = 8;
        optional int32 f_7 = 9;
        optional fixed32 f_8 = 10;
      }
      optional M80 f_10 = 10;
    }
    optional M28 f_6 = 6;
  }
  optional M10 f_72 = 72;
  message M11 {
    optional fixed32 f_0 = 3;
    optional int32 f_1 = 6;
    optional fixed32 f_2 = 7;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 85;
      E4_CONST_2 = 87;
      E4_CONST_3 = 100;
      E4_CONST_4 = 39;
      E4_CONST_5 = 41;
    }
    repeated E4 f_3 = 10 [packed = true];
    message M22 {
      optional int32 f_0 = 1;
    }
    repeated M22 f_11 = 11;
    message M30 {
      optional bool f_0 = 2;
      optional int32 f_1 = 3;
      message M67 {
        optional double f_0 = 1;
      }
      optional M67 f_4 = 4;
    }
    optional M30 f_13 = 13;
    message M31 {
      optional string f_0 = 1;
    }
    optional M31 f_14 = 14;
    message M45 {
      optional bool f_0 = 1;
    }
    optional M45 f_15 = 15;
  }
  optional M11 f_75 = 75;
  message M12 {
    optional string f_0 = 1;
    optional string f_1 = 5;
    optional fixed64 f_2 = 7;
    optional fixed32 f_3 = 8;
    optional int32 f_4 = 10;
  }
  repeated M12 f_77 = 77;
  message M13 {
    optional int32 f_0 = 2;
    message M32 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional bool f_2 = 4;
      optional int32 f_3 = 6;
      optional fixed64 f_4 = 10;
    }
    optional M32 f_3 = 3;
    message M35 {
      optional string f_0 = 2;
    }
    optional M35 f_4 = 4;
    message M36 {
      optional fixed64 f_0 = 2;
      message M53 {
        optional string f_0 = 3;
        optional fixed64 f_1 = 4;
        optional string f_2 = 5;
        message M89 {
          optional int32 f_0 = 1;
          optional fixed32 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional fixed64 f_3 = 5;
          optional fixed64 f_4 = 9;
          optional int32 f_5 = 11;
          optional fixed64 f_6 = 12;
          optional int64 f_7 = 13;
          optional fixed64 f_8 = 16;
          optional fixed64 f_9 = 17;
          optional double f_10 = 19;
          optional fixed64 f_11 = 21;
          optional fixed32 f_12 = 22;
          optional string f_13 = 25;
          enum E10 {
            E10_UNSPECIFIED = 0;
            E10_CONST_1 = 39;
            E10_CONST_2 = 86;
            E10_CONST_3 = 83;
            E10_CONST_4 = 30;
            E10_CONST_5 = 23;
          }
          optional E10 f_14 = 26;
          optional fixed32 f_15 = 27;
          optional int32 f_16 = 29;
          optional int32 f_17 = 30;
          optional int32 f_18 = 32;
          optional fixed64 f_19 = 34;
          optional int32 f_20 = 35;
          optional fixed32 f_21 = 36;
          optional fixed64 f_22 = 38;
          optional fixed64 f_23 = 40;
          optional string f_24 = 41;
          optional string f_25 = 44;
          optional double f_26 = 45;
          message M92 {
            enum E11 {
              E11_UNSPECIFIED = 0;
              E11_CONST_1 = 110;
              E11_CONST_2 = 83;
              E11_CONST_3 = 6;
              E11_CONST_4 = 101;
              E11_CONST_5 = 85;
            }
            repeated E11 f_0 = 1 [packed = true];
          }
          optional M92 f_47 = 47;
          message M99 {
            optional fixed64 f_0 = 1;
            optional bool f_1 = 3;
          }
          optional M99 f_49 = 49;
        }
        optional M89 f_6 = 6;
      }
      optional M53 f_3 = 3;
    }
    repeated M36 f_6 = 6;
    message M39 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional bool f_3 = 4;
      message M51 {
        optional fixed64 f_0 = 1;
      }
      repeated M51 f_7 = 7;
      message M57 {
        optional string f_0 = 2;
      }
      optional M57 f_9 = 9;
      message M61 {
        optional fixed64 f_0 = 1;
      }
      optional M61 f_11 = 11;
      message M83 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 5;
        optional int32 f_2 = 6;
        optional int32 f_3 = 7;
        optional string f_4 = 8;
        optional double f_5 = 11;
        optional bool f_6 = 13;
        optional string f_7 = 15;
        optional int32 f_8 = 16;
        optional fixed64 f_9 = 18;
        optional fixed64 f_10 = 19;
        optional string f_11 = 20;
        optional string f_12 = 21;
        optional string f_13 = 22;
        optional string f_14 = 24;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 47;
          E9_CONST_2 = 40;
          E9_CONST_3 = 115;
          E9_CONST_4 = 26;
          E9_CONST_5 = 112;
        }
        optional E9 f_15 = 25;
        optional string f_16 = 26;
      }
      optional M83 f_12 = 12;
    }
    optional M39 f_8 = 8;
    message M42 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      message M66 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 50;
          E8_CONST_2 = 1;
          E8_CONST_3 = 82;
          E8_CONST_4 = 30;
          E8_CONST_5 = 117;
        }
        repeated E8 f_0 = 3 [packed = true];
        optional fixed64 f_1 = 4;
      }
      optional M66 f_3 = 3;
    }
    optional M42 f_9 = 9;
  }
  optional M13 f_79 = 79;
}
