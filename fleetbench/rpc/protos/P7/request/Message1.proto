// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.request.Message1;

message Message1 {
  optional fixed64 f_0 = 2;
  optional fixed64 f_1 = 3;
  optional string f_2 = 4;
  optional int32 f_3 = 6;
  optional string f_4 = 9;
  optional fixed64 f_5 = 12;
  optional fixed64 f_6 = 13;
  optional string f_7 = 16;
  optional int64 f_8 = 19;
  optional int32 f_9 = 20;
  optional fixed64 f_10 = 24;
  optional string f_11 = 26;
  optional string f_12 = 27;
  optional string f_13 = 29;
  optional string f_14 = 31;
  optional int32 f_15 = 33;
  optional fixed64 f_16 = 35;
  optional fixed32 f_17 = 36;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 106;
    E1_CONST_2 = 9;
    E1_CONST_3 = 91;
    E1_CONST_4 = 125;
    E1_CONST_5 = 19;
  }
  repeated E1 f_18 = 37 [packed = true];
  optional string f_19 = 39;
  optional bool f_20 = 41;
  optional string f_21 = 43;
  optional int32 f_22 = 44;
  optional int32 f_23 = 46;
  optional double f_24 = 47;
  optional fixed64 f_25 = 48;
  optional string f_26 = 50;
  optional bool f_27 = 52;
  optional fixed64 f_28 = 55;
  optional fixed64 f_29 = 59;
  message M1 {
    optional bool f_0 = 1;
    message M23 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 4;
      optional string f_2 = 5;
      optional double f_3 = 7;
      optional string f_4 = 9;
      optional fixed32 f_5 = 10;
      optional fixed64 f_6 = 12;
      optional fixed64 f_7 = 14;
      optional fixed64 f_8 = 15;
      optional fixed64 f_9 = 16;
      optional int64 f_10 = 17;
      optional int32 f_11 = 18;
      optional fixed64 f_12 = 19;
      optional int32 f_13 = 20;
      optional fixed32 f_14 = 22;
    }
    repeated M23 f_2 = 2;
    message M28 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 6;
      optional int32 f_4 = 7;
      optional int32 f_5 = 9;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 89;
        E9_CONST_2 = 48;
        E9_CONST_3 = 31;
        E9_CONST_4 = 124;
        E9_CONST_5 = 32;
      }
      repeated E9 f_6 = 10 [packed = true];
      optional int32 f_7 = 11;
      optional int32 f_8 = 13;
      optional int32 f_9 = 14;
      optional bool f_10 = 17;
      optional string f_11 = 18;
      optional int32 f_12 = 19;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 18;
        E10_CONST_2 = 120;
        E10_CONST_3 = 71;
        E10_CONST_4 = 114;
        E10_CONST_5 = 106;
      }
      repeated E10 f_13 = 21 [packed = true];
      optional bool f_14 = 22;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 88;
        E11_CONST_2 = 4;
        E11_CONST_3 = 67;
        E11_CONST_4 = 61;
        E11_CONST_5 = 12;
      }
      repeated E11 f_15 = 23 [packed = true];
      optional fixed64 f_16 = 24;
      optional string f_17 = 25;
      optional fixed32 f_18 = 26;
      optional int32 f_19 = 27;
      optional double f_20 = 28;
      optional string f_21 = 29;
      optional int32 f_22 = 32;
      optional int32 f_23 = 34;
      optional string f_24 = 35;
      optional string f_25 = 36;
      optional string f_26 = 37;
      optional fixed64 f_27 = 39;
      optional fixed64 f_28 = 41;
      optional string f_29 = 43;
      optional fixed32 f_30 = 45;
      optional string f_31 = 48;
    }
    optional M28 f_4 = 4;
  }
  optional M1 f_60 = 60;
  message M2 {
    optional int32 f_0 = 1;
    message M18 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 4;
      optional int32 f_2 = 5;
      message M43 {
        optional fixed64 f_0 = 2;
      }
      optional M43 f_6 = 6;
      message M52 {
        optional fixed64 f_0 = 3;
        optional fixed64 f_1 = 4;
      }
      repeated M52 f_7 = 7;
    }
    repeated M18 f_2 = 2;
    message M19 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 119;
        E7_CONST_2 = 52;
        E7_CONST_3 = 91;
        E7_CONST_4 = 121;
        E7_CONST_5 = 103;
      }
      optional E7 f_0 = 2;
      message M57 {
        optional fixed64 f_0 = 2;
      }
      optional M57 f_3 = 3;
    }
    repeated M19 f_4 = 4;
    message M20 {
      optional string f_0 = 1;
      message M39 {
        optional int32 f_0 = 1;
        message M63 {
          optional fixed64 f_0 = 3;
          optional fixed64 f_1 = 4;
          message M72 {
            optional int32 f_0 = 2;
          }
          optional M72 f_7 = 7;
          message M73 {
            optional string f_0 = 1;
          }
          optional M73 f_8 = 8;
          message M74 {
            optional bool f_0 = 1;
            optional string f_1 = 3;
          }
          optional M74 f_9 = 9;
        }
        optional M63 f_2 = 2;
      }
      optional M39 f_3 = 3;
      message M60 {
        optional string f_0 = 1;
      }
      optional M60 f_6 = 6;
      message M61 {
        optional int32 f_0 = 2;
        optional bool f_1 = 4;
        optional string f_2 = 8;
      }
      optional M61 f_7 = 7;
    }
    repeated M20 f_6 = 6;
  }
  optional M2 f_64 = 64;
  message M3 {
    optional int32 f_0 = 1;
    message M17 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 4;
      optional fixed64 f_3 = 7;
      message M41 {
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 115;
          E16_CONST_2 = 77;
          E16_CONST_3 = 50;
          E16_CONST_4 = 14;
          E16_CONST_5 = 11;
        }
        repeated E16 f_0 = 2 [packed = true];
      }
      optional M41 f_8 = 8;
      message M53 {
        enum E20 {
          E20_UNSPECIFIED = 0;
          E20_CONST_1 = 88;
          E20_CONST_2 = 66;
          E20_CONST_3 = 73;
          E20_CONST_4 = 37;
          E20_CONST_5 = 28;
        }
        repeated E20 f_0 = 1 [packed = true];
        optional int32 f_1 = 4;
        optional int32 f_2 = 6;
        optional int32 f_3 = 8;
        optional int32 f_4 = 9;
        optional int32 f_5 = 11;
      }
      optional M53 f_9 = 9;
    }
    repeated M17 f_5 = 5;
  }
  optional M3 f_66 = 66;
  message M4 {
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 96;
      E2_CONST_2 = 69;
      E2_CONST_3 = 84;
      E2_CONST_4 = 64;
      E2_CONST_5 = 22;
    }
    repeated E2 f_0 = 1 [packed = true];
    message M31 {
      optional string f_0 = 1;
      message M58 {
        optional bool f_0 = 1;
      }
      optional M58 f_3 = 3;
    }
    repeated M31 f_2 = 2;
  }
  optional M4 f_69 = 69;
  message M5 {
    optional int32 f_0 = 1;
    message M29 {
      optional string f_0 = 3;
      message M45 {
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 31;
          E18_CONST_2 = 26;
          E18_CONST_3 = 62;
          E18_CONST_4 = 87;
          E18_CONST_5 = 113;
        }
        repeated E18 f_0 = 1 [packed = true];
      }
      optional M45 f_4 = 4;
      message M46 {
        optional fixed64 f_0 = 1;
      }
      optional M46 f_5 = 5;
      message M54 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
        message M65 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 3;
          optional int32 f_2 = 4;
          optional int32 f_3 = 6;
          optional int32 f_4 = 9;
          optional fixed64 f_5 = 10;
          optional int32 f_6 = 12;
          optional string f_7 = 14;
          optional double f_8 = 15;
          optional int32 f_9 = 16;
          optional double f_10 = 18;
          optional int32 f_11 = 19;
          enum E27 {
            E27_UNSPECIFIED = 0;
            E27_CONST_1 = 31;
            E27_CONST_2 = 75;
            E27_CONST_3 = 14;
            E27_CONST_4 = 98;
            E27_CONST_5 = 119;
          }
          repeated E27 f_12 = 21 [packed = true];
          optional fixed32 f_13 = 23;
          optional fixed64 f_14 = 25;
          optional fixed64 f_15 = 27;
          optional fixed64 f_16 = 29;
          optional string f_17 = 31;
          optional string f_18 = 32;
          optional int32 f_19 = 34;
          optional double f_20 = 35;
          optional string f_21 = 36;
          optional string f_22 = 37;
          optional int32 f_23 = 38;
          enum E28 {
            E28_UNSPECIFIED = 0;
            E28_CONST_1 = 89;
            E28_CONST_2 = 31;
            E28_CONST_3 = 10;
            E28_CONST_4 = 114;
            E28_CONST_5 = 1;
          }
          optional E28 f_24 = 40;
          optional int32 f_25 = 42;
          optional fixed64 f_26 = 44;
          message M67 {
            optional fixed64 f_0 = 2;
          }
          repeated M67 f_45 = 45;
          message M77 {
            optional string f_0 = 1;
          }
          optional M77 f_46 = 46;
        }
        optional M65 f_4 = 4;
      }
      optional M54 f_7 = 7;
      message M56 {
        optional int32 f_0 = 1;
      }
      repeated M56 f_8 = 8;
    }
    optional M29 f_2 = 2;
  }
  repeated M5 f_70 = 70;
  message M6 {
    optional int32 f_0 = 3;
    message M25 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      message M44 {
        optional int32 f_0 = 2;
        message M62 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 2;
          optional int32 f_2 = 3;
          optional fixed64 f_3 = 4;
          optional int32 f_4 = 6;
          enum E22 {
            E22_UNSPECIFIED = 0;
            E22_CONST_1 = 45;
            E22_CONST_2 = 63;
            E22_CONST_3 = 96;
            E22_CONST_4 = 110;
            E22_CONST_5 = 88;
          }
          repeated E22 f_5 = 10 [packed = true];
          optional int32 f_6 = 12;
          optional int32 f_7 = 13;
          optional double f_8 = 14;
          optional bool f_9 = 17;
          optional fixed64 f_10 = 18;
          optional int32 f_11 = 20;
          optional double f_12 = 22;
          enum E23 {
            E23_UNSPECIFIED = 0;
            E23_CONST_1 = 47;
            E23_CONST_2 = 95;
            E23_CONST_3 = 86;
            E23_CONST_4 = 75;
            E23_CONST_5 = 21;
          }
          optional E23 f_13 = 23;
          optional fixed64 f_14 = 26;
          optional string f_15 = 27;
          enum E24 {
            E24_UNSPECIFIED = 0;
            E24_CONST_1 = 18;
            E24_CONST_2 = 122;
            E24_CONST_3 = 30;
            E24_CONST_4 = 42;
            E24_CONST_5 = 112;
          }
          optional E24 f_16 = 28;
          optional bool f_17 = 30;
          optional string f_18 = 31;
          optional string f_19 = 33;
          optional int32 f_20 = 35;
          optional int32 f_21 = 36;
          optional fixed32 f_22 = 37;
          optional int64 f_23 = 39;
          enum E25 {
            E25_UNSPECIFIED = 0;
            E25_CONST_1 = 95;
            E25_CONST_2 = 51;
            E25_CONST_3 = 34;
            E25_CONST_4 = 106;
            E25_CONST_5 = 115;
          }
          repeated E25 f_24 = 41 [packed = true];
          optional fixed64 f_25 = 42;
          optional fixed64 f_26 = 45;
          optional fixed64 f_27 = 46;
          enum E26 {
            E26_UNSPECIFIED = 0;
            E26_CONST_1 = 105;
            E26_CONST_2 = 37;
            E26_CONST_3 = 29;
            E26_CONST_4 = 117;
            E26_CONST_5 = 63;
          }
          repeated E26 f_28 = 47 [packed = true];
          optional string f_29 = 48;
          optional int32 f_30 = 50;
          message M66 {
            optional string f_0 = 2;
            optional bool f_1 = 4;
            optional int32 f_2 = 7;
            enum E29 {
              E29_UNSPECIFIED = 0;
              E29_CONST_1 = 69;
              E29_CONST_2 = 2;
              E29_CONST_3 = 14;
              E29_CONST_4 = 109;
              E29_CONST_5 = 52;
            }
            optional E29 f_3 = 9;
            optional fixed64 f_4 = 10;
            optional int32 f_5 = 12;
            message M80 {
              optional fixed64 f_0 = 2;
              optional int32 f_1 = 3;
              optional fixed64 f_2 = 4;
              optional fixed64 f_3 = 5;
              optional bool f_4 = 8;
              optional string f_5 = 10;
              optional string f_6 = 13;
              message M82 {
                optional string f_0 = 2;
                optional fixed64 f_1 = 3;
              }
              optional M82 f_15 = 15;
            }
            optional M80 f_13 = 13;
          }
          optional M66 f_51 = 51;
          message M69 {
            optional fixed64 f_0 = 2;
            optional int32 f_1 = 5;
            enum E31 {
              E31_UNSPECIFIED = 0;
              E31_CONST_1 = 106;
              E31_CONST_2 = 55;
              E31_CONST_3 = 41;
              E31_CONST_4 = 108;
              E31_CONST_5 = 81;
            }
            repeated E31 f_2 = 7 [packed = true];
            optional fixed64 f_3 = 8;
          }
          repeated M69 f_52 = 52;
          message M71 {
            optional int32 f_0 = 2;
            message M79 {
              optional int32 f_0 = 2;
              optional string f_1 = 3;
              message M81 {
                optional double f_0 = 1;
              }
              repeated M81 f_4 = 4;
            }
            repeated M79 f_3 = 3;
          }
          repeated M71 f_53 = 53;
          message M78 {
            optional int64 f_0 = 3;
            optional int32 f_1 = 5;
            optional double f_2 = 6;
            optional fixed64 f_3 = 7;
            optional fixed64 f_4 = 8;
          }
          optional M78 f_55 = 55;
        }
        optional M62 f_3 = 3;
      }
      repeated M44 f_5 = 5;
      message M50 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 3;
        optional bool f_3 = 4;
        optional int32 f_4 = 5;
        optional int32 f_5 = 6;
        optional string f_6 = 7;
      }
      optional M50 f_7 = 7;
    }
    optional M25 f_4 = 4;
    message M34 {
      optional bool f_0 = 2;
      optional fixed64 f_1 = 3;
      message M35 {
        optional int32 f_0 = 1;
      }
      repeated M35 f_4 = 4;
    }
    optional M34 f_5 = 5;
  }
  optional M6 f_71 = 71;
  message M7 {
    optional string f_0 = 1;
  }
  optional M7 f_73 = 73;
  message M8 {
    optional fixed32 f_0 = 1;
    message M30 {
      optional string f_0 = 5;
      message M51 {
        optional string f_0 = 2;
        optional string f_1 = 3;
        optional int32 f_2 = 5;
        optional string f_3 = 6;
      }
      optional M51 f_7 = 7;
    }
    optional M30 f_2 = 2;
  }
  optional M8 f_76 = 76;
  message M9 {
    optional bool f_0 = 1;
    message M22 {
      optional string f_0 = 1;
      message M40 {
        optional string f_0 = 2;
        optional string f_1 = 3;
      }
      optional M40 f_4 = 4;
      message M48 {
        optional fixed32 f_0 = 1;
      }
      optional M48 f_8 = 8;
      message M49 {
        optional fixed32 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional string f_3 = 5;
        optional bool f_4 = 7;
        optional fixed64 f_5 = 9;
        optional string f_6 = 10;
        optional fixed32 f_7 = 11;
        optional bool f_8 = 15;
        optional fixed64 f_9 = 17;
        optional int32 f_10 = 19;
        optional string f_11 = 20;
        optional fixed64 f_12 = 23;
        optional bool f_13 = 24;
        optional int32 f_14 = 25;
        optional int32 f_15 = 27;
        optional fixed64 f_16 = 29;
        optional string f_17 = 31;
        optional fixed64 f_18 = 32;
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 27;
          E19_CONST_2 = 68;
          E19_CONST_3 = 70;
          E19_CONST_4 = 125;
          E19_CONST_5 = 29;
        }
        repeated E19 f_19 = 34 [packed = true];
        optional string f_20 = 36;
        optional fixed64 f_21 = 37;
        message M64 {
          optional fixed64 f_0 = 2;
          message M68 {
            optional int32 f_0 = 1;
            enum E30 {
              E30_UNSPECIFIED = 0;
              E30_CONST_1 = 108;
              E30_CONST_2 = 36;
              E30_CONST_3 = 2;
              E30_CONST_4 = 15;
              E30_CONST_5 = 23;
            }
            repeated E30 f_1 = 3 [packed = true];
            optional string f_2 = 4;
            optional string f_3 = 5;
          }
          optional M68 f_3 = 3;
          message M70 {
            optional bool f_0 = 1;
            optional fixed32 f_1 = 2;
          }
          optional M70 f_4 = 4;
          message M75 {
            optional int32 f_0 = 2;
            optional double f_1 = 3;
            optional string f_2 = 7;
            optional string f_3 = 10;
            optional fixed64 f_4 = 11;
          }
          repeated M75 f_6 = 6;
          message M76 {
            optional fixed64 f_0 = 1;
          }
          repeated M76 f_8 = 8;
        }
        repeated M64 f_38 = 38;
      }
      repeated M49 f_9 = 9;
      message M59 {
        optional fixed64 f_0 = 3;
      }
      optional M59 f_11 = 11;
    }
    optional M22 f_3 = 3;
  }
  optional M9 f_77 = 77;
  message M10 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 17;
      E3_CONST_2 = 62;
      E3_CONST_3 = 91;
      E3_CONST_4 = 9;
      E3_CONST_5 = 70;
    }
    optional E3 f_0 = 1;
    optional fixed64 f_1 = 2;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 42;
      E4_CONST_2 = 87;
      E4_CONST_3 = 51;
      E4_CONST_4 = 8;
      E4_CONST_5 = 92;
    }
    optional E4 f_2 = 4;
    message M33 {
      optional int32 f_0 = 2;
    }
    repeated M33 f_6 = 6;
  }
  optional M10 f_78 = 78;
  message M11 {
    optional int32 f_0 = 1;
    message M21 {
      optional string f_0 = 1;
      message M37 {
        optional fixed64 f_0 = 2;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 99;
          E15_CONST_2 = 126;
          E15_CONST_3 = 61;
          E15_CONST_4 = 25;
          E15_CONST_5 = 97;
        }
        repeated E15 f_1 = 3 [packed = true];
        optional fixed32 f_2 = 5;
        optional int32 f_3 = 8;
      }
      optional M37 f_2 = 2;
      message M47 {
        optional string f_0 = 2;
        optional int32 f_1 = 3;
        optional string f_2 = 4;
        optional string f_3 = 6;
        optional fixed32 f_4 = 7;
        optional double f_5 = 8;
      }
      optional M47 f_4 = 4;
    }
    repeated M21 f_3 = 3;
  }
  optional M11 f_79 = 79;
  message M12 {
    optional int32 f_0 = 1;
    optional bool f_1 = 3;
  }
  repeated M12 f_80 = 80;
  message M13 {
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 96;
      E5_CONST_2 = 90;
      E5_CONST_3 = 50;
      E5_CONST_4 = 58;
      E5_CONST_5 = 83;
    }
    optional E5 f_0 = 1;
    message M27 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 47;
        E8_CONST_2 = 107;
        E8_CONST_3 = 50;
        E8_CONST_4 = 77;
        E8_CONST_5 = 12;
      }
      repeated E8 f_0 = 1 [packed = true];
    }
    repeated M27 f_2 = 2;
    message M32 {
      optional fixed32 f_0 = 3;
      optional fixed64 f_1 = 4;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 126;
        E12_CONST_2 = 37;
        E12_CONST_3 = 115;
        E12_CONST_4 = 43;
        E12_CONST_5 = 14;
      }
      repeated E12 f_2 = 6 [packed = true];
      optional fixed32 f_3 = 7;
      optional double f_4 = 9;
      optional fixed64 f_5 = 10;
      optional int32 f_6 = 11;
      optional fixed64 f_7 = 12;
      optional int32 f_8 = 13;
      optional bool f_9 = 14;
      optional bool f_10 = 17;
      optional string f_11 = 18;
      optional fixed32 f_12 = 19;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 36;
        E13_CONST_2 = 125;
        E13_CONST_3 = 25;
        E13_CONST_4 = 90;
        E13_CONST_5 = 126;
      }
      optional E13 f_13 = 21;
      optional string f_14 = 22;
      optional string f_15 = 25;
      optional string f_16 = 26;
      optional fixed64 f_17 = 28;
      optional int32 f_18 = 31;
      optional int32 f_19 = 32;
      optional string f_20 = 33;
      optional int32 f_21 = 34;
      optional bool f_22 = 36;
      optional fixed64 f_23 = 37;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 15;
        E14_CONST_2 = 16;
        E14_CONST_3 = 52;
        E14_CONST_4 = 112;
        E14_CONST_5 = 71;
      }
      repeated E14 f_24 = 39 [packed = true];
      optional string f_25 = 40;
      optional string f_26 = 41;
      optional string f_27 = 42;
      optional string f_28 = 44;
      optional int32 f_29 = 46;
      optional int32 f_30 = 48;
      message M36 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional string f_2 = 4;
        optional bool f_3 = 8;
        optional bool f_4 = 10;
      }
      repeated M36 f_50 = 50;
      message M55 {
        enum E21 {
          E21_UNSPECIFIED = 0;
          E21_CONST_1 = 75;
          E21_CONST_2 = 51;
          E21_CONST_3 = 94;
          E21_CONST_4 = 118;
          E21_CONST_5 = 74;
        }
        repeated E21 f_0 = 1 [packed = true];
      }
      optional M55 f_51 = 51;
    }
    repeated M32 f_4 = 4;
  }
  optional M13 f_82 = 82;
  message M14 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
  }
  optional M14 f_84 = 84;
  message M15 {
    optional fixed64 f_0 = 2;
    optional double f_1 = 4;
    optional int32 f_2 = 6;
    optional string f_3 = 7;
    optional int32 f_4 = 8;
    optional int64 f_5 = 9;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 126;
      E6_CONST_2 = 87;
      E6_CONST_3 = 80;
      E6_CONST_4 = 108;
      E6_CONST_5 = 44;
    }
    repeated E6 f_6 = 11 [packed = true];
    optional bool f_7 = 12;
    optional string f_8 = 14;
    optional string f_9 = 15;
    optional string f_10 = 17;
    optional fixed32 f_11 = 18;
    message M24 {
      optional string f_0 = 3;
      message M38 {
        optional string f_0 = 2;
        optional string f_1 = 4;
      }
      optional M38 f_7 = 7;
    }
    optional M24 f_19 = 19;
  }
  repeated M15 f_86 = 86;
  message M16 {
    optional fixed64 f_0 = 1;
    message M26 {
      optional int32 f_0 = 2;
      message M42 {
        optional bool f_0 = 2;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 27;
          E17_CONST_2 = 22;
          E17_CONST_3 = 121;
          E17_CONST_4 = 32;
          E17_CONST_5 = 10;
        }
        repeated E17 f_1 = 5 [packed = true];
        optional fixed64 f_2 = 8;
      }
      optional M42 f_4 = 4;
    }
    optional M26 f_2 = 2;
  }
  optional M16 f_87 = 87;
}
