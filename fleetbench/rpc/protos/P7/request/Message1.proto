// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.request.Message1;

message Message1 {
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 78;
    E1_CONST_2 = 116;
    E1_CONST_3 = 85;
    E1_CONST_4 = 2;
    E1_CONST_5 = 115;
  }
  repeated E1 f_0 = 2 [packed = true];
  optional fixed32 f_1 = 4;
  optional string f_2 = 6;
  optional string f_3 = 8;
  optional fixed64 f_4 = 11;
  optional fixed64 f_5 = 13;
  optional fixed64 f_6 = 14;
  optional string f_7 = 15;
  optional int32 f_8 = 16;
  optional int32 f_9 = 17;
  optional string f_10 = 18;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 99;
    E2_CONST_2 = 121;
    E2_CONST_3 = 49;
    E2_CONST_4 = 1;
    E2_CONST_5 = 6;
  }
  repeated E2 f_11 = 20 [packed = true];
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 19;
    E3_CONST_2 = 2;
    E3_CONST_3 = 97;
    E3_CONST_4 = 48;
    E3_CONST_5 = 58;
  }
  optional E3 f_12 = 22;
  optional string f_13 = 23;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 28;
    E4_CONST_2 = 95;
    E4_CONST_3 = 27;
    E4_CONST_4 = 34;
    E4_CONST_5 = 6;
  }
  repeated E4 f_14 = 26 [packed = true];
  optional string f_15 = 29;
  optional int32 f_16 = 30;
  optional int32 f_17 = 31;
  optional double f_18 = 36;
  optional string f_19 = 39;
  optional string f_20 = 42;
  optional int32 f_21 = 44;
  optional fixed64 f_22 = 45;
  optional int32 f_23 = 46;
  optional fixed64 f_24 = 49;
  optional double f_25 = 51;
  optional int32 f_26 = 52;
  optional string f_27 = 54;
  enum E5 {
    E5_UNSPECIFIED = 0;
    E5_CONST_1 = 26;
    E5_CONST_2 = 73;
    E5_CONST_3 = 31;
    E5_CONST_4 = 125;
    E5_CONST_5 = 25;
  }
  optional E5 f_28 = 56;
  message M1 {
    optional fixed64 f_0 = 3;
    message M9 {
      optional fixed64 f_0 = 2;
      optional bool f_1 = 5;
      optional fixed64 f_2 = 6;
      optional fixed64 f_3 = 7;
      message M50 {
        optional string f_0 = 2;
      }
      optional M50 f_8 = 8;
    }
    optional M9 f_5 = 5;
    message M12 {
      optional string f_0 = 3;
    }
    repeated M12 f_7 = 7;
    message M15 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 6;
      message M32 {
        optional int32 f_0 = 2;
      }
      optional M32 f_9 = 9;
    }
    repeated M15 f_8 = 8;
    message M22 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 5;
      optional int32 f_3 = 7;
      optional int32 f_4 = 9;
      optional int32 f_5 = 11;
      optional fixed64 f_6 = 13;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 49;
        E14_CONST_2 = 60;
        E14_CONST_3 = 78;
        E14_CONST_4 = 10;
        E14_CONST_5 = 98;
      }
      repeated E14 f_7 = 14 [packed = true];
      message M46 {
        optional int32 f_0 = 1;
      }
      optional M46 f_16 = 16;
    }
    repeated M22 f_10 = 10;
    message M25 {
      optional int64 f_0 = 3;
      message M42 {
        optional fixed64 f_0 = 3;
      }
      repeated M42 f_4 = 4;
    }
    optional M25 f_11 = 11;
    message M30 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 5;
      enum E16 {
        E16_UNSPECIFIED = 0;
        E16_CONST_1 = 9;
        E16_CONST_2 = 20;
        E16_CONST_3 = 60;
        E16_CONST_4 = 61;
        E16_CONST_5 = 12;
      }
      repeated E16 f_3 = 6 [packed = true];
      optional fixed64 f_4 = 8;
      optional string f_5 = 10;
    }
    optional M30 f_13 = 13;
  }
  repeated M1 f_60 = 60;
  message M2 {
    optional int32 f_0 = 1;
    optional bool f_1 = 3;
    optional int32 f_2 = 5;
    optional string f_3 = 7;
    optional int32 f_4 = 9;
    optional fixed64 f_5 = 10;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 68;
      E6_CONST_2 = 23;
      E6_CONST_3 = 122;
      E6_CONST_4 = 91;
      E6_CONST_5 = 35;
    }
    optional E6 f_6 = 11;
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 86;
      E7_CONST_2 = 66;
      E7_CONST_3 = 64;
      E7_CONST_4 = 74;
      E7_CONST_5 = 112;
    }
    repeated E7 f_7 = 12 [packed = true];
    optional bool f_8 = 14;
    message M13 {
      optional bool f_0 = 2;
      optional string f_1 = 4;
      message M31 {
        optional string f_0 = 3;
        optional int32 f_1 = 5;
      }
      optional M31 f_5 = 5;
      message M38 {
        optional fixed32 f_0 = 2;
      }
      repeated M38 f_6 = 6;
    }
    optional M13 f_17 = 17;
    message M14 {
      optional int32 f_0 = 1;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 64;
        E10_CONST_2 = 68;
        E10_CONST_3 = 66;
        E10_CONST_4 = 17;
        E10_CONST_5 = 98;
      }
      repeated E10 f_1 = 2 [packed = true];
      message M44 {
        optional fixed64 f_0 = 1;
        message M58 {
          optional int32 f_0 = 1;
        }
        optional M58 f_2 = 2;
      }
      optional M44 f_4 = 4;
    }
    repeated M14 f_18 = 18;
    message M19 {
      optional bool f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 5;
      optional int32 f_3 = 6;
    }
    optional M19 f_21 = 21;
    message M20 {
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 15;
        E13_CONST_2 = 18;
        E13_CONST_3 = 81;
        E13_CONST_4 = 51;
        E13_CONST_5 = 106;
      }
      repeated E13 f_0 = 2 [packed = true];
      optional fixed32 f_1 = 3;
      optional string f_2 = 5;
      message M34 {
        optional bool f_0 = 2;
        optional fixed64 f_1 = 4;
        optional bool f_2 = 5;
        optional int32 f_3 = 6;
        optional fixed64 f_4 = 7;
        optional double f_5 = 8;
      }
      repeated M34 f_8 = 8;
      message M45 {
        optional string f_0 = 2;
        optional string f_1 = 6;
        optional int32 f_2 = 10;
        optional fixed64 f_3 = 11;
        optional fixed64 f_4 = 13;
        message M59 {
          optional fixed32 f_0 = 2;
          optional int32 f_1 = 4;
          optional fixed64 f_2 = 5;
        }
        optional M59 f_15 = 15;
      }
      optional M45 f_9 = 9;
    }
    repeated M20 f_23 = 23;
    message M28 {
      optional string f_0 = 1;
    }
    optional M28 f_25 = 25;
  }
  optional M2 f_61 = 61;
  message M3 {
    optional int32 f_0 = 1;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 77;
      E8_CONST_2 = 16;
      E8_CONST_3 = 8;
      E8_CONST_4 = 70;
      E8_CONST_5 = 31;
    }
    repeated E8 f_1 = 2 [packed = true];
    optional fixed64 f_2 = 5;
    optional fixed64 f_3 = 7;
    optional string f_4 = 9;
    optional string f_5 = 10;
    message M17 {
      optional int32 f_0 = 2;
      message M36 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 5;
        message M62 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 3;
          optional string f_2 = 4;
          optional fixed32 f_3 = 6;
          optional int32 f_4 = 10;
        }
        repeated M62 f_7 = 7;
      }
      repeated M36 f_5 = 5;
    }
    repeated M17 f_12 = 12;
    message M26 {
      optional bool f_0 = 3;
      optional int32 f_1 = 4;
    }
    optional M26 f_13 = 13;
    message M29 {
      optional fixed32 f_0 = 1;
      message M37 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 5;
        message M61 {
          enum E23 {
            E23_UNSPECIFIED = 0;
            E23_CONST_1 = 79;
            E23_CONST_2 = 120;
            E23_CONST_3 = 121;
            E23_CONST_4 = 87;
            E23_CONST_5 = 38;
          }
          repeated E23 f_0 = 3 [packed = true];
          enum E24 {
            E24_UNSPECIFIED = 0;
            E24_CONST_1 = 71;
            E24_CONST_2 = 100;
            E24_CONST_3 = 89;
            E24_CONST_4 = 49;
            E24_CONST_5 = 22;
          }
          optional E24 f_1 = 5;
          optional fixed32 f_2 = 7;
          optional int32 f_3 = 9;
        }
        optional M61 f_7 = 7;
      }
      optional M37 f_4 = 4;
    }
    optional M29 f_15 = 15;
  }
  optional M3 f_65 = 65;
  message M4 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 5;
    optional int32 f_2 = 7;
    optional int32 f_3 = 9;
    optional string f_4 = 11;
    optional string f_5 = 13;
    optional fixed32 f_6 = 14;
  }
  repeated M4 f_66 = 66;
  message M5 {
    optional fixed32 f_0 = 2;
    optional fixed64 f_1 = 4;
    optional bool f_2 = 5;
    optional bool f_3 = 6;
    message M10 {
      optional fixed64 f_0 = 1;
    }
    repeated M10 f_10 = 10;
    message M11 {
      optional int32 f_0 = 1;
    }
    repeated M11 f_11 = 11;
  }
  optional M5 f_67 = 67;
  message M6 {
    optional fixed64 f_0 = 2;
    message M16 {
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 81;
        E11_CONST_2 = 79;
        E11_CONST_3 = 33;
        E11_CONST_4 = 122;
        E11_CONST_5 = 78;
      }
      repeated E11 f_0 = 1 [packed = true];
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional bool f_3 = 6;
      optional fixed64 f_4 = 7;
      optional fixed32 f_5 = 9;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 61;
        E12_CONST_2 = 51;
        E12_CONST_3 = 99;
        E12_CONST_4 = 112;
        E12_CONST_5 = 39;
      }
      repeated E12 f_6 = 10 [packed = true];
      message M39 {
        optional bool f_0 = 2;
      }
      optional M39 f_12 = 12;
      message M40 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 2;
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 85;
          E18_CONST_2 = 44;
          E18_CONST_3 = 51;
          E18_CONST_4 = 68;
          E18_CONST_5 = 93;
        }
        repeated E18 f_2 = 3 [packed = true];
        optional int32 f_3 = 5;
        message M55 {
          enum E22 {
            E22_UNSPECIFIED = 0;
            E22_CONST_1 = 61;
            E22_CONST_2 = 90;
            E22_CONST_3 = 59;
            E22_CONST_4 = 56;
            E22_CONST_5 = 98;
          }
          repeated E22 f_0 = 1 [packed = true];
        }
        optional M55 f_6 = 6;
      }
      optional M40 f_14 = 14;
      message M47 {
        optional string f_0 = 2;
        optional bool f_1 = 3;
        optional string f_2 = 4;
        optional double f_3 = 6;
      }
      optional M47 f_17 = 17;
    }
    optional M16 f_4 = 4;
    message M27 {
      enum E15 {
        E15_UNSPECIFIED = 0;
        E15_CONST_1 = 120;
        E15_CONST_2 = 116;
        E15_CONST_3 = 52;
        E15_CONST_4 = 68;
        E15_CONST_5 = 121;
      }
      optional E15 f_0 = 2;
      message M33 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 3;
        optional int64 f_2 = 6;
        optional double f_3 = 7;
      }
      optional M33 f_3 = 3;
      message M48 {
        optional fixed64 f_0 = 2;
        optional double f_1 = 3;
        optional int32 f_2 = 5;
        enum E20 {
          E20_UNSPECIFIED = 0;
          E20_CONST_1 = 53;
          E20_CONST_2 = 92;
          E20_CONST_3 = 114;
          E20_CONST_4 = 43;
          E20_CONST_5 = 34;
        }
        optional E20 f_3 = 6;
        message M54 {
          optional bool f_0 = 2;
          optional string f_1 = 4;
          optional int32 f_2 = 8;
        }
        optional M54 f_8 = 8;
        message M60 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 3;
          optional fixed64 f_2 = 5;
        }
        optional M60 f_10 = 10;
      }
      optional M48 f_4 = 4;
    }
    optional M27 f_6 = 6;
  }
  optional M6 f_68 = 68;
  message M7 {
    optional fixed64 f_0 = 1;
    message M21 {
      optional fixed64 f_0 = 1;
      message M35 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 5;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 21;
          E17_CONST_2 = 19;
          E17_CONST_3 = 15;
          E17_CONST_4 = 29;
          E17_CONST_5 = 118;
        }
        repeated E17 f_2 = 6 [packed = true];
        optional string f_3 = 8;
        optional fixed64 f_4 = 9;
        message M53 {
          optional bool f_0 = 2;
          optional int32 f_1 = 3;
          optional string f_2 = 5;
        }
        optional M53 f_12 = 12;
      }
      optional M35 f_2 = 2;
      message M52 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 4;
        optional string f_2 = 5;
        optional string f_3 = 6;
        optional string f_4 = 7;
        optional string f_5 = 8;
        optional bool f_6 = 10;
        optional fixed64 f_7 = 11;
        optional string f_8 = 13;
        optional fixed64 f_9 = 14;
        optional int32 f_10 = 16;
        optional fixed64 f_11 = 18;
        optional fixed32 f_12 = 19;
        optional fixed64 f_13 = 20;
        optional double f_14 = 22;
        optional fixed64 f_15 = 23;
        optional double f_16 = 25;
        optional bool f_17 = 28;
        enum E21 {
          E21_UNSPECIFIED = 0;
          E21_CONST_1 = 71;
          E21_CONST_2 = 120;
          E21_CONST_3 = 46;
          E21_CONST_4 = 98;
          E21_CONST_5 = 105;
        }
        optional E21 f_18 = 31;
        optional bool f_19 = 32;
        optional fixed64 f_20 = 33;
        optional fixed64 f_21 = 34;
        optional fixed64 f_22 = 37;
        optional fixed64 f_23 = 40;
        optional double f_24 = 41;
        optional int32 f_25 = 43;
        optional fixed32 f_26 = 44;
        optional string f_27 = 45;
        optional string f_28 = 47;
        optional fixed64 f_29 = 50;
        optional string f_30 = 51;
      }
      optional M52 f_6 = 6;
    }
    repeated M21 f_4 = 4;
    message M23 {
      optional fixed64 f_0 = 2;
      optional fixed32 f_1 = 4;
      optional fixed64 f_2 = 6;
      optional string f_3 = 7;
      optional string f_4 = 8;
      message M41 {
        optional string f_0 = 1;
      }
      optional M41 f_9 = 9;
    }
    optional M23 f_6 = 6;
  }
  optional M7 f_71 = 71;
  message M8 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 2;
    optional string f_2 = 4;
    enum E9 {
      E9_UNSPECIFIED = 0;
      E9_CONST_1 = 120;
      E9_CONST_2 = 7;
      E9_CONST_3 = 95;
      E9_CONST_4 = 110;
      E9_CONST_5 = 100;
    }
    repeated E9 f_3 = 5 [packed = true];
    message M18 {
      optional double f_0 = 2;
      message M43 {
        optional fixed64 f_0 = 3;
        optional int32 f_1 = 5;
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 47;
          E19_CONST_2 = 73;
          E19_CONST_3 = 63;
          E19_CONST_4 = 94;
          E19_CONST_5 = 54;
        }
        repeated E19 f_2 = 6 [packed = true];
        optional string f_3 = 8;
        optional int32 f_4 = 11;
        optional int32 f_5 = 13;
        message M57 {
          optional fixed64 f_0 = 2;
          message M63 {
            enum E25 {
              E25_UNSPECIFIED = 0;
              E25_CONST_1 = 15;
              E25_CONST_2 = 106;
              E25_CONST_3 = 48;
              E25_CONST_4 = 67;
              E25_CONST_5 = 53;
            }
            repeated E25 f_0 = 1 [packed = true];
            message M65 {
              optional int64 f_0 = 2;
              optional bool f_1 = 3;
              optional double f_2 = 4;
              optional int32 f_3 = 5;
            }
            optional M65 f_3 = 3;
          }
          optional M63 f_4 = 4;
        }
        repeated M57 f_15 = 15;
      }
      optional M43 f_4 = 4;
      message M49 {
        optional string f_0 = 1;
      }
      optional M49 f_5 = 5;
    }
    optional M18 f_7 = 7;
    message M24 {
      optional int64 f_0 = 1;
      optional int32 f_1 = 5;
      optional fixed64 f_2 = 6;
      optional fixed32 f_3 = 7;
      optional bool f_4 = 8;
      optional fixed32 f_5 = 9;
      optional string f_6 = 12;
      message M51 {
        optional fixed64 f_0 = 4;
        message M56 {
          optional fixed32 f_0 = 1;
          optional int32 f_1 = 6;
          optional int32 f_2 = 9;
          message M64 {
            optional string f_0 = 1;
            optional fixed64 f_1 = 3;
            optional int32 f_2 = 5;
            optional string f_3 = 8;
            optional string f_4 = 10;
            optional fixed64 f_5 = 11;
            optional int32 f_6 = 12;
            optional bool f_7 = 13;
            optional int64 f_8 = 15;
            optional fixed64 f_9 = 16;
            optional fixed32 f_10 = 17;
            optional fixed64 f_11 = 19;
            optional int32 f_12 = 20;
            optional int64 f_13 = 21;
            optional double f_14 = 23;
            optional int32 f_15 = 24;
            optional fixed64 f_16 = 27;
            optional int64 f_17 = 28;
            optional fixed64 f_18 = 31;
            optional fixed32 f_19 = 32;
            optional string f_20 = 33;
            enum E26 {
              E26_UNSPECIFIED = 0;
              E26_CONST_1 = 16;
              E26_CONST_2 = 67;
              E26_CONST_3 = 115;
              E26_CONST_4 = 89;
              E26_CONST_5 = 106;
            }
            repeated E26 f_21 = 34 [packed = true];
            optional string f_22 = 35;
            optional string f_23 = 36;
            optional fixed64 f_24 = 37;
            optional string f_25 = 38;
            optional string f_26 = 41;
            optional string f_27 = 43;
            optional int32 f_28 = 44;
            optional fixed32 f_29 = 48;
            enum E27 {
              E27_UNSPECIFIED = 0;
              E27_CONST_1 = 12;
              E27_CONST_2 = 37;
              E27_CONST_3 = 93;
              E27_CONST_4 = 78;
              E27_CONST_5 = 96;
            }
            repeated E27 f_30 = 51 [packed = true];
            optional int32 f_31 = 53;
          }
          optional M64 f_10 = 10;
        }
        repeated M56 f_5 = 5;
      }
      optional M51 f_14 = 14;
    }
    optional M24 f_8 = 8;
  }
  optional M8 f_72 = 72;
}
