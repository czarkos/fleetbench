// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.request.Message1;

message Message1 {
  optional int32 f_0 = 1;
  optional int32 f_1 = 3;
  optional int32 f_2 = 5;
  optional bool f_3 = 6;
  optional int32 f_4 = 8;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 10;
    E1_CONST_2 = 14;
    E1_CONST_3 = 55;
    E1_CONST_4 = 102;
    E1_CONST_5 = 13;
  }
  repeated E1 f_5 = 9 [packed = true];
  optional fixed64 f_6 = 10;
  optional string f_7 = 12;
  optional bool f_8 = 14;
  optional fixed64 f_9 = 18;
  optional string f_10 = 21;
  optional fixed64 f_11 = 24;
  optional int32 f_12 = 26;
  optional string f_13 = 29;
  optional fixed64 f_14 = 34;
  optional fixed64 f_15 = 35;
  optional int32 f_16 = 38;
  optional fixed64 f_17 = 39;
  optional fixed64 f_18 = 40;
  optional int32 f_19 = 42;
  optional fixed64 f_20 = 43;
  optional fixed64 f_21 = 44;
  optional int64 f_22 = 45;
  optional fixed64 f_23 = 47;
  optional string f_24 = 48;
  optional fixed64 f_25 = 49;
  optional fixed32 f_26 = 51;
  optional int64 f_27 = 52;
  optional string f_28 = 53;
  optional int32 f_29 = 54;
  message M1 {
    optional fixed64 f_0 = 2;
    optional int32 f_1 = 4;
    optional fixed64 f_2 = 6;
    message M22 {
      optional int32 f_0 = 1;
    }
    repeated M22 f_8 = 8;
  }
  optional M1 f_56 = 56;
  message M2 {
    optional int32 f_0 = 1;
    message M20 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional bool f_2 = 6;
      optional int32 f_3 = 7;
      message M51 {
        optional string f_0 = 2;
      }
      optional M51 f_9 = 9;
    }
    optional M20 f_3 = 3;
  }
  optional M2 f_57 = 57;
  message M3 {
    optional int32 f_0 = 1;
    message M32 {
      optional int32 f_0 = 2;
      message M48 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 5;
        optional fixed64 f_3 = 6;
      }
      optional M48 f_3 = 3;
    }
    optional M32 f_3 = 3;
    message M34 {
      optional int32 f_0 = 1;
      optional fixed32 f_1 = 3;
      message M52 {
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 80;
          E12_CONST_2 = 11;
          E12_CONST_3 = 34;
          E12_CONST_4 = 36;
          E12_CONST_5 = 116;
        }
        optional E12 f_0 = 2;
        optional string f_1 = 4;
        message M70 {
          repeated int32 f_0 = 1 [packed = true];
          message M77 {
            optional string f_0 = 2;
          }
          repeated M77 f_4 = 4;
          message M84 {
            optional string f_0 = 1;
            optional fixed64 f_1 = 3;
            optional double f_2 = 5;
            message M88 {
              optional string f_0 = 2;
              optional fixed64 f_1 = 3;
            }
            optional M88 f_6 = 6;
          }
          optional M84 f_7 = 7;
        }
        repeated M70 f_5 = 5;
      }
      optional M52 f_4 = 4;
    }
    repeated M34 f_5 = 5;
  }
  optional M3 f_60 = 60;
  message M4 {
    optional string f_0 = 2;
    message M16 {
      optional fixed64 f_0 = 2;
      optional bool f_1 = 4;
      message M55 {
        optional string f_0 = 2;
      }
      optional M55 f_6 = 6;
    }
    optional M16 f_4 = 4;
    message M24 {
      optional int32 f_0 = 1;
      message M56 {
        optional fixed64 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 5;
        optional int32 f_3 = 8;
        optional fixed64 f_4 = 9;
        optional fixed64 f_5 = 11;
      }
      optional M56 f_3 = 3;
    }
    optional M24 f_5 = 5;
    message M33 {
      optional fixed64 f_0 = 1;
      message M54 {
        optional int32 f_0 = 2;
        message M63 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 2;
          optional string f_2 = 3;
          optional fixed64 f_3 = 4;
        }
        optional M63 f_3 = 3;
      }
      repeated M54 f_5 = 5;
    }
    repeated M33 f_7 = 7;
    message M35 {
      optional int32 f_0 = 1;
      optional fixed32 f_1 = 3;
      optional int32 f_2 = 5;
      optional fixed64 f_3 = 6;
      optional fixed64 f_4 = 8;
      optional string f_5 = 10;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 15;
        E9_CONST_2 = 119;
        E9_CONST_3 = 49;
        E9_CONST_4 = 81;
        E9_CONST_5 = 109;
      }
      repeated E9 f_6 = 11 [packed = true];
      optional string f_7 = 13;
      optional int32 f_8 = 15;
      optional int32 f_9 = 16;
      optional fixed64 f_10 = 17;
      optional int32 f_11 = 18;
      optional int64 f_12 = 20;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 31;
        E10_CONST_2 = 85;
        E10_CONST_3 = 115;
        E10_CONST_4 = 98;
        E10_CONST_5 = 76;
      }
      optional E10 f_13 = 21;
      optional bool f_14 = 23;
      message M58 {
        optional fixed64 f_0 = 3;
        optional bool f_1 = 5;
        optional int32 f_2 = 6;
        optional int32 f_3 = 8;
        optional fixed64 f_4 = 11;
        optional fixed64 f_5 = 14;
        optional string f_6 = 16;
        optional int32 f_7 = 18;
        optional bool f_8 = 19;
        optional int32 f_9 = 21;
        optional int32 f_10 = 24;
        optional double f_11 = 25;
        optional fixed64 f_12 = 26;
        optional int32 f_13 = 27;
        optional int32 f_14 = 28;
        optional int32 f_15 = 30;
        optional fixed32 f_16 = 31;
        optional int32 f_17 = 32;
        optional string f_18 = 34;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 58;
          E13_CONST_2 = 20;
          E13_CONST_3 = 96;
          E13_CONST_4 = 98;
          E13_CONST_5 = 3;
        }
        repeated E13 f_19 = 35 [packed = true];
        optional string f_20 = 36;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 118;
          E14_CONST_2 = 60;
          E14_CONST_3 = 79;
          E14_CONST_4 = 30;
          E14_CONST_5 = 15;
        }
        repeated E14 f_21 = 38 [packed = true];
        optional string f_22 = 39;
        optional fixed64 f_23 = 44;
        optional fixed64 f_24 = 45;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 120;
          E15_CONST_2 = 68;
          E15_CONST_3 = 83;
          E15_CONST_4 = 5;
          E15_CONST_5 = 75;
        }
        optional E15 f_25 = 46;
        optional fixed64 f_26 = 48;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 118;
          E16_CONST_2 = 78;
          E16_CONST_3 = 58;
          E16_CONST_4 = 74;
          E16_CONST_5 = 27;
        }
        repeated E16 f_27 = 50 [packed = true];
        optional bool f_28 = 52;
        optional fixed32 f_29 = 53;
        optional string f_30 = 54;
        optional fixed64 f_31 = 58;
      }
      optional M58 f_25 = 25;
    }
    optional M35 f_8 = 8;
  }
  optional M4 f_62 = 62;
  message M5 {
    optional bool f_0 = 1;
    optional bool f_1 = 3;
    optional int32 f_2 = 4;
    optional bool f_3 = 5;
    optional string f_4 = 6;
    optional string f_5 = 7;
    optional string f_6 = 8;
    optional int32 f_7 = 9;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 114;
      E2_CONST_2 = 31;
      E2_CONST_3 = 17;
      E2_CONST_4 = 100;
      E2_CONST_5 = 44;
    }
    repeated E2 f_8 = 11 [packed = true];
    optional fixed64 f_9 = 13;
    optional bool f_10 = 15;
    optional int32 f_11 = 17;
    optional fixed32 f_12 = 18;
    message M19 {
      optional fixed64 f_0 = 4;
      message M59 {
        optional fixed64 f_0 = 2;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 6;
        optional fixed32 f_3 = 7;
        message M72 {
          optional fixed32 f_0 = 1;
          optional fixed64 f_1 = 2;
        }
        optional M72 f_9 = 9;
      }
      optional M59 f_5 = 5;
    }
    optional M19 f_19 = 19;
    message M40 {
      optional int32 f_0 = 1;
      message M49 {
        optional string f_0 = 2;
        optional fixed64 f_1 = 3;
        optional bool f_2 = 6;
        optional fixed64 f_3 = 7;
        optional string f_4 = 9;
        optional int32 f_5 = 12;
        optional int32 f_6 = 13;
        optional fixed64 f_7 = 14;
        optional double f_8 = 15;
        optional fixed64 f_9 = 17;
        optional bool f_10 = 18;
        optional string f_11 = 20;
        optional string f_12 = 21;
        optional string f_13 = 22;
        optional int32 f_14 = 23;
        message M71 {
          optional string f_0 = 1;
          message M76 {
            optional fixed64 f_0 = 3;
            optional fixed64 f_1 = 4;
            optional fixed32 f_2 = 5;
            optional string f_3 = 7;
            optional int32 f_4 = 8;
            optional int64 f_5 = 9;
            message M86 {
              optional string f_0 = 2;
              optional int32 f_1 = 3;
            }
            optional M86 f_11 = 11;
          }
          optional M76 f_4 = 4;
        }
        repeated M71 f_25 = 25;
        message M73 {
          optional bool f_0 = 3;
          optional fixed64 f_1 = 5;
          message M78 {
            optional fixed64 f_0 = 1;
          }
          optional M78 f_7 = 7;
        }
        optional M73 f_26 = 26;
      }
      optional M49 f_3 = 3;
      message M50 {
        optional fixed64 f_0 = 2;
        message M65 {
          optional int32 f_0 = 2;
          optional fixed64 f_1 = 3;
          message M83 {
            optional string f_0 = 2;
            message M87 {
              optional int64 f_0 = 1;
            }
            repeated M87 f_3 = 3;
          }
          optional M83 f_5 = 5;
        }
        optional M65 f_4 = 4;
      }
      optional M50 f_5 = 5;
    }
    optional M40 f_20 = 20;
    message M42 {
      optional bool f_0 = 2;
      optional int32 f_1 = 3;
      optional fixed64 f_2 = 6;
      optional int32 f_3 = 7;
      optional fixed32 f_4 = 8;
      optional string f_5 = 10;
      optional string f_6 = 11;
      optional int64 f_7 = 12;
      optional string f_8 = 13;
      optional int32 f_9 = 14;
      optional string f_10 = 15;
      optional int64 f_11 = 16;
      optional bool f_12 = 17;
      optional fixed64 f_13 = 18;
      optional int32 f_14 = 21;
      optional int32 f_15 = 23;
      optional fixed64 f_16 = 24;
      optional fixed32 f_17 = 25;
      optional int32 f_18 = 26;
      optional fixed64 f_19 = 28;
      optional string f_20 = 30;
      optional int32 f_21 = 33;
      optional fixed64 f_22 = 35;
      optional int32 f_23 = 37;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 21;
        E11_CONST_2 = 68;
        E11_CONST_3 = 126;
        E11_CONST_4 = 51;
        E11_CONST_5 = 22;
      }
      optional E11 f_24 = 39;
      optional bool f_25 = 42;
      optional int32 f_26 = 43;
      optional fixed32 f_27 = 48;
      message M46 {
        optional string f_0 = 2;
        message M66 {
          optional int32 f_0 = 1;
          optional string f_1 = 3;
          optional fixed64 f_2 = 6;
          optional fixed64 f_3 = 7;
          optional fixed64 f_4 = 8;
          optional string f_5 = 9;
          optional string f_6 = 12;
        }
        optional M66 f_4 = 4;
        message M67 {
          optional string f_0 = 2;
        }
        optional M67 f_5 = 5;
      }
      optional M46 f_49 = 49;
    }
    optional M42 f_21 = 21;
  }
  optional M5 f_64 = 64;
  message M6 {
    optional string f_0 = 1;
    message M17 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 3;
      optional bool f_2 = 4;
      optional string f_3 = 5;
      message M47 {
        optional string f_0 = 1;
      }
      repeated M47 f_6 = 6;
    }
    optional M17 f_3 = 3;
    message M26 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional fixed32 f_2 = 4;
      optional int32 f_3 = 5;
      optional bool f_4 = 7;
    }
    optional M26 f_5 = 5;
    message M27 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 1;
        E6_CONST_2 = 20;
        E6_CONST_3 = 97;
        E6_CONST_4 = 92;
        E6_CONST_5 = 91;
      }
      optional E6 f_0 = 2;
    }
    optional M27 f_7 = 7;
  }
  repeated M6 f_65 = 65;
  message M7 {
    optional bool f_0 = 1;
    optional double f_1 = 2;
    message M31 {
      optional string f_0 = 4;
      optional int32 f_1 = 6;
      optional fixed64 f_2 = 8;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 43;
        E8_CONST_2 = 126;
        E8_CONST_3 = 120;
        E8_CONST_4 = 73;
        E8_CONST_5 = 105;
      }
      optional E8 f_3 = 9;
    }
    optional M31 f_3 = 3;
    message M36 {
      optional fixed32 f_0 = 3;
      optional string f_1 = 4;
      message M57 {
        optional fixed64 f_0 = 4;
        optional double f_1 = 5;
        optional fixed64 f_2 = 7;
        optional string f_3 = 9;
        message M62 {
          optional int32 f_0 = 2;
          message M81 {
            optional bool f_0 = 2;
          }
          optional M81 f_4 = 4;
        }
        optional M62 f_10 = 10;
      }
      repeated M57 f_5 = 5;
    }
    optional M36 f_4 = 4;
    message M41 {
      optional bool f_0 = 3;
      optional bool f_1 = 4;
      optional int64 f_2 = 6;
      optional fixed64 f_3 = 7;
    }
    optional M41 f_5 = 5;
  }
  optional M7 f_68 = 68;
  message M8 {
    optional fixed64 f_0 = 2;
    message M37 {
      optional string f_0 = 1;
      message M44 {
        optional string f_0 = 3;
        message M74 {
          optional fixed64 f_0 = 3;
          optional int32 f_1 = 5;
          optional int32 f_2 = 7;
          optional bool f_3 = 11;
          optional int32 f_4 = 12;
          optional string f_5 = 13;
          optional fixed64 f_6 = 14;
          optional string f_7 = 15;
          optional fixed64 f_8 = 17;
          optional double f_9 = 20;
          optional fixed64 f_10 = 22;
          optional string f_11 = 24;
          optional bool f_12 = 25;
          optional int32 f_13 = 26;
          optional double f_14 = 29;
          optional bool f_15 = 30;
          optional int32 f_16 = 32;
          optional string f_17 = 34;
          optional int64 f_18 = 35;
          optional string f_19 = 38;
          optional bool f_20 = 39;
          optional fixed32 f_21 = 41;
          optional int32 f_22 = 42;
          optional fixed64 f_23 = 43;
          optional string f_24 = 45;
          optional fixed64 f_25 = 47;
          optional fixed64 f_26 = 48;
          optional int32 f_27 = 49;
          optional int32 f_28 = 51;
          optional string f_29 = 53;
        }
        repeated M74 f_4 = 4;
      }
      repeated M44 f_2 = 2;
    }
    optional M37 f_3 = 3;
    message M39 {
      optional fixed64 f_0 = 1;
    }
    optional M39 f_4 = 4;
  }
  optional M8 f_70 = 70;
  message M9 {
    optional string f_0 = 1;
  }
  optional M9 f_71 = 71;
  message M10 {
    optional bool f_0 = 2;
    message M23 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 12;
        E4_CONST_2 = 120;
        E4_CONST_3 = 64;
        E4_CONST_4 = 7;
        E4_CONST_5 = 87;
      }
      repeated E4 f_0 = 1 [packed = true];
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 5;
      optional string f_3 = 6;
      optional fixed64 f_4 = 7;
      optional string f_5 = 8;
      optional int64 f_6 = 10;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 20;
        E5_CONST_2 = 74;
        E5_CONST_3 = 35;
        E5_CONST_4 = 123;
        E5_CONST_5 = 14;
      }
      repeated E5 f_7 = 11 [packed = true];
    }
    optional M23 f_3 = 3;
  }
  optional M10 f_72 = 72;
  message M11 {
    optional string f_0 = 1;
    message M18 {
      optional string f_0 = 3;
      message M53 {
        optional fixed64 f_0 = 2;
        optional bool f_1 = 3;
        optional int32 f_2 = 4;
      }
      optional M53 f_4 = 4;
      message M60 {
        optional string f_0 = 2;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 69;
          E17_CONST_2 = 71;
          E17_CONST_3 = 29;
          E17_CONST_4 = 70;
          E17_CONST_5 = 45;
        }
        repeated E17 f_1 = 4 [packed = true];
      }
      repeated M60 f_6 = 6;
    }
    repeated M18 f_3 = 3;
    message M25 {
      optional int32 f_0 = 2;
      message M45 {
        optional fixed64 f_0 = 2;
        message M68 {
          optional int32 f_0 = 2;
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 6;
            E18_CONST_2 = 64;
            E18_CONST_3 = 25;
            E18_CONST_4 = 21;
            E18_CONST_5 = 42;
          }
          optional E18 f_1 = 3;
          optional string f_2 = 4;
          optional string f_3 = 5;
          message M75 {
            optional string f_0 = 3;
            optional fixed64 f_1 = 4;
            optional string f_2 = 5;
            optional int32 f_3 = 6;
            optional int32 f_4 = 8;
          }
          optional M75 f_6 = 6;
          message M79 {
            optional bool f_0 = 3;
            optional string f_1 = 4;
            optional int32 f_2 = 6;
            optional int32 f_3 = 7;
            optional fixed32 f_4 = 9;
          }
          optional M79 f_8 = 8;
          message M80 {
            optional bool f_0 = 2;
            message M85 {
              optional string f_0 = 2;
            }
            optional M85 f_3 = 3;
          }
          optional M80 f_10 = 10;
        }
        optional M68 f_4 = 4;
        message M69 {
          optional string f_0 = 1;
          message M82 {
            optional int32 f_0 = 1;
            optional string f_1 = 3;
            optional fixed64 f_2 = 4;
            optional fixed64 f_3 = 5;
            optional int64 f_4 = 6;
            optional double f_5 = 7;
          }
          optional M82 f_3 = 3;
        }
        optional M69 f_5 = 5;
      }
      optional M45 f_3 = 3;
    }
    optional M25 f_4 = 4;
  }
  optional M11 f_74 = 74;
  message M12 {
    optional int32 f_0 = 3;
    message M28 {
      optional string f_0 = 1;
    }
    repeated M28 f_4 = 4;
  }
  optional M12 f_77 = 77;
  message M13 {
    optional int64 f_0 = 1;
    optional fixed64 f_1 = 4;
    optional int32 f_2 = 7;
    message M21 {
      optional int64 f_0 = 1;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 5;
      optional fixed64 f_3 = 6;
      optional int32 f_4 = 9;
    }
    optional M21 f_8 = 8;
    message M38 {
      optional string f_0 = 2;
      optional int64 f_1 = 3;
    }
    optional M38 f_9 = 9;
  }
  optional M13 f_78 = 78;
  message M14 {
    optional string f_0 = 4;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 116;
      E3_CONST_2 = 19;
      E3_CONST_3 = 88;
      E3_CONST_4 = 48;
      E3_CONST_5 = 40;
    }
    repeated E3 f_1 = 6 [packed = true];
    optional fixed64 f_2 = 7;
    optional fixed64 f_3 = 9;
    optional fixed64 f_4 = 11;
    optional int64 f_5 = 13;
    message M15 {
      optional fixed64 f_0 = 1;
    }
    optional M15 f_14 = 14;
    message M29 {
      optional fixed64 f_0 = 1;
    }
    optional M29 f_16 = 16;
    message M30 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 3;
      optional string f_2 = 4;
      optional bool f_3 = 6;
      optional fixed32 f_4 = 7;
      optional bool f_5 = 9;
      optional string f_6 = 10;
      optional bool f_7 = 11;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 37;
        E7_CONST_2 = 52;
        E7_CONST_3 = 18;
        E7_CONST_4 = 31;
        E7_CONST_5 = 85;
      }
      optional E7 f_8 = 12;
      optional string f_9 = 13;
      optional double f_10 = 15;
      message M43 {
        optional int32 f_0 = 1;
        message M61 {
          optional fixed64 f_0 = 1;
        }
        repeated M61 f_3 = 3;
        message M64 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed64 f_2 = 3;
        }
        repeated M64 f_5 = 5;
      }
      optional M43 f_16 = 16;
    }
    optional M30 f_19 = 19;
  }
  optional M14 f_80 = 80;
}
