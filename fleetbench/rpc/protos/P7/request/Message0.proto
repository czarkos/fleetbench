// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.request.Message0;

message Message0 {
  optional double f_0 = 1;
  optional int32 f_1 = 3;
  optional fixed64 f_2 = 4;
  optional string f_3 = 6;
  optional fixed64 f_4 = 8;
  optional string f_5 = 11;
  optional string f_6 = 14;
  optional int32 f_7 = 15;
  optional int32 f_8 = 16;
  optional string f_9 = 17;
  optional int32 f_10 = 19;
  optional string f_11 = 20;
  optional bool f_12 = 21;
  optional string f_13 = 24;
  optional string f_14 = 26;
  optional int32 f_15 = 28;
  optional int32 f_16 = 29;
  optional int32 f_17 = 31;
  optional string f_18 = 32;
  optional fixed64 f_19 = 33;
  optional fixed64 f_20 = 34;
  optional fixed64 f_21 = 35;
  optional string f_22 = 36;
  optional string f_23 = 38;
  optional fixed64 f_24 = 39;
  optional int32 f_25 = 40;
  optional int32 f_26 = 44;
  optional bool f_27 = 45;
  optional fixed64 f_28 = 47;
  optional bool f_29 = 48;
  message M1 {
    optional fixed64 f_0 = 1;
    message M7 {
      optional int64 f_0 = 1;
      optional fixed64 f_1 = 5;
      optional int32 f_2 = 6;
      optional int32 f_3 = 7;
      optional fixed64 f_4 = 8;
      message M41 {
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 116;
          E6_CONST_2 = 91;
          E6_CONST_3 = 30;
          E6_CONST_4 = 24;
          E6_CONST_5 = 68;
        }
        repeated E6 f_0 = 2 [packed = true];
        optional fixed64 f_1 = 3;
        optional string f_2 = 4;
        optional string f_3 = 5;
        optional fixed64 f_4 = 6;
        optional fixed64 f_5 = 8;
        optional int32 f_6 = 9;
        message M81 {
          optional bool f_0 = 3;
          message M87 {
            optional int32 f_0 = 1;
            optional bool f_1 = 3;
            message M94 {
              optional double f_0 = 1;
            }
            repeated M94 f_5 = 5;
          }
          repeated M87 f_4 = 4;
        }
        repeated M81 f_12 = 12;
      }
      repeated M41 f_9 = 9;
    }
    optional M7 f_2 = 2;
    message M14 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 5;
      optional int32 f_3 = 7;
      optional int32 f_4 = 8;
      message M32 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
      }
      repeated M32 f_10 = 10;
      message M61 {
        optional string f_0 = 2;
      }
      optional M61 f_11 = 11;
      message M62 {
        optional fixed64 f_0 = 1;
      }
      optional M62 f_12 = 12;
      message M65 {
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 126;
          E10_CONST_2 = 107;
          E10_CONST_3 = 21;
          E10_CONST_4 = 71;
          E10_CONST_5 = 67;
        }
        repeated E10 f_0 = 1 [packed = true];
        message M80 {
          optional string f_0 = 1;
        }
        optional M80 f_2 = 2;
      }
      optional M65 f_13 = 13;
      message M66 {
        optional double f_0 = 2;
      }
      optional M66 f_14 = 14;
      message M68 {
        optional bool f_0 = 2;
        message M82 {
          optional uint64 f_0 = 1;
          optional int64 f_1 = 3;
          optional string f_2 = 5;
          optional string f_3 = 6;
        }
        repeated M82 f_3 = 3;
      }
      optional M68 f_15 = 15;
    }
    optional M14 f_3 = 3;
    message M19 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      message M45 {
        optional bool f_0 = 2;
        message M78 {
          optional string f_0 = 3;
        }
        optional M78 f_3 = 3;
      }
      optional M45 f_4 = 4;
      message M59 {
        optional string f_0 = 2;
      }
      repeated M59 f_5 = 5;
      message M64 {
        optional bool f_0 = 2;
        optional string f_1 = 3;
        optional int32 f_2 = 4;
        optional int32 f_3 = 5;
        optional int32 f_4 = 7;
      }
      repeated M64 f_7 = 7;
    }
    optional M19 f_4 = 4;
    message M21 {
      optional bool f_0 = 1;
      optional bool f_1 = 3;
      message M54 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
      }
      repeated M54 f_6 = 6;
    }
    optional M21 f_5 = 5;
    message M22 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional fixed64 f_2 = 4;
      optional fixed64 f_3 = 6;
      optional fixed64 f_4 = 7;
      optional fixed64 f_5 = 9;
      optional fixed64 f_6 = 11;
      optional fixed32 f_7 = 13;
      optional double f_8 = 14;
      optional int32 f_9 = 15;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 33;
        E3_CONST_2 = 59;
        E3_CONST_3 = 80;
        E3_CONST_4 = 42;
        E3_CONST_5 = 3;
      }
      repeated E3 f_10 = 19 [packed = true];
      optional bool f_11 = 21;
      optional fixed64 f_12 = 22;
      optional int32 f_13 = 24;
      optional fixed64 f_14 = 28;
      optional double f_15 = 29;
      optional double f_16 = 30;
      optional int32 f_17 = 32;
      optional int32 f_18 = 33;
      optional fixed64 f_19 = 35;
      message M49 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
      }
      optional M49 f_36 = 36;
      message M57 {
        optional int32 f_0 = 1;
      }
      repeated M57 f_38 = 38;
    }
    optional M22 f_6 = 6;
    message M24 {
      optional int32 f_0 = 2;
      message M28 {
        optional string f_0 = 3;
        optional string f_1 = 5;
      }
      optional M28 f_4 = 4;
      message M63 {
        optional int32 f_0 = 1;
      }
      optional M63 f_8 = 8;
    }
    optional M24 f_7 = 7;
    message M25 {
      optional fixed64 f_0 = 2;
      optional fixed32 f_1 = 5;
      optional double f_2 = 6;
      optional string f_3 = 7;
      optional int64 f_4 = 10;
      optional double f_5 = 12;
      optional string f_6 = 14;
      optional int32 f_7 = 15;
      optional string f_8 = 16;
      optional double f_9 = 17;
      optional string f_10 = 18;
      message M47 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 39;
          E8_CONST_2 = 9;
          E8_CONST_3 = 40;
          E8_CONST_4 = 71;
          E8_CONST_5 = 78;
        }
        optional E8 f_0 = 1;
        message M73 {
          optional int32 f_0 = 1;
          optional fixed32 f_1 = 2;
          optional fixed64 f_2 = 4;
          message M88 {
            optional int32 f_0 = 3;
            message M93 {
              optional double f_0 = 1;
            }
            repeated M93 f_4 = 4;
          }
          repeated M88 f_5 = 5;
        }
        optional M73 f_2 = 2;
      }
      repeated M47 f_20 = 20;
    }
    repeated M25 f_8 = 8;
  }
  optional M1 f_50 = 50;
  message M2 {
    optional double f_0 = 2;
    message M6 {
      optional string f_0 = 1;
      optional string f_1 = 3;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 72;
        E2_CONST_2 = 51;
        E2_CONST_3 = 89;
        E2_CONST_4 = 61;
        E2_CONST_5 = 92;
      }
      repeated E2 f_2 = 4 [packed = true];
    }
    optional M6 f_3 = 3;
    message M12 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 5;
      optional int32 f_4 = 7;
      message M69 {
        optional string f_0 = 2;
        optional bool f_1 = 3;
      }
      repeated M69 f_8 = 8;
    }
    optional M12 f_4 = 4;
    message M15 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 5;
      message M34 {
        optional int64 f_0 = 1;
        optional fixed32 f_1 = 2;
        optional int32 f_2 = 3;
        optional int32 f_3 = 5;
        optional string f_4 = 6;
        optional fixed64 f_5 = 7;
      }
      optional M34 f_7 = 7;
      message M53 {
        optional string f_0 = 3;
        optional fixed64 f_1 = 5;
      }
      optional M53 f_10 = 10;
    }
    optional M15 f_7 = 7;
    message M16 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional int32 f_3 = 6;
      optional fixed64 f_4 = 7;
      optional string f_5 = 8;
      message M43 {
        optional string f_0 = 2;
        optional string f_1 = 5;
        optional int32 f_2 = 7;
      }
      repeated M43 f_9 = 9;
      message M44 {
        optional string f_0 = 1;
        optional double f_1 = 2;
        message M77 {
          optional int32 f_0 = 1;
        }
        optional M77 f_4 = 4;
      }
      optional M44 f_12 = 12;
      message M58 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 3;
        optional double f_2 = 5;
      }
      optional M58 f_13 = 13;
    }
    optional M16 f_8 = 8;
    message M17 {
      optional fixed32 f_0 = 1;
      message M50 {
        optional double f_0 = 2;
        optional fixed64 f_1 = 5;
        optional string f_2 = 6;
        optional int32 f_3 = 7;
        message M85 {
          optional string f_0 = 2;
          optional fixed64 f_1 = 4;
          optional string f_2 = 5;
          optional string f_3 = 7;
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 54;
            E15_CONST_2 = 26;
            E15_CONST_3 = 2;
            E15_CONST_4 = 52;
            E15_CONST_5 = 126;
          }
          optional E15 f_4 = 8;
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 106;
            E16_CONST_2 = 98;
            E16_CONST_3 = 19;
            E16_CONST_4 = 54;
            E16_CONST_5 = 66;
          }
          optional E16 f_5 = 9;
          optional bool f_6 = 10;
          optional fixed64 f_7 = 11;
          optional int32 f_8 = 13;
          optional string f_9 = 14;
          optional double f_10 = 15;
          optional string f_11 = 17;
          optional int32 f_12 = 18;
          optional bool f_13 = 19;
          optional string f_14 = 23;
          optional bool f_15 = 24;
          optional bool f_16 = 26;
          optional fixed64 f_17 = 27;
          optional string f_18 = 28;
          optional fixed64 f_19 = 29;
          optional fixed64 f_20 = 31;
          optional bool f_21 = 32;
          optional fixed64 f_22 = 33;
          optional fixed64 f_23 = 35;
          optional fixed64 f_24 = 38;
          optional fixed64 f_25 = 39;
          optional int32 f_26 = 40;
          optional bool f_27 = 41;
          optional string f_28 = 44;
          optional string f_29 = 46;
          optional fixed32 f_30 = 48;
        }
        optional M85 f_8 = 8;
      }
      optional M50 f_5 = 5;
    }
    repeated M17 f_9 = 9;
    message M18 {
      optional fixed64 f_0 = 1;
      message M31 {
        optional int64 f_0 = 1;
        optional string f_1 = 3;
        optional bool f_2 = 4;
        optional fixed32 f_3 = 5;
      }
      optional M31 f_2 = 2;
      message M52 {
        optional fixed32 f_0 = 1;
        optional string f_1 = 2;
        optional fixed64 f_2 = 4;
        message M79 {
          optional fixed64 f_0 = 1;
        }
        optional M79 f_6 = 6;
      }
      optional M52 f_3 = 3;
    }
    optional M18 f_12 = 12;
  }
  repeated M2 f_52 = 52;
  message M3 {
    optional fixed64 f_0 = 1;
    message M13 {
      optional int64 f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    repeated M13 f_3 = 3;
    message M23 {
      optional string f_0 = 1;
      optional string f_1 = 2;
    }
    optional M23 f_8 = 8;
    message M26 {
      optional fixed64 f_0 = 3;
      message M29 {
        optional int32 f_0 = 3;
        optional string f_1 = 4;
        optional string f_2 = 5;
        optional fixed64 f_3 = 8;
      }
      repeated M29 f_5 = 5;
      message M37 {
        optional string f_0 = 1;
        optional bool f_1 = 2;
      }
      optional M37 f_8 = 8;
      message M40 {
        optional fixed64 f_0 = 3;
        optional int32 f_1 = 5;
      }
      optional M40 f_9 = 9;
    }
    optional M26 f_9 = 9;
  }
  optional M3 f_54 = 54;
  message M4 {
    optional int32 f_0 = 2;
    optional int64 f_1 = 3;
    optional string f_2 = 6;
    optional fixed64 f_3 = 7;
    optional fixed64 f_4 = 8;
    optional fixed64 f_5 = 9;
    optional int32 f_6 = 13;
    optional int32 f_7 = 14;
    optional fixed64 f_8 = 15;
    optional double f_9 = 16;
    optional int32 f_10 = 17;
    optional fixed64 f_11 = 18;
    optional int32 f_12 = 21;
    optional fixed64 f_13 = 22;
    optional int32 f_14 = 23;
    optional bool f_15 = 26;
    optional fixed64 f_16 = 27;
    optional bool f_17 = 28;
    optional string f_18 = 29;
    optional double f_19 = 30;
    optional fixed64 f_20 = 31;
    optional bool f_21 = 32;
    optional string f_22 = 36;
    optional string f_23 = 38;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 104;
      E1_CONST_2 = 23;
      E1_CONST_3 = 92;
      E1_CONST_4 = 121;
      E1_CONST_5 = 110;
    }
    optional E1 f_24 = 41;
    optional fixed64 f_25 = 42;
    optional fixed64 f_26 = 44;
    optional fixed64 f_27 = 46;
    optional string f_28 = 49;
    optional fixed64 f_29 = 51;
    optional int32 f_30 = 52;
    optional double f_31 = 53;
    message M5 {
      optional fixed64 f_0 = 1;
      message M67 {
        optional fixed32 f_0 = 2;
      }
      optional M67 f_2 = 2;
    }
    optional M5 f_55 = 55;
    message M8 {
      optional fixed64 f_0 = 1;
      message M39 {
        optional int32 f_0 = 1;
        message M74 {
          optional int64 f_0 = 1;
          message M89 {
            optional fixed64 f_0 = 2;
            optional fixed64 f_1 = 3;
            optional string f_2 = 4;
            optional bool f_3 = 6;
            optional string f_4 = 8;
            optional string f_5 = 10;
            optional int32 f_6 = 12;
            optional string f_7 = 13;
            optional int32 f_8 = 15;
            optional int32 f_9 = 16;
            optional fixed64 f_10 = 17;
            message M95 {
              optional int32 f_0 = 1;
            }
            optional M95 f_20 = 20;
            message M96 {
              optional fixed64 f_0 = 1;
              optional double f_1 = 2;
              optional fixed64 f_2 = 4;
              optional fixed64 f_3 = 6;
              optional string f_4 = 7;
            }
            optional M96 f_22 = 22;
          }
          repeated M89 f_2 = 2;
        }
        optional M74 f_4 = 4;
        message M76 {
          optional string f_0 = 2;
          optional string f_1 = 3;
          message M91 {
            optional int32 f_0 = 1;
            optional int32 f_1 = 3;
          }
          optional M91 f_7 = 7;
        }
        optional M76 f_5 = 5;
      }
      optional M39 f_2 = 2;
      message M42 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 4;
      }
      repeated M42 f_4 = 4;
    }
    optional M8 f_56 = 56;
    message M9 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed32 f_3 = 5;
      message M70 {
        optional int32 f_0 = 1;
        optional string f_1 = 2;
        optional string f_2 = 3;
        optional fixed64 f_3 = 5;
        optional bool f_4 = 6;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 39;
          E11_CONST_2 = 107;
          E11_CONST_3 = 49;
          E11_CONST_4 = 102;
          E11_CONST_5 = 22;
        }
        repeated E11 f_5 = 8 [packed = true];
        message M71 {
          optional fixed64 f_0 = 1;
          message M90 {
            optional bool f_0 = 1;
          }
          repeated M90 f_4 = 4;
        }
        optional M71 f_9 = 9;
      }
      optional M70 f_6 = 6;
    }
    optional M9 f_57 = 57;
    message M10 {
      optional bool f_0 = 2;
      optional string f_1 = 3;
      message M46 {
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 76;
          E7_CONST_2 = 47;
          E7_CONST_3 = 124;
          E7_CONST_4 = 17;
          E7_CONST_5 = 48;
        }
        optional E7 f_0 = 3;
      }
      optional M46 f_4 = 4;
      message M55 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
        optional int32 f_2 = 4;
        optional string f_3 = 5;
      }
      optional M55 f_5 = 5;
      message M60 {
        optional int32 f_0 = 3;
      }
      optional M60 f_7 = 7;
    }
    optional M10 f_58 = 58;
    message M11 {
      optional string f_0 = 2;
      repeated int32 f_1 = 5 [packed = true];
      optional fixed64 f_2 = 7;
      optional bool f_3 = 8;
      optional string f_4 = 10;
      optional string f_5 = 11;
      optional fixed64 f_6 = 13;
      optional fixed64 f_7 = 14;
      optional string f_8 = 16;
      optional int32 f_9 = 17;
      optional fixed64 f_10 = 19;
      optional fixed64 f_11 = 20;
      optional int32 f_12 = 22;
      optional string f_13 = 25;
      message M30 {
        optional fixed32 f_0 = 2;
        message M83 {
          optional fixed64 f_0 = 2;
          optional fixed64 f_1 = 3;
        }
        optional M83 f_3 = 3;
      }
      optional M30 f_26 = 26;
      message M33 {
        optional int32 f_0 = 3;
        optional string f_1 = 4;
        message M84 {
          optional string f_0 = 1;
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 12;
            E14_CONST_2 = 48;
            E14_CONST_3 = 5;
            E14_CONST_4 = 17;
            E14_CONST_5 = 56;
          }
          repeated E14 f_1 = 2 [packed = true];
          message M92 {
            optional fixed64 f_0 = 1;
            optional int32 f_1 = 2;
            optional int64 f_2 = 3;
            optional int32 f_3 = 4;
            optional bool f_4 = 5;
            optional bool f_5 = 6;
            optional bool f_6 = 7;
            optional int32 f_7 = 8;
            optional fixed64 f_8 = 10;
            optional string f_9 = 11;
            optional int32 f_10 = 12;
            optional fixed64 f_11 = 13;
            optional string f_12 = 14;
            optional double f_13 = 16;
          }
          optional M92 f_3 = 3;
        }
        repeated M84 f_5 = 5;
      }
      optional M33 f_28 = 28;
      message M35 {
        optional fixed32 f_0 = 1;
      }
      optional M35 f_29 = 29;
      message M38 {
        optional fixed64 f_0 = 2;
      }
      optional M38 f_33 = 33;
    }
    optional M11 f_59 = 59;
    message M20 {
      optional int32 f_0 = 2;
      message M36 {
        enum E5 {
          E5_UNSPECIFIED = 0;
          E5_CONST_1 = 16;
          E5_CONST_2 = 4;
          E5_CONST_3 = 66;
          E5_CONST_4 = 9;
          E5_CONST_5 = 91;
        }
        optional E5 f_0 = 2;
        message M72 {
          optional string f_0 = 2;
          optional fixed64 f_1 = 3;
          optional fixed64 f_2 = 4;
          optional string f_3 = 7;
          message M86 {
            optional int32 f_0 = 1;
          }
          optional M86 f_10 = 10;
        }
        repeated M72 f_3 = 3;
      }
      repeated M36 f_3 = 3;
      message M48 {
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 124;
          E9_CONST_2 = 31;
          E9_CONST_3 = 63;
          E9_CONST_4 = 9;
          E9_CONST_5 = 77;
        }
        optional E9 f_0 = 4;
      }
      optional M48 f_5 = 5;
      message M56 {
        optional string f_0 = 2;
        optional int32 f_1 = 3;
      }
      repeated M56 f_6 = 6;
    }
    optional M20 f_60 = 60;
    message M27 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 25;
        E4_CONST_2 = 84;
        E4_CONST_3 = 113;
        E4_CONST_4 = 77;
        E4_CONST_5 = 112;
      }
      optional E4 f_0 = 1;
      optional double f_1 = 3;
      optional int32 f_2 = 5;
      optional bool f_3 = 6;
      optional int32 f_4 = 10;
      optional int32 f_5 = 12;
      optional string f_6 = 13;
      optional int32 f_7 = 14;
      optional int32 f_8 = 16;
      optional string f_9 = 17;
      optional fixed64 f_10 = 20;
      optional string f_11 = 22;
      optional fixed64 f_12 = 24;
      optional int32 f_13 = 25;
      optional fixed64 f_14 = 26;
      message M51 {
        optional fixed32 f_0 = 1;
        message M75 {
          optional fixed64 f_0 = 2;
          optional int32 f_1 = 3;
          enum E12 {
            E12_UNSPECIFIED = 0;
            E12_CONST_1 = 73;
            E12_CONST_2 = 14;
            E12_CONST_3 = 89;
            E12_CONST_4 = 121;
            E12_CONST_5 = 28;
          }
          repeated E12 f_2 = 4 [packed = true];
          optional string f_3 = 5;
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 113;
            E13_CONST_2 = 54;
            E13_CONST_3 = 23;
            E13_CONST_4 = 114;
            E13_CONST_5 = 16;
          }
          repeated E13 f_4 = 6 [packed = true];
        }
        optional M75 f_3 = 3;
      }
      optional M51 f_28 = 28;
    }
    optional M27 f_61 = 61;
  }
  optional M4 f_55 = 55;
}
