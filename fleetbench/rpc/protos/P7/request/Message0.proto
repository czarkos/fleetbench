// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.request.Message0;

message Message0 {
  optional int32 f_0 = 1;
  optional fixed64 f_1 = 3;
  optional string f_2 = 4;
  optional int32 f_3 = 6;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 73;
    E1_CONST_2 = 74;
    E1_CONST_3 = 81;
    E1_CONST_4 = 64;
    E1_CONST_5 = 47;
  }
  optional E1 f_4 = 8;
  optional fixed64 f_5 = 11;
  optional int32 f_6 = 14;
  optional int32 f_7 = 15;
  optional int32 f_8 = 16;
  optional int32 f_9 = 17;
  optional string f_10 = 19;
  optional fixed64 f_11 = 20;
  optional int32 f_12 = 21;
  optional bool f_13 = 24;
  optional int32 f_14 = 26;
  optional fixed64 f_15 = 28;
  optional bool f_16 = 29;
  optional int32 f_17 = 31;
  optional fixed64 f_18 = 32;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 86;
    E2_CONST_2 = 8;
    E2_CONST_3 = 115;
    E2_CONST_4 = 120;
    E2_CONST_5 = 80;
  }
  repeated E2 f_19 = 33 [packed = true];
  optional int32 f_20 = 34;
  optional int32 f_21 = 35;
  optional int32 f_22 = 36;
  optional int32 f_23 = 38;
  optional int64 f_24 = 39;
  optional double f_25 = 40;
  optional int32 f_26 = 44;
  optional string f_27 = 45;
  optional fixed64 f_28 = 47;
  optional fixed64 f_29 = 48;
  message M1 {
    optional fixed64 f_0 = 1;
    optional fixed32 f_1 = 3;
    optional int32 f_2 = 5;
    optional int32 f_3 = 7;
    message M18 {
      optional string f_0 = 1;
      optional fixed32 f_1 = 3;
      optional int32 f_2 = 8;
      message M40 {
        optional int32 f_0 = 1;
        optional string f_1 = 5;
      }
      optional M40 f_9 = 9;
      message M43 {
        optional int64 f_0 = 3;
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 76;
          E19_CONST_2 = 108;
          E19_CONST_3 = 31;
          E19_CONST_4 = 118;
          E19_CONST_5 = 55;
        }
        repeated E19 f_1 = 5 [packed = true];
        optional int32 f_2 = 8;
        optional fixed64 f_3 = 9;
        optional bool f_4 = 10;
        optional fixed64 f_5 = 13;
        optional string f_6 = 14;
        optional fixed64 f_7 = 15;
        optional string f_8 = 17;
        optional int32 f_9 = 18;
        optional int32 f_10 = 19;
        optional string f_11 = 21;
        optional fixed64 f_12 = 22;
        optional int64 f_13 = 23;
        optional string f_14 = 24;
        optional string f_15 = 26;
        optional int32 f_16 = 27;
        optional fixed64 f_17 = 29;
        optional int32 f_18 = 31;
        optional int32 f_19 = 32;
        optional fixed64 f_20 = 34;
      }
      repeated M43 f_10 = 10;
      message M51 {
        optional int32 f_0 = 2;
        optional fixed64 f_1 = 3;
      }
      repeated M51 f_11 = 11;
    }
    optional M18 f_8 = 8;
  }
  optional M1 f_49 = 49;
  message M2 {
    optional string f_0 = 2;
    message M11 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      optional fixed32 f_2 = 5;
      optional int64 f_3 = 6;
      optional fixed64 f_4 = 8;
      optional fixed64 f_5 = 9;
      optional int32 f_6 = 11;
      optional int32 f_7 = 12;
      optional int32 f_8 = 14;
      optional string f_9 = 15;
      optional int32 f_10 = 17;
      optional string f_11 = 20;
      optional fixed64 f_12 = 21;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 58;
        E9_CONST_2 = 41;
        E9_CONST_3 = 51;
        E9_CONST_4 = 62;
        E9_CONST_5 = 32;
      }
      repeated E9 f_13 = 22 [packed = true];
      optional string f_14 = 23;
      optional fixed64 f_15 = 24;
      optional bool f_16 = 26;
      optional string f_17 = 28;
      optional string f_18 = 29;
      optional int32 f_19 = 30;
      optional int32 f_20 = 31;
      optional string f_21 = 33;
      optional string f_22 = 35;
      optional fixed64 f_23 = 36;
      optional string f_24 = 38;
      optional int32 f_25 = 40;
      optional string f_26 = 41;
      optional int64 f_27 = 42;
      optional fixed64 f_28 = 43;
      message M27 {
        optional fixed64 f_0 = 1;
        message M58 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 2;
          optional bool f_2 = 3;
          optional bool f_3 = 4;
          optional string f_4 = 6;
        }
        optional M58 f_3 = 3;
      }
      repeated M27 f_44 = 44;
      message M34 {
        optional string f_0 = 2;
        message M54 {
          optional int32 f_0 = 2;
          optional double f_1 = 3;
          optional bool f_2 = 4;
          optional fixed64 f_3 = 7;
          optional int32 f_4 = 8;
        }
        repeated M54 f_3 = 3;
      }
      optional M34 f_46 = 46;
      message M37 {
        optional fixed64 f_0 = 2;
      }
      optional M37 f_47 = 47;
    }
    optional M11 f_5 = 5;
    message M20 {
      optional fixed64 f_0 = 1;
      message M52 {
        optional string f_0 = 1;
      }
      optional M52 f_2 = 2;
    }
    optional M20 f_6 = 6;
  }
  repeated M2 f_51 = 51;
  message M3 {
    optional fixed32 f_0 = 1;
    optional string f_1 = 4;
    optional fixed64 f_2 = 5;
    optional int32 f_3 = 6;
    optional fixed64 f_4 = 7;
    message M22 {
      optional fixed64 f_0 = 2;
      message M39 {
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 123;
          E16_CONST_2 = 82;
          E16_CONST_3 = 112;
          E16_CONST_4 = 64;
          E16_CONST_5 = 1;
        }
        repeated E16 f_0 = 1 [packed = true];
        optional int32 f_1 = 3;
        optional fixed32 f_2 = 7;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 36;
          E17_CONST_2 = 122;
          E17_CONST_3 = 49;
          E17_CONST_4 = 11;
          E17_CONST_5 = 92;
        }
        optional E17 f_3 = 9;
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 66;
          E18_CONST_2 = 33;
          E18_CONST_3 = 25;
          E18_CONST_4 = 100;
          E18_CONST_5 = 112;
        }
        repeated E18 f_4 = 10 [packed = true];
        optional string f_5 = 11;
        optional int32 f_6 = 12;
        optional int32 f_7 = 14;
        optional fixed64 f_8 = 17;
        message M66 {
          optional string f_0 = 2;
          optional fixed64 f_1 = 3;
        }
        optional M66 f_18 = 18;
        message M71 {
          optional int64 f_0 = 1;
          message M74 {
            optional int32 f_0 = 3;
            optional fixed64 f_1 = 5;
            optional int32 f_2 = 7;
            optional string f_3 = 8;
          }
          optional M74 f_2 = 2;
        }
        optional M71 f_20 = 20;
      }
      optional M39 f_3 = 3;
      message M53 {
        optional fixed32 f_0 = 1;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional fixed64 f_3 = 7;
        optional string f_4 = 8;
      }
      optional M53 f_4 = 4;
    }
    optional M22 f_8 = 8;
    message M26 {
      optional int32 f_0 = 3;
      optional fixed64 f_1 = 5;
      optional string f_2 = 7;
      optional int32 f_3 = 8;
      optional int32 f_4 = 9;
      optional int32 f_5 = 10;
      optional string f_6 = 13;
      optional fixed64 f_7 = 15;
      optional int32 f_8 = 17;
      optional fixed64 f_9 = 20;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 96;
        E13_CONST_2 = 83;
        E13_CONST_3 = 93;
        E13_CONST_4 = 84;
        E13_CONST_5 = 15;
      }
      repeated E13 f_10 = 21 [packed = true];
      optional string f_11 = 22;
      optional int32 f_12 = 25;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 6;
        E14_CONST_2 = 9;
        E14_CONST_3 = 107;
        E14_CONST_4 = 13;
        E14_CONST_5 = 49;
      }
      repeated E14 f_13 = 27 [packed = true];
      optional int32 f_14 = 29;
      optional int32 f_15 = 30;
      optional int32 f_16 = 31;
      optional fixed64 f_17 = 33;
      optional int64 f_18 = 34;
      optional int32 f_19 = 35;
      optional string f_20 = 36;
      optional fixed64 f_21 = 37;
      enum E15 {
        E15_UNSPECIFIED = 0;
        E15_CONST_1 = 69;
        E15_CONST_2 = 92;
        E15_CONST_3 = 112;
        E15_CONST_4 = 52;
        E15_CONST_5 = 95;
      }
      optional E15 f_22 = 38;
      optional string f_23 = 40;
      optional fixed32 f_24 = 43;
      optional string f_25 = 44;
      optional int32 f_26 = 46;
      optional string f_27 = 47;
      optional string f_28 = 48;
      optional string f_29 = 49;
      message M45 {
        optional string f_0 = 2;
        optional int32 f_1 = 3;
        optional fixed32 f_2 = 4;
        message M56 {
          optional int32 f_0 = 1;
          message M76 {
            optional fixed64 f_0 = 2;
            optional bool f_1 = 3;
            optional fixed64 f_2 = 6;
            optional string f_3 = 7;
            optional string f_4 = 9;
            optional int32 f_5 = 10;
            optional string f_6 = 11;
            optional int32 f_7 = 13;
            optional int32 f_8 = 15;
            enum E23 {
              E23_UNSPECIFIED = 0;
              E23_CONST_1 = 4;
              E23_CONST_2 = 64;
              E23_CONST_3 = 24;
              E23_CONST_4 = 84;
              E23_CONST_5 = 43;
            }
            repeated E23 f_9 = 17 [packed = true];
            optional fixed64 f_10 = 19;
            optional string f_11 = 20;
            optional fixed64 f_12 = 22;
            optional string f_13 = 23;
            optional fixed64 f_14 = 24;
            optional int32 f_15 = 25;
            enum E24 {
              E24_UNSPECIFIED = 0;
              E24_CONST_1 = 45;
              E24_CONST_2 = 33;
              E24_CONST_3 = 78;
              E24_CONST_4 = 39;
              E24_CONST_5 = 115;
            }
            repeated E24 f_16 = 26 [packed = true];
            optional string f_17 = 29;
            optional string f_18 = 30;
            optional int32 f_19 = 32;
            optional bool f_20 = 36;
            optional int32 f_21 = 37;
            optional fixed64 f_22 = 38;
            message M78 {
              optional int32 f_0 = 2;
              optional int32 f_1 = 3;
              enum E25 {
                E25_UNSPECIFIED = 0;
                E25_CONST_1 = 31;
                E25_CONST_2 = 55;
                E25_CONST_3 = 118;
                E25_CONST_4 = 1;
                E25_CONST_5 = 51;
              }
              repeated E25 f_2 = 4 [packed = true];
              optional fixed32 f_3 = 5;
              optional string f_4 = 6;
              optional fixed64 f_5 = 8;
              optional int32 f_6 = 9;
              optional fixed64 f_7 = 11;
              optional fixed64 f_8 = 12;
              optional int32 f_9 = 14;
              optional int32 f_10 = 15;
              optional fixed64 f_11 = 18;
            }
            repeated M78 f_39 = 39;
          }
          repeated M76 f_2 = 2;
        }
        optional M56 f_5 = 5;
      }
      optional M45 f_50 = 50;
      message M47 {
        optional fixed64 f_0 = 2;
        message M72 {
          optional fixed32 f_0 = 1;
          optional fixed32 f_1 = 2;
          optional int32 f_2 = 4;
          message M75 {
            optional int32 f_0 = 3;
          }
          optional M75 f_5 = 5;
        }
        repeated M72 f_5 = 5;
      }
      repeated M47 f_51 = 51;
      message M48 {
        optional int32 f_0 = 1;
        optional string f_1 = 2;
      }
      optional M48 f_53 = 53;
    }
    repeated M26 f_10 = 10;
  }
  optional M3 f_55 = 55;
  message M4 {
    optional string f_0 = 1;
  }
  repeated M4 f_56 = 56;
  message M5 {
    optional fixed64 f_0 = 2;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 102;
      E3_CONST_2 = 38;
      E3_CONST_3 = 24;
      E3_CONST_4 = 125;
      E3_CONST_5 = 89;
    }
    optional E3 f_1 = 3;
    optional int32 f_2 = 6;
  }
  repeated M5 f_57 = 57;
  message M6 {
    optional double f_0 = 1;
    message M24 {
      optional bool f_0 = 2;
      message M36 {
        optional fixed32 f_0 = 1;
      }
      optional M36 f_5 = 5;
      message M49 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 3;
        optional int32 f_2 = 4;
        enum E20 {
          E20_UNSPECIFIED = 0;
          E20_CONST_1 = 12;
          E20_CONST_2 = 35;
          E20_CONST_3 = 77;
          E20_CONST_4 = 75;
          E20_CONST_5 = 111;
        }
        repeated E20 f_3 = 6 [packed = true];
        optional fixed64 f_4 = 7;
        optional string f_5 = 9;
        message M63 {
          optional fixed64 f_0 = 1;
          optional bool f_1 = 4;
          optional fixed64 f_2 = 7;
          optional int64 f_3 = 8;
          optional int32 f_4 = 10;
          optional int32 f_5 = 12;
          optional int32 f_6 = 13;
          optional bool f_7 = 14;
          optional int32 f_8 = 16;
        }
        repeated M63 f_10 = 10;
      }
      optional M49 f_6 = 6;
    }
    optional M24 f_2 = 2;
  }
  optional M6 f_60 = 60;
  message M7 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 36;
      E4_CONST_2 = 74;
      E4_CONST_3 = 98;
      E4_CONST_4 = 34;
      E4_CONST_5 = 4;
    }
    repeated E4 f_0 = 1 [packed = true];
    message M23 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 5;
      optional string f_2 = 6;
      optional string f_3 = 7;
      optional fixed64 f_4 = 10;
    }
    optional M23 f_3 = 3;
  }
  optional M7 f_61 = 61;
  message M8 {
    optional int32 f_0 = 1;
    optional string f_1 = 2;
    optional bool f_2 = 3;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 20;
      E5_CONST_2 = 17;
      E5_CONST_3 = 105;
      E5_CONST_4 = 46;
      E5_CONST_5 = 91;
    }
    repeated E5 f_3 = 4 [packed = true];
    message M14 {
      optional bool f_0 = 1;
      optional int64 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional bool f_3 = 5;
    }
    optional M14 f_7 = 7;
    message M19 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      message M28 {
        optional fixed64 f_0 = 2;
        optional double f_1 = 3;
        optional int32 f_2 = 4;
        optional fixed64 f_3 = 6;
        optional string f_4 = 7;
        optional double f_5 = 8;
      }
      optional M28 f_4 = 4;
    }
    optional M19 f_9 = 9;
    message M25 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 3;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 109;
        E12_CONST_2 = 37;
        E12_CONST_3 = 19;
        E12_CONST_4 = 70;
        E12_CONST_5 = 3;
      }
      optional E12 f_3 = 4;
      optional string f_4 = 7;
      optional string f_5 = 8;
      optional string f_6 = 9;
      optional int32 f_7 = 11;
      optional int32 f_8 = 13;
      optional string f_9 = 14;
      optional double f_10 = 18;
      optional string f_11 = 20;
      optional int32 f_12 = 21;
      optional fixed64 f_13 = 22;
      optional bool f_14 = 24;
      message M44 {
        optional int32 f_0 = 3;
        message M55 {
          optional int32 f_0 = 1;
        }
        repeated M55 f_5 = 5;
        message M70 {
          optional string f_0 = 1;
        }
        repeated M70 f_6 = 6;
      }
      optional M44 f_26 = 26;
    }
    repeated M25 f_10 = 10;
  }
  optional M8 f_65 = 65;
  message M9 {
    optional int32 f_0 = 2;
    message M13 {
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 126;
        E10_CONST_2 = 35;
        E10_CONST_3 = 95;
        E10_CONST_4 = 74;
        E10_CONST_5 = 43;
      }
      repeated E10 f_0 = 2 [packed = true];
      optional fixed64 f_1 = 3;
      optional double f_2 = 5;
      optional double f_3 = 6;
      optional fixed64 f_4 = 7;
      optional string f_5 = 8;
      optional int32 f_6 = 9;
      optional int32 f_7 = 10;
      optional string f_8 = 11;
      optional int32 f_9 = 14;
      optional int32 f_10 = 15;
      optional int32 f_11 = 16;
      message M33 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional bool f_3 = 6;
        optional string f_4 = 8;
        optional int32 f_5 = 10;
        message M57 {
          optional string f_0 = 3;
        }
        repeated M57 f_12 = 12;
        message M61 {
          optional fixed64 f_0 = 1;
        }
        repeated M61 f_13 = 13;
      }
      optional M33 f_19 = 19;
    }
    optional M13 f_3 = 3;
    message M15 {
      optional int32 f_0 = 1;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 100;
        E11_CONST_2 = 60;
        E11_CONST_3 = 33;
        E11_CONST_4 = 80;
        E11_CONST_5 = 91;
      }
      repeated E11 f_1 = 3 [packed = true];
      optional int32 f_2 = 4;
      optional double f_3 = 6;
      message M29 {
        optional double f_0 = 3;
        optional string f_1 = 5;
        optional int32 f_2 = 9;
        message M65 {
          optional double f_0 = 1;
          optional string f_1 = 2;
          optional string f_2 = 4;
          optional int32 f_3 = 6;
        }
        optional M65 f_10 = 10;
      }
      repeated M29 f_7 = 7;
      message M31 {
        optional fixed32 f_0 = 2;
        message M64 {
          optional string f_0 = 1;
        }
        optional M64 f_3 = 3;
      }
      optional M31 f_8 = 8;
      message M32 {
        optional fixed32 f_0 = 2;
        message M59 {
          optional fixed64 f_0 = 1;
          message M73 {
            enum E22 {
              E22_UNSPECIFIED = 0;
              E22_CONST_1 = 114;
              E22_CONST_2 = 4;
              E22_CONST_3 = 98;
              E22_CONST_4 = 42;
              E22_CONST_5 = 41;
            }
            repeated E22 f_0 = 1 [packed = true];
            optional int32 f_1 = 2;
            message M77 {
              optional int32 f_0 = 1;
              optional fixed64 f_1 = 2;
              optional string f_2 = 3;
              optional string f_3 = 4;
            }
            optional M77 f_3 = 3;
          }
          optional M73 f_2 = 2;
        }
        repeated M59 f_3 = 3;
      }
      repeated M32 f_9 = 9;
      message M41 {
        optional int32 f_0 = 2;
        optional double f_1 = 3;
        message M60 {
          optional fixed64 f_0 = 1;
          optional fixed32 f_1 = 3;
        }
        optional M60 f_6 = 6;
      }
      optional M41 f_10 = 10;
      message M42 {
        optional bool f_0 = 2;
        message M67 {
          optional string f_0 = 1;
        }
        repeated M67 f_3 = 3;
        message M68 {
          enum E21 {
            E21_UNSPECIFIED = 0;
            E21_CONST_1 = 83;
            E21_CONST_2 = 28;
            E21_CONST_3 = 84;
            E21_CONST_4 = 112;
            E21_CONST_5 = 18;
          }
          repeated E21 f_0 = 2 [packed = true];
          optional fixed32 f_1 = 3;
        }
        repeated M68 f_4 = 4;
      }
      optional M42 f_11 = 11;
      message M46 {
        optional string f_0 = 1;
      }
      optional M46 f_15 = 15;
    }
    repeated M15 f_4 = 4;
    message M16 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 4;
      optional string f_2 = 6;
      message M30 {
        optional bool f_0 = 2;
        optional string f_1 = 6;
        message M62 {
          optional int32 f_0 = 2;
        }
        optional M62 f_7 = 7;
        message M69 {
          optional string f_0 = 2;
          optional int32 f_1 = 3;
          optional string f_2 = 4;
          optional fixed64 f_3 = 8;
          optional fixed64 f_4 = 9;
        }
        optional M69 f_9 = 9;
      }
      repeated M30 f_7 = 7;
    }
    optional M16 f_5 = 5;
    message M21 {
      optional fixed64 f_0 = 1;
      message M35 {
        optional string f_0 = 1;
      }
      optional M35 f_2 = 2;
    }
    optional M21 f_10 = 10;
  }
  optional M9 f_68 = 68;
  message M10 {
    optional fixed64 f_0 = 1;
    optional bool f_1 = 3;
    optional string f_2 = 5;
    optional int32 f_3 = 8;
    optional fixed64 f_4 = 10;
    optional fixed64 f_5 = 11;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 119;
      E6_CONST_2 = 50;
      E6_CONST_3 = 25;
      E6_CONST_4 = 93;
      E6_CONST_5 = 95;
    }
    repeated E6 f_6 = 12 [packed = true];
    optional fixed64 f_7 = 13;
    optional double f_8 = 14;
    optional string f_9 = 16;
    optional string f_10 = 17;
    optional string f_11 = 19;
    optional string f_12 = 20;
    optional fixed64 f_13 = 21;
    optional fixed64 f_14 = 22;
    optional bool f_15 = 26;
    optional fixed64 f_16 = 27;
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 68;
      E7_CONST_2 = 9;
      E7_CONST_3 = 73;
      E7_CONST_4 = 8;
      E7_CONST_5 = 84;
    }
    optional E7 f_17 = 28;
    optional fixed64 f_18 = 29;
    optional int32 f_19 = 30;
    optional double f_20 = 31;
    optional string f_21 = 32;
    optional fixed64 f_22 = 33;
    optional string f_23 = 35;
    optional string f_24 = 36;
    optional int32 f_25 = 37;
    optional fixed64 f_26 = 38;
    optional fixed64 f_27 = 40;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 6;
      E8_CONST_2 = 119;
      E8_CONST_3 = 114;
      E8_CONST_4 = 110;
      E8_CONST_5 = 73;
    }
    optional E8 f_28 = 41;
    optional string f_29 = 42;
    optional fixed64 f_30 = 44;
    message M12 {
      optional int64 f_0 = 2;
      message M50 {
        optional int32 f_0 = 2;
      }
      optional M50 f_3 = 3;
    }
    optional M12 f_47 = 47;
    message M17 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 5;
      message M38 {
        optional int32 f_0 = 3;
      }
      optional M38 f_6 = 6;
    }
    optional M17 f_49 = 49;
  }
  optional M10 f_71 = 71;
}
