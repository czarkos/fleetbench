// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.request.Message0;

message Message0 {
  optional int32 f_0 = 3;
  optional int32 f_1 = 6;
  optional int32 f_2 = 9;
  optional string f_3 = 11;
  optional int32 f_4 = 13;
  optional fixed64 f_5 = 14;
  optional fixed64 f_6 = 16;
  optional fixed64 f_7 = 20;
  optional bool f_8 = 21;
  optional string f_9 = 23;
  optional fixed32 f_10 = 24;
  optional fixed64 f_11 = 25;
  optional fixed64 f_12 = 27;
  optional int32 f_13 = 28;
  optional fixed64 f_14 = 31;
  optional string f_15 = 32;
  optional int32 f_16 = 34;
  optional fixed32 f_17 = 37;
  optional string f_18 = 39;
  optional int32 f_19 = 41;
  optional fixed64 f_20 = 43;
  optional fixed64 f_21 = 45;
  optional fixed32 f_22 = 46;
  optional string f_23 = 48;
  optional string f_24 = 49;
  optional fixed64 f_25 = 53;
  optional double f_26 = 55;
  optional fixed64 f_27 = 56;
  optional string f_28 = 58;
  message M1 {
    optional double f_0 = 2;
    message M11 {
      optional int32 f_0 = 2;
      optional string f_1 = 4;
      optional int32 f_2 = 7;
      optional int32 f_3 = 9;
      optional int32 f_4 = 13;
      message M37 {
        optional int32 f_0 = 2;
        message M46 {
          optional fixed64 f_0 = 1;
          optional int64 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional string f_3 = 7;
        }
        optional M46 f_4 = 4;
        message M49 {
          optional bool f_0 = 1;
        }
        optional M49 f_5 = 5;
      }
      optional M37 f_14 = 14;
    }
    optional M11 f_3 = 3;
    message M13 {
      optional fixed32 f_0 = 4;
    }
    repeated M13 f_6 = 6;
  }
  optional M1 f_61 = 61;
  message M2 {
    optional string f_0 = 1;
    message M12 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional fixed64 f_5 = 7;
      message M38 {
        optional string f_0 = 1;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 46;
          E8_CONST_2 = 32;
          E8_CONST_3 = 12;
          E8_CONST_4 = 81;
          E8_CONST_5 = 4;
        }
        optional E8 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed64 f_4 = 5;
        message M44 {
          optional fixed32 f_0 = 2;
          optional int32 f_1 = 4;
          optional string f_2 = 5;
          optional fixed32 f_3 = 6;
        }
        optional M44 f_7 = 7;
      }
      optional M38 f_11 = 11;
    }
    optional M12 f_4 = 4;
    message M14 {
      optional fixed32 f_0 = 2;
      message M41 {
        optional int32 f_0 = 1;
        optional string f_1 = 4;
        optional int32 f_2 = 5;
        optional int64 f_3 = 8;
        optional bool f_4 = 10;
        optional string f_5 = 11;
        optional string f_6 = 12;
        optional string f_7 = 14;
        optional bool f_8 = 15;
        optional double f_9 = 16;
        optional int32 f_10 = 17;
        optional fixed64 f_11 = 18;
        optional bool f_12 = 20;
        optional int32 f_13 = 23;
        optional string f_14 = 24;
        optional int32 f_15 = 26;
        optional fixed64 f_16 = 27;
        optional string f_17 = 28;
        optional fixed64 f_18 = 31;
        optional string f_19 = 34;
        optional string f_20 = 36;
        optional string f_21 = 37;
        optional int32 f_22 = 39;
        optional string f_23 = 40;
        optional string f_24 = 41;
        optional string f_25 = 42;
        optional bool f_26 = 44;
        optional int32 f_27 = 46;
        optional int32 f_28 = 49;
        optional string f_29 = 50;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 8;
          E9_CONST_2 = 65;
          E9_CONST_3 = 4;
          E9_CONST_4 = 97;
          E9_CONST_5 = 108;
        }
        optional E9 f_30 = 51;
        optional fixed64 f_31 = 53;
        message M47 {
          optional fixed64 f_0 = 1;
          enum E10 {
            E10_UNSPECIFIED = 0;
            E10_CONST_1 = 30;
            E10_CONST_2 = 95;
            E10_CONST_3 = 20;
            E10_CONST_4 = 67;
            E10_CONST_5 = 116;
          }
          repeated E10 f_1 = 4 [packed = true];
          optional fixed64 f_2 = 6;
          optional int32 f_3 = 7;
          message M53 {
            enum E12 {
              E12_UNSPECIFIED = 0;
              E12_CONST_1 = 49;
              E12_CONST_2 = 94;
              E12_CONST_3 = 109;
              E12_CONST_4 = 1;
              E12_CONST_5 = 34;
            }
            repeated E12 f_0 = 3 [packed = true];
            optional string f_1 = 4;
            optional fixed64 f_2 = 6;
            optional int32 f_3 = 9;
            optional double f_4 = 15;
            optional int32 f_5 = 16;
            optional fixed64 f_6 = 18;
            optional int32 f_7 = 20;
            optional fixed64 f_8 = 22;
            optional string f_9 = 23;
            optional fixed64 f_10 = 25;
            optional int32 f_11 = 26;
            optional string f_12 = 28;
            optional int32 f_13 = 29;
            optional bool f_14 = 31;
            optional int32 f_15 = 32;
            optional fixed32 f_16 = 33;
            optional int32 f_17 = 35;
            optional fixed32 f_18 = 36;
            optional fixed64 f_19 = 40;
            enum E13 {
              E13_UNSPECIFIED = 0;
              E13_CONST_1 = 48;
              E13_CONST_2 = 116;
              E13_CONST_3 = 11;
              E13_CONST_4 = 60;
              E13_CONST_5 = 52;
            }
            repeated E13 f_20 = 42 [packed = true];
            optional int32 f_21 = 43;
            optional fixed64 f_22 = 46;
            optional bool f_23 = 47;
            optional string f_24 = 49;
            enum E14 {
              E14_UNSPECIFIED = 0;
              E14_CONST_1 = 75;
              E14_CONST_2 = 32;
              E14_CONST_3 = 31;
              E14_CONST_4 = 95;
              E14_CONST_5 = 9;
            }
            repeated E14 f_25 = 50 [packed = true];
            optional string f_26 = 52;
            optional bool f_27 = 53;
            optional bool f_28 = 54;
            optional fixed64 f_29 = 56;
            optional double f_30 = 57;
            message M54 {
              optional string f_0 = 1;
              optional bool f_1 = 3;
              optional int32 f_2 = 5;
              enum E15 {
                E15_UNSPECIFIED = 0;
                E15_CONST_1 = 98;
                E15_CONST_2 = 28;
                E15_CONST_3 = 5;
                E15_CONST_4 = 59;
                E15_CONST_5 = 64;
              }
              repeated E15 f_3 = 6 [packed = true];
            }
            optional M54 f_58 = 58;
          }
          optional M53 f_8 = 8;
        }
        repeated M47 f_54 = 54;
        message M48 {
          optional int32 f_0 = 3;
          optional int32 f_1 = 4;
          optional fixed64 f_2 = 7;
          message M51 {
            optional fixed32 f_0 = 2;
          }
          optional M51 f_8 = 8;
        }
        optional M48 f_55 = 55;
      }
      repeated M41 f_4 = 4;
    }
    optional M14 f_5 = 5;
    message M21 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 5;
      message M36 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
        optional string f_2 = 3;
        optional string f_3 = 4;
        optional string f_4 = 6;
        optional fixed64 f_5 = 8;
        optional fixed64 f_6 = 10;
        optional string f_7 = 12;
        optional int64 f_8 = 13;
        optional int32 f_9 = 14;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 28;
          E7_CONST_2 = 44;
          E7_CONST_3 = 20;
          E7_CONST_4 = 47;
          E7_CONST_5 = 89;
        }
        repeated E7 f_10 = 15 [packed = true];
        optional fixed32 f_11 = 16;
        optional bool f_12 = 18;
        optional fixed64 f_13 = 19;
        optional fixed32 f_14 = 21;
        optional bool f_15 = 23;
        optional string f_16 = 24;
        optional int32 f_17 = 26;
        optional fixed64 f_18 = 28;
        optional int32 f_19 = 29;
        optional int32 f_20 = 32;
        optional int32 f_21 = 33;
        optional string f_22 = 35;
        optional int32 f_23 = 36;
        optional int32 f_24 = 37;
        optional string f_25 = 41;
      }
      optional M36 f_6 = 6;
    }
    repeated M21 f_7 = 7;
    message M27 {
      optional int32 f_0 = 3;
      optional string f_1 = 6;
    }
    optional M27 f_9 = 9;
  }
  optional M2 f_64 = 64;
  message M3 {
    optional string f_0 = 3;
    message M28 {
      optional int32 f_0 = 1;
    }
    optional M28 f_4 = 4;
    message M30 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 26;
        E5_CONST_2 = 15;
        E5_CONST_3 = 58;
        E5_CONST_4 = 111;
        E5_CONST_5 = 118;
      }
      optional E5 f_2 = 5;
      optional string f_3 = 6;
      optional string f_4 = 9;
    }
    repeated M30 f_5 = 5;
  }
  repeated M3 f_65 = 65;
  message M4 {
    optional bool f_0 = 1;
    message M31 {
      optional double f_0 = 3;
    }
    repeated M31 f_2 = 2;
  }
  optional M4 f_68 = 68;
  message M5 {
    optional string f_0 = 3;
    message M26 {
      optional fixed32 f_0 = 1;
    }
    repeated M26 f_5 = 5;
  }
  optional M5 f_70 = 70;
  message M6 {
    optional fixed32 f_0 = 1;
    message M15 {
      optional bool f_0 = 1;
    }
    repeated M15 f_4 = 4;
    message M18 {
      optional bool f_0 = 3;
      optional int32 f_1 = 5;
      message M34 {
        optional int32 f_0 = 1;
        message M43 {
          optional string f_0 = 2;
          optional fixed64 f_1 = 3;
          optional fixed64 f_2 = 5;
          optional fixed64 f_3 = 7;
        }
        optional M43 f_3 = 3;
      }
      repeated M34 f_7 = 7;
    }
    repeated M18 f_6 = 6;
    message M20 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 4;
      optional int32 f_3 = 6;
      optional int32 f_4 = 7;
      optional int32 f_5 = 9;
      optional int32 f_6 = 12;
      message M35 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 4;
        optional string f_2 = 6;
        optional fixed64 f_3 = 8;
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 105;
          E6_CONST_2 = 27;
          E6_CONST_3 = 20;
          E6_CONST_4 = 96;
          E6_CONST_5 = 50;
        }
        repeated E6 f_4 = 10 [packed = true];
      }
      optional M35 f_14 = 14;
    }
    optional M20 f_8 = 8;
    message M32 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 3;
    }
    optional M32 f_10 = 10;
  }
  optional M6 f_71 = 71;
  message M7 {
    optional fixed64 f_0 = 3;
    message M19 {
      optional double f_0 = 1;
      optional string f_1 = 4;
      optional int32 f_2 = 6;
      optional fixed64 f_3 = 7;
    }
    optional M19 f_4 = 4;
    message M22 {
      optional fixed32 f_0 = 2;
      optional double f_1 = 3;
      optional string f_2 = 5;
      optional fixed64 f_3 = 7;
      optional fixed64 f_4 = 10;
      message M40 {
        optional fixed64 f_0 = 1;
        message M42 {
          optional string f_0 = 1;
          optional bool f_1 = 3;
        }
        optional M42 f_2 = 2;
      }
      optional M40 f_11 = 11;
    }
    optional M22 f_7 = 7;
    message M23 {
      optional bool f_0 = 6;
      optional string f_1 = 8;
      optional double f_2 = 11;
      optional string f_3 = 12;
      optional int32 f_4 = 13;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 78;
        E4_CONST_2 = 70;
        E4_CONST_3 = 41;
        E4_CONST_4 = 122;
        E4_CONST_5 = 85;
      }
      optional E4 f_5 = 14;
    }
    repeated M23 f_9 = 9;
  }
  repeated M7 f_72 = 72;
  message M8 {
    optional string f_0 = 3;
    optional int32 f_1 = 5;
  }
  optional M8 f_74 = 74;
  message M9 {
    optional string f_0 = 1;
    message M16 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 4;
      optional int32 f_2 = 5;
    }
    repeated M16 f_2 = 2;
    message M17 {
      optional fixed64 f_0 = 2;
    }
    repeated M17 f_3 = 3;
    message M25 {
      optional fixed64 f_0 = 1;
      message M39 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
        optional fixed64 f_2 = 3;
        optional fixed64 f_3 = 5;
        optional bool f_4 = 6;
        message M45 {
          optional int32 f_0 = 1;
          optional string f_1 = 3;
          optional fixed64 f_2 = 4;
          message M52 {
            optional bool f_0 = 1;
          }
          optional M52 f_5 = 5;
        }
        optional M45 f_8 = 8;
        message M50 {
          enum E11 {
            E11_UNSPECIFIED = 0;
            E11_CONST_1 = 113;
            E11_CONST_2 = 71;
            E11_CONST_3 = 73;
            E11_CONST_4 = 98;
            E11_CONST_5 = 70;
          }
          repeated E11 f_0 = 2 [packed = true];
        }
        optional M50 f_9 = 9;
      }
      repeated M39 f_2 = 2;
    }
    repeated M25 f_5 = 5;
    message M29 {
      optional int32 f_0 = 1;
    }
    repeated M29 f_7 = 7;
    message M33 {
      optional bool f_0 = 1;
    }
    optional M33 f_9 = 9;
  }
  optional M9 f_76 = 76;
  message M10 {
    optional string f_0 = 2;
    optional int64 f_1 = 5;
    optional string f_2 = 7;
    optional fixed64 f_3 = 8;
    optional bool f_4 = 10;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 121;
      E1_CONST_2 = 2;
      E1_CONST_3 = 26;
      E1_CONST_4 = 10;
      E1_CONST_5 = 44;
    }
    repeated E1 f_5 = 14 [packed = true];
    optional int32 f_6 = 15;
    optional bool f_7 = 17;
    optional fixed32 f_8 = 20;
    optional fixed64 f_9 = 23;
    optional fixed64 f_10 = 26;
    optional bool f_11 = 28;
    optional string f_12 = 29;
    optional string f_13 = 31;
    optional int32 f_14 = 33;
    optional string f_15 = 34;
    optional string f_16 = 36;
    optional fixed64 f_17 = 38;
    optional string f_18 = 40;
    optional int32 f_19 = 41;
    optional fixed64 f_20 = 42;
    optional int32 f_21 = 44;
    optional fixed64 f_22 = 48;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 27;
      E2_CONST_2 = 120;
      E2_CONST_3 = 65;
      E2_CONST_4 = 121;
      E2_CONST_5 = 67;
    }
    optional E2 f_23 = 49;
    optional fixed64 f_24 = 50;
    optional int32 f_25 = 53;
    optional fixed32 f_26 = 54;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 79;
      E3_CONST_2 = 29;
      E3_CONST_3 = 62;
      E3_CONST_4 = 117;
      E3_CONST_5 = 73;
    }
    optional E3 f_27 = 56;
    optional fixed64 f_28 = 59;
    optional string f_29 = 61;
    message M24 {
      optional string f_0 = 1;
    }
    optional M24 f_63 = 63;
  }
  optional M10 f_78 = 78;
}
