// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.response.Message2;

message Message2 {
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 17;
    E1_CONST_2 = 85;
    E1_CONST_3 = 26;
    E1_CONST_4 = 34;
    E1_CONST_5 = 89;
  }
  optional E1 f_0 = 1;
  optional double f_1 = 3;
  optional double f_2 = 4;
  optional int32 f_3 = 5;
  optional int32 f_4 = 6;
  optional int32 f_5 = 8;
  optional fixed64 f_6 = 9;
  optional int64 f_7 = 10;
  optional int32 f_8 = 11;
  optional double f_9 = 12;
  optional double f_10 = 13;
  optional int32 f_11 = 14;
  optional fixed64 f_12 = 15;
  optional bool f_13 = 17;
  optional bool f_14 = 18;
  optional bool f_15 = 19;
  optional fixed64 f_16 = 20;
  optional float f_17 = 21;
  optional double f_18 = 22;
  optional fixed64 f_19 = 23;
  optional float f_20 = 24;
  optional float f_21 = 26;
  optional float f_22 = 27;
  optional fixed64 f_23 = 28;
  optional int32 f_24 = 29;
  optional double f_25 = 30;
  message M1 {
    optional string f_0 = 1;
    optional float f_1 = 2;
    optional fixed64 f_2 = 3;
    optional int32 f_3 = 4;
    optional int32 f_4 = 5;
    optional int32 f_5 = 6;
    message M5 {
      optional int32 f_0 = 1;
      optional float f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int64 f_3 = 5;
      optional int32 f_4 = 6;
      optional int32 f_5 = 7;
      optional int32 f_6 = 8;
      optional double f_7 = 9;
      optional fixed64 f_8 = 10;
      optional bool f_9 = 12;
      optional int32 f_10 = 13;
      optional bool f_11 = 15;
      optional fixed64 f_12 = 16;
      optional double f_13 = 17;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 80;
        E2_CONST_2 = 64;
        E2_CONST_3 = 88;
        E2_CONST_4 = 101;
        E2_CONST_5 = 115;
      }
      optional E2 f_14 = 18;
      optional int32 f_15 = 19;
      message M22 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional float f_2 = 3;
        optional float f_3 = 4;
        optional int32 f_4 = 5;
        optional bool f_5 = 6;
      }
      repeated M22 f_20 = 20;
      message M31 {
        optional int32 f_0 = 1;
      }
      optional M31 f_21 = 21;
    }
    repeated M5 f_7 = 7;
    message M8 {
      optional float f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional double f_4 = 5;
      optional double f_5 = 6;
    }
    optional M8 f_8 = 8;
    message M13 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M13 f_10 = 10;
  }
  optional M1 f_31 = 31;
  message M2 {
    optional double f_0 = 1;
    message M10 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 4;
      optional int32 f_2 = 5;
      optional double f_3 = 6;
    }
    optional M10 f_2 = 2;
    message M14 {
      optional double f_0 = 1;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 97;
        E6_CONST_2 = 64;
        E6_CONST_3 = 79;
        E6_CONST_4 = 37;
        E6_CONST_5 = 82;
      }
      optional E6 f_1 = 2;
      message M23 {
        optional float f_0 = 1;
        optional fixed64 f_1 = 3;
        message M39 {
          optional fixed64 f_0 = 1;
          enum E8 {
            E8_UNSPECIFIED = 0;
            E8_CONST_1 = 122;
            E8_CONST_2 = 80;
            E8_CONST_3 = 77;
            E8_CONST_4 = 11;
            E8_CONST_5 = 66;
          }
          optional E8 f_1 = 2;
          optional string f_2 = 3;
          optional int32 f_3 = 5;
          message M41 {
            optional double f_0 = 1;
            optional int32 f_1 = 2;
            optional bool f_2 = 3;
            optional int32 f_3 = 4;
            optional double f_4 = 5;
          }
          optional M41 f_6 = 6;
        }
        repeated M39 f_4 = 4;
      }
      optional M23 f_3 = 3;
      message M33 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional float f_2 = 3;
        optional float f_3 = 4;
        message M40 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional double f_3 = 4;
          optional int32 f_4 = 5;
          optional int32 f_5 = 6;
        }
        optional M40 f_5 = 5;
      }
      repeated M33 f_4 = 4;
    }
    optional M14 f_3 = 3;
    message M15 {
      optional float f_0 = 1;
      message M29 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
      }
      optional M29 f_2 = 2;
    }
    repeated M15 f_4 = 4;
    message M17 {
      optional double f_0 = 2;
      optional float f_1 = 3;
      optional int32 f_2 = 4;
      optional double f_3 = 5;
      optional bool f_4 = 6;
      message M27 {
        optional double f_0 = 1;
        message M34 {
          optional int32 f_0 = 2;
        }
        optional M34 f_2 = 2;
      }
      repeated M27 f_7 = 7;
    }
    optional M17 f_5 = 5;
    message M19 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional int32 f_4 = 5;
    }
    repeated M19 f_6 = 6;
  }
  repeated M2 f_32 = 32;
  message M3 {
    optional double f_0 = 1;
    optional int32 f_1 = 2;
    optional fixed64 f_2 = 3;
    optional fixed64 f_3 = 4;
    message M6 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional bool f_2 = 3;
      message M32 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 3;
        optional double f_2 = 5;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 12;
          E7_CONST_2 = 14;
          E7_CONST_3 = 16;
          E7_CONST_4 = 26;
          E7_CONST_5 = 83;
        }
        repeated E7 f_3 = 6 [packed = true];
        optional double f_4 = 7;
      }
      repeated M32 f_4 = 4;
    }
    optional M6 f_5 = 5;
    message M7 {
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 61;
        E3_CONST_2 = 51;
        E3_CONST_3 = 38;
        E3_CONST_4 = 35;
        E3_CONST_5 = 53;
      }
      optional E3 f_0 = 2;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 32;
        E4_CONST_2 = 33;
        E4_CONST_3 = 10;
        E4_CONST_4 = 58;
        E4_CONST_5 = 61;
      }
      optional E4 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional float f_3 = 5;
      optional fixed64 f_4 = 6;
      message M21 {
        optional float f_0 = 1;
        message M35 {
          optional double f_0 = 1;
        }
        optional M35 f_2 = 2;
        message M37 {
          optional float f_0 = 1;
        }
        optional M37 f_3 = 3;
      }
      repeated M21 f_7 = 7;
    }
    optional M7 f_7 = 7;
    message M9 {
      optional fixed32 f_0 = 1;
      message M24 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
      }
      repeated M24 f_2 = 2;
      message M28 {
        optional double f_0 = 1;
      }
      repeated M28 f_3 = 3;
    }
    optional M9 f_8 = 8;
    message M16 {
      optional int32 f_0 = 1;
      message M30 {
        optional double f_0 = 1;
      }
      repeated M30 f_3 = 3;
    }
    optional M16 f_9 = 9;
  }
  optional M3 f_33 = 33;
  message M4 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 3;
    optional int32 f_2 = 4;
    optional int32 f_3 = 5;
    optional double f_4 = 6;
    optional int32 f_5 = 8;
    optional fixed64 f_6 = 9;
    optional string f_7 = 10;
    optional double f_8 = 11;
    optional double f_9 = 13;
    optional fixed64 f_10 = 14;
    optional int32 f_11 = 15;
    optional double f_12 = 16;
    optional double f_13 = 17;
    optional fixed64 f_14 = 18;
    optional double f_15 = 19;
    optional double f_16 = 20;
    message M11 {
      optional int32 f_0 = 1;
      optional bool f_1 = 2;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 98;
        E5_CONST_2 = 38;
        E5_CONST_3 = 58;
        E5_CONST_4 = 21;
        E5_CONST_5 = 60;
      }
      optional E5 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional fixed64 f_4 = 5;
      optional bool f_5 = 6;
      optional double f_6 = 7;
      message M20 {
        optional fixed64 f_0 = 2;
      }
      optional M20 f_9 = 9;
      message M26 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional fixed64 f_3 = 5;
      }
      repeated M26 f_10 = 10;
    }
    repeated M11 f_21 = 21;
    message M12 {
      optional double f_0 = 2;
      message M25 {
        optional int32 f_0 = 1;
        message M36 {
          optional int32 f_0 = 1;
        }
        optional M36 f_3 = 3;
        message M38 {
          optional fixed64 f_0 = 1;
        }
        optional M38 f_4 = 4;
      }
      repeated M25 f_3 = 3;
    }
    optional M12 f_22 = 22;
    message M18 {
      optional float f_0 = 1;
    }
    optional M18 f_23 = 23;
  }
  optional M4 f_34 = 34;
}
