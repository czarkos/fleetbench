// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.response.Message2;

message Message2 {
  repeated int64 f_0 = 1 [packed = true];
  message M1 {
    optional uint64 f_0 = 1;
    message M6 {
      repeated int64 f_0 = 1 [packed = true];
      optional bool f_1 = 2;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 23;
        E5_CONST_2 = 10;
        E5_CONST_3 = 72;
        E5_CONST_4 = 105;
        E5_CONST_5 = 18;
      }
      optional E5 f_2 = 4;
      optional string f_3 = 5;
      optional bytes f_4 = 6 [ctype = CORD];
      optional string f_5 = 7;
    }
    optional M6 f_2 = 2;
  }
  optional M1 f_2 = 2;
  message M2 {
    optional uint64 f_0 = 2;
    message M5 {
      optional int32 f_0 = 1;
      message M7 {
        optional uint32 f_0 = 2;
        optional bool f_1 = 4;
        message M8 {
          optional bytes f_0 = 2;
          optional bytes f_1 = 4 [ctype = CORD];
          optional bytes f_2 = 5;
          enum E6 {
            E6_UNSPECIFIED = 0;
            E6_CONST_1 = 72;
            E6_CONST_2 = 100;
            E6_CONST_3 = 74;
            E6_CONST_4 = 55;
            E6_CONST_5 = 53;
          }
          optional E6 f_3 = 6;
          optional string f_4 = 8;
          message M9 {
            optional bytes f_0 = 1;
            optional uint64 f_1 = 2;
            optional string f_2 = 3;
            optional uint64 f_3 = 4;
            optional bytes f_4 = 5 [ctype = CORD];
            repeated bytes f_5 = 6;
            repeated int64 f_6 = 7 [packed = true];
            optional uint32 f_7 = 8;
            repeated int64 f_8 = 9 [packed = true];
            enum E7 {
              E7_UNSPECIFIED = 0;
              E7_CONST_1 = 108;
              E7_CONST_2 = 37;
              E7_CONST_3 = 7;
              E7_CONST_4 = 117;
              E7_CONST_5 = 105;
            }
            optional E7 f_9 = 11;
            repeated int64 f_10 = 12 [packed = true];
            optional uint64 f_11 = 14;
            optional uint64 f_12 = 15;
            repeated int64 f_13 = 16 [packed = true];
            repeated int64 f_14 = 19 [packed = true];
            enum E8 {
              E8_UNSPECIFIED = 0;
              E8_CONST_1 = 18;
              E8_CONST_2 = 80;
              E8_CONST_3 = 5;
              E8_CONST_4 = 86;
              E8_CONST_5 = 30;
            }
            optional E8 f_15 = 20;
            optional bytes f_16 = 21 [ctype = CORD];
          }
          optional M9 f_9 = 9;
        }
        optional M8 f_5 = 5;
      }
      optional M7 f_2 = 2;
    }
    optional M5 f_3 = 3;
  }
  repeated M2 f_4 = 4;
  message M3 {
    optional string f_0 = 1;
    optional string f_1 = 3;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 3;
      E1_CONST_2 = 7;
      E1_CONST_3 = 13;
      E1_CONST_4 = 87;
      E1_CONST_5 = 104;
    }
    optional E1 f_2 = 4;
    repeated int64 f_3 = 5 [packed = true];
    repeated int64 f_4 = 6 [packed = true];
    optional bool f_5 = 7;
    optional bytes f_6 = 8 [ctype = CORD];
    repeated bytes f_7 = 9;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 95;
      E2_CONST_2 = 53;
      E2_CONST_3 = 57;
      E2_CONST_4 = 52;
      E2_CONST_5 = 19;
    }
    optional E2 f_8 = 10;
    repeated int64 f_9 = 11 [packed = true];
    repeated bytes f_10 = 14;
    repeated int64 f_11 = 15 [packed = true];
    optional bytes f_12 = 17;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 14;
      E3_CONST_2 = 37;
      E3_CONST_3 = 16;
      E3_CONST_4 = 69;
      E3_CONST_5 = 41;
    }
    optional E3 f_13 = 18;
    optional string f_14 = 19;
    optional string f_15 = 20;
    optional string f_16 = 21;
    message M4 {
      optional string f_0 = 1;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 99;
        E4_CONST_2 = 30;
        E4_CONST_3 = 29;
        E4_CONST_4 = 76;
        E4_CONST_5 = 90;
      }
      optional E4 f_1 = 2;
      repeated int64 f_2 = 3 [packed = true];
    }
    optional M4 f_22 = 22;
  }
  optional M3 f_6 = 6;
}
