// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.response.Message0;

message Message0 {
  optional double f_0 = 2;
  optional fixed64 f_1 = 3;
  optional double f_2 = 5;
  optional int32 f_3 = 6;
  optional string f_4 = 7;
  optional double f_5 = 8;
  optional int32 f_6 = 10;
  optional int32 f_7 = 11;
  optional double f_8 = 12;
  optional float f_9 = 13;
  optional bool f_10 = 14;
  optional fixed64 f_11 = 15;
  optional double f_12 = 16;
  optional fixed64 f_13 = 17;
  optional int32 f_14 = 18;
  optional double f_15 = 19;
  optional double f_16 = 20;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 60;
    E1_CONST_2 = 106;
    E1_CONST_3 = 26;
    E1_CONST_4 = 100;
    E1_CONST_5 = 12;
  }
  optional E1 f_17 = 21;
  optional float f_18 = 22;
  optional int32 f_19 = 24;
  optional fixed64 f_20 = 25;
  optional double f_21 = 26;
  optional int32 f_22 = 27;
  optional bool f_23 = 28;
  optional double f_24 = 29;
  optional fixed64 f_25 = 30;
  optional int32 f_26 = 31;
  message M1 {
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 77;
      E2_CONST_2 = 26;
      E2_CONST_3 = 13;
      E2_CONST_4 = 7;
      E2_CONST_5 = 86;
    }
    repeated E2 f_0 = 1 [packed = true];
    optional double f_1 = 2;
    optional fixed64 f_2 = 3;
    optional int32 f_3 = 4;
    optional int32 f_4 = 5;
    optional int32 f_5 = 6;
    optional fixed64 f_6 = 7;
    optional fixed64 f_7 = 8;
    optional fixed64 f_8 = 10;
    optional int32 f_9 = 12;
    optional bool f_10 = 13;
    optional string f_11 = 14;
    optional bool f_12 = 16;
    optional int32 f_13 = 17;
    optional fixed64 f_14 = 18;
    optional double f_15 = 19;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 74;
      E3_CONST_2 = 29;
      E3_CONST_3 = 87;
      E3_CONST_4 = 24;
      E3_CONST_5 = 125;
    }
    optional E3 f_16 = 20;
    message M6 {
      optional float f_0 = 1;
      message M20 {
        optional fixed64 f_0 = 2;
        message M24 {
          optional int32 f_0 = 1;
          optional double f_1 = 3;
          enum E5 {
            E5_UNSPECIFIED = 0;
            E5_CONST_1 = 38;
            E5_CONST_2 = 30;
            E5_CONST_3 = 5;
            E5_CONST_4 = 79;
            E5_CONST_5 = 84;
          }
          optional E5 f_2 = 4;
          optional bool f_3 = 5;
          optional int32 f_4 = 6;
        }
        optional M24 f_3 = 3;
      }
      optional M20 f_2 = 2;
    }
    optional M6 f_21 = 21;
    message M12 {
      optional int32 f_0 = 2;
    }
    optional M12 f_22 = 22;
    message M14 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 5;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 65;
        E4_CONST_2 = 69;
        E4_CONST_3 = 91;
        E4_CONST_4 = 98;
        E4_CONST_5 = 85;
      }
      repeated E4 f_4 = 6 [packed = true];
      optional int32 f_5 = 8;
      optional double f_6 = 9;
      optional double f_7 = 10;
      optional double f_8 = 11;
      optional int32 f_9 = 12;
      optional double f_10 = 13;
      optional fixed64 f_11 = 14;
      optional fixed64 f_12 = 15;
      optional int32 f_13 = 16;
      optional double f_14 = 17;
    }
    optional M14 f_23 = 23;
    message M16 {
      optional fixed64 f_0 = 1;
    }
    optional M16 f_24 = 24;
  }
  optional M1 f_32 = 32;
  message M2 {
    optional double f_0 = 1;
    optional double f_1 = 2;
    optional fixed64 f_2 = 3;
    optional fixed64 f_3 = 4;
    optional float f_4 = 5;
    optional int32 f_5 = 6;
    message M13 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional double f_2 = 3;
    }
    optional M13 f_7 = 7;
  }
  optional M2 f_33 = 33;
  message M3 {
    optional int32 f_0 = 1;
    message M7 {
      optional double f_0 = 1;
    }
    optional M7 f_2 = 2;
    message M8 {
      optional float f_0 = 1;
      message M21 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional bool f_3 = 4;
        optional double f_4 = 5;
        message M23 {
          optional int32 f_0 = 1;
        }
        optional M23 f_6 = 6;
        message M25 {
          optional double f_0 = 1;
        }
        optional M25 f_7 = 7;
      }
      optional M21 f_2 = 2;
    }
    optional M8 f_3 = 3;
    message M9 {
      optional double f_0 = 1;
    }
    optional M9 f_4 = 4;
    message M11 {
      optional double f_0 = 1;
      message M18 {
        optional fixed64 f_0 = 2;
      }
      optional M18 f_2 = 2;
    }
    optional M11 f_5 = 5;
    message M17 {
      optional fixed64 f_0 = 1;
      message M19 {
        optional int32 f_0 = 1;
      }
      optional M19 f_2 = 2;
    }
    optional M17 f_6 = 6;
  }
  optional M3 f_34 = 34;
  message M4 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 3;
    optional int32 f_3 = 4;
    optional bool f_4 = 5;
    optional double f_5 = 6;
    optional fixed64 f_6 = 7;
    optional bool f_7 = 8;
    optional string f_8 = 10;
    optional fixed64 f_9 = 11;
    optional fixed64 f_10 = 12;
    optional bool f_11 = 13;
    optional fixed64 f_12 = 15;
    optional int32 f_13 = 16;
    optional fixed64 f_14 = 17;
    optional double f_15 = 18;
    optional int32 f_16 = 19;
    optional float f_17 = 20;
    optional double f_18 = 21;
    optional double f_19 = 22;
    optional double f_20 = 23;
    optional bool f_21 = 24;
    message M5 {
      optional fixed64 f_0 = 1;
    }
    optional M5 f_25 = 25;
    message M10 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 4;
      optional fixed64 f_3 = 5;
      optional int32 f_4 = 6;
      message M22 {
        optional bool f_0 = 1;
        optional double f_1 = 2;
        optional bool f_2 = 3;
        optional double f_3 = 4;
        optional fixed64 f_4 = 5;
        optional int32 f_5 = 6;
      }
      optional M22 f_7 = 7;
    }
    optional M10 f_26 = 26;
    message M15 {
      optional float f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 4;
      optional int32 f_4 = 5;
      optional int32 f_5 = 6;
    }
    optional M15 f_27 = 27;
  }
  optional M4 f_35 = 35;
}
