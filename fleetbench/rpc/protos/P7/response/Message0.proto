// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.response.Message0;

message Message0 {
  optional int64 f_0 = 1;
  repeated bytes f_1 = 2;
  message M1 {
    optional uint64 f_0 = 1;
    optional bytes f_1 = 2;
    repeated bytes f_2 = 4;
    optional bytes f_3 = 5;
    repeated int64 f_4 = 6 [packed = true];
    optional uint32 f_5 = 8;
    message M7 {
      optional bytes f_0 = 1;
      optional bool f_1 = 2;
      optional float f_2 = 3;
      optional string f_3 = 4;
      optional int32 f_4 = 5;
      optional fixed32 f_5 = 6;
      optional double f_6 = 7;
      repeated bytes f_7 = 8;
      optional int64 f_8 = 9;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 47;
        E2_CONST_2 = 23;
        E2_CONST_3 = 124;
        E2_CONST_4 = 28;
        E2_CONST_5 = 112;
      }
      optional E2 f_9 = 10;
      optional string f_10 = 11;
      optional bytes f_11 = 12;
      optional bytes f_12 = 13 [ctype = CORD];
      message M8 {
        optional bytes f_0 = 2;
      }
      repeated M8 f_14 = 14;
      message M9 {
        repeated int64 f_0 = 1 [packed = true];
        optional string f_1 = 2;
        enum E3 {
          E3_UNSPECIFIED = 0;
          E3_CONST_1 = 11;
          E3_CONST_2 = 25;
          E3_CONST_3 = 14;
          E3_CONST_4 = 77;
          E3_CONST_5 = 51;
        }
        optional E3 f_2 = 4;
        optional string f_3 = 5;
        message M10 {
          optional bytes f_0 = 2 [ctype = CORD];
          message M11 {
            enum E4 {
              E4_UNSPECIFIED = 0;
              E4_CONST_1 = 89;
              E4_CONST_2 = 63;
              E4_CONST_3 = 73;
              E4_CONST_4 = 80;
              E4_CONST_5 = 126;
            }
            optional E4 f_0 = 2;
            repeated int64 f_1 = 3 [packed = true];
            optional bytes f_2 = 4 [ctype = CORD];
          }
          repeated M11 f_3 = 3;
        }
        optional M10 f_7 = 7;
      }
      repeated M9 f_15 = 15;
    }
    optional M7 f_9 = 9;
  }
  optional M1 f_4 = 4;
  message M2 {
    optional int64 f_0 = 1;
  }
  optional M2 f_6 = 6;
  message M3 {
    optional string f_0 = 2;
  }
  repeated M3 f_7 = 7;
  message M4 {
    repeated int64 f_0 = 1 [packed = true];
    optional string f_1 = 3;
  }
  optional M4 f_8 = 8;
  message M5 {
    optional bytes f_0 = 1 [ctype = CORD];
  }
  optional M5 f_9 = 9;
  message M6 {
    optional string f_0 = 1;
    repeated int64 f_1 = 3 [packed = true];
    repeated int64 f_2 = 4 [packed = true];
    optional bytes f_3 = 6;
    optional bytes f_4 = 7 [ctype = CORD];
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 21;
      E1_CONST_2 = 17;
      E1_CONST_3 = 94;
      E1_CONST_4 = 119;
      E1_CONST_5 = 78;
    }
    optional E1 f_5 = 8;
    optional string f_6 = 9;
    optional uint32 f_7 = 10;
    repeated int64 f_8 = 11 [packed = true];
    optional float f_9 = 12;
    repeated bytes f_10 = 13;
    optional float f_11 = 14;
    optional uint64 f_12 = 16;
    optional int32 f_13 = 17;
    optional uint32 f_14 = 18;
    optional string f_15 = 19;
    optional bytes f_16 = 21 [ctype = CORD];
    optional string f_17 = 22;
  }
  repeated M6 f_11 = 11;
}
