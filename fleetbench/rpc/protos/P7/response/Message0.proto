// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.response.Message0;

message Message0 {
  optional bool f_0 = 1;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 6;
    E1_CONST_2 = 52;
    E1_CONST_3 = 16;
    E1_CONST_4 = 102;
    E1_CONST_5 = 126;
  }
  optional E1 f_1 = 3;
  optional fixed64 f_2 = 4;
  optional fixed64 f_3 = 5;
  optional double f_4 = 6;
  optional fixed64 f_5 = 7;
  optional double f_6 = 8;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 93;
    E2_CONST_2 = 116;
    E2_CONST_3 = 108;
    E2_CONST_4 = 37;
    E2_CONST_5 = 62;
  }
  repeated E2 f_7 = 11 [packed = true];
  optional int32 f_8 = 12;
  optional double f_9 = 14;
  optional bool f_10 = 15;
  optional double f_11 = 16;
  optional double f_12 = 17;
  optional int32 f_13 = 18;
  optional int32 f_14 = 19;
  optional int32 f_15 = 20;
  optional int32 f_16 = 21;
  optional double f_17 = 22;
  optional int32 f_18 = 23;
  optional int32 f_19 = 24;
  optional int64 f_20 = 25;
  optional int32 f_21 = 26;
  optional int32 f_22 = 27;
  optional double f_23 = 28;
  optional float f_24 = 29;
  optional int32 f_25 = 31;
  message M1 {
    optional int32 f_0 = 1;
    message M22 {
      optional double f_0 = 1;
    }
    repeated M22 f_2 = 2;
  }
  optional M1 f_32 = 32;
  message M2 {
    optional bool f_0 = 1;
    optional int32 f_1 = 2;
    optional bool f_2 = 3;
    optional fixed64 f_3 = 4;
    optional int32 f_4 = 5;
    message M28 {
      optional double f_0 = 2;
      optional int64 f_1 = 3;
      optional int32 f_2 = 5;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 100;
        E6_CONST_2 = 31;
        E6_CONST_3 = 43;
        E6_CONST_4 = 85;
        E6_CONST_5 = 26;
      }
      optional E6 f_3 = 7;
      optional int32 f_4 = 8;
      message M38 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
      }
      optional M38 f_9 = 9;
    }
    optional M28 f_6 = 6;
  }
  optional M2 f_33 = 33;
  message M3 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 4;
    optional int32 f_2 = 5;
    message M14 {
      optional bool f_0 = 1;
      message M37 {
        optional double f_0 = 1;
        optional bool f_1 = 2;
      }
      optional M37 f_4 = 4;
    }
    optional M14 f_6 = 6;
    message M20 {
      optional double f_0 = 1;
    }
    optional M20 f_7 = 7;
  }
  optional M3 f_34 = 34;
  message M4 {
    optional fixed64 f_0 = 1;
    message M26 {
      optional int32 f_0 = 1;
    }
    optional M26 f_2 = 2;
  }
  optional M4 f_35 = 35;
  message M5 {
    optional int32 f_0 = 1;
    message M16 {
      optional fixed64 f_0 = 1;
      message M34 {
        optional int64 f_0 = 1;
      }
      optional M34 f_2 = 2;
    }
    optional M16 f_2 = 2;
  }
  optional M5 f_36 = 36;
  message M6 {
    optional double f_0 = 1;
    optional double f_1 = 2;
    optional bool f_2 = 4;
    message M21 {
      optional float f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
    }
    optional M21 f_5 = 5;
  }
  optional M6 f_37 = 37;
  message M7 {
    optional double f_0 = 1;
    message M18 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 4;
      optional double f_3 = 5;
      optional int32 f_4 = 6;
      optional int32 f_5 = 7;
    }
    optional M18 f_3 = 3;
  }
  repeated M7 f_38 = 38;
  message M8 {
    optional float f_0 = 1;
    message M30 {
      optional int32 f_0 = 1;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 31;
        E7_CONST_2 = 29;
        E7_CONST_3 = 93;
        E7_CONST_4 = 56;
        E7_CONST_5 = 113;
      }
      optional E7 f_1 = 2;
      optional bool f_2 = 3;
      optional int32 f_3 = 4;
      optional double f_4 = 6;
      optional double f_5 = 7;
      optional fixed64 f_6 = 8;
      optional fixed64 f_7 = 9;
      optional fixed64 f_8 = 11;
      optional double f_9 = 12;
      optional float f_10 = 13;
      optional int32 f_11 = 14;
    }
    optional M30 f_2 = 2;
  }
  optional M8 f_39 = 39;
  message M9 {
    optional bool f_0 = 1;
    optional fixed64 f_1 = 2;
    optional double f_2 = 3;
    optional double f_3 = 4;
  }
  optional M9 f_40 = 40;
  message M10 {
    optional double f_0 = 1;
    message M24 {
      optional int32 f_0 = 1;
      optional bool f_1 = 2;
      optional double f_2 = 3;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 72;
        E5_CONST_2 = 61;
        E5_CONST_3 = 109;
        E5_CONST_4 = 111;
        E5_CONST_5 = 59;
      }
      optional E5 f_3 = 4;
    }
    optional M24 f_2 = 2;
    message M25 {
      optional int32 f_0 = 1;
      message M35 {
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 52;
          E9_CONST_2 = 29;
          E9_CONST_3 = 20;
          E9_CONST_4 = 82;
          E9_CONST_5 = 115;
        }
        repeated E9 f_0 = 2 [packed = true];
      }
      optional M35 f_2 = 2;
    }
    repeated M25 f_3 = 3;
    message M29 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      message M31 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
        optional int32 f_3 = 4;
        optional double f_4 = 5;
        optional double f_5 = 6;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 23;
          E8_CONST_2 = 32;
          E8_CONST_3 = 80;
          E8_CONST_4 = 63;
          E8_CONST_5 = 117;
        }
        optional E8 f_6 = 7;
        optional double f_7 = 8;
        optional fixed64 f_8 = 9;
        optional double f_9 = 10;
        optional int32 f_10 = 11;
        optional string f_11 = 12;
        optional fixed64 f_12 = 13;
        optional double f_13 = 14;
        optional fixed64 f_14 = 15;
      }
      optional M31 f_4 = 4;
    }
    repeated M29 f_4 = 4;
  }
  repeated M10 f_41 = 41;
  message M11 {
    optional bool f_0 = 1;
    optional double f_1 = 2;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 59;
      E3_CONST_2 = 76;
      E3_CONST_3 = 66;
      E3_CONST_4 = 13;
      E3_CONST_5 = 17;
    }
    repeated E3 f_2 = 3 [packed = true];
  }
  optional M11 f_43 = 43;
  message M12 {
    optional double f_0 = 1;
    message M15 {
      optional float f_0 = 3;
      message M33 {
        optional float f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
        optional int32 f_3 = 5;
        optional double f_4 = 6;
        message M39 {
          optional double f_0 = 1;
          optional int32 f_1 = 2;
          optional double f_2 = 3;
          optional int32 f_3 = 4;
          optional double f_4 = 5;
          message M41 {
            optional int32 f_0 = 1;
          }
          repeated M41 f_6 = 6;
        }
        optional M39 f_7 = 7;
      }
      optional M33 f_4 = 4;
    }
    optional M15 f_2 = 2;
    message M27 {
      optional double f_0 = 1;
      message M32 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
      }
      optional M32 f_3 = 3;
    }
    optional M27 f_3 = 3;
  }
  optional M12 f_44 = 44;
  message M13 {
    optional double f_0 = 1;
    message M17 {
      optional double f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional int32 f_3 = 5;
      optional int32 f_4 = 6;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 13;
        E4_CONST_2 = 59;
        E4_CONST_3 = 99;
        E4_CONST_4 = 124;
        E4_CONST_5 = 55;
      }
      repeated E4 f_5 = 7 [packed = true];
      optional double f_6 = 8;
      optional double f_7 = 10;
      optional double f_8 = 12;
    }
    optional M17 f_2 = 2;
    message M19 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 3;
      message M36 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        message M40 {
          optional float f_0 = 1;
          optional bool f_1 = 2;
          optional float f_2 = 3;
          optional fixed64 f_3 = 4;
          optional float f_4 = 5;
          optional bool f_5 = 6;
          optional fixed32 f_6 = 7;
          optional float f_7 = 8;
          optional bool f_8 = 9;
          optional float f_9 = 10;
          optional int32 f_10 = 11;
          optional float f_11 = 12;
          optional fixed64 f_12 = 13;
          optional string f_13 = 14;
          optional int32 f_14 = 15;
          optional double f_15 = 18;
        }
        repeated M40 f_3 = 3;
      }
      optional M36 f_4 = 4;
    }
    optional M19 f_3 = 3;
    message M23 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      optional int32 f_4 = 6;
      optional int32 f_5 = 7;
      optional int32 f_6 = 8;
      optional fixed64 f_7 = 9;
      optional fixed64 f_8 = 10;
      optional int32 f_9 = 11;
      optional int32 f_10 = 12;
    }
    optional M23 f_4 = 4;
  }
  optional M13 f_45 = 45;
}
