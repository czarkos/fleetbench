// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P7.response.Message1;

message Message1 {
  optional double f_0 = 1;
  optional int32 f_1 = 2;
  optional double f_2 = 3;
  optional bool f_3 = 5;
  optional float f_4 = 6;
  optional double f_5 = 8;
  optional fixed64 f_6 = 9;
  optional double f_7 = 10;
  optional fixed64 f_8 = 11;
  optional double f_9 = 12;
  optional int32 f_10 = 14;
  optional double f_11 = 15;
  optional int32 f_12 = 16;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 119;
    E1_CONST_2 = 91;
    E1_CONST_3 = 95;
    E1_CONST_4 = 55;
    E1_CONST_5 = 118;
  }
  repeated E1 f_13 = 17 [packed = true];
  optional int32 f_14 = 20;
  optional int32 f_15 = 21;
  optional int32 f_16 = 22;
  optional double f_17 = 23;
  optional int32 f_18 = 24;
  optional bool f_19 = 25;
  optional float f_20 = 26;
  optional double f_21 = 27;
  optional double f_22 = 29;
  optional bool f_23 = 30;
  optional int32 f_24 = 31;
  optional fixed64 f_25 = 32;
  message M1 {
    optional fixed64 f_0 = 1;
    message M20 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional fixed64 f_4 = 5;
      optional fixed64 f_5 = 6;
    }
    optional M20 f_2 = 2;
    message M27 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 4;
      optional int32 f_4 = 5;
      optional double f_5 = 6;
      optional int32 f_6 = 7;
    }
    optional M27 f_3 = 3;
    message M33 {
      optional double f_0 = 1;
    }
    optional M33 f_4 = 4;
  }
  repeated M1 f_34 = 34;
  message M2 {
    optional double f_0 = 2;
    message M12 {
      optional bool f_0 = 1;
    }
    repeated M12 f_4 = 4;
    message M24 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 4;
      optional fixed64 f_3 = 5;
      optional double f_4 = 6;
      optional int32 f_5 = 7;
    }
    optional M24 f_6 = 6;
    message M25 {
      optional double f_0 = 2;
    }
    optional M25 f_7 = 7;
  }
  optional M2 f_36 = 36;
  message M3 {
    optional int32 f_0 = 1;
    message M29 {
      optional int32 f_0 = 1;
    }
    optional M29 f_2 = 2;
    message M32 {
      optional double f_0 = 1;
      message M47 {
        optional float f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional fixed64 f_3 = 4;
        optional int32 f_4 = 5;
      }
      repeated M47 f_2 = 2;
    }
    repeated M32 f_3 = 3;
  }
  optional M3 f_37 = 37;
  message M4 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional double f_2 = 3;
    optional double f_3 = 5;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 120;
      E2_CONST_2 = 62;
      E2_CONST_3 = 98;
      E2_CONST_4 = 60;
      E2_CONST_5 = 126;
    }
    optional E2 f_4 = 6;
    message M17 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      message M38 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 77;
          E8_CONST_2 = 13;
          E8_CONST_3 = 47;
          E8_CONST_4 = 114;
          E8_CONST_5 = 89;
        }
        optional E8 f_0 = 2;
        message M51 {
          optional float f_0 = 1;
          optional fixed64 f_1 = 2;
          optional double f_2 = 3;
          optional double f_3 = 4;
          message M53 {
            optional float f_0 = 1;
          }
          optional M53 f_6 = 6;
        }
        optional M51 f_3 = 3;
      }
      repeated M38 f_5 = 5;
    }
    repeated M17 f_7 = 7;
    message M31 {
      optional int32 f_0 = 3;
      message M39 {
        optional int64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional double f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed64 f_4 = 5;
        optional fixed64 f_5 = 6;
      }
      optional M39 f_5 = 5;
    }
    optional M31 f_8 = 8;
    message M34 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 4;
      optional double f_3 = 5;
    }
    optional M34 f_9 = 9;
    message M35 {
      optional double f_0 = 1;
      message M49 {
        optional int32 f_0 = 1;
      }
      repeated M49 f_2 = 2;
    }
    optional M35 f_12 = 12;
  }
  repeated M4 f_38 = 38;
  message M5 {
    optional string f_0 = 1;
    optional int32 f_1 = 2;
    optional fixed64 f_2 = 3;
    optional float f_3 = 4;
    message M19 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 2;
      message M42 {
        optional bool f_0 = 1;
      }
      optional M42 f_4 = 4;
    }
    repeated M19 f_5 = 5;
  }
  optional M5 f_39 = 39;
  message M6 {
    optional bool f_0 = 1;
    optional double f_1 = 2;
    optional int32 f_2 = 3;
    optional int32 f_3 = 5;
    optional double f_4 = 7;
    message M11 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 120;
        E5_CONST_2 = 33;
        E5_CONST_3 = 95;
        E5_CONST_4 = 19;
        E5_CONST_5 = 109;
      }
      optional E5 f_0 = 1;
    }
    repeated M11 f_8 = 8;
    message M14 {
      optional fixed64 f_0 = 1;
      message M44 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 4;
        optional double f_3 = 5;
        optional int32 f_4 = 6;
      }
      repeated M44 f_2 = 2;
    }
    repeated M14 f_9 = 9;
    message M21 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 3;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 122;
        E6_CONST_2 = 78;
        E6_CONST_3 = 36;
        E6_CONST_4 = 71;
        E6_CONST_5 = 11;
      }
      optional E6 f_3 = 4;
      optional int32 f_4 = 5;
    }
    optional M21 f_10 = 10;
    message M28 {
      optional fixed64 f_0 = 1;
    }
    optional M28 f_11 = 11;
  }
  optional M6 f_40 = 40;
  message M7 {
    optional int32 f_0 = 1;
    message M13 {
      optional int32 f_0 = 1;
      message M48 {
        optional double f_0 = 1;
      }
      repeated M48 f_2 = 2;
    }
    optional M13 f_2 = 2;
    message M18 {
      optional fixed64 f_0 = 1;
    }
    optional M18 f_4 = 4;
    message M22 {
      optional int32 f_0 = 1;
      message M43 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
      }
      optional M43 f_2 = 2;
      message M45 {
        optional double f_0 = 2;
      }
      repeated M45 f_3 = 3;
      message M46 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 4;
        message M50 {
          optional double f_0 = 1;
        }
        optional M50 f_5 = 5;
        message M52 {
          optional int64 f_0 = 1;
          optional double f_1 = 2;
          optional double f_2 = 3;
          optional double f_3 = 4;
          enum E9 {
            E9_UNSPECIFIED = 0;
            E9_CONST_1 = 105;
            E9_CONST_2 = 13;
            E9_CONST_3 = 17;
            E9_CONST_4 = 25;
            E9_CONST_5 = 93;
          }
          repeated E9 f_4 = 5 [packed = true];
        }
        optional M52 f_7 = 7;
      }
      optional M46 f_4 = 4;
    }
    repeated M22 f_5 = 5;
    message M30 {
      optional double f_0 = 1;
      message M37 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 2;
      }
      optional M37 f_3 = 3;
      message M41 {
        optional int32 f_0 = 1;
      }
      repeated M41 f_4 = 4;
    }
    optional M30 f_6 = 6;
  }
  repeated M7 f_42 = 42;
  message M8 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 70;
      E3_CONST_2 = 56;
      E3_CONST_3 = 38;
      E3_CONST_4 = 88;
      E3_CONST_5 = 12;
    }
    optional E3 f_0 = 1;
    optional double f_1 = 2;
    optional float f_2 = 3;
    message M23 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 24;
        E7_CONST_2 = 88;
        E7_CONST_3 = 9;
        E7_CONST_4 = 79;
        E7_CONST_5 = 95;
      }
      optional E7 f_0 = 1;
    }
    repeated M23 f_4 = 4;
  }
  optional M8 f_43 = 43;
  message M9 {
    optional double f_0 = 2;
    optional int32 f_1 = 3;
    optional double f_2 = 4;
    message M16 {
      optional float f_0 = 1;
      message M36 {
        optional int32 f_0 = 1;
      }
      optional M36 f_2 = 2;
    }
    optional M16 f_5 = 5;
  }
  repeated M9 f_44 = 44;
  message M10 {
    optional int32 f_0 = 1;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 103;
      E4_CONST_2 = 89;
      E4_CONST_3 = 39;
      E4_CONST_4 = 118;
      E4_CONST_5 = 15;
    }
    optional E4 f_1 = 2;
    optional double f_2 = 4;
    message M15 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 3;
      optional double f_2 = 5;
      message M40 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
      }
      repeated M40 f_7 = 7;
    }
    optional M15 f_5 = 5;
    message M26 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 4;
      optional int32 f_3 = 6;
      optional fixed64 f_4 = 7;
      optional double f_5 = 9;
    }
    optional M26 f_6 = 6;
  }
  optional M10 f_47 = 47;
}
