// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.response.Message2;

message Message2 {
  optional bytes f_0 = 1 [ctype = CORD];
  message M1 {
    optional double f_0 = 1;
    optional fixed32 f_1 = 2;
  }
  optional M1 f_2 = 2;
  message M2 {
    optional fixed32 f_0 = 1;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 23;
      E1_CONST_2 = 68;
      E1_CONST_3 = 109;
      E1_CONST_4 = 123;
      E1_CONST_5 = 63;
    }
    optional E1 f_1 = 2;
    optional bytes f_2 = 4;
    optional fixed32 f_3 = 5;
    optional bytes f_4 = 6 [ctype = CORD];
    message M3 {
      optional int64 f_0 = 1;
      message M6 {
        optional string f_0 = 3;
        enum E3 {
          E3_UNSPECIFIED = 0;
          E3_CONST_1 = 89;
          E3_CONST_2 = 95;
          E3_CONST_3 = 3;
          E3_CONST_4 = 50;
          E3_CONST_5 = 116;
        }
        optional E3 f_1 = 4;
        optional int32 f_2 = 6;
        optional fixed32 f_3 = 7;
        optional bytes f_4 = 9;
        optional bool f_5 = 11;
        optional int64 f_6 = 13;
        optional int32 f_7 = 14;
        optional fixed32 f_8 = 15;
        optional bytes f_9 = 17;
        optional bytes f_10 = 19;
        optional uint64 f_11 = 20;
        optional int64 f_12 = 22;
        optional string f_13 = 25;
        optional fixed32 f_14 = 27;
        optional string f_15 = 28;
        optional fixed32 f_16 = 29;
        optional string f_17 = 30;
      }
      optional M6 f_3 = 3;
    }
    optional M3 f_8 = 8;
    message M4 {
      optional fixed32 f_0 = 2;
      optional float f_1 = 3;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 70;
        E2_CONST_2 = 104;
        E2_CONST_3 = 59;
        E2_CONST_4 = 91;
        E2_CONST_5 = 88;
      }
      optional E2 f_2 = 5;
      optional string f_3 = 6;
      message M5 {
        optional int64 f_0 = 1;
        message M7 {
          repeated string f_0 = 1;
          message M8 {
            optional bytes f_0 = 1;
          }
          optional M8 f_3 = 3;
        }
        repeated M7 f_3 = 3;
      }
      optional M5 f_8 = 8;
    }
    optional M4 f_9 = 9;
  }
  optional M2 f_4 = 4;
}
