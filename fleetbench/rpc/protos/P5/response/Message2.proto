// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.response.Message2;

message Message2 {
  optional double f_0 = 1;
  optional int32 f_1 = 2;
  optional double f_2 = 3;
  optional double f_3 = 4;
  optional double f_4 = 5;
  optional int64 f_5 = 6;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 82;
    E1_CONST_2 = 8;
    E1_CONST_3 = 84;
    E1_CONST_4 = 124;
    E1_CONST_5 = 42;
  }
  optional E1 f_6 = 7;
  optional double f_7 = 8;
  optional double f_8 = 9;
  optional int32 f_9 = 10;
  optional fixed64 f_10 = 11;
  optional int32 f_11 = 12;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 58;
    E2_CONST_2 = 120;
    E2_CONST_3 = 74;
    E2_CONST_4 = 105;
    E2_CONST_5 = 116;
  }
  optional E2 f_12 = 14;
  optional double f_13 = 15;
  optional fixed32 f_14 = 16;
  optional fixed64 f_15 = 17;
  optional double f_16 = 18;
  optional fixed32 f_17 = 19;
  optional int32 f_18 = 20;
  optional int32 f_19 = 21;
  optional fixed32 f_20 = 22;
  optional fixed64 f_21 = 23;
  optional int32 f_22 = 24;
  optional double f_23 = 25;
  optional fixed64 f_24 = 27;
  message M1 {
    optional fixed64 f_0 = 2;
    optional float f_1 = 3;
    optional int32 f_2 = 5;
    optional fixed64 f_3 = 6;
    optional fixed64 f_4 = 7;
    optional fixed64 f_5 = 8;
  }
  optional M1 f_28 = 28;
  message M2 {
    optional int32 f_0 = 1;
    message M14 {
      optional int32 f_0 = 1;
      message M37 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
      }
      repeated M37 f_2 = 2;
    }
    optional M14 f_2 = 2;
    message M17 {
      optional int32 f_0 = 1;
      message M47 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional int32 f_2 = 3;
        optional fixed64 f_3 = 4;
        optional fixed64 f_4 = 5;
      }
      optional M47 f_2 = 2;
      message M55 {
        optional double f_0 = 1;
      }
      optional M55 f_3 = 3;
    }
    optional M17 f_3 = 3;
    message M18 {
      optional int32 f_0 = 1;
    }
    optional M18 f_4 = 4;
    message M24 {
      optional float f_0 = 1;
      message M40 {
        optional fixed64 f_0 = 1;
        optional float f_1 = 2;
        optional int32 f_2 = 3;
        optional fixed64 f_3 = 5;
        optional fixed64 f_4 = 6;
      }
      repeated M40 f_2 = 2;
      message M43 {
        optional fixed64 f_0 = 2;
      }
      repeated M43 f_3 = 3;
      message M54 {
        optional bool f_0 = 1;
        optional int32 f_1 = 3;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 19;
          E14_CONST_2 = 46;
          E14_CONST_3 = 95;
          E14_CONST_4 = 30;
          E14_CONST_5 = 27;
        }
        optional E14 f_2 = 4;
        optional double f_3 = 5;
        optional int32 f_4 = 6;
      }
      repeated M54 f_4 = 4;
    }
    optional M24 f_5 = 5;
  }
  repeated M2 f_29 = 29;
  message M3 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 7;
      E3_CONST_2 = 117;
      E3_CONST_3 = 92;
      E3_CONST_4 = 112;
      E3_CONST_5 = 96;
    }
    repeated E3 f_0 = 2 [packed = true];
    message M12 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 4;
      message M50 {
        optional double f_0 = 1;
        message M66 {
          optional double f_0 = 1;
          optional bool f_1 = 2;
          optional int32 f_2 = 3;
          optional int32 f_3 = 4;
          optional int32 f_4 = 5;
          message M70 {
            optional bool f_0 = 1;
            message M74 {
              optional fixed64 f_0 = 1;
              enum E18 {
                E18_UNSPECIFIED = 0;
                E18_CONST_1 = 38;
                E18_CONST_2 = 61;
                E18_CONST_3 = 25;
                E18_CONST_4 = 65;
                E18_CONST_5 = 97;
              }
              repeated E18 f_1 = 2 [packed = true];
              optional fixed64 f_2 = 3;
              enum E19 {
                E19_UNSPECIFIED = 0;
                E19_CONST_1 = 8;
                E19_CONST_2 = 44;
                E19_CONST_3 = 123;
                E19_CONST_4 = 15;
                E19_CONST_5 = 92;
              }
              optional E19 f_3 = 4;
              optional fixed64 f_4 = 5;
              message M81 {
                optional bool f_0 = 1;
              }
              optional M81 f_6 = 6;
              message M84 {
                optional int32 f_0 = 1;
                optional fixed64 f_1 = 2;
                optional bool f_2 = 3;
              }
              repeated M84 f_7 = 7;
              message M85 {
                optional int32 f_0 = 1;
              }
              repeated M85 f_8 = 8;
            }
            optional M74 f_2 = 2;
            message M76 {
              optional int32 f_0 = 1;
              message M78 {
                optional double f_0 = 1;
              }
              optional M78 f_2 = 2;
            }
            optional M76 f_3 = 3;
          }
          optional M70 f_6 = 6;
          message M72 {
            optional fixed64 f_0 = 1;
            optional float f_1 = 2;
          }
          optional M72 f_7 = 7;
        }
        optional M66 f_2 = 2;
      }
      repeated M50 f_5 = 5;
      message M60 {
        optional double f_0 = 2;
      }
      optional M60 f_6 = 6;
    }
    repeated M12 f_3 = 3;
    message M13 {
      optional int32 f_0 = 1;
      repeated bool f_1 = 2 [packed = true];
    }
    optional M13 f_5 = 5;
    message M21 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 54;
        E8_CONST_2 = 51;
        E8_CONST_3 = 122;
        E8_CONST_4 = 74;
        E8_CONST_5 = 73;
      }
      optional E8 f_0 = 1;
      optional double f_1 = 2;
      optional fixed32 f_2 = 3;
      optional int32 f_3 = 4;
    }
    repeated M21 f_6 = 6;
    message M22 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      optional int32 f_4 = 5;
    }
    optional M22 f_7 = 7;
    message M25 {
      optional int32 f_0 = 1;
    }
    optional M25 f_8 = 8;
    message M28 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      message M45 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 3;
      }
      repeated M45 f_3 = 3;
    }
    optional M28 f_9 = 9;
  }
  repeated M3 f_30 = 30;
  message M4 {
    optional int32 f_0 = 2;
  }
  optional M4 f_31 = 31;
  message M5 {
    optional fixed64 f_0 = 1;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 34;
      E4_CONST_2 = 48;
      E4_CONST_3 = 105;
      E4_CONST_4 = 101;
      E4_CONST_5 = 22;
    }
    repeated E4 f_1 = 2 [packed = true];
    message M11 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 4;
      message M59 {
        optional double f_0 = 1;
      }
      optional M59 f_6 = 6;
    }
    optional M11 f_3 = 3;
    message M26 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional fixed64 f_4 = 5;
      optional int32 f_5 = 6;
      optional int32 f_6 = 7;
      optional int32 f_7 = 8;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 9;
        E9_CONST_2 = 101;
        E9_CONST_3 = 67;
        E9_CONST_4 = 39;
        E9_CONST_5 = 12;
      }
      optional E9 f_8 = 9;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 124;
        E10_CONST_2 = 52;
        E10_CONST_3 = 48;
        E10_CONST_4 = 21;
        E10_CONST_5 = 112;
      }
      optional E10 f_9 = 10;
      optional int32 f_10 = 11;
      optional double f_11 = 12;
      message M61 {
        optional int32 f_0 = 1;
        message M65 {
          optional int32 f_0 = 1;
          message M68 {
            optional int32 f_0 = 1;
            optional fixed64 f_1 = 2;
            optional double f_2 = 3;
            optional fixed64 f_3 = 4;
            optional double f_4 = 5;
            optional float f_5 = 6;
            optional fixed64 f_6 = 7;
          }
          optional M68 f_2 = 2;
          message M69 {
            optional fixed64 f_0 = 1;
            optional double f_1 = 2;
            optional float f_2 = 3;
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 96;
              E17_CONST_2 = 58;
              E17_CONST_3 = 18;
              E17_CONST_4 = 47;
              E17_CONST_5 = 70;
            }
            optional E17 f_3 = 4;
            message M73 {
              optional fixed64 f_0 = 1;
              message M77 {
                optional int64 f_0 = 1;
                message M87 {
                  enum E24 {
                    E24_UNSPECIFIED = 0;
                    E24_CONST_1 = 90;
                    E24_CONST_2 = 3;
                    E24_CONST_3 = 124;
                    E24_CONST_4 = 87;
                    E24_CONST_5 = 118;
                  }
                  repeated E24 f_0 = 1 [packed = true];
                  optional fixed64 f_1 = 2;
                  optional double f_2 = 3;
                }
                optional M87 f_2 = 2;
              }
              optional M77 f_2 = 2;
              message M79 {
                optional int32 f_0 = 1;
                optional int64 f_1 = 2;
              }
              repeated M79 f_3 = 3;
              message M80 {
                optional fixed64 f_0 = 1;
                enum E20 {
                  E20_UNSPECIFIED = 0;
                  E20_CONST_1 = 37;
                  E20_CONST_2 = 19;
                  E20_CONST_3 = 109;
                  E20_CONST_4 = 80;
                  E20_CONST_5 = 89;
                }
                optional E20 f_1 = 2;
                optional int32 f_2 = 3;
                enum E21 {
                  E21_UNSPECIFIED = 0;
                  E21_CONST_1 = 63;
                  E21_CONST_2 = 121;
                  E21_CONST_3 = 29;
                  E21_CONST_4 = 55;
                  E21_CONST_5 = 32;
                }
                optional E21 f_3 = 4;
                optional bool f_4 = 5;
              }
              optional M80 f_5 = 5;
            }
            optional M73 f_5 = 5;
          }
          optional M69 f_3 = 3;
        }
        repeated M65 f_2 = 2;
      }
      optional M61 f_13 = 13;
    }
    optional M26 f_4 = 4;
    message M31 {
      optional int32 f_0 = 1;
      message M39 {
        optional double f_0 = 1;
        optional fixed32 f_1 = 2;
        optional double f_2 = 3;
        optional fixed64 f_3 = 4;
      }
      optional M39 f_2 = 2;
      message M44 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional float f_2 = 3;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 42;
          E13_CONST_2 = 57;
          E13_CONST_3 = 65;
          E13_CONST_4 = 115;
          E13_CONST_5 = 106;
        }
        optional E13 f_3 = 4;
        optional int32 f_4 = 5;
      }
      repeated M44 f_3 = 3;
      message M57 {
        optional double f_0 = 2;
        optional double f_1 = 3;
        optional double f_2 = 4;
        optional double f_3 = 5;
        optional fixed64 f_4 = 6;
      }
      optional M57 f_4 = 4;
    }
    optional M31 f_5 = 5;
    message M33 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 4;
      message M49 {
        optional double f_0 = 1;
        message M63 {
          optional double f_0 = 1;
          optional double f_1 = 2;
          optional fixed64 f_2 = 4;
          optional fixed64 f_3 = 5;
          message M67 {
            optional fixed64 f_0 = 1;
            optional fixed64 f_1 = 2;
            optional bool f_2 = 3;
            optional fixed64 f_3 = 4;
            optional float f_4 = 6;
            optional double f_5 = 7;
          }
          optional M67 f_6 = 6;
        }
        optional M63 f_2 = 2;
        message M64 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed32 f_2 = 3;
          optional fixed64 f_3 = 4;
          optional int32 f_4 = 5;
          message M71 {
            optional fixed64 f_0 = 1;
            message M75 {
              optional int32 f_0 = 1;
              message M82 {
                optional fixed64 f_0 = 1;
              }
              optional M82 f_2 = 2;
              message M83 {
                enum E22 {
                  E22_UNSPECIFIED = 0;
                  E22_CONST_1 = 11;
                  E22_CONST_2 = 117;
                  E22_CONST_3 = 104;
                  E22_CONST_4 = 115;
                  E22_CONST_5 = 101;
                }
                repeated E22 f_0 = 1 [packed = true];
              }
              optional M83 f_3 = 3;
              message M86 {
                optional fixed64 f_0 = 1;
                optional double f_1 = 2;
                optional double f_2 = 3;
                optional int32 f_3 = 4;
                optional fixed64 f_4 = 6;
                optional fixed64 f_5 = 7;
                optional double f_6 = 8;
                optional int64 f_7 = 9;
                optional int32 f_8 = 10;
                optional bool f_9 = 11;
                enum E23 {
                  E23_UNSPECIFIED = 0;
                  E23_CONST_1 = 112;
                  E23_CONST_2 = 40;
                  E23_CONST_3 = 119;
                  E23_CONST_4 = 90;
                  E23_CONST_5 = 1;
                }
                repeated E23 f_10 = 12 [packed = true];
              }
              repeated M86 f_4 = 4;
            }
            optional M75 f_2 = 2;
          }
          optional M71 f_6 = 6;
        }
        optional M64 f_3 = 3;
      }
      optional M49 f_5 = 5;
      message M58 {
        optional double f_0 = 1;
        optional double f_1 = 3;
      }
      repeated M58 f_6 = 6;
    }
    optional M33 f_8 = 8;
    message M34 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional float f_3 = 4;
      optional double f_4 = 5;
    }
    repeated M34 f_9 = 9;
  }
  repeated M5 f_32 = 32;
  message M6 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 3;
    optional int32 f_2 = 4;
    optional int32 f_3 = 5;
    optional int32 f_4 = 6;
    optional fixed64 f_5 = 7;
    optional fixed64 f_6 = 8;
    optional double f_7 = 9;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 14;
      E5_CONST_2 = 15;
      E5_CONST_3 = 86;
      E5_CONST_4 = 45;
      E5_CONST_5 = 69;
    }
    repeated E5 f_8 = 10 [packed = true];
    optional int32 f_9 = 11;
    optional int32 f_10 = 12;
    message M15 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M15 f_13 = 13;
    message M29 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 3;
    }
    optional M29 f_14 = 14;
  }
  optional M6 f_33 = 33;
  message M7 {
    repeated bool f_0 = 1 [packed = true];
    message M10 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M10 f_2 = 2;
    message M23 {
      optional double f_0 = 1;
    }
    repeated M23 f_3 = 3;
    message M30 {
      optional int32 f_0 = 1;
      message M38 {
        optional double f_0 = 1;
        message M62 {
          optional double f_0 = 1;
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 45;
            E15_CONST_2 = 36;
            E15_CONST_3 = 20;
            E15_CONST_4 = 76;
            E15_CONST_5 = 48;
          }
          optional E15 f_1 = 2;
          optional int32 f_2 = 3;
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 7;
            E16_CONST_2 = 73;
            E16_CONST_3 = 24;
            E16_CONST_4 = 113;
            E16_CONST_5 = 59;
          }
          repeated E16 f_3 = 4 [packed = true];
          optional float f_4 = 5;
        }
        repeated M62 f_2 = 2;
      }
      repeated M38 f_2 = 2;
      message M51 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
      }
      optional M51 f_3 = 3;
      message M52 {
        optional float f_0 = 1;
      }
      optional M52 f_4 = 4;
    }
    optional M30 f_4 = 4;
    message M32 {
      optional double f_0 = 1;
      optional float f_1 = 2;
      optional double f_2 = 3;
    }
    optional M32 f_5 = 5;
  }
  optional M7 f_34 = 34;
  message M8 {
    optional fixed64 f_0 = 2;
    message M19 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional double f_2 = 4;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 126;
        E7_CONST_2 = 86;
        E7_CONST_3 = 6;
        E7_CONST_4 = 36;
        E7_CONST_5 = 47;
      }
      optional E7 f_3 = 5;
      message M53 {
        optional int32 f_0 = 1;
      }
      optional M53 f_6 = 6;
    }
    optional M19 f_3 = 3;
    message M20 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      message M42 {
        optional fixed64 f_0 = 1;
      }
      repeated M42 f_3 = 3;
      message M46 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 3;
        optional double f_2 = 4;
        optional float f_3 = 5;
      }
      repeated M46 f_5 = 5;
      message M48 {
        optional double f_0 = 2;
      }
      optional M48 f_6 = 6;
    }
    optional M20 f_4 = 4;
    message M27 {
      optional double f_0 = 1;
    }
    optional M27 f_5 = 5;
  }
  optional M8 f_35 = 35;
  message M9 {
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 108;
      E6_CONST_2 = 32;
      E6_CONST_3 = 9;
      E6_CONST_4 = 29;
      E6_CONST_5 = 2;
    }
    repeated E6 f_0 = 1 [packed = true];
    optional fixed32 f_1 = 2;
    message M16 {
      optional int32 f_0 = 1;
      message M56 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
      }
      optional M56 f_2 = 2;
    }
    optional M16 f_3 = 3;
    message M35 {
      optional int64 f_0 = 1;
      optional int32 f_1 = 3;
      message M36 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 67;
          E11_CONST_2 = 122;
          E11_CONST_3 = 19;
          E11_CONST_4 = 27;
          E11_CONST_5 = 44;
        }
        repeated E11 f_2 = 3 [packed = true];
        optional int32 f_3 = 4;
        optional double f_4 = 5;
        optional double f_5 = 6;
      }
      repeated M36 f_4 = 4;
      message M41 {
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 123;
          E12_CONST_2 = 27;
          E12_CONST_3 = 113;
          E12_CONST_4 = 78;
          E12_CONST_5 = 22;
        }
        optional E12 f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional fixed64 f_3 = 4;
        optional float f_4 = 5;
      }
      optional M41 f_5 = 5;
    }
    optional M35 f_4 = 4;
  }
  repeated M9 f_36 = 36;
}
