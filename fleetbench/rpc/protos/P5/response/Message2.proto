// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.response.Message2;

message Message2 {
  optional fixed64 f_0 = 1;
  optional int32 f_1 = 3;
  optional int32 f_2 = 4;
  optional fixed64 f_3 = 5;
  optional fixed64 f_4 = 7;
  optional fixed64 f_5 = 8;
  optional fixed32 f_6 = 9;
  optional double f_7 = 10;
  optional double f_8 = 11;
  optional int32 f_9 = 12;
  optional float f_10 = 13;
  optional fixed64 f_11 = 14;
  optional int32 f_12 = 15;
  optional int32 f_13 = 16;
  optional int32 f_14 = 17;
  optional fixed64 f_15 = 18;
  optional float f_16 = 19;
  optional fixed64 f_17 = 20;
  optional fixed64 f_18 = 22;
  optional int32 f_19 = 23;
  optional double f_20 = 24;
  optional double f_21 = 25;
  optional int32 f_22 = 26;
  optional int32 f_23 = 27;
  optional double f_24 = 28;
  optional fixed64 f_25 = 29;
  message M1 {
    optional double f_0 = 1;
    message M37 {
      optional int32 f_0 = 1;
    }
    optional M37 f_2 = 2;
    message M39 {
      optional double f_0 = 1;
    }
    repeated M39 f_5 = 5;
    message M50 {
      optional int32 f_0 = 1;
      optional bool f_1 = 2;
      optional int32 f_2 = 3;
      optional float f_3 = 4;
      optional fixed32 f_4 = 5;
      message M66 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
        optional bool f_3 = 4;
        optional int32 f_4 = 6;
        optional int32 f_5 = 7;
        optional double f_6 = 8;
        optional float f_7 = 9;
        optional int32 f_8 = 10;
        optional bool f_9 = 11;
        optional int32 f_10 = 12;
      }
      optional M66 f_6 = 6;
    }
    optional M50 f_6 = 6;
  }
  optional M1 f_30 = 30;
  message M2 {
    optional double f_0 = 1;
    optional double f_1 = 3;
    optional double f_2 = 4;
    message M14 {
      optional double f_0 = 1;
      optional string f_1 = 3;
      optional fixed64 f_2 = 4;
      optional fixed64 f_3 = 6;
      message M57 {
        optional fixed32 f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
        optional fixed64 f_4 = 5;
        optional fixed64 f_5 = 6;
        optional int32 f_6 = 7;
        optional fixed64 f_7 = 9;
        message M69 {
          optional int32 f_0 = 2;
        }
        optional M69 f_10 = 10;
      }
      repeated M57 f_7 = 7;
    }
    repeated M14 f_5 = 5;
    message M44 {
      optional int32 f_0 = 1;
    }
    optional M44 f_6 = 6;
    message M45 {
      optional int32 f_0 = 1;
    }
    optional M45 f_7 = 7;
  }
  optional M2 f_31 = 31;
  message M3 {
    optional double f_0 = 1;
    optional fixed64 f_1 = 2;
    optional int32 f_2 = 3;
    optional fixed64 f_3 = 4;
    message M17 {
      optional fixed64 f_0 = 1;
      message M55 {
        optional float f_0 = 1;
        optional double f_1 = 2;
        optional fixed32 f_2 = 4;
        optional int32 f_3 = 5;
        optional fixed64 f_4 = 6;
      }
      repeated M55 f_2 = 2;
    }
    optional M17 f_5 = 5;
    message M23 {
      optional fixed64 f_0 = 1;
    }
    repeated M23 f_6 = 6;
  }
  optional M3 f_33 = 33;
  message M4 {
    optional double f_0 = 1;
    message M42 {
      optional double f_0 = 1;
    }
    repeated M42 f_2 = 2;
  }
  optional M4 f_34 = 34;
  message M5 {
    optional double f_0 = 4;
    optional int32 f_1 = 5;
    optional double f_2 = 6;
    optional fixed64 f_3 = 7;
    optional double f_4 = 8;
    message M27 {
      optional fixed64 f_0 = 1;
      message M65 {
        optional int32 f_0 = 1;
      }
      repeated M65 f_2 = 2;
    }
    optional M27 f_9 = 9;
    message M32 {
      optional fixed64 f_0 = 2;
      message M64 {
        optional double f_0 = 1;
        optional double f_1 = 3;
        optional fixed64 f_2 = 4;
        message M68 {
          optional float f_0 = 1;
          optional int32 f_1 = 3;
          optional int32 f_2 = 4;
          optional double f_3 = 5;
          message M78 {
            optional double f_0 = 1;
            optional fixed64 f_1 = 2;
            optional double f_2 = 3;
            message M81 {
              optional int32 f_0 = 2;
              message M85 {
                optional double f_0 = 1;
                optional float f_1 = 2;
              }
              optional M85 f_4 = 4;
              message M87 {
                optional double f_0 = 2;
                message M91 {
                  optional double f_0 = 1;
                  optional int32 f_1 = 2;
                  optional fixed64 f_2 = 3;
                  optional double f_3 = 5;
                  optional bool f_4 = 6;
                }
                optional M91 f_3 = 3;
              }
              optional M87 f_5 = 5;
            }
            optional M81 f_4 = 4;
          }
          repeated M78 f_6 = 6;
        }
        repeated M68 f_5 = 5;
      }
      optional M64 f_3 = 3;
    }
    repeated M32 f_10 = 10;
    message M40 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 4;
      optional float f_4 = 6;
    }
    optional M40 f_12 = 12;
  }
  repeated M5 f_36 = 36;
  message M6 {
    optional int32 f_0 = 1;
    message M13 {
      optional int32 f_0 = 1;
      message M56 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
      }
      optional M56 f_3 = 3;
    }
    optional M13 f_3 = 3;
    message M24 {
      optional fixed64 f_0 = 1;
    }
    repeated M24 f_4 = 4;
    message M35 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 5;
      optional int32 f_4 = 7;
      optional fixed64 f_5 = 8;
      optional double f_6 = 9;
      optional fixed64 f_7 = 10;
      optional int32 f_8 = 11;
    }
    optional M35 f_5 = 5;
    message M43 {
      optional fixed32 f_0 = 2;
    }
    optional M43 f_6 = 6;
    message M47 {
      optional double f_0 = 2;
      optional double f_1 = 3;
      optional double f_2 = 4;
      optional fixed64 f_3 = 5;
    }
    optional M47 f_7 = 7;
  }
  optional M6 f_37 = 37;
  message M7 {
    optional double f_0 = 1;
    message M21 {
      optional fixed32 f_0 = 1;
    }
    repeated M21 f_2 = 2;
    message M25 {
      optional double f_0 = 1;
      message M62 {
        optional double f_0 = 1;
        optional double f_1 = 2;
      }
      optional M62 f_2 = 2;
    }
    optional M25 f_4 = 4;
    message M26 {
      optional fixed64 f_0 = 1;
    }
    optional M26 f_5 = 5;
    message M34 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    repeated M34 f_7 = 7;
  }
  optional M7 f_38 = 38;
  message M8 {
    optional bool f_0 = 1;
    optional int32 f_1 = 3;
    message M31 {
      optional double f_0 = 2;
      optional double f_1 = 3;
      optional double f_2 = 4;
      optional int32 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional fixed64 f_5 = 7;
      optional int64 f_6 = 8;
      optional int32 f_7 = 10;
      optional int32 f_8 = 11;
      optional fixed64 f_9 = 12;
      optional double f_10 = 13;
      message M60 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional double f_3 = 4;
        optional int32 f_4 = 5;
        optional double f_5 = 6;
        optional int32 f_6 = 7;
        optional double f_7 = 8;
        optional int32 f_8 = 10;
        optional fixed64 f_9 = 11;
        optional fixed64 f_10 = 12;
        optional int32 f_11 = 13;
        optional int32 f_12 = 14;
      }
      repeated M60 f_14 = 14;
      message M63 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        message M72 {
          optional fixed32 f_0 = 1;
          optional int32 f_1 = 3;
          optional int32 f_2 = 4;
          optional double f_3 = 5;
          optional int32 f_4 = 6;
          optional fixed64 f_5 = 7;
          optional double f_6 = 9;
          message M74 {
            optional double f_0 = 1;
            message M79 {
              optional double f_0 = 1;
              message M88 {
                optional double f_0 = 1;
              }
              optional M88 f_2 = 2;
            }
            optional M79 f_2 = 2;
            message M82 {
              optional int32 f_0 = 1;
            }
            optional M82 f_3 = 3;
          }
          optional M74 f_10 = 10;
          message M76 {
            optional double f_0 = 1;
            optional int32 f_1 = 2;
            optional double f_2 = 3;
            optional int32 f_3 = 4;
            optional int32 f_4 = 5;
            optional double f_5 = 6;
            optional double f_6 = 7;
            optional fixed64 f_7 = 8;
            optional double f_8 = 9;
            optional fixed64 f_9 = 11;
            optional int32 f_10 = 13;
            message M83 {
              optional bool f_0 = 1;
              message M89 {
                optional double f_0 = 1;
                optional bool f_1 = 2;
                optional fixed64 f_2 = 3;
              }
              optional M89 f_2 = 2;
            }
            repeated M83 f_14 = 14;
            message M84 {
              optional fixed64 f_0 = 1;
              optional double f_1 = 2;
              optional double f_2 = 3;
              optional int32 f_3 = 4;
              optional int32 f_4 = 7;
              optional double f_5 = 8;
              message M86 {
                optional int32 f_0 = 1;
                optional int64 f_1 = 2;
                optional double f_2 = 3;
                optional fixed64 f_3 = 4;
              }
              optional M86 f_9 = 9;
              message M90 {
                optional double f_0 = 1;
                optional int32 f_1 = 2;
                optional double f_2 = 3;
                optional int32 f_3 = 4;
                optional int64 f_4 = 5;
                optional int32 f_5 = 6;
                optional double f_6 = 7;
                optional double f_7 = 8;
                optional int32 f_8 = 9;
                optional double f_9 = 10;
                optional int32 f_10 = 11;
                optional int32 f_11 = 12;
              }
              optional M90 f_10 = 10;
            }
            optional M84 f_16 = 16;
          }
          repeated M76 f_11 = 11;
        }
        repeated M72 f_4 = 4;
        message M73 {
          optional double f_0 = 1;
          optional int32 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional int32 f_3 = 4;
          optional double f_4 = 5;
          optional fixed64 f_5 = 7;
        }
        optional M73 f_5 = 5;
      }
      optional M63 f_15 = 15;
    }
    repeated M31 f_4 = 4;
    message M38 {
      optional double f_0 = 1;
    }
    repeated M38 f_5 = 5;
    message M41 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M41 f_6 = 6;
    message M51 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional int32 f_4 = 5;
      optional double f_5 = 6;
      optional int32 f_6 = 7;
      optional double f_7 = 8;
      repeated bool f_8 = 9 [packed = true];
      optional int32 f_9 = 10;
      optional double f_10 = 11;
      optional int32 f_11 = 12;
      optional int32 f_12 = 13;
      optional int32 f_13 = 14;
      optional int32 f_14 = 15;
      optional fixed64 f_15 = 16;
      optional bool f_16 = 17;
    }
    repeated M51 f_7 = 7;
  }
  repeated M8 f_39 = 39;
  message M9 {
    optional double f_0 = 1;
    optional double f_1 = 2;
    message M16 {
      optional double f_0 = 1;
      message M53 {
        optional int32 f_0 = 1;
        optional float f_1 = 2;
      }
      optional M53 f_2 = 2;
      message M54 {
        optional bool f_0 = 1;
        optional float f_1 = 2;
        optional double f_2 = 3;
        optional fixed64 f_3 = 4;
        optional int32 f_4 = 5;
        optional fixed64 f_5 = 6;
        optional string f_6 = 7;
        optional double f_7 = 8;
        optional fixed64 f_8 = 9;
        optional double f_9 = 10;
        optional double f_10 = 11;
        message M70 {
          optional fixed64 f_0 = 1;
          message M75 {
            optional bool f_0 = 2;
            optional int64 f_1 = 3;
            optional int32 f_2 = 5;
            message M80 {
              optional int32 f_0 = 1;
            }
            repeated M80 f_6 = 6;
          }
          repeated M75 f_2 = 2;
        }
        optional M70 f_12 = 12;
      }
      repeated M54 f_3 = 3;
      message M59 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
        optional int32 f_3 = 4;
        optional int32 f_4 = 6;
      }
      optional M59 f_4 = 4;
    }
    optional M16 f_3 = 3;
    message M48 {
      optional float f_0 = 2;
    }
    repeated M48 f_5 = 5;
    message M49 {
      optional double f_0 = 1;
      message M58 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
        optional int32 f_4 = 5;
      }
      repeated M58 f_3 = 3;
    }
    optional M49 f_7 = 7;
  }
  optional M9 f_40 = 40;
  message M10 {
    optional double f_0 = 1;
  }
  optional M10 f_41 = 41;
  message M11 {
    optional int32 f_0 = 1;
    message M29 {
      optional int32 f_0 = 1;
      optional double f_1 = 3;
      optional int32 f_2 = 4;
    }
    repeated M29 f_2 = 2;
    message M30 {
      optional bool f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 4;
    }
    optional M30 f_4 = 4;
    message M33 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
    }
    repeated M33 f_5 = 5;
    message M36 {
      optional float f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 4;
    }
    repeated M36 f_7 = 7;
  }
  optional M11 f_42 = 42;
  message M12 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional int32 f_2 = 3;
    optional int32 f_3 = 4;
    message M15 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 5;
      optional double f_4 = 6;
      message M52 {
        optional fixed32 f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
        optional double f_4 = 6;
        optional double f_5 = 8;
        optional fixed64 f_6 = 9;
        optional int64 f_7 = 10;
        optional fixed64 f_8 = 11;
        optional int32 f_9 = 12;
        optional double f_10 = 13;
        optional fixed64 f_11 = 14;
        optional int32 f_12 = 15;
        optional fixed64 f_13 = 16;
        optional fixed64 f_14 = 17;
        message M67 {
          optional double f_0 = 1;
          message M77 {
            optional double f_0 = 1;
            optional double f_1 = 2;
            optional int32 f_2 = 3;
            optional int32 f_3 = 4;
          }
          repeated M77 f_2 = 2;
        }
        optional M67 f_18 = 18;
      }
      repeated M52 f_7 = 7;
    }
    optional M15 f_5 = 5;
    message M18 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional float f_2 = 3;
      message M61 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional double f_3 = 4;
        optional double f_4 = 5;
        optional fixed32 f_5 = 7;
        optional float f_6 = 8;
        optional int32 f_7 = 9;
        optional double f_8 = 10;
        message M71 {
          optional int32 f_0 = 1;
        }
        optional M71 f_11 = 11;
      }
      repeated M61 f_4 = 4;
    }
    repeated M18 f_6 = 6;
    message M19 {
      optional int32 f_0 = 1;
    }
    optional M19 f_7 = 7;
    message M20 {
      optional float f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional float f_4 = 5;
      optional double f_5 = 7;
    }
    optional M20 f_8 = 8;
    message M22 {
      optional bool f_0 = 1;
    }
    optional M22 f_9 = 9;
    message M28 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 3;
    }
    repeated M28 f_10 = 10;
    message M46 {
      optional fixed64 f_0 = 1;
    }
    optional M46 f_11 = 11;
  }
  optional M12 f_43 = 43;
}
