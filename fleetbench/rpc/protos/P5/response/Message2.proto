// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.response.Message2;

message Message2 {
  optional double f_0 = 1;
  optional fixed32 f_1 = 2;
  optional fixed64 f_2 = 3;
  optional double f_3 = 4;
  optional double f_4 = 5;
  optional int32 f_5 = 6;
  optional int32 f_6 = 7;
  optional fixed64 f_7 = 8;
  optional double f_8 = 9;
  optional int32 f_9 = 10;
  optional int32 f_10 = 11;
  optional fixed64 f_11 = 12;
  optional float f_12 = 13;
  optional double f_13 = 14;
  optional fixed64 f_14 = 15;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 76;
    E1_CONST_2 = 31;
    E1_CONST_3 = 122;
    E1_CONST_4 = 40;
    E1_CONST_5 = 14;
  }
  repeated E1 f_15 = 16 [packed = true];
  optional double f_16 = 17;
  optional int32 f_17 = 18;
  optional fixed64 f_18 = 19;
  optional fixed64 f_19 = 20;
  optional double f_20 = 21;
  repeated bool f_21 = 22 [packed = true];
  optional fixed64 f_22 = 23;
  optional fixed64 f_23 = 24;
  optional int32 f_24 = 25;
  message M1 {
    optional double f_0 = 1;
  }
  repeated M1 f_26 = 26;
  message M2 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 2;
    optional float f_2 = 3;
    optional fixed64 f_3 = 4;
    optional double f_4 = 5;
  }
  optional M2 f_27 = 27;
  message M3 {
    optional double f_0 = 1;
  }
  optional M3 f_28 = 28;
  message M4 {
    optional fixed64 f_0 = 1;
  }
  repeated M4 f_29 = 29;
  message M5 {
    optional double f_0 = 1;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 46;
      E2_CONST_2 = 19;
      E2_CONST_3 = 69;
      E2_CONST_4 = 108;
      E2_CONST_5 = 15;
    }
    optional E2 f_1 = 2;
    optional double f_2 = 3;
    optional fixed64 f_3 = 4;
    message M20 {
      optional double f_0 = 1;
    }
    repeated M20 f_5 = 5;
  }
  repeated M5 f_30 = 30;
  message M6 {
    optional float f_0 = 1;
    message M14 {
      optional fixed32 f_0 = 1;
    }
    optional M14 f_2 = 2;
  }
  optional M6 f_31 = 31;
  message M7 {
    optional double f_0 = 2;
  }
  optional M7 f_32 = 32;
  message M8 {
    optional float f_0 = 1;
    message M15 {
      optional int32 f_0 = 1;
      message M31 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 3;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 30;
          E11_CONST_2 = 105;
          E11_CONST_3 = 28;
          E11_CONST_4 = 56;
          E11_CONST_5 = 77;
        }
        optional E11 f_3 = 4;
        message M41 {
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 26;
            E14_CONST_2 = 27;
            E14_CONST_3 = 68;
            E14_CONST_4 = 50;
            E14_CONST_5 = 112;
          }
          repeated E14 f_0 = 1 [packed = true];
          message M44 {
            optional int32 f_0 = 1;
            optional bool f_1 = 2;
            optional fixed64 f_2 = 3;
            optional bool f_3 = 4;
            message M51 {
              optional string f_0 = 1;
              optional fixed64 f_1 = 2;
              message M56 {
                optional double f_0 = 1;
              }
              optional M56 f_3 = 3;
              message M62 {
                optional fixed64 f_0 = 1;
                enum E23 {
                  E23_UNSPECIFIED = 0;
                  E23_CONST_1 = 116;
                  E23_CONST_2 = 114;
                  E23_CONST_3 = 83;
                  E23_CONST_4 = 46;
                  E23_CONST_5 = 90;
                }
                optional E23 f_1 = 2;
              }
              repeated M62 f_4 = 4;
              message M63 {
                optional int32 f_0 = 1;
                optional int32 f_1 = 2;
              }
              optional M63 f_5 = 5;
            }
            optional M51 f_5 = 5;
            message M52 {
              optional fixed64 f_0 = 1;
              optional fixed64 f_1 = 2;
              optional int32 f_2 = 3;
              optional double f_3 = 4;
              message M58 {
                optional int32 f_0 = 1;
              }
              optional M58 f_5 = 5;
            }
            repeated M52 f_6 = 6;
            message M53 {
              optional fixed64 f_0 = 1;
              enum E18 {
                E18_UNSPECIFIED = 0;
                E18_CONST_1 = 58;
                E18_CONST_2 = 83;
                E18_CONST_3 = 18;
                E18_CONST_4 = 26;
                E18_CONST_5 = 93;
              }
              repeated E18 f_1 = 2 [packed = true];
              optional fixed64 f_2 = 3;
              optional fixed64 f_3 = 4;
              optional fixed64 f_4 = 5;
              optional int32 f_5 = 6;
              optional double f_6 = 7;
              optional int32 f_7 = 8;
              enum E19 {
                E19_UNSPECIFIED = 0;
                E19_CONST_1 = 37;
                E19_CONST_2 = 103;
                E19_CONST_3 = 66;
                E19_CONST_4 = 112;
                E19_CONST_5 = 100;
              }
              optional E19 f_8 = 9;
              optional int32 f_9 = 10;
            }
            optional M53 f_7 = 7;
          }
          optional M44 f_2 = 2;
        }
        optional M41 f_5 = 5;
        message M42 {
          optional fixed64 f_0 = 1;
          optional double f_1 = 2;
          optional double f_2 = 3;
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 27;
            E15_CONST_2 = 66;
            E15_CONST_3 = 109;
            E15_CONST_4 = 22;
            E15_CONST_5 = 64;
          }
          optional E15 f_3 = 4;
          optional fixed64 f_4 = 5;
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 12;
            E16_CONST_2 = 49;
            E16_CONST_3 = 24;
            E16_CONST_4 = 87;
            E16_CONST_5 = 7;
          }
          optional E16 f_5 = 6;
          optional fixed64 f_6 = 7;
          optional fixed64 f_7 = 8;
          optional double f_8 = 9;
        }
        optional M42 f_6 = 6;
      }
      optional M31 f_2 = 2;
    }
    repeated M15 f_2 = 2;
    message M17 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 3;
      optional float f_2 = 4;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 49;
        E4_CONST_2 = 9;
        E4_CONST_3 = 17;
        E4_CONST_4 = 122;
        E4_CONST_5 = 75;
      }
      repeated E4 f_3 = 5 [packed = true];
      optional double f_4 = 6;
      optional fixed64 f_5 = 7;
      optional int32 f_6 = 8;
      optional bool f_7 = 9;
      optional double f_8 = 10;
      optional fixed64 f_9 = 11;
      optional fixed64 f_10 = 12;
      optional int32 f_11 = 13;
      optional int32 f_12 = 14;
      optional fixed64 f_13 = 15;
      optional fixed64 f_14 = 16;
      optional fixed64 f_15 = 17;
      message M24 {
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 86;
          E9_CONST_2 = 88;
          E9_CONST_3 = 26;
          E9_CONST_4 = 85;
          E9_CONST_5 = 73;
        }
        optional E9 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed64 f_4 = 5;
        optional fixed64 f_5 = 6;
        optional int32 f_6 = 7;
        optional fixed64 f_7 = 8;
        optional int32 f_8 = 9;
        optional float f_9 = 10;
        optional fixed64 f_10 = 11;
      }
      repeated M24 f_18 = 18;
      message M27 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 2;
        message M38 {
          optional int32 f_0 = 2;
          message M45 {
            optional double f_0 = 1;
            optional fixed64 f_1 = 2;
            message M47 {
              optional int32 f_0 = 1;
              optional fixed64 f_1 = 2;
              message M57 {
                optional double f_0 = 1;
              }
              optional M57 f_3 = 3;
              message M59 {
                optional fixed64 f_0 = 1;
                message M68 {
                  optional double f_0 = 1;
                  optional int32 f_1 = 2;
                  optional int32 f_2 = 3;
                  optional int32 f_3 = 4;
                  optional double f_4 = 5;
                  optional int32 f_5 = 6;
                  optional int32 f_6 = 7;
                  optional double f_7 = 8;
                  optional double f_8 = 9;
                  optional int32 f_9 = 10;
                  optional double f_10 = 11;
                  optional int32 f_11 = 12;
                  optional double f_12 = 13;
                }
                repeated M68 f_2 = 2;
              }
              optional M59 f_4 = 4;
            }
            optional M47 f_3 = 3;
            message M48 {
              optional double f_0 = 1;
              message M64 {
                optional double f_0 = 1;
              }
              optional M64 f_2 = 2;
              message M65 {
                optional fixed64 f_0 = 1;
                optional int32 f_1 = 2;
                optional double f_2 = 3;
                optional fixed64 f_3 = 4;
                optional fixed64 f_4 = 5;
                optional double f_5 = 6;
                enum E24 {
                  E24_UNSPECIFIED = 0;
                  E24_CONST_1 = 32;
                  E24_CONST_2 = 111;
                  E24_CONST_3 = 22;
                  E24_CONST_4 = 121;
                  E24_CONST_5 = 76;
                }
                optional E24 f_6 = 7;
                optional double f_7 = 8;
                optional double f_8 = 9;
                optional int32 f_9 = 10;
                optional double f_10 = 11;
                optional int32 f_11 = 12;
                message M67 {
                  optional double f_0 = 1;
                }
                repeated M67 f_13 = 13;
              }
              optional M65 f_3 = 3;
            }
            repeated M48 f_4 = 4;
            message M54 {
              optional int32 f_0 = 1;
            }
            optional M54 f_5 = 5;
          }
          optional M45 f_3 = 3;
        }
        optional M38 f_3 = 3;
      }
      repeated M27 f_19 = 19;
      message M33 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional int32 f_3 = 4;
      }
      repeated M33 f_20 = 20;
    }
    repeated M17 f_3 = 3;
  }
  optional M8 f_33 = 33;
  message M9 {
    optional fixed64 f_0 = 1;
  }
  optional M9 f_34 = 34;
  message M10 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 120;
      E3_CONST_2 = 82;
      E3_CONST_3 = 84;
      E3_CONST_4 = 114;
      E3_CONST_5 = 1;
    }
    repeated E3 f_0 = 1 [packed = true];
    optional fixed64 f_1 = 2;
  }
  repeated M10 f_35 = 35;
  message M11 {
    optional int32 f_0 = 1;
    message M16 {
      optional double f_0 = 1;
      message M22 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional bool f_2 = 3;
        optional int32 f_3 = 4;
      }
      optional M22 f_2 = 2;
      message M23 {
        optional int64 f_0 = 1;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 59;
          E8_CONST_2 = 87;
          E8_CONST_3 = 24;
          E8_CONST_4 = 99;
          E8_CONST_5 = 32;
        }
        optional E8 f_1 = 2;
        message M40 {
          optional int64 f_0 = 1;
          optional double f_1 = 2;
          optional double f_2 = 3;
          optional double f_3 = 4;
          optional float f_4 = 5;
          optional fixed64 f_5 = 6;
        }
        optional M40 f_3 = 3;
      }
      optional M23 f_3 = 3;
      message M25 {
        optional double f_0 = 1;
        message M34 {
          optional int32 f_0 = 1;
        }
        optional M34 f_2 = 2;
        message M39 {
          optional fixed64 f_0 = 1;
        }
        repeated M39 f_3 = 3;
      }
      optional M25 f_4 = 4;
      message M28 {
        optional fixed64 f_0 = 1;
      }
      repeated M28 f_5 = 5;
      message M30 {
        optional double f_0 = 1;
        message M36 {
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 103;
            E13_CONST_2 = 97;
            E13_CONST_3 = 1;
            E13_CONST_4 = 49;
            E13_CONST_5 = 125;
          }
          repeated E13 f_0 = 1 [packed = true];
          optional int32 f_1 = 2;
          optional fixed32 f_2 = 3;
          optional float f_3 = 4;
        }
        optional M36 f_2 = 2;
      }
      repeated M30 f_6 = 6;
    }
    optional M16 f_2 = 2;
    message M18 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 4;
      optional float f_4 = 5;
      optional double f_5 = 6;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 28;
        E5_CONST_2 = 62;
        E5_CONST_3 = 100;
        E5_CONST_4 = 59;
        E5_CONST_5 = 21;
      }
      optional E5 f_6 = 7;
      message M26 {
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 90;
          E10_CONST_2 = 106;
          E10_CONST_3 = 5;
          E10_CONST_4 = 111;
          E10_CONST_5 = 73;
        }
        optional E10 f_0 = 1;
      }
      repeated M26 f_8 = 8;
      message M29 {
        optional fixed64 f_0 = 1;
        optional fixed32 f_1 = 2;
        optional fixed32 f_2 = 3;
        optional fixed32 f_3 = 4;
        message M37 {
          optional double f_0 = 1;
          message M46 {
            optional double f_0 = 1;
            optional fixed64 f_1 = 2;
            optional int32 f_2 = 3;
            optional fixed64 f_3 = 4;
            optional double f_4 = 5;
            optional fixed64 f_5 = 6;
            optional double f_6 = 7;
            optional int32 f_7 = 8;
            optional float f_8 = 9;
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 121;
              E17_CONST_2 = 114;
              E17_CONST_3 = 12;
              E17_CONST_4 = 49;
              E17_CONST_5 = 70;
            }
            optional E17 f_9 = 10;
            optional fixed64 f_10 = 11;
            optional int32 f_11 = 12;
          }
          optional M46 f_2 = 2;
        }
        optional M37 f_5 = 5;
      }
      optional M29 f_9 = 9;
      message M32 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed64 f_4 = 5;
        optional double f_5 = 6;
        optional double f_6 = 7;
        optional double f_7 = 8;
        optional double f_8 = 9;
        optional double f_9 = 10;
        optional int32 f_10 = 11;
        message M35 {
          enum E12 {
            E12_UNSPECIFIED = 0;
            E12_CONST_1 = 69;
            E12_CONST_2 = 97;
            E12_CONST_3 = 63;
            E12_CONST_4 = 55;
            E12_CONST_5 = 20;
          }
          optional E12 f_0 = 2;
          message M43 {
            optional double f_0 = 1;
            message M49 {
              optional fixed64 f_0 = 1;
              message M60 {
                enum E20 {
                  E20_UNSPECIFIED = 0;
                  E20_CONST_1 = 39;
                  E20_CONST_2 = 3;
                  E20_CONST_3 = 9;
                  E20_CONST_4 = 12;
                  E20_CONST_5 = 88;
                }
                optional E20 f_0 = 1;
                message M66 {
                  optional int32 f_0 = 1;
                  message M69 {
                    optional fixed64 f_0 = 1;
                    optional float f_1 = 3;
                    optional int32 f_2 = 4;
                    enum E25 {
                      E25_UNSPECIFIED = 0;
                      E25_CONST_1 = 75;
                      E25_CONST_2 = 108;
                      E25_CONST_3 = 14;
                      E25_CONST_4 = 113;
                      E25_CONST_5 = 114;
                    }
                    optional E25 f_3 = 5;
                  }
                  optional M69 f_2 = 2;
                }
                optional M66 f_2 = 2;
              }
              optional M60 f_2 = 2;
            }
            optional M49 f_2 = 2;
            message M50 {
              optional fixed64 f_0 = 1;
            }
            optional M50 f_3 = 3;
            message M55 {
              optional fixed32 f_0 = 1;
              message M61 {
                optional int32 f_0 = 1;
                optional fixed64 f_1 = 2;
                optional int32 f_2 = 3;
                optional float f_3 = 4;
                optional int32 f_4 = 5;
                optional int32 f_5 = 6;
                optional double f_6 = 7;
                optional double f_7 = 8;
                optional double f_8 = 9;
                optional float f_9 = 10;
                optional double f_10 = 11;
                optional float f_11 = 12;
                optional int32 f_12 = 13;
                optional double f_13 = 14;
                optional int32 f_14 = 15;
                optional double f_15 = 16;
                enum E21 {
                  E21_UNSPECIFIED = 0;
                  E21_CONST_1 = 45;
                  E21_CONST_2 = 123;
                  E21_CONST_3 = 110;
                  E21_CONST_4 = 56;
                  E21_CONST_5 = 46;
                }
                optional E21 f_16 = 17;
                optional double f_17 = 18;
                optional bool f_18 = 19;
                enum E22 {
                  E22_UNSPECIFIED = 0;
                  E22_CONST_1 = 13;
                  E22_CONST_2 = 122;
                  E22_CONST_3 = 7;
                  E22_CONST_4 = 84;
                  E22_CONST_5 = 65;
                }
                optional E22 f_19 = 20;
                optional double f_20 = 21;
                optional fixed64 f_21 = 22;
                optional int32 f_22 = 23;
              }
              repeated M61 f_2 = 2;
            }
            optional M55 f_4 = 4;
          }
          optional M43 f_3 = 3;
        }
        repeated M35 f_12 = 12;
      }
      repeated M32 f_10 = 10;
    }
    optional M18 f_3 = 3;
    message M19 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
    }
    optional M19 f_4 = 4;
    message M21 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 113;
        E6_CONST_2 = 40;
        E6_CONST_3 = 125;
        E6_CONST_4 = 87;
        E6_CONST_5 = 32;
      }
      optional E6 f_2 = 3;
      optional double f_3 = 4;
      optional int32 f_4 = 5;
      optional fixed64 f_5 = 6;
      optional double f_6 = 7;
      optional fixed64 f_7 = 8;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 120;
        E7_CONST_2 = 1;
        E7_CONST_3 = 90;
        E7_CONST_4 = 105;
        E7_CONST_5 = 104;
      }
      optional E7 f_8 = 9;
      optional double f_9 = 10;
      optional int32 f_10 = 11;
      optional float f_11 = 12;
    }
    optional M21 f_5 = 5;
  }
  optional M11 f_36 = 36;
  message M12 {
    optional fixed32 f_0 = 1;
    optional int32 f_1 = 2;
    optional bool f_2 = 4;
  }
  optional M12 f_37 = 37;
  message M13 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional fixed64 f_2 = 3;
  }
  repeated M13 f_38 = 38;
}
