// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.response.Message1;

message Message1 {
  optional float f_0 = 1;
  optional fixed64 f_1 = 2;
  optional double f_2 = 3;
  optional double f_3 = 4;
  optional int32 f_4 = 5;
  optional int32 f_5 = 6;
  optional int32 f_6 = 7;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 44;
    E1_CONST_2 = 31;
    E1_CONST_3 = 102;
    E1_CONST_4 = 26;
    E1_CONST_5 = 11;
  }
  optional E1 f_7 = 8;
  optional fixed64 f_8 = 9;
  optional double f_9 = 10;
  optional int32 f_10 = 11;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 112;
    E2_CONST_2 = 25;
    E2_CONST_3 = 51;
    E2_CONST_4 = 121;
    E2_CONST_5 = 73;
  }
  optional E2 f_11 = 13;
  optional fixed32 f_12 = 14;
  repeated bool f_13 = 15 [packed = true];
  optional double f_14 = 16;
  optional string f_15 = 17;
  optional fixed64 f_16 = 18;
  optional int32 f_17 = 20;
  optional int32 f_18 = 21;
  optional int32 f_19 = 22;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 40;
    E3_CONST_2 = 124;
    E3_CONST_3 = 23;
    E3_CONST_4 = 76;
    E3_CONST_5 = 115;
  }
  repeated E3 f_20 = 23 [packed = true];
  optional double f_21 = 24;
  optional double f_22 = 25;
  optional int32 f_23 = 26;
  optional int32 f_24 = 27;
  message M1 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    message M15 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
    }
    repeated M15 f_3 = 3;
    message M30 {
      optional float f_0 = 1;
      message M42 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
        optional double f_3 = 4;
        optional int32 f_4 = 5;
      }
      optional M42 f_2 = 2;
    }
    optional M30 f_4 = 4;
  }
  repeated M1 f_29 = 29;
  message M2 {
    optional fixed64 f_0 = 1;
    message M10 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional float f_3 = 4;
      optional int32 f_4 = 5;
      message M38 {
        optional double f_0 = 2;
        optional fixed64 f_1 = 3;
      }
      optional M38 f_6 = 6;
    }
    repeated M10 f_2 = 2;
    message M28 {
      optional double f_0 = 1;
      message M48 {
        optional float f_0 = 1;
        message M57 {
          optional double f_0 = 1;
          message M60 {
            enum E18 {
              E18_UNSPECIFIED = 0;
              E18_CONST_1 = 87;
              E18_CONST_2 = 66;
              E18_CONST_3 = 42;
              E18_CONST_4 = 109;
              E18_CONST_5 = 2;
            }
            repeated E18 f_0 = 1 [packed = true];
            optional double f_1 = 2;
          }
          repeated M60 f_2 = 2;
          message M66 {
            optional fixed64 f_0 = 1;
            optional fixed64 f_1 = 2;
          }
          repeated M66 f_3 = 3;
          message M68 {
            optional int32 f_0 = 1;
            optional int32 f_1 = 2;
            optional int32 f_2 = 3;
            repeated bool f_3 = 4 [packed = true];
            optional fixed64 f_4 = 5;
            message M69 {
              optional fixed64 f_0 = 2;
              message M72 {
                optional fixed64 f_0 = 1;
              }
              optional M72 f_3 = 3;
            }
            optional M69 f_6 = 6;
          }
          optional M68 f_4 = 4;
        }
        optional M57 f_2 = 2;
      }
      optional M48 f_2 = 2;
    }
    optional M28 f_3 = 3;
    message M33 {
      optional fixed64 f_0 = 1;
      optional int64 f_1 = 2;
      optional fixed64 f_2 = 3;
      message M39 {
        optional int32 f_0 = 1;
      }
      optional M39 f_4 = 4;
      message M54 {
        optional fixed64 f_0 = 1;
      }
      optional M54 f_5 = 5;
    }
    optional M33 f_4 = 4;
  }
  optional M2 f_30 = 30;
  message M3 {
    optional int32 f_0 = 1;
    optional fixed32 f_1 = 2;
    optional fixed64 f_2 = 4;
    optional fixed64 f_3 = 5;
    optional double f_4 = 6;
    message M16 {
      optional float f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 4;
      optional double f_4 = 5;
      optional fixed64 f_5 = 6;
      message M43 {
        optional fixed64 f_0 = 1;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 56;
          E10_CONST_2 = 15;
          E10_CONST_3 = 68;
          E10_CONST_4 = 5;
          E10_CONST_5 = 113;
        }
        optional E10 f_1 = 2;
      }
      optional M43 f_7 = 7;
    }
    optional M16 f_7 = 7;
    message M19 {
      optional double f_0 = 1;
    }
    optional M19 f_8 = 8;
    message M32 {
      optional double f_0 = 1;
    }
    repeated M32 f_9 = 9;
    message M34 {
      optional fixed64 f_0 = 1;
    }
    optional M34 f_10 = 10;
  }
  repeated M3 f_32 = 32;
  message M4 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional double f_2 = 3;
    message M21 {
      optional double f_0 = 1;
      message M44 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 100;
          E11_CONST_2 = 106;
          E11_CONST_3 = 12;
          E11_CONST_4 = 89;
          E11_CONST_5 = 107;
        }
        optional E11 f_4 = 5;
        optional fixed64 f_5 = 6;
      }
      optional M44 f_2 = 2;
      message M50 {
        optional fixed64 f_0 = 1;
        message M59 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 2;
          optional double f_2 = 3;
          optional fixed32 f_3 = 4;
          optional fixed64 f_4 = 5;
          optional bool f_5 = 6;
          optional double f_6 = 7;
          optional fixed64 f_7 = 8;
          optional int32 f_8 = 9;
          optional double f_9 = 10;
          optional int32 f_10 = 11;
          message M61 {
            optional double f_0 = 1;
            optional double f_1 = 2;
          }
          optional M61 f_12 = 12;
          message M65 {
            optional int32 f_0 = 1;
          }
          optional M65 f_13 = 13;
        }
        repeated M59 f_2 = 2;
      }
      optional M50 f_3 = 3;
    }
    optional M21 f_4 = 4;
    message M26 {
      optional double f_0 = 1;
      message M45 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
        optional fixed64 f_4 = 6;
        message M56 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 2;
          optional double f_2 = 3;
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 20;
            E17_CONST_2 = 60;
            E17_CONST_3 = 104;
            E17_CONST_4 = 37;
            E17_CONST_5 = 1;
          }
          optional E17 f_3 = 4;
          optional fixed64 f_4 = 5;
          message M63 {
            optional int32 f_0 = 1;
            optional fixed64 f_1 = 2;
            optional double f_2 = 3;
            message M70 {
              optional fixed64 f_0 = 1;
              message M74 {
                optional int32 f_0 = 1;
              }
              optional M74 f_2 = 2;
              message M75 {
                optional int32 f_0 = 1;
                optional int32 f_1 = 2;
                message M78 {
                  optional double f_0 = 1;
                  optional int32 f_1 = 2;
                  optional double f_2 = 3;
                  optional int32 f_3 = 4;
                }
                optional M78 f_3 = 3;
              }
              optional M75 f_3 = 3;
              message M76 {
                optional double f_0 = 1;
                optional double f_1 = 2;
                optional fixed64 f_2 = 3;
                optional double f_3 = 4;
                optional bool f_4 = 5;
                optional int32 f_5 = 6;
                optional float f_6 = 7;
                optional float f_7 = 8;
                optional fixed64 f_8 = 9;
                optional double f_9 = 10;
                optional int32 f_10 = 11;
                optional double f_11 = 12;
                optional int32 f_12 = 13;
                enum E25 {
                  E25_UNSPECIFIED = 0;
                  E25_CONST_1 = 52;
                  E25_CONST_2 = 29;
                  E25_CONST_3 = 109;
                  E25_CONST_4 = 36;
                  E25_CONST_5 = 121;
                }
                optional E25 f_13 = 14;
                optional fixed64 f_14 = 16;
                optional fixed64 f_15 = 17;
                optional fixed64 f_16 = 18;
                optional fixed64 f_17 = 19;
                optional float f_18 = 21;
                optional int32 f_19 = 22;
              }
              optional M76 f_4 = 4;
            }
            optional M70 f_4 = 4;
          }
          optional M63 f_7 = 7;
          message M64 {
            enum E19 {
              E19_UNSPECIFIED = 0;
              E19_CONST_1 = 16;
              E19_CONST_2 = 119;
              E19_CONST_3 = 88;
              E19_CONST_4 = 36;
              E19_CONST_5 = 97;
            }
            repeated E19 f_0 = 1 [packed = true];
            optional int64 f_1 = 2;
            optional fixed64 f_2 = 3;
          }
          repeated M64 f_8 = 8;
          message M67 {
            optional fixed64 f_0 = 1;
          }
          repeated M67 f_9 = 9;
        }
        optional M56 f_7 = 7;
      }
      optional M45 f_2 = 2;
    }
    repeated M26 f_5 = 5;
  }
  repeated M4 f_33 = 33;
  message M5 {
    optional double f_0 = 1;
    optional double f_1 = 3;
    optional int32 f_2 = 4;
    message M18 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
    }
    optional M18 f_5 = 5;
    message M35 {
      optional double f_0 = 1;
      optional double f_1 = 3;
      optional fixed64 f_2 = 4;
    }
    optional M35 f_6 = 6;
  }
  repeated M5 f_34 = 34;
  message M6 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 3;
    optional float f_2 = 4;
    optional double f_3 = 5;
    optional int32 f_4 = 6;
    message M17 {
      optional fixed64 f_0 = 1;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 84;
        E4_CONST_2 = 115;
        E4_CONST_3 = 3;
        E4_CONST_4 = 61;
        E4_CONST_5 = 8;
      }
      repeated E4 f_1 = 2 [packed = true];
      message M41 {
        optional double f_0 = 1;
      }
      repeated M41 f_3 = 3;
    }
    optional M17 f_7 = 7;
    message M22 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
    }
    optional M22 f_9 = 9;
    message M27 {
      optional double f_0 = 1;
      optional bool f_1 = 2;
      optional bool f_2 = 3;
      optional float f_3 = 4;
      optional fixed64 f_4 = 5;
    }
    repeated M27 f_10 = 10;
    message M31 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 58;
        E8_CONST_2 = 117;
        E8_CONST_3 = 122;
        E8_CONST_4 = 120;
        E8_CONST_5 = 1;
      }
      optional E8 f_0 = 1;
      message M55 {
        optional fixed64 f_0 = 1;
        optional bool f_1 = 2;
        optional int32 f_2 = 3;
        optional double f_3 = 4;
        optional int32 f_4 = 5;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 79;
          E15_CONST_2 = 36;
          E15_CONST_3 = 105;
          E15_CONST_4 = 75;
          E15_CONST_5 = 112;
        }
        optional E15 f_5 = 6;
        optional int32 f_6 = 8;
        optional double f_7 = 9;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 28;
          E16_CONST_2 = 5;
          E16_CONST_3 = 22;
          E16_CONST_4 = 97;
          E16_CONST_5 = 101;
        }
        optional E16 f_8 = 10;
        optional int32 f_9 = 11;
        optional int32 f_10 = 12;
        optional double f_11 = 13;
      }
      optional M55 f_2 = 2;
    }
    optional M31 f_11 = 11;
  }
  optional M6 f_35 = 35;
  message M7 {
    optional fixed64 f_0 = 1;
    message M11 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional fixed32 f_4 = 5;
      optional int32 f_5 = 6;
      message M36 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 3;
        optional float f_3 = 4;
        optional int32 f_4 = 5;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 99;
          E9_CONST_2 = 106;
          E9_CONST_3 = 64;
          E9_CONST_4 = 11;
          E9_CONST_5 = 112;
        }
        optional E9 f_5 = 6;
        message M58 {
          optional double f_0 = 1;
          optional double f_1 = 2;
          optional int32 f_2 = 3;
          message M62 {
            optional int32 f_0 = 1;
            message M71 {
              optional double f_0 = 1;
              optional fixed64 f_1 = 2;
              optional fixed64 f_2 = 3;
              optional double f_3 = 4;
              optional double f_4 = 5;
              optional double f_5 = 6;
              optional int32 f_6 = 7;
              optional fixed64 f_7 = 8;
              optional fixed32 f_8 = 9;
              enum E20 {
                E20_UNSPECIFIED = 0;
                E20_CONST_1 = 65;
                E20_CONST_2 = 100;
                E20_CONST_3 = 85;
                E20_CONST_4 = 12;
                E20_CONST_5 = 114;
              }
              repeated E20 f_9 = 10 [packed = true];
              optional double f_10 = 11;
              enum E21 {
                E21_UNSPECIFIED = 0;
                E21_CONST_1 = 75;
                E21_CONST_2 = 88;
                E21_CONST_3 = 79;
                E21_CONST_4 = 85;
                E21_CONST_5 = 97;
              }
              optional E21 f_11 = 12;
              message M73 {
                optional fixed32 f_0 = 1;
                enum E22 {
                  E22_UNSPECIFIED = 0;
                  E22_CONST_1 = 84;
                  E22_CONST_2 = 45;
                  E22_CONST_3 = 7;
                  E22_CONST_4 = 46;
                  E22_CONST_5 = 112;
                }
                optional E22 f_1 = 2;
                optional int32 f_2 = 3;
                optional int32 f_3 = 4;
                enum E23 {
                  E23_UNSPECIFIED = 0;
                  E23_CONST_1 = 118;
                  E23_CONST_2 = 101;
                  E23_CONST_3 = 13;
                  E23_CONST_4 = 48;
                  E23_CONST_5 = 4;
                }
                repeated E23 f_4 = 5 [packed = true];
                optional fixed64 f_5 = 6;
                optional fixed32 f_6 = 7;
                enum E24 {
                  E24_UNSPECIFIED = 0;
                  E24_CONST_1 = 118;
                  E24_CONST_2 = 100;
                  E24_CONST_3 = 31;
                  E24_CONST_4 = 111;
                  E24_CONST_5 = 23;
                }
                optional E24 f_7 = 8;
                optional int32 f_8 = 9;
                optional double f_9 = 11;
                optional double f_10 = 12;
                message M77 {
                  optional float f_0 = 1;
                }
                optional M77 f_13 = 13;
              }
              optional M73 f_13 = 13;
            }
            optional M71 f_3 = 3;
          }
          optional M62 f_4 = 4;
        }
        repeated M58 f_8 = 8;
      }
      repeated M36 f_7 = 7;
      message M53 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 126;
          E14_CONST_2 = 60;
          E14_CONST_3 = 61;
          E14_CONST_4 = 15;
          E14_CONST_5 = 124;
        }
        optional E14 f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed64 f_4 = 5;
      }
      repeated M53 f_8 = 8;
    }
    optional M11 f_2 = 2;
    message M13 {
      optional fixed64 f_0 = 2;
      optional double f_1 = 3;
      optional double f_2 = 4;
      optional double f_3 = 5;
      message M49 {
        optional fixed64 f_0 = 1;
        optional int64 f_1 = 2;
        optional double f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed64 f_4 = 5;
      }
      optional M49 f_7 = 7;
      message M51 {
        optional double f_0 = 1;
      }
      optional M51 f_8 = 8;
    }
    optional M13 f_3 = 3;
  }
  optional M7 f_36 = 36;
  message M8 {
    optional fixed64 f_0 = 1;
    message M14 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
      optional fixed64 f_2 = 4;
      optional fixed64 f_3 = 5;
      optional int32 f_4 = 6;
      optional float f_5 = 7;
      optional double f_6 = 8;
      optional int32 f_7 = 9;
      optional int64 f_8 = 10;
      optional double f_9 = 11;
      optional fixed64 f_10 = 13;
    }
    optional M14 f_2 = 2;
    message M24 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 61;
        E7_CONST_2 = 80;
        E7_CONST_3 = 73;
        E7_CONST_4 = 48;
        E7_CONST_5 = 50;
      }
      optional E7 f_0 = 1;
      message M52 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
      }
      optional M52 f_2 = 2;
    }
    repeated M24 f_3 = 3;
    message M25 {
      optional fixed64 f_0 = 1;
    }
    optional M25 f_4 = 4;
    message M29 {
      optional double f_0 = 1;
      message M37 {
        optional fixed64 f_0 = 2;
        optional double f_1 = 3;
        optional bool f_2 = 4;
        optional int32 f_3 = 5;
      }
      optional M37 f_2 = 2;
      message M40 {
        optional bool f_0 = 1;
        optional float f_1 = 2;
        optional double f_2 = 3;
      }
      optional M40 f_3 = 3;
      message M47 {
        optional int32 f_0 = 1;
      }
      optional M47 f_4 = 4;
    }
    repeated M29 f_5 = 5;
  }
  optional M8 f_37 = 37;
  message M9 {
    optional double f_0 = 1;
    optional fixed64 f_1 = 2;
    optional int32 f_2 = 3;
    optional int32 f_3 = 4;
    optional int32 f_4 = 5;
    message M12 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
    }
    optional M12 f_6 = 6;
    message M20 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 33;
        E5_CONST_2 = 59;
        E5_CONST_3 = 37;
        E5_CONST_4 = 67;
        E5_CONST_5 = 74;
      }
      optional E5 f_0 = 1;
    }
    optional M20 f_7 = 7;
    message M23 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 69;
        E6_CONST_2 = 30;
        E6_CONST_3 = 58;
        E6_CONST_4 = 116;
        E6_CONST_5 = 64;
      }
      optional E6 f_0 = 1;
      message M46 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional int32 f_3 = 4;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 71;
          E12_CONST_2 = 70;
          E12_CONST_3 = 26;
          E12_CONST_4 = 34;
          E12_CONST_5 = 111;
        }
        optional E12 f_4 = 5;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 31;
          E13_CONST_2 = 44;
          E13_CONST_3 = 58;
          E13_CONST_4 = 80;
          E13_CONST_5 = 54;
        }
        optional E13 f_5 = 7;
        optional fixed64 f_6 = 8;
        optional fixed32 f_7 = 9;
        optional fixed64 f_8 = 10;
        optional fixed32 f_9 = 11;
        optional int32 f_10 = 12;
      }
      optional M46 f_2 = 2;
    }
    optional M23 f_8 = 8;
  }
  optional M9 f_38 = 38;
}
