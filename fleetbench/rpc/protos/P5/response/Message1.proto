// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.response.Message1;

message Message1 {
  optional bytes f_0 = 2;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 31;
    E1_CONST_2 = 93;
    E1_CONST_3 = 113;
    E1_CONST_4 = 29;
    E1_CONST_5 = 26;
  }
  optional E1 f_1 = 3;
  optional int64 f_2 = 4;
  optional int32 f_3 = 5;
  message M1 {
    optional int64 f_0 = 1;
    message M13 {
      optional bool f_0 = 2;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 29;
        E5_CONST_2 = 68;
        E5_CONST_3 = 18;
        E5_CONST_4 = 94;
        E5_CONST_5 = 112;
      }
      optional E5 f_1 = 3;
      message M25 {
        optional int64 f_0 = 2;
        optional fixed32 f_1 = 4;
        optional uint64 f_2 = 7;
        optional fixed32 f_3 = 9;
        optional int64 f_4 = 11;
        optional int64 f_5 = 12;
      }
      repeated M25 f_4 = 4;
    }
    repeated M13 f_2 = 2;
    message M15 {
      optional fixed64 f_0 = 2;
      optional fixed32 f_1 = 4;
      optional bytes f_2 = 6;
      optional uint32 f_3 = 7;
      optional bytes f_4 = 8 [ctype = CORD];
      optional uint32 f_5 = 9;
    }
    optional M15 f_3 = 3;
    message M18 {
      optional int64 f_0 = 1;
    }
    optional M18 f_4 = 4;
  }
  repeated M1 f_6 = 6;
  message M2 {
    optional fixed32 f_0 = 1;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 98;
      E2_CONST_2 = 26;
      E2_CONST_3 = 2;
      E2_CONST_4 = 11;
      E2_CONST_5 = 63;
    }
    optional E2 f_1 = 2;
    optional uint64 f_2 = 3;
    optional int64 f_3 = 4;
    message M14 {
      optional fixed32 f_0 = 1;
    }
    repeated M14 f_5 = 5;
  }
  optional M2 f_7 = 7;
  message M3 {
    optional bytes f_0 = 1;
    message M11 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 113;
        E4_CONST_2 = 35;
        E4_CONST_3 = 77;
        E4_CONST_4 = 110;
        E4_CONST_5 = 92;
      }
      optional E4 f_0 = 2;
      message M22 {
        optional fixed32 f_0 = 2;
        message M26 {
          optional int32 f_0 = 1;
        }
        optional M26 f_5 = 5;
        message M29 {
          optional int32 f_0 = 1;
          optional int64 f_1 = 2;
        }
        optional M29 f_7 = 7;
      }
      optional M22 f_3 = 3;
      message M23 {
        optional uint64 f_0 = 2;
        message M27 {
          optional int64 f_0 = 1;
          message M30 {
            repeated bytes f_0 = 1;
            optional fixed32 f_1 = 2;
          }
          optional M30 f_2 = 2;
          message M31 {
            optional bytes f_0 = 2;
            message M32 {
              optional bytes f_0 = 2;
              optional uint64 f_1 = 3;
              optional int64 f_2 = 4;
              optional bytes f_3 = 5;
              optional bytes f_4 = 6 [ctype = CORD];
              enum E8 {
                E8_UNSPECIFIED = 0;
                E8_CONST_1 = 116;
                E8_CONST_2 = 68;
                E8_CONST_3 = 46;
                E8_CONST_4 = 88;
                E8_CONST_5 = 65;
              }
              optional E8 f_5 = 8;
              optional int32 f_6 = 9;
              message M33 {
                optional int64 f_0 = 2;
                message M34 {
                  optional int64 f_0 = 1;
                  optional bytes f_1 = 3;
                  optional bytes f_2 = 4;
                  message M35 {
                    optional double f_0 = 3;
                  }
                  optional M35 f_6 = 6;
                }
                optional M34 f_3 = 3;
              }
              optional M33 f_11 = 11;
            }
            optional M32 f_3 = 3;
          }
          optional M31 f_3 = 3;
        }
        optional M27 f_3 = 3;
      }
      repeated M23 f_4 = 4;
    }
    optional M11 f_2 = 2;
  }
  repeated M3 f_8 = 8;
  message M4 {
    optional double f_0 = 1;
  }
  optional M4 f_9 = 9;
  message M5 {
    optional uint32 f_0 = 1;
  }
  optional M5 f_10 = 10;
  message M6 {
    repeated string f_0 = 3;
    optional double f_1 = 4;
    optional int64 f_2 = 5;
    message M16 {
      optional bytes f_0 = 2;
      optional double f_1 = 3;
      optional int32 f_2 = 4;
      optional uint32 f_3 = 5;
    }
    optional M16 f_6 = 6;
  }
  repeated M6 f_12 = 12;
  message M7 {
    optional fixed32 f_0 = 2;
    message M17 {
      optional int64 f_0 = 1;
    }
    optional M17 f_3 = 3;
    message M19 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 36;
        E6_CONST_2 = 77;
        E6_CONST_3 = 123;
        E6_CONST_4 = 27;
        E6_CONST_5 = 41;
      }
      optional E6 f_0 = 1;
    }
    optional M19 f_4 = 4;
  }
  optional M7 f_13 = 13;
  message M8 {
    optional int32 f_0 = 1;
    message M20 {
      optional bytes f_0 = 1 [ctype = CORD];
      optional bytes f_1 = 3;
      optional bytes f_2 = 4;
      optional bool f_3 = 5;
      optional fixed32 f_4 = 6;
      optional int64 f_5 = 7;
      optional string f_6 = 8;
      optional bytes f_7 = 9 [ctype = CORD];
      optional float f_8 = 10;
      optional uint64 f_9 = 11;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 21;
        E7_CONST_2 = 88;
        E7_CONST_3 = 105;
        E7_CONST_4 = 109;
        E7_CONST_5 = 23;
      }
      optional E7 f_10 = 13;
      optional int32 f_11 = 14;
      optional fixed32 f_12 = 15;
      message M24 {
        optional int32 f_0 = 1;
        message M28 {
          optional int64 f_0 = 1;
          optional bytes f_1 = 2 [ctype = CORD];
          optional int32 f_2 = 4;
          optional int64 f_3 = 6;
          optional fixed32 f_4 = 7;
        }
        optional M28 f_4 = 4;
      }
      repeated M24 f_16 = 16;
    }
    optional M20 f_2 = 2;
  }
  repeated M8 f_15 = 15;
  message M9 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 59;
      E3_CONST_2 = 45;
      E3_CONST_3 = 31;
      E3_CONST_4 = 92;
      E3_CONST_5 = 51;
    }
    optional E3 f_0 = 1;
    message M12 {
      optional fixed32 f_0 = 1;
      message M21 {
        optional bytes f_0 = 1 [ctype = CORD];
        optional bytes f_1 = 2;
        optional string f_2 = 3;
        optional int64 f_3 = 5;
        repeated bytes f_4 = 7;
        optional uint32 f_5 = 9;
        optional uint64 f_6 = 10;
        repeated bytes f_7 = 11;
      }
      optional M21 f_2 = 2;
    }
    repeated M12 f_3 = 3;
  }
  optional M9 f_16 = 16;
  message M10 {
    optional uint32 f_0 = 1;
  }
  optional M10 f_17 = 17;
}
