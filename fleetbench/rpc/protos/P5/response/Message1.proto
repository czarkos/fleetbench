// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.response.Message1;

message Message1 {
  optional fixed64 f_0 = 1;
  optional int32 f_1 = 2;
  optional bool f_2 = 3;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 8;
    E1_CONST_2 = 89;
    E1_CONST_3 = 78;
    E1_CONST_4 = 52;
    E1_CONST_5 = 6;
  }
  repeated E1 f_3 = 4 [packed = true];
  optional double f_4 = 5;
  optional fixed64 f_5 = 6;
  optional fixed64 f_6 = 7;
  optional double f_7 = 8;
  optional fixed64 f_8 = 9;
  optional fixed64 f_9 = 10;
  optional int32 f_10 = 11;
  optional int32 f_11 = 12;
  optional double f_12 = 13;
  optional double f_13 = 14;
  optional double f_14 = 15;
  optional int32 f_15 = 17;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 109;
    E2_CONST_2 = 96;
    E2_CONST_3 = 103;
    E2_CONST_4 = 52;
    E2_CONST_5 = 102;
  }
  repeated E2 f_16 = 18 [packed = true];
  optional fixed64 f_17 = 19;
  optional double f_18 = 20;
  optional int32 f_19 = 21;
  optional fixed64 f_20 = 22;
  optional fixed64 f_21 = 23;
  optional double f_22 = 24;
  optional int32 f_23 = 25;
  optional int32 f_24 = 26;
  message M1 {
    optional bool f_0 = 1;
    optional double f_1 = 2;
    optional double f_2 = 3;
    optional fixed64 f_3 = 4;
    optional int32 f_4 = 5;
    optional int32 f_5 = 6;
    optional double f_6 = 7;
    optional fixed64 f_7 = 8;
    optional int32 f_8 = 9;
    optional int32 f_9 = 10;
    optional int32 f_10 = 11;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 55;
      E3_CONST_2 = 1;
      E3_CONST_3 = 38;
      E3_CONST_4 = 3;
      E3_CONST_5 = 62;
    }
    optional E3 f_11 = 12;
    message M8 {
      optional int32 f_0 = 1;
      message M35 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 3;
        enum E22 {
          E22_UNSPECIFIED = 0;
          E22_CONST_1 = 59;
          E22_CONST_2 = 115;
          E22_CONST_3 = 8;
          E22_CONST_4 = 1;
          E22_CONST_5 = 114;
        }
        optional E22 f_3 = 4;
      }
      optional M35 f_2 = 2;
    }
    optional M8 f_13 = 13;
    message M9 {
      optional float f_0 = 1;
    }
    optional M9 f_14 = 14;
    message M11 {
      optional fixed64 f_0 = 1;
      optional float f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int64 f_3 = 4;
      optional double f_4 = 5;
      optional double f_5 = 6;
    }
    repeated M11 f_15 = 15;
    message M15 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 68;
        E8_CONST_2 = 27;
        E8_CONST_3 = 97;
        E8_CONST_4 = 119;
        E8_CONST_5 = 108;
      }
      optional E8 f_3 = 4;
      optional double f_4 = 5;
    }
    optional M15 f_16 = 16;
  }
  optional M1 f_27 = 27;
  message M2 {
    optional fixed64 f_0 = 1;
    message M13 {
      optional int32 f_0 = 1;
    }
    repeated M13 f_2 = 2;
    message M22 {
      optional int32 f_0 = 1;
      message M29 {
        optional double f_0 = 1;
      }
      optional M29 f_2 = 2;
    }
    optional M22 f_3 = 3;
    message M23 {
      optional double f_0 = 1;
    }
    optional M23 f_4 = 4;
  }
  optional M2 f_28 = 28;
  message M3 {
    optional int32 f_0 = 1;
    message M6 {
      optional int32 f_0 = 1;
      message M26 {
        optional double f_0 = 1;
      }
      repeated M26 f_2 = 2;
    }
    optional M6 f_2 = 2;
    message M14 {
      optional float f_0 = 1;
      message M31 {
        optional fixed64 f_0 = 1;
      }
      optional M31 f_2 = 2;
      message M38 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
        optional fixed64 f_4 = 5;
        enum E23 {
          E23_UNSPECIFIED = 0;
          E23_CONST_1 = 67;
          E23_CONST_2 = 22;
          E23_CONST_3 = 82;
          E23_CONST_4 = 50;
          E23_CONST_5 = 85;
        }
        optional E23 f_5 = 6;
      }
      optional M38 f_3 = 3;
    }
    optional M14 f_3 = 3;
    message M20 {
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 37;
        E11_CONST_2 = 100;
        E11_CONST_3 = 84;
        E11_CONST_4 = 115;
        E11_CONST_5 = 58;
      }
      repeated E11 f_0 = 1 [packed = true];
    }
    optional M20 f_4 = 4;
  }
  repeated M3 f_29 = 29;
  message M4 {
    optional fixed64 f_0 = 1;
    optional float f_1 = 2;
    message M10 {
      optional double f_0 = 1;
      message M27 {
        optional fixed64 f_0 = 1;
      }
      optional M27 f_2 = 2;
      message M30 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional bool f_2 = 3;
        optional fixed32 f_3 = 4;
        optional int32 f_4 = 5;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 23;
          E16_CONST_2 = 17;
          E16_CONST_3 = 43;
          E16_CONST_4 = 53;
          E16_CONST_5 = 114;
        }
        repeated E16 f_5 = 6 [packed = true];
        optional double f_6 = 7;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 90;
          E17_CONST_2 = 19;
          E17_CONST_3 = 121;
          E17_CONST_4 = 108;
          E17_CONST_5 = 81;
        }
        optional E17 f_7 = 8;
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 4;
          E18_CONST_2 = 27;
          E18_CONST_3 = 100;
          E18_CONST_4 = 115;
          E18_CONST_5 = 24;
        }
        repeated E18 f_8 = 9 [packed = true];
        optional double f_9 = 10;
        optional float f_10 = 11;
        optional fixed64 f_11 = 12;
      }
      repeated M30 f_3 = 3;
    }
    repeated M10 f_3 = 3;
    message M16 {
      optional float f_0 = 1;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 82;
        E9_CONST_2 = 116;
        E9_CONST_3 = 107;
        E9_CONST_4 = 96;
        E9_CONST_5 = 115;
      }
      optional E9 f_1 = 2;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 105;
        E10_CONST_2 = 93;
        E10_CONST_3 = 122;
        E10_CONST_4 = 84;
        E10_CONST_5 = 97;
      }
      repeated E10 f_2 = 3 [packed = true];
      message M36 {
        optional double f_0 = 1;
        message M39 {
          optional fixed64 f_0 = 1;
          optional double f_1 = 2;
          optional double f_2 = 3;
          optional double f_3 = 4;
          optional double f_4 = 5;
          optional fixed64 f_5 = 6;
          optional double f_6 = 7;
          optional fixed64 f_7 = 8;
          optional int32 f_8 = 9;
          enum E24 {
            E24_UNSPECIFIED = 0;
            E24_CONST_1 = 46;
            E24_CONST_2 = 67;
            E24_CONST_3 = 103;
            E24_CONST_4 = 98;
            E24_CONST_5 = 124;
          }
          optional E24 f_9 = 10;
          optional double f_10 = 11;
          optional double f_11 = 12;
        }
        optional M39 f_2 = 2;
      }
      optional M36 f_4 = 4;
    }
    repeated M16 f_4 = 4;
    message M18 {
      optional int32 f_0 = 1;
      message M34 {
        optional int64 f_0 = 1;
        optional fixed64 f_1 = 2;
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 5;
          E19_CONST_2 = 64;
          E19_CONST_3 = 71;
          E19_CONST_4 = 119;
          E19_CONST_5 = 48;
        }
        optional E19 f_2 = 3;
        optional float f_3 = 4;
        optional double f_4 = 5;
        enum E20 {
          E20_UNSPECIFIED = 0;
          E20_CONST_1 = 94;
          E20_CONST_2 = 73;
          E20_CONST_3 = 115;
          E20_CONST_4 = 61;
          E20_CONST_5 = 89;
        }
        optional E20 f_5 = 6;
        optional int32 f_6 = 8;
        optional double f_7 = 9;
        optional double f_8 = 10;
        enum E21 {
          E21_UNSPECIFIED = 0;
          E21_CONST_1 = 75;
          E21_CONST_2 = 5;
          E21_CONST_3 = 94;
          E21_CONST_4 = 15;
          E21_CONST_5 = 83;
        }
        optional E21 f_9 = 11;
        optional bool f_10 = 12;
        optional int32 f_11 = 13;
        optional double f_12 = 14;
        message M40 {
          optional double f_0 = 1;
          optional int32 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional double f_3 = 4;
          enum E25 {
            E25_UNSPECIFIED = 0;
            E25_CONST_1 = 123;
            E25_CONST_2 = 56;
            E25_CONST_3 = 126;
            E25_CONST_4 = 114;
            E25_CONST_5 = 61;
          }
          optional E25 f_4 = 5;
          optional fixed64 f_5 = 6;
          optional fixed64 f_6 = 7;
          optional int32 f_7 = 8;
          optional fixed64 f_8 = 9;
          optional int32 f_9 = 10;
          optional double f_10 = 11;
          optional int32 f_11 = 12;
          optional double f_12 = 13;
          message M41 {
            optional fixed64 f_0 = 1;
            optional double f_1 = 2;
            optional int32 f_2 = 3;
            optional double f_3 = 4;
            optional fixed64 f_4 = 5;
            optional int32 f_5 = 6;
            optional int32 f_6 = 7;
            optional fixed64 f_7 = 8;
            optional fixed64 f_8 = 9;
            optional double f_9 = 10;
            optional double f_10 = 11;
            optional int32 f_11 = 12;
            optional double f_12 = 13;
            enum E26 {
              E26_UNSPECIFIED = 0;
              E26_CONST_1 = 42;
              E26_CONST_2 = 39;
              E26_CONST_3 = 64;
              E26_CONST_4 = 116;
              E26_CONST_5 = 49;
            }
            optional E26 f_13 = 14;
            enum E27 {
              E27_UNSPECIFIED = 0;
              E27_CONST_1 = 20;
              E27_CONST_2 = 27;
              E27_CONST_3 = 32;
              E27_CONST_4 = 123;
              E27_CONST_5 = 77;
            }
            repeated E27 f_14 = 15 [packed = true];
            optional fixed64 f_15 = 16;
            optional int32 f_16 = 17;
            optional double f_17 = 18;
            optional int32 f_18 = 19;
            optional fixed64 f_19 = 20;
            optional float f_20 = 22;
            optional int32 f_21 = 23;
            enum E28 {
              E28_UNSPECIFIED = 0;
              E28_CONST_1 = 12;
              E28_CONST_2 = 88;
              E28_CONST_3 = 90;
              E28_CONST_4 = 108;
              E28_CONST_5 = 87;
            }
            repeated E28 f_22 = 24 [packed = true];
            optional int32 f_23 = 25;
            message M42 {
              enum E29 {
                E29_UNSPECIFIED = 0;
                E29_CONST_1 = 118;
                E29_CONST_2 = 35;
                E29_CONST_3 = 96;
                E29_CONST_4 = 117;
                E29_CONST_5 = 4;
              }
              optional E29 f_0 = 1;
              optional int32 f_1 = 2;
            }
            optional M42 f_26 = 26;
            message M43 {
              enum E30 {
                E30_UNSPECIFIED = 0;
                E30_CONST_1 = 24;
                E30_CONST_2 = 85;
                E30_CONST_3 = 5;
                E30_CONST_4 = 118;
                E30_CONST_5 = 40;
              }
              repeated E30 f_0 = 1 [packed = true];
              message M54 {
                optional double f_0 = 1;
                optional fixed64 f_1 = 2;
                optional fixed32 f_2 = 3;
                optional double f_3 = 4;
                enum E34 {
                  E34_UNSPECIFIED = 0;
                  E34_CONST_1 = 6;
                  E34_CONST_2 = 25;
                  E34_CONST_3 = 85;
                  E34_CONST_4 = 74;
                  E34_CONST_5 = 82;
                }
                optional E34 f_4 = 5;
                optional int32 f_5 = 6;
                optional int32 f_6 = 7;
                repeated bool f_7 = 8 [packed = true];
                optional int32 f_8 = 9;
                optional fixed64 f_9 = 10;
                optional int32 f_10 = 11;
                optional int32 f_11 = 12;
                optional fixed64 f_12 = 13;
                optional int32 f_13 = 14;
                optional int32 f_14 = 15;
                optional int32 f_15 = 16;
              }
              repeated M54 f_2 = 2;
            }
            optional M43 f_27 = 27;
            message M44 {
              optional int32 f_0 = 1;
            }
            repeated M44 f_28 = 28;
            message M45 {
              optional int32 f_0 = 1;
              optional fixed64 f_1 = 2;
              optional int32 f_2 = 3;
              enum E31 {
                E31_UNSPECIFIED = 0;
                E31_CONST_1 = 116;
                E31_CONST_2 = 111;
                E31_CONST_3 = 94;
                E31_CONST_4 = 60;
                E31_CONST_5 = 34;
              }
              optional E31 f_3 = 4;
              message M50 {
                optional double f_0 = 1;
              }
              repeated M50 f_5 = 5;
            }
            optional M45 f_29 = 29;
            message M46 {
              optional double f_0 = 1;
              optional double f_1 = 2;
              optional double f_2 = 3;
              optional float f_3 = 4;
              optional int32 f_4 = 5;
              optional int32 f_5 = 6;
              enum E32 {
                E32_UNSPECIFIED = 0;
                E32_CONST_1 = 57;
                E32_CONST_2 = 69;
                E32_CONST_3 = 96;
                E32_CONST_4 = 47;
                E32_CONST_5 = 73;
              }
              repeated E32 f_6 = 7 [packed = true];
              message M51 {
                optional int64 f_0 = 1;
                optional fixed64 f_1 = 2;
                optional int32 f_2 = 3;
                optional fixed64 f_3 = 4;
                optional int32 f_4 = 5;
                optional fixed64 f_5 = 6;
                optional int32 f_6 = 7;
                optional int32 f_7 = 8;
                optional int32 f_8 = 9;
                optional double f_9 = 10;
                optional bool f_10 = 11;
              }
              optional M51 f_8 = 8;
              message M56 {
                optional fixed64 f_0 = 1;
              }
              optional M56 f_9 = 9;
            }
            optional M46 f_30 = 30;
            message M47 {
              optional int32 f_0 = 1;
              optional int32 f_1 = 2;
              message M52 {
                optional int32 f_0 = 1;
                optional double f_1 = 2;
                optional fixed32 f_2 = 3;
              }
              optional M52 f_3 = 3;
            }
            optional M47 f_31 = 31;
            message M48 {
              optional int32 f_0 = 1;
              optional double f_1 = 2;
              optional int32 f_2 = 3;
              optional fixed64 f_3 = 4;
              message M53 {
                optional double f_0 = 1;
                message M57 {
                  optional int32 f_0 = 1;
                  enum E35 {
                    E35_UNSPECIFIED = 0;
                    E35_CONST_1 = 69;
                    E35_CONST_2 = 72;
                    E35_CONST_3 = 10;
                    E35_CONST_4 = 79;
                    E35_CONST_5 = 49;
                  }
                  optional E35 f_1 = 2;
                  optional int32 f_2 = 3;
                  optional double f_3 = 4;
                  enum E36 {
                    E36_UNSPECIFIED = 0;
                    E36_CONST_1 = 35;
                    E36_CONST_2 = 23;
                    E36_CONST_3 = 73;
                    E36_CONST_4 = 57;
                    E36_CONST_5 = 91;
                  }
                  optional E36 f_4 = 5;
                  optional int32 f_5 = 6;
                  optional int32 f_6 = 7;
                  optional fixed32 f_7 = 8;
                  optional int32 f_8 = 9;
                  optional fixed32 f_9 = 10;
                  optional fixed64 f_10 = 11;
                  optional double f_11 = 12;
                  enum E37 {
                    E37_UNSPECIFIED = 0;
                    E37_CONST_1 = 30;
                    E37_CONST_2 = 31;
                    E37_CONST_3 = 102;
                    E37_CONST_4 = 80;
                    E37_CONST_5 = 106;
                  }
                  optional E37 f_12 = 13;
                  optional double f_13 = 14;
                  optional bool f_14 = 15;
                  optional fixed64 f_15 = 16;
                  optional double f_16 = 17;
                  optional double f_17 = 18;
                  message M58 {
                    optional int32 f_0 = 1;
                  }
                  optional M58 f_19 = 19;
                }
                optional M57 f_3 = 3;
              }
              optional M53 f_6 = 6;
            }
            optional M48 f_32 = 32;
            message M49 {
              enum E33 {
                E33_UNSPECIFIED = 0;
                E33_CONST_1 = 116;
                E33_CONST_2 = 124;
                E33_CONST_3 = 76;
                E33_CONST_4 = 104;
                E33_CONST_5 = 109;
              }
              optional E33 f_0 = 1;
              optional fixed64 f_1 = 2;
              optional double f_2 = 3;
              optional double f_3 = 4;
              optional int32 f_4 = 5;
              optional fixed64 f_5 = 6;
              optional double f_6 = 7;
              optional int32 f_7 = 8;
              optional double f_8 = 9;
              optional fixed32 f_9 = 10;
              optional fixed64 f_10 = 11;
              message M55 {
                optional bool f_0 = 1;
              }
              optional M55 f_12 = 12;
            }
            optional M49 f_33 = 33;
          }
          optional M41 f_15 = 15;
        }
        repeated M40 f_15 = 15;
      }
      optional M34 f_2 = 2;
    }
    repeated M18 f_5 = 5;
    message M19 {
      optional int32 f_0 = 1;
      message M37 {
        optional fixed64 f_0 = 1;
      }
      optional M37 f_2 = 2;
    }
    repeated M19 f_6 = 6;
    message M21 {
      optional fixed64 f_0 = 1;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 6;
        E12_CONST_2 = 80;
        E12_CONST_3 = 121;
        E12_CONST_4 = 61;
        E12_CONST_5 = 55;
      }
      repeated E12 f_1 = 2 [packed = true];
    }
    optional M21 f_7 = 7;
  }
  repeated M4 f_30 = 30;
  message M5 {
    optional fixed64 f_0 = 1;
    optional double f_1 = 2;
    optional string f_2 = 3;
    optional int32 f_3 = 4;
    optional fixed64 f_4 = 5;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 72;
      E4_CONST_2 = 126;
      E4_CONST_3 = 32;
      E4_CONST_4 = 62;
      E4_CONST_5 = 6;
    }
    repeated E4 f_5 = 7 [packed = true];
    optional int64 f_6 = 8;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 116;
      E5_CONST_2 = 29;
      E5_CONST_3 = 80;
      E5_CONST_4 = 59;
      E5_CONST_5 = 87;
    }
    optional E5 f_7 = 9;
    optional double f_8 = 10;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 62;
      E6_CONST_2 = 122;
      E6_CONST_3 = 66;
      E6_CONST_4 = 28;
      E6_CONST_5 = 95;
    }
    repeated E6 f_9 = 11 [packed = true];
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 99;
      E7_CONST_2 = 124;
      E7_CONST_3 = 27;
      E7_CONST_4 = 102;
      E7_CONST_5 = 106;
    }
    optional E7 f_10 = 12;
    message M7 {
      optional fixed64 f_0 = 1;
    }
    optional M7 f_13 = 13;
    message M12 {
      optional bool f_0 = 1;
      message M32 {
        optional int32 f_0 = 1;
      }
      optional M32 f_2 = 2;
      message M33 {
        optional float f_0 = 1;
      }
      repeated M33 f_3 = 3;
    }
    optional M12 f_14 = 14;
    message M17 {
      optional int32 f_0 = 1;
      message M25 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 64;
          E15_CONST_2 = 52;
          E15_CONST_3 = 33;
          E15_CONST_4 = 83;
          E15_CONST_5 = 96;
        }
        optional E15 f_3 = 4;
      }
      repeated M25 f_2 = 2;
    }
    optional M17 f_15 = 15;
    message M24 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 3;
        E13_CONST_2 = 75;
        E13_CONST_3 = 91;
        E13_CONST_4 = 4;
        E13_CONST_5 = 27;
      }
      optional E13 f_2 = 3;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 35;
        E14_CONST_2 = 68;
        E14_CONST_3 = 53;
        E14_CONST_4 = 2;
        E14_CONST_5 = 80;
      }
      optional E14 f_3 = 4;
      optional fixed64 f_4 = 5;
      optional fixed64 f_5 = 6;
      optional fixed64 f_6 = 7;
      optional bool f_7 = 8;
      optional fixed64 f_8 = 9;
      optional int32 f_9 = 10;
      optional double f_10 = 11;
      message M28 {
        optional int32 f_0 = 1;
      }
      repeated M28 f_12 = 12;
    }
    repeated M24 f_16 = 16;
  }
  repeated M5 f_31 = 31;
}
