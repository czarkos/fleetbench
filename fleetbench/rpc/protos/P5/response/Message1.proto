// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.response.Message1;

message Message1 {
  optional int32 f_0 = 1;
  optional double f_1 = 2;
  optional fixed64 f_2 = 3;
  optional double f_3 = 5;
  optional fixed64 f_4 = 6;
  optional fixed64 f_5 = 7;
  optional float f_6 = 8;
  optional double f_7 = 9;
  optional double f_8 = 11;
  optional double f_9 = 12;
  optional double f_10 = 13;
  optional double f_11 = 15;
  optional double f_12 = 16;
  optional int32 f_13 = 17;
  optional int32 f_14 = 18;
  optional int32 f_15 = 19;
  optional bool f_16 = 20;
  optional int32 f_17 = 22;
  optional int32 f_18 = 23;
  optional int32 f_19 = 24;
  optional double f_20 = 25;
  optional double f_21 = 27;
  optional fixed64 f_22 = 28;
  optional fixed64 f_23 = 29;
  optional int32 f_24 = 30;
  optional int32 f_25 = 31;
  message M1 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional double f_2 = 3;
    optional int32 f_3 = 4;
    optional bool f_4 = 5;
    optional double f_5 = 6;
    message M5 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      message M21 {
        optional double f_0 = 1;
      }
      repeated M21 f_3 = 3;
    }
    optional M5 f_7 = 7;
    message M9 {
      optional int32 f_0 = 1;
      optional uint32 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      optional fixed32 f_4 = 5;
      message M38 {
        optional float f_0 = 1;
      }
      repeated M38 f_6 = 6;
      message M45 {
        optional bool f_0 = 2;
        optional double f_1 = 3;
        optional int32 f_2 = 4;
        optional int32 f_3 = 5;
        optional fixed64 f_4 = 6;
        optional fixed64 f_5 = 7;
        optional fixed64 f_6 = 8;
      }
      repeated M45 f_7 = 7;
    }
    optional M9 f_8 = 8;
    message M14 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional fixed64 f_4 = 6;
      optional int32 f_5 = 7;
      optional fixed32 f_6 = 8;
      optional fixed64 f_7 = 9;
      optional int32 f_8 = 10;
      optional int32 f_9 = 11;
      optional int32 f_10 = 12;
      optional double f_11 = 13;
      optional int32 f_12 = 14;
      optional double f_13 = 16;
      optional fixed64 f_14 = 17;
      optional int32 f_15 = 18;
      message M31 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
        optional double f_3 = 4;
      }
      repeated M31 f_19 = 19;
      message M44 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
      }
      optional M44 f_20 = 20;
    }
    repeated M14 f_9 = 9;
    message M15 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 4;
      message M26 {
        optional int32 f_0 = 2;
        optional string f_1 = 3;
        optional bool f_2 = 4;
        optional double f_3 = 5;
        optional fixed64 f_4 = 6;
        optional fixed64 f_5 = 7;
        optional double f_6 = 8;
        repeated bool f_7 = 10 [packed = true];
        optional int32 f_8 = 11;
        optional fixed64 f_9 = 12;
        optional double f_10 = 13;
        optional fixed64 f_11 = 14;
        optional float f_12 = 15;
        optional fixed64 f_13 = 16;
        optional double f_14 = 17;
        optional double f_15 = 18;
        optional double f_16 = 19;
      }
      repeated M26 f_5 = 5;
      message M34 {
        optional int32 f_0 = 1;
      }
      repeated M34 f_6 = 6;
    }
    repeated M15 f_10 = 10;
    message M16 {
      optional int32 f_0 = 1;
      optional bool f_1 = 3;
      optional int32 f_2 = 4;
      optional double f_3 = 5;
      optional double f_4 = 6;
      optional double f_5 = 7;
      optional fixed32 f_6 = 9;
      optional double f_7 = 10;
      optional float f_8 = 11;
      optional double f_9 = 12;
      optional int32 f_10 = 13;
      optional double f_11 = 14;
      message M19 {
        optional float f_0 = 1;
      }
      optional M19 f_16 = 16;
      message M36 {
        optional int32 f_0 = 1;
      }
      repeated M36 f_17 = 17;
      message M40 {
        optional fixed64 f_0 = 2;
      }
      optional M40 f_18 = 18;
    }
    optional M16 f_11 = 11;
  }
  optional M1 f_32 = 32;
  message M2 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional bool f_2 = 3;
    optional double f_3 = 4;
    optional fixed64 f_4 = 5;
    optional int32 f_5 = 6;
    optional bool f_6 = 7;
    optional bool f_7 = 8;
    optional double f_8 = 9;
    optional int32 f_9 = 10;
    optional int32 f_10 = 11;
    optional double f_11 = 12;
    optional double f_12 = 13;
    optional int32 f_13 = 14;
    optional double f_14 = 15;
    optional double f_15 = 16;
    optional double f_16 = 17;
    optional double f_17 = 18;
    optional fixed32 f_18 = 19;
    optional fixed64 f_19 = 20;
    message M3 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      message M17 {
        optional int32 f_0 = 1;
        message M48 {
          optional fixed64 f_0 = 1;
          message M53 {
            optional float f_0 = 2;
            message M66 {
              optional float f_0 = 1;
              message M76 {
                optional double f_0 = 1;
              }
              repeated M76 f_2 = 2;
            }
            optional M66 f_3 = 3;
            message M67 {
              optional double f_0 = 1;
            }
            optional M67 f_4 = 4;
          }
          optional M53 f_2 = 2;
        }
        optional M48 f_2 = 2;
      }
      optional M17 f_3 = 3;
      message M18 {
        optional fixed64 f_0 = 1;
        message M47 {
          optional bool f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional int32 f_3 = 4;
          optional fixed64 f_4 = 5;
          optional double f_5 = 6;
          message M52 {
            optional fixed64 f_0 = 1;
            message M59 {
              optional bool f_0 = 1;
              optional fixed64 f_1 = 2;
              optional double f_2 = 3;
              optional fixed64 f_3 = 4;
            }
            optional M59 f_2 = 2;
            message M64 {
              optional int32 f_0 = 1;
            }
            optional M64 f_3 = 3;
          }
          optional M52 f_7 = 7;
          message M56 {
            optional fixed64 f_0 = 1;
            message M61 {
              optional double f_0 = 2;
            }
            optional M61 f_2 = 2;
            message M68 {
              optional bool f_0 = 2;
            }
            optional M68 f_3 = 3;
            message M69 {
              optional fixed64 f_0 = 1;
            }
            optional M69 f_4 = 4;
          }
          optional M56 f_8 = 8;
        }
        optional M47 f_2 = 2;
      }
      optional M18 f_4 = 4;
      message M24 {
        optional int32 f_0 = 2;
        optional fixed64 f_1 = 3;
      }
      optional M24 f_5 = 5;
    }
    repeated M3 f_21 = 21;
    message M4 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 5;
      message M29 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional int32 f_2 = 3;
        optional fixed64 f_3 = 4;
        optional float f_4 = 5;
        optional int32 f_5 = 6;
        message M46 {
          optional double f_0 = 2;
          message M54 {
            optional fixed32 f_0 = 1;
            message M58 {
              optional fixed64 f_0 = 1;
            }
            optional M58 f_2 = 2;
            message M62 {
              optional fixed64 f_0 = 1;
              optional double f_1 = 2;
            }
            optional M62 f_4 = 4;
            message M63 {
              optional int32 f_0 = 1;
            }
            repeated M63 f_5 = 5;
            message M70 {
              optional fixed64 f_0 = 1;
            }
            optional M70 f_6 = 6;
            message M71 {
              optional double f_0 = 1;
            }
            repeated M71 f_7 = 7;
            message M72 {
              optional int32 f_0 = 1;
            }
            repeated M72 f_8 = 8;
          }
          repeated M54 f_3 = 3;
          message M57 {
            optional int32 f_0 = 2;
            optional int32 f_1 = 3;
            optional double f_2 = 4;
            optional double f_3 = 5;
            optional fixed64 f_4 = 6;
            optional fixed64 f_5 = 7;
            optional int32 f_6 = 8;
            optional int64 f_7 = 9;
            optional int32 f_8 = 10;
            optional fixed64 f_9 = 11;
            optional double f_10 = 12;
            message M60 {
              optional int32 f_0 = 1;
            }
            repeated M60 f_13 = 13;
            message M74 {
              optional int32 f_0 = 1;
            }
            optional M74 f_14 = 14;
          }
          optional M57 f_5 = 5;
        }
        optional M46 f_7 = 7;
      }
      repeated M29 f_6 = 6;
    }
    repeated M4 f_22 = 22;
    message M6 {
      optional float f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 5;
      optional double f_4 = 6;
      message M33 {
        optional int32 f_0 = 1;
        optional int64 f_1 = 3;
        optional int32 f_2 = 4;
      }
      optional M33 f_7 = 7;
      message M35 {
        optional int64 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
        message M49 {
          optional fixed64 f_0 = 1;
          message M51 {
            optional bool f_0 = 1;
            message M65 {
              optional int32 f_0 = 1;
              message M79 {
                optional double f_0 = 1;
                optional int32 f_1 = 2;
                optional fixed64 f_2 = 4;
                optional double f_3 = 5;
                optional int32 f_4 = 6;
                optional double f_5 = 7;
                optional double f_6 = 8;
                optional fixed64 f_7 = 9;
                optional int32 f_8 = 10;
                optional fixed32 f_9 = 11;
                optional fixed64 f_10 = 12;
                optional fixed32 f_11 = 13;
                optional int32 f_12 = 14;
              }
              optional M79 f_2 = 2;
            }
            optional M65 f_2 = 2;
            message M73 {
              optional double f_0 = 2;
              optional double f_1 = 3;
              optional fixed64 f_2 = 4;
              optional fixed32 f_3 = 5;
              message M77 {
                optional double f_0 = 2;
              }
              optional M77 f_7 = 7;
            }
            optional M73 f_4 = 4;
          }
          optional M51 f_3 = 3;
        }
        optional M49 f_5 = 5;
        message M50 {
          optional fixed64 f_0 = 1;
          optional double f_1 = 2;
          optional int32 f_2 = 3;
          optional int32 f_3 = 4;
          optional float f_4 = 5;
          optional fixed64 f_5 = 7;
          optional int32 f_6 = 8;
          optional fixed64 f_7 = 9;
          optional float f_8 = 10;
          optional double f_9 = 11;
          optional int32 f_10 = 12;
          optional int32 f_11 = 13;
          optional fixed64 f_12 = 14;
          optional double f_13 = 15;
          optional fixed32 f_14 = 16;
          optional double f_15 = 17;
          optional int32 f_16 = 18;
          optional float f_17 = 19;
          optional double f_18 = 20;
          message M55 {
            optional int32 f_0 = 1;
            message M75 {
              optional double f_0 = 1;
              message M78 {
                optional int32 f_0 = 1;
                optional bool f_1 = 3;
                optional fixed64 f_2 = 4;
                optional fixed64 f_3 = 5;
                optional double f_4 = 6;
                optional double f_5 = 8;
                optional double f_6 = 9;
                optional double f_7 = 11;
                optional double f_8 = 12;
                optional int32 f_9 = 14;
                optional fixed32 f_10 = 15;
                optional fixed64 f_11 = 16;
              }
              repeated M78 f_2 = 2;
            }
            repeated M75 f_2 = 2;
          }
          optional M55 f_21 = 21;
        }
        optional M50 f_6 = 6;
      }
      repeated M35 f_8 = 8;
      message M37 {
        optional int32 f_0 = 1;
      }
      optional M37 f_9 = 9;
    }
    optional M6 f_23 = 23;
    message M7 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      message M20 {
        optional int32 f_0 = 1;
      }
      optional M20 f_4 = 4;
      message M23 {
        optional double f_0 = 1;
      }
      repeated M23 f_5 = 5;
      message M27 {
        optional fixed64 f_0 = 1;
      }
      repeated M27 f_6 = 6;
    }
    repeated M7 f_24 = 24;
    message M8 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 4;
      optional float f_4 = 5;
      optional int32 f_5 = 6;
      optional double f_6 = 7;
      optional int32 f_7 = 8;
      optional int32 f_8 = 9;
      optional fixed64 f_9 = 10;
      message M22 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
      }
      optional M22 f_11 = 11;
      message M25 {
        optional double f_0 = 1;
      }
      repeated M25 f_12 = 12;
      message M32 {
        optional fixed32 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed32 f_2 = 3;
      }
      optional M32 f_13 = 13;
      message M42 {
        optional fixed64 f_0 = 1;
        optional float f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
        optional double f_4 = 5;
      }
      optional M42 f_14 = 14;
    }
    repeated M8 f_25 = 25;
    message M10 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional float f_2 = 3;
      message M28 {
        optional fixed64 f_0 = 1;
        optional fixed32 f_1 = 2;
        optional bool f_2 = 3;
        optional fixed64 f_3 = 5;
        optional double f_4 = 6;
      }
      optional M28 f_4 = 4;
      message M39 {
        optional fixed64 f_0 = 1;
      }
      optional M39 f_5 = 5;
      message M43 {
        optional int32 f_0 = 1;
      }
      repeated M43 f_6 = 6;
    }
    repeated M10 f_26 = 26;
    message M11 {
      optional float f_0 = 1;
    }
    repeated M11 f_28 = 28;
    message M12 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional float f_2 = 3;
      optional int64 f_3 = 4;
      optional fixed64 f_4 = 5;
      optional int32 f_5 = 6;
      optional double f_6 = 7;
      optional double f_7 = 8;
      optional float f_8 = 9;
      optional float f_9 = 10;
      optional fixed64 f_10 = 11;
      optional int32 f_11 = 12;
      message M41 {
        optional int32 f_0 = 1;
      }
      optional M41 f_13 = 13;
    }
    repeated M12 f_29 = 29;
    message M13 {
      optional int64 f_0 = 1;
      optional double f_1 = 2;
      optional float f_2 = 3;
      message M30 {
        optional double f_0 = 1;
      }
      repeated M30 f_4 = 4;
    }
    repeated M13 f_30 = 30;
  }
  optional M2 f_34 = 34;
}
