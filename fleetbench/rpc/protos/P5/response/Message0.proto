// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.response.Message0;

message Message0 {
  optional int32 f_0 = 1;
  optional bytes f_1 = 2;
  optional int64 f_2 = 3;
  message M1 {
    optional string f_0 = 2;
    message M6 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      optional int64 f_2 = 3;
      optional string f_3 = 5;
      optional fixed32 f_4 = 7;
      optional uint64 f_5 = 8;
      optional int32 f_6 = 9;
      optional bytes f_7 = 11;
      optional int64 f_8 = 12;
      repeated string f_9 = 14;
      optional int32 f_10 = 16;
      optional uint32 f_11 = 17;
      optional string f_12 = 18;
      repeated bytes f_13 = 20;
      message M10 {
        optional fixed32 f_0 = 1;
        message M17 {
          repeated bytes f_0 = 1;
          optional int32 f_1 = 2;
          optional bytes f_2 = 4;
          optional int64 f_3 = 5;
          optional int64 f_4 = 6;
          message M18 {
            optional int64 f_0 = 4;
            optional uint64 f_1 = 6;
            optional int32 f_2 = 7;
            message M19 {
              optional fixed32 f_0 = 2;
              message M20 {
                optional uint32 f_0 = 2;
                message M21 {
                  enum E6 {
                    E6_UNSPECIFIED = 0;
                    E6_CONST_1 = 39;
                    E6_CONST_2 = 50;
                    E6_CONST_3 = 88;
                    E6_CONST_4 = 99;
                    E6_CONST_5 = 2;
                  }
                  optional E6 f_0 = 1;
                }
                optional M21 f_3 = 3;
                message M22 {
                  enum E7 {
                    E7_UNSPECIFIED = 0;
                    E7_CONST_1 = 39;
                    E7_CONST_2 = 102;
                    E7_CONST_3 = 75;
                    E7_CONST_4 = 59;
                    E7_CONST_5 = 52;
                  }
                  optional E7 f_0 = 2;
                  optional fixed32 f_1 = 4;
                  optional bytes f_2 = 5 [ctype = CORD];
                }
                optional M22 f_5 = 5;
              }
              repeated M20 f_4 = 4;
            }
            optional M19 f_8 = 8;
          }
          optional M18 f_7 = 7;
        }
        repeated M17 f_3 = 3;
      }
      optional M10 f_22 = 22;
    }
    optional M6 f_3 = 3;
  }
  optional M1 f_4 = 4;
  message M2 {
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 82;
      E1_CONST_2 = 90;
      E1_CONST_3 = 116;
      E1_CONST_4 = 103;
      E1_CONST_5 = 85;
    }
    optional E1 f_0 = 2;
    message M4 {
      optional uint64 f_0 = 1;
      message M11 {
        optional string f_0 = 2;
      }
      optional M11 f_2 = 2;
      message M13 {
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 102;
          E4_CONST_2 = 47;
          E4_CONST_3 = 55;
          E4_CONST_4 = 7;
          E4_CONST_5 = 25;
        }
        optional E4 f_0 = 2;
        message M16 {
          optional fixed32 f_0 = 1;
        }
        repeated M16 f_3 = 3;
      }
      optional M13 f_3 = 3;
      message M15 {
        enum E5 {
          E5_UNSPECIFIED = 0;
          E5_CONST_1 = 95;
          E5_CONST_2 = 11;
          E5_CONST_3 = 51;
          E5_CONST_4 = 116;
          E5_CONST_5 = 115;
        }
        optional E5 f_0 = 1;
      }
      optional M15 f_4 = 4;
    }
    optional M4 f_3 = 3;
    message M5 {
      optional int64 f_0 = 1;
      message M7 {
        optional string f_0 = 1;
      }
      optional M7 f_4 = 4;
      message M8 {
        optional uint32 f_0 = 1;
      }
      optional M8 f_5 = 5;
      message M9 {
        optional double f_0 = 1;
      }
      optional M9 f_6 = 6;
      message M12 {
        optional int64 f_0 = 1;
      }
      repeated M12 f_7 = 7;
      message M14 {
        optional double f_0 = 1;
      }
      repeated M14 f_8 = 8;
    }
    optional M5 f_6 = 6;
  }
  optional M2 f_5 = 5;
  message M3 {
    optional bytes f_0 = 1 [ctype = CORD];
    optional bytes f_1 = 3;
    optional string f_2 = 5;
    optional uint32 f_3 = 6;
    optional fixed32 f_4 = 8;
    optional fixed32 f_5 = 9;
    optional fixed32 f_6 = 11;
    optional fixed32 f_7 = 13;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 21;
      E2_CONST_2 = 18;
      E2_CONST_3 = 72;
      E2_CONST_4 = 58;
      E2_CONST_5 = 28;
    }
    optional E2 f_8 = 15;
    optional string f_9 = 16;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 95;
      E3_CONST_2 = 125;
      E3_CONST_3 = 104;
      E3_CONST_4 = 113;
      E3_CONST_5 = 30;
    }
    optional E3 f_10 = 17;
    optional fixed32 f_11 = 18;
    optional uint32 f_12 = 20;
    repeated bytes f_13 = 22;
  }
  optional M3 f_7 = 7;
}
