// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.response.Message0;

message Message0 {
  optional double f_0 = 1;
  optional fixed64 f_1 = 2;
  optional double f_2 = 3;
  optional double f_3 = 4;
  optional double f_4 = 5;
  optional int32 f_5 = 6;
  optional double f_6 = 7;
  optional double f_7 = 8;
  optional int32 f_8 = 11;
  optional int32 f_9 = 12;
  optional double f_10 = 14;
  optional double f_11 = 15;
  optional int32 f_12 = 16;
  optional double f_13 = 17;
  optional fixed64 f_14 = 18;
  optional fixed64 f_15 = 19;
  optional double f_16 = 20;
  optional float f_17 = 21;
  optional double f_18 = 22;
  optional fixed64 f_19 = 23;
  optional double f_20 = 24;
  optional bool f_21 = 25;
  optional int32 f_22 = 26;
  optional float f_23 = 27;
  optional int32 f_24 = 28;
  optional int32 f_25 = 29;
  message M1 {
    optional double f_0 = 2;
    message M8 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 5;
      optional fixed64 f_4 = 6;
      message M46 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
        optional double f_4 = 5;
      }
      optional M46 f_9 = 9;
      message M49 {
        optional int32 f_0 = 1;
      }
      repeated M49 f_10 = 10;
    }
    optional M8 f_3 = 3;
    message M10 {
      optional float f_0 = 1;
      message M42 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional double f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed64 f_4 = 5;
        optional fixed64 f_5 = 6;
        optional int32 f_6 = 7;
        optional int32 f_7 = 9;
        optional float f_8 = 11;
        optional fixed64 f_9 = 12;
        optional int32 f_10 = 13;
        optional fixed64 f_11 = 14;
      }
      optional M42 f_2 = 2;
      message M51 {
        optional double f_0 = 1;
      }
      optional M51 f_4 = 4;
    }
    repeated M10 f_5 = 5;
    message M13 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional double f_3 = 5;
      optional double f_4 = 7;
      optional int32 f_5 = 8;
      message M56 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
      }
      optional M56 f_9 = 9;
    }
    optional M13 f_6 = 6;
    message M19 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional fixed64 f_4 = 5;
      optional double f_5 = 6;
      optional fixed64 f_6 = 7;
      optional int32 f_7 = 8;
      optional double f_8 = 9;
      optional fixed64 f_9 = 10;
      optional float f_10 = 11;
      optional fixed64 f_11 = 12;
      message M34 {
        optional float f_0 = 1;
        message M59 {
          optional double f_0 = 1;
          message M65 {
            optional float f_0 = 1;
            optional fixed32 f_1 = 2;
            message M69 {
              optional fixed32 f_0 = 1;
              message M77 {
                optional int32 f_0 = 1;
              }
              repeated M77 f_2 = 2;
              message M80 {
                optional int32 f_0 = 1;
                optional fixed64 f_1 = 2;
                optional fixed64 f_2 = 3;
                optional fixed64 f_3 = 4;
                optional fixed64 f_4 = 5;
                enum E1 {
                  E1_UNSPECIFIED = 0;
                  E1_CONST_1 = 32;
                  E1_CONST_2 = 94;
                  E1_CONST_3 = 57;
                  E1_CONST_4 = 65;
                  E1_CONST_5 = 62;
                }
                optional E1 f_5 = 7;
                optional fixed64 f_6 = 8;
                optional int32 f_7 = 9;
                optional fixed64 f_8 = 10;
                optional fixed64 f_9 = 11;
                optional fixed64 f_10 = 12;
              }
              optional M80 f_3 = 3;
            }
            optional M69 f_3 = 3;
            message M72 {
              optional fixed64 f_0 = 2;
              optional double f_1 = 4;
              optional float f_2 = 5;
              optional fixed64 f_3 = 6;
              optional int32 f_4 = 7;
              message M74 {
                optional float f_0 = 1;
                optional fixed64 f_1 = 2;
              }
              repeated M74 f_8 = 8;
            }
            optional M72 f_4 = 4;
          }
          optional M65 f_2 = 2;
        }
        optional M59 f_2 = 2;
      }
      repeated M34 f_14 = 14;
    }
    optional M19 f_7 = 7;
    message M23 {
      optional fixed64 f_0 = 1;
    }
    optional M23 f_8 = 8;
    message M24 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional fixed64 f_3 = 4;
      message M38 {
        optional int32 f_0 = 1;
      }
      repeated M38 f_5 = 5;
    }
    optional M24 f_9 = 9;
    message M26 {
      optional double f_0 = 1;
    }
    optional M26 f_10 = 10;
  }
  optional M1 f_30 = 30;
  message M2 {
    optional int32 f_0 = 1;
    message M11 {
      optional fixed64 f_0 = 2;
      message M36 {
        optional bool f_0 = 1;
      }
      optional M36 f_3 = 3;
    }
    repeated M11 f_2 = 2;
    message M15 {
      optional double f_0 = 1;
    }
    optional M15 f_3 = 3;
    message M22 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
      optional fixed64 f_4 = 5;
      optional double f_5 = 6;
      optional double f_6 = 7;
      optional fixed32 f_7 = 8;
      optional int32 f_8 = 9;
      optional int32 f_9 = 10;
      optional fixed64 f_10 = 11;
      optional fixed64 f_11 = 13;
      message M41 {
        optional float f_0 = 1;
        optional double f_1 = 2;
        optional bool f_2 = 3;
        optional double f_3 = 4;
      }
      optional M41 f_14 = 14;
      message M50 {
        optional float f_0 = 1;
        optional fixed64 f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 4;
      }
      optional M50 f_15 = 15;
    }
    optional M22 f_4 = 4;
    message M28 {
      optional double f_0 = 1;
      message M31 {
        optional int32 f_0 = 1;
        optional double f_1 = 2;
      }
      optional M31 f_2 = 2;
    }
    optional M28 f_5 = 5;
  }
  optional M2 f_31 = 31;
  message M3 {
    optional double f_0 = 1;
    optional double f_1 = 2;
    message M27 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 4;
      optional int32 f_4 = 5;
      message M43 {
        optional int32 f_0 = 1;
      }
      optional M43 f_6 = 6;
    }
    repeated M27 f_3 = 3;
  }
  optional M3 f_32 = 32;
  message M4 {
    optional fixed64 f_0 = 1;
  }
  repeated M4 f_33 = 33;
  message M5 {
    optional double f_0 = 1;
    message M14 {
      optional float f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 4;
      optional double f_4 = 5;
      message M40 {
        optional fixed64 f_0 = 1;
      }
      optional M40 f_6 = 6;
      message M54 {
        optional fixed64 f_0 = 1;
      }
      repeated M54 f_7 = 7;
    }
    optional M14 f_2 = 2;
    message M17 {
      optional int32 f_0 = 1;
      message M32 {
        optional fixed64 f_0 = 1;
      }
      optional M32 f_2 = 2;
      message M33 {
        optional fixed32 f_0 = 1;
        optional double f_1 = 2;
        optional fixed64 f_2 = 3;
      }
      optional M33 f_3 = 3;
      message M37 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed64 f_4 = 5;
      }
      repeated M37 f_4 = 4;
      message M45 {
        optional double f_0 = 1;
      }
      optional M45 f_5 = 5;
      message M52 {
        optional float f_0 = 2;
        optional double f_1 = 4;
        optional int32 f_2 = 5;
        optional double f_3 = 6;
        optional double f_4 = 7;
        message M60 {
          optional int64 f_0 = 2;
          optional int32 f_1 = 3;
          optional fixed64 f_2 = 4;
          optional int32 f_3 = 5;
          optional int32 f_4 = 6;
          optional fixed32 f_5 = 7;
          optional fixed64 f_6 = 8;
          optional int32 f_7 = 9;
          optional bool f_8 = 10;
          optional fixed64 f_9 = 11;
          message M62 {
            optional bool f_0 = 1;
            optional fixed64 f_1 = 2;
            optional int32 f_2 = 3;
            message M70 {
              optional double f_0 = 1;
              message M75 {
                optional double f_0 = 1;
              }
              optional M75 f_2 = 2;
              message M79 {
                optional double f_0 = 1;
              }
              optional M79 f_4 = 4;
            }
            optional M70 f_4 = 4;
          }
          optional M62 f_12 = 12;
          message M64 {
            optional int32 f_0 = 1;
            optional int32 f_1 = 2;
            optional float f_2 = 3;
          }
          repeated M64 f_13 = 13;
        }
        repeated M60 f_8 = 8;
      }
      optional M52 f_6 = 6;
    }
    optional M17 f_3 = 3;
    message M18 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      optional double f_2 = 4;
      optional double f_3 = 5;
      optional int32 f_4 = 6;
    }
    repeated M18 f_4 = 4;
  }
  optional M5 f_35 = 35;
  message M6 {
    optional double f_0 = 1;
    message M9 {
      optional double f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 5;
      optional double f_3 = 6;
      optional double f_4 = 7;
      optional int32 f_5 = 8;
      optional fixed64 f_6 = 10;
      optional int32 f_7 = 11;
      optional fixed64 f_8 = 12;
      optional double f_9 = 13;
      optional fixed64 f_10 = 14;
    }
    optional M9 f_2 = 2;
    message M16 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional double f_3 = 4;
      message M35 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed64 f_4 = 5;
        optional fixed64 f_5 = 6;
        optional int32 f_6 = 7;
        optional double f_7 = 8;
        optional bool f_8 = 9;
        optional double f_9 = 10;
        optional fixed64 f_10 = 11;
        optional int32 f_11 = 12;
      }
      optional M35 f_7 = 7;
      message M55 {
        optional fixed64 f_0 = 1;
      }
      repeated M55 f_8 = 8;
    }
    optional M16 f_3 = 3;
    message M20 {
      optional fixed64 f_0 = 2;
      message M47 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        message M58 {
          optional double f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional fixed64 f_3 = 4;
          optional double f_4 = 5;
          optional int32 f_5 = 6;
          optional double f_6 = 7;
          optional int32 f_7 = 9;
          optional float f_8 = 10;
          optional double f_9 = 11;
          optional fixed64 f_10 = 12;
          optional fixed64 f_11 = 13;
          message M61 {
            optional int32 f_0 = 1;
            message M68 {
              optional fixed64 f_0 = 1;
            }
            optional M68 f_2 = 2;
            message M73 {
              optional int32 f_0 = 1;
              optional int32 f_1 = 3;
              optional fixed32 f_2 = 4;
              optional double f_3 = 5;
            }
            repeated M73 f_3 = 3;
          }
          optional M61 f_15 = 15;
          message M63 {
            optional double f_0 = 1;
            optional double f_1 = 2;
            optional string f_2 = 3;
            optional int32 f_3 = 4;
            message M66 {
              optional int32 f_0 = 1;
              optional double f_1 = 2;
              optional int32 f_2 = 3;
              optional fixed64 f_3 = 4;
              message M78 {
                optional int32 f_0 = 1;
                optional bool f_1 = 2;
                optional float f_2 = 3;
                optional fixed64 f_3 = 5;
                optional fixed64 f_4 = 6;
              }
              optional M78 f_5 = 5;
            }
            repeated M66 f_5 = 5;
            message M67 {
              optional fixed64 f_0 = 1;
              optional double f_1 = 2;
              optional fixed64 f_2 = 3;
              optional double f_3 = 4;
              optional double f_4 = 5;
              optional float f_5 = 6;
            }
            optional M67 f_6 = 6;
            message M71 {
              optional int32 f_0 = 1;
              optional int32 f_1 = 3;
              optional int32 f_2 = 4;
              optional int32 f_3 = 5;
              message M76 {
                optional double f_0 = 1;
                optional int32 f_1 = 2;
                optional double f_2 = 3;
                optional int32 f_3 = 4;
                optional int32 f_4 = 5;
                optional float f_5 = 6;
                optional double f_6 = 7;
                optional int32 f_7 = 8;
                optional double f_8 = 9;
                optional int32 f_9 = 10;
                optional int32 f_10 = 13;
                optional fixed64 f_11 = 14;
              }
              repeated M76 f_6 = 6;
            }
            repeated M71 f_7 = 7;
          }
          repeated M63 f_16 = 16;
        }
        repeated M58 f_3 = 3;
      }
      optional M47 f_3 = 3;
      message M53 {
        optional int32 f_0 = 1;
      }
      optional M53 f_5 = 5;
    }
    optional M20 f_4 = 4;
    message M25 {
      optional double f_0 = 1;
    }
    optional M25 f_5 = 5;
    message M29 {
      optional double f_0 = 1;
    }
    repeated M29 f_6 = 6;
  }
  optional M6 f_36 = 36;
  message M7 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 3;
    optional int32 f_3 = 4;
    optional double f_4 = 5;
    optional int32 f_5 = 6;
    optional double f_6 = 7;
    optional int32 f_7 = 9;
    optional double f_8 = 10;
    optional double f_9 = 11;
    optional fixed64 f_10 = 12;
    optional int32 f_11 = 13;
    optional fixed64 f_12 = 14;
    optional double f_13 = 15;
    optional int32 f_14 = 16;
    optional int32 f_15 = 17;
    optional double f_16 = 18;
    optional float f_17 = 19;
    optional int32 f_18 = 20;
    optional float f_19 = 21;
    optional fixed64 f_20 = 22;
    message M12 {
      optional fixed64 f_0 = 1;
      message M44 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 3;
        optional fixed64 f_3 = 4;
        optional int32 f_4 = 5;
      }
      optional M44 f_2 = 2;
      message M57 {
        optional int32 f_0 = 1;
        optional float f_1 = 2;
        optional int32 f_2 = 3;
        optional double f_3 = 5;
        optional int64 f_4 = 7;
      }
      repeated M57 f_3 = 3;
    }
    optional M12 f_23 = 23;
    message M21 {
      optional double f_0 = 2;
      message M39 {
        optional int32 f_0 = 1;
      }
      repeated M39 f_3 = 3;
    }
    optional M21 f_24 = 24;
    message M30 {
      optional double f_0 = 1;
      message M48 {
        optional double f_0 = 1;
      }
      optional M48 f_2 = 2;
    }
    optional M30 f_25 = 25;
  }
  optional M7 f_37 = 37;
}
