// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.response.Message0;

message Message0 {
  optional int32 f_0 = 1;
  optional fixed32 f_1 = 2;
  optional int32 f_2 = 3;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 83;
    E1_CONST_2 = 75;
    E1_CONST_3 = 80;
    E1_CONST_4 = 55;
    E1_CONST_5 = 58;
  }
  optional E1 f_3 = 4;
  optional int32 f_4 = 5;
  optional int32 f_5 = 6;
  optional double f_6 = 7;
  optional fixed64 f_7 = 8;
  optional double f_8 = 9;
  optional fixed32 f_9 = 10;
  optional double f_10 = 11;
  optional fixed64 f_11 = 12;
  optional float f_12 = 13;
  optional int32 f_13 = 14;
  optional double f_14 = 15;
  optional int32 f_15 = 16;
  optional double f_16 = 17;
  optional fixed64 f_17 = 19;
  optional int32 f_18 = 20;
  optional bool f_19 = 21;
  optional int32 f_20 = 22;
  optional double f_21 = 23;
  optional double f_22 = 24;
  optional double f_23 = 25;
  optional double f_24 = 26;
  message M1 {
    optional double f_0 = 1;
    message M18 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 1;
        E7_CONST_2 = 74;
        E7_CONST_3 = 7;
        E7_CONST_4 = 65;
        E7_CONST_5 = 90;
      }
      repeated E7 f_0 = 1 [packed = true];
    }
    repeated M18 f_2 = 2;
  }
  optional M1 f_27 = 27;
  message M2 {
    optional int32 f_0 = 1;
  }
  optional M2 f_28 = 28;
  message M3 {
    optional fixed64 f_0 = 1;
  }
  optional M3 f_29 = 29;
  message M4 {
    optional double f_0 = 1;
    optional double f_1 = 2;
    message M14 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional double f_3 = 4;
    }
    repeated M14 f_3 = 3;
    message M15 {
      optional double f_0 = 1;
    }
    repeated M15 f_4 = 4;
  }
  optional M4 f_30 = 30;
  message M5 {
    optional double f_0 = 1;
    optional float f_1 = 2;
    message M19 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      message M28 {
        optional int32 f_0 = 1;
        message M38 {
          optional int32 f_0 = 1;
          optional double f_1 = 2;
          optional fixed64 f_2 = 3;
          message M41 {
            optional double f_0 = 1;
            message M46 {
              optional fixed64 f_0 = 1;
            }
            repeated M46 f_2 = 2;
            message M52 {
              optional int32 f_0 = 1;
              message M55 {
                optional int64 f_0 = 1;
                optional double f_1 = 2;
              }
              optional M55 f_2 = 2;
            }
            repeated M52 f_3 = 3;
          }
          repeated M41 f_4 = 4;
          message M44 {
            optional fixed32 f_0 = 1;
            optional fixed64 f_1 = 2;
            optional fixed64 f_2 = 3;
            message M49 {
              optional int32 f_0 = 1;
            }
            optional M49 f_4 = 4;
          }
          optional M44 f_5 = 5;
        }
        optional M38 f_2 = 2;
      }
      repeated M28 f_4 = 4;
    }
    repeated M19 f_3 = 3;
    message M24 {
      optional fixed32 f_0 = 1;
      optional double f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 4;
      optional fixed64 f_4 = 5;
      optional fixed64 f_5 = 6;
      optional int32 f_6 = 7;
      optional fixed64 f_7 = 8;
      optional int64 f_8 = 9;
      optional double f_9 = 10;
      optional int32 f_10 = 11;
    }
    optional M24 f_4 = 4;
  }
  optional M5 f_31 = 31;
  message M6 {
    optional fixed64 f_0 = 1;
  }
  optional M6 f_32 = 32;
  message M7 {
    optional fixed64 f_0 = 1;
  }
  optional M7 f_33 = 33;
  message M8 {
    optional double f_0 = 1;
    message M20 {
      optional double f_0 = 1;
      message M27 {
        optional double f_0 = 1;
      }
      optional M27 f_2 = 2;
      message M34 {
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 67;
          E14_CONST_2 = 4;
          E14_CONST_3 = 50;
          E14_CONST_4 = 106;
          E14_CONST_5 = 43;
        }
        optional E14 f_0 = 1;
        message M36 {
          optional int32 f_0 = 1;
          optional int32 f_1 = 2;
          optional float f_2 = 3;
          optional fixed64 f_3 = 4;
        }
        optional M36 f_2 = 2;
      }
      repeated M34 f_3 = 3;
    }
    optional M20 f_2 = 2;
    message M23 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 42;
        E8_CONST_2 = 96;
        E8_CONST_3 = 7;
        E8_CONST_4 = 113;
        E8_CONST_5 = 60;
      }
      optional E8 f_0 = 2;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 44;
        E9_CONST_2 = 106;
        E9_CONST_3 = 115;
        E9_CONST_4 = 100;
        E9_CONST_5 = 81;
      }
      repeated E9 f_1 = 3 [packed = true];
      optional double f_2 = 4;
      optional int32 f_3 = 5;
      optional int32 f_4 = 7;
      optional string f_5 = 8;
      message M25 {
        optional int32 f_0 = 1;
      }
      optional M25 f_9 = 9;
    }
    repeated M23 f_4 = 4;
  }
  optional M8 f_34 = 34;
  message M9 {
    optional double f_0 = 1;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 57;
      E2_CONST_2 = 82;
      E2_CONST_3 = 8;
      E2_CONST_4 = 31;
      E2_CONST_5 = 72;
    }
    repeated E2 f_1 = 2 [packed = true];
    optional int32 f_2 = 3;
    optional double f_3 = 4;
    message M22 {
      optional int32 f_0 = 1;
      message M33 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
      }
      repeated M33 f_2 = 2;
      message M35 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 69;
          E15_CONST_2 = 75;
          E15_CONST_3 = 27;
          E15_CONST_4 = 120;
          E15_CONST_5 = 71;
        }
        repeated E15 f_2 = 3 [packed = true];
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 20;
          E16_CONST_2 = 125;
          E16_CONST_3 = 52;
          E16_CONST_4 = 126;
          E16_CONST_5 = 89;
        }
        optional E16 f_3 = 4;
        optional fixed64 f_4 = 5;
        optional double f_5 = 6;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 17;
          E17_CONST_2 = 120;
          E17_CONST_3 = 57;
          E17_CONST_4 = 75;
          E17_CONST_5 = 105;
        }
        repeated E17 f_6 = 7 [packed = true];
        optional double f_7 = 8;
        optional double f_8 = 9;
        optional double f_9 = 10;
        optional int32 f_10 = 11;
        optional bool f_11 = 12;
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 73;
          E18_CONST_2 = 44;
          E18_CONST_3 = 85;
          E18_CONST_4 = 31;
          E18_CONST_5 = 71;
        }
        repeated E18 f_12 = 13 [packed = true];
        optional int32 f_13 = 14;
        optional double f_14 = 16;
        optional int32 f_15 = 17;
        optional double f_16 = 18;
      }
      optional M35 f_3 = 3;
    }
    optional M22 f_5 = 5;
  }
  optional M9 f_35 = 35;
  message M10 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 121;
      E3_CONST_2 = 8;
      E3_CONST_3 = 93;
      E3_CONST_4 = 16;
      E3_CONST_5 = 35;
    }
    optional E3 f_0 = 1;
  }
  repeated M10 f_36 = 36;
  message M11 {
    optional int32 f_0 = 1;
  }
  repeated M11 f_37 = 37;
  message M12 {
    optional double f_0 = 1;
    message M17 {
      optional double f_0 = 1;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 63;
        E6_CONST_2 = 70;
        E6_CONST_3 = 99;
        E6_CONST_4 = 71;
        E6_CONST_5 = 111;
      }
      optional E6 f_1 = 2;
      optional int32 f_2 = 3;
      optional fixed64 f_3 = 4;
      message M26 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 3;
        message M37 {
          optional double f_0 = 1;
          message M40 {
            optional int32 f_0 = 1;
            optional int32 f_1 = 2;
          }
          repeated M40 f_2 = 2;
          message M43 {
            optional double f_0 = 1;
            message M47 {
              optional fixed64 f_0 = 1;
              optional int32 f_1 = 2;
              message M58 {
                enum E21 {
                  E21_UNSPECIFIED = 0;
                  E21_CONST_1 = 47;
                  E21_CONST_2 = 49;
                  E21_CONST_3 = 56;
                  E21_CONST_4 = 10;
                  E21_CONST_5 = 46;
                }
                optional E21 f_0 = 1;
              }
              repeated M58 f_3 = 3;
              message M60 {
                optional int32 f_0 = 1;
              }
              repeated M60 f_4 = 4;
            }
            optional M47 f_2 = 2;
            message M50 {
              optional double f_0 = 1;
              optional double f_1 = 2;
              optional fixed64 f_2 = 3;
              optional int32 f_3 = 4;
            }
            optional M50 f_3 = 3;
            message M51 {
              optional fixed64 f_0 = 1;
              message M62 {
                optional double f_0 = 1;
                optional int32 f_1 = 2;
                optional int32 f_2 = 3;
                optional float f_3 = 4;
                optional double f_4 = 5;
              }
              optional M62 f_2 = 2;
              message M63 {
                optional double f_0 = 1;
                optional double f_1 = 2;
                optional fixed64 f_2 = 3;
                optional double f_3 = 4;
                optional fixed64 f_4 = 5;
                optional int32 f_5 = 6;
                optional int32 f_6 = 7;
                optional double f_7 = 8;
                optional int32 f_8 = 9;
                optional double f_9 = 10;
                optional fixed64 f_10 = 11;
                optional int32 f_11 = 12;
                optional int32 f_12 = 13;
                optional int32 f_13 = 14;
                optional int32 f_14 = 15;
                optional fixed64 f_15 = 16;
                message M64 {
                  optional int32 f_0 = 1;
                }
                optional M64 f_17 = 17;
              }
              optional M63 f_3 = 3;
            }
            optional M51 f_4 = 4;
          }
          optional M43 f_3 = 3;
        }
        repeated M37 f_4 = 4;
      }
      optional M26 f_5 = 5;
    }
    optional M17 f_2 = 2;
  }
  optional M12 f_38 = 38;
  message M13 {
    optional double f_0 = 1;
    optional int32 f_1 = 2;
    optional double f_2 = 3;
    optional float f_3 = 4;
    optional double f_4 = 5;
    optional int32 f_5 = 6;
    optional double f_6 = 7;
    optional fixed64 f_7 = 8;
    optional int32 f_8 = 9;
    optional fixed64 f_9 = 10;
    optional fixed64 f_10 = 11;
    optional double f_11 = 12;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 86;
      E4_CONST_2 = 7;
      E4_CONST_3 = 62;
      E4_CONST_4 = 116;
      E4_CONST_5 = 38;
    }
    optional E4 f_12 = 13;
    optional int32 f_13 = 14;
    optional double f_14 = 15;
    optional int32 f_15 = 16;
    optional fixed64 f_16 = 17;
    optional float f_17 = 18;
    optional fixed64 f_18 = 19;
    optional fixed64 f_19 = 20;
    optional int32 f_20 = 21;
    optional fixed64 f_21 = 22;
    message M16 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 47;
        E5_CONST_2 = 27;
        E5_CONST_3 = 120;
        E5_CONST_4 = 65;
        E5_CONST_5 = 121;
      }
      repeated E5 f_0 = 1 [packed = true];
      message M29 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 2;
        optional double f_2 = 3;
        optional double f_3 = 5;
      }
      optional M29 f_2 = 2;
      message M31 {
        optional double f_0 = 1;
        optional float f_1 = 2;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 2;
          E10_CONST_2 = 56;
          E10_CONST_3 = 43;
          E10_CONST_4 = 104;
          E10_CONST_5 = 54;
        }
        repeated E10 f_2 = 3 [packed = true];
        optional fixed64 f_3 = 4;
        optional fixed64 f_4 = 5;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 55;
          E11_CONST_2 = 53;
          E11_CONST_3 = 119;
          E11_CONST_4 = 56;
          E11_CONST_5 = 27;
        }
        optional E11 f_5 = 6;
        optional int32 f_6 = 7;
        optional fixed64 f_7 = 8;
        optional int32 f_8 = 9;
        optional double f_9 = 10;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 90;
          E12_CONST_2 = 5;
          E12_CONST_3 = 33;
          E12_CONST_4 = 124;
          E12_CONST_5 = 75;
        }
        optional E12 f_10 = 11;
        optional fixed64 f_11 = 13;
        optional fixed64 f_12 = 14;
        optional double f_13 = 15;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 124;
          E13_CONST_2 = 52;
          E13_CONST_3 = 35;
          E13_CONST_4 = 18;
          E13_CONST_5 = 44;
        }
        repeated E13 f_14 = 16 [packed = true];
        optional fixed64 f_15 = 17;
        optional fixed64 f_16 = 18;
        optional double f_17 = 19;
        optional int32 f_18 = 20;
        optional int32 f_19 = 21;
        message M39 {
          optional fixed64 f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional double f_3 = 4;
          optional double f_4 = 5;
          optional int32 f_5 = 6;
          optional fixed64 f_6 = 7;
          optional bool f_7 = 8;
          optional double f_8 = 9;
          optional double f_9 = 10;
          optional fixed32 f_10 = 11;
          optional fixed64 f_11 = 12;
          message M42 {
            optional fixed64 f_0 = 1;
            optional double f_1 = 2;
            enum E19 {
              E19_UNSPECIFIED = 0;
              E19_CONST_1 = 70;
              E19_CONST_2 = 101;
              E19_CONST_3 = 69;
              E19_CONST_4 = 55;
              E19_CONST_5 = 100;
            }
            optional E19 f_2 = 3;
            optional double f_3 = 4;
            optional bool f_4 = 5;
            optional int32 f_5 = 6;
            optional double f_6 = 7;
            optional int32 f_7 = 8;
            optional fixed64 f_8 = 9;
            optional int32 f_9 = 10;
            optional double f_10 = 11;
            message M53 {
              optional double f_0 = 1;
              optional int32 f_1 = 2;
              enum E20 {
                E20_UNSPECIFIED = 0;
                E20_CONST_1 = 15;
                E20_CONST_2 = 9;
                E20_CONST_3 = 53;
                E20_CONST_4 = 80;
                E20_CONST_5 = 6;
              }
              repeated E20 f_2 = 3 [packed = true];
              message M56 {
                optional int32 f_0 = 1;
              }
              optional M56 f_4 = 4;
            }
            repeated M53 f_12 = 12;
          }
          optional M42 f_13 = 13;
          message M45 {
            optional int32 f_0 = 1;
            message M48 {
              optional fixed64 f_0 = 1;
              optional double f_1 = 2;
              optional int32 f_2 = 3;
              optional int32 f_3 = 4;
              optional int64 f_4 = 5;
              optional double f_5 = 6;
              message M57 {
                optional double f_0 = 1;
                optional double f_1 = 2;
                optional bool f_2 = 4;
                optional int32 f_3 = 5;
                message M65 {
                  optional double f_0 = 1;
                  optional fixed64 f_1 = 2;
                  optional fixed32 f_2 = 3;
                  optional int32 f_3 = 4;
                  optional fixed64 f_4 = 5;
                  optional fixed64 f_5 = 6;
                  optional double f_6 = 7;
                  enum E22 {
                    E22_UNSPECIFIED = 0;
                    E22_CONST_1 = 38;
                    E22_CONST_2 = 46;
                    E22_CONST_3 = 35;
                    E22_CONST_4 = 22;
                    E22_CONST_5 = 30;
                  }
                  optional E22 f_7 = 8;
                  optional double f_8 = 9;
                  optional int64 f_9 = 10;
                  optional double f_10 = 11;
                  message M66 {
                    optional double f_0 = 1;
                    optional int32 f_1 = 2;
                    optional fixed32 f_2 = 3;
                  }
                  optional M66 f_12 = 12;
                }
                optional M65 f_6 = 6;
              }
              repeated M57 f_7 = 7;
              message M59 {
                optional int32 f_0 = 1;
                optional int32 f_1 = 2;
                optional float f_2 = 3;
              }
              repeated M59 f_8 = 8;
            }
            optional M48 f_2 = 2;
            message M54 {
              optional double f_0 = 1;
              optional fixed64 f_1 = 2;
              optional double f_2 = 3;
              optional fixed64 f_3 = 4;
              message M61 {
                optional fixed32 f_0 = 1;
                optional double f_1 = 2;
                optional fixed64 f_2 = 3;
              }
              optional M61 f_5 = 5;
            }
            repeated M54 f_3 = 3;
          }
          optional M45 f_14 = 14;
        }
        repeated M39 f_22 = 22;
      }
      optional M31 f_3 = 3;
      message M32 {
        optional double f_0 = 1;
        optional bool f_1 = 2;
        optional bool f_2 = 3;
      }
      repeated M32 f_4 = 4;
    }
    optional M16 f_23 = 23;
    message M21 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 3;
      message M30 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 3;
        optional fixed64 f_3 = 4;
      }
      optional M30 f_4 = 4;
    }
    optional M21 f_24 = 24;
  }
  repeated M13 f_39 = 39;
}
