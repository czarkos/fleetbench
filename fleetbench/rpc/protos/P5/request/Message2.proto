// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.request.Message2;

message Message2 {
  optional string f_0 = 1;
  optional double f_1 = 3;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 25;
    E1_CONST_2 = 74;
    E1_CONST_3 = 34;
    E1_CONST_4 = 118;
    E1_CONST_5 = 116;
  }
  repeated E1 f_2 = 6 [packed = true];
  optional bool f_3 = 7;
  optional bool f_4 = 8;
  optional fixed32 f_5 = 9;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 111;
    E2_CONST_2 = 66;
    E2_CONST_3 = 27;
    E2_CONST_4 = 126;
    E2_CONST_5 = 108;
  }
  repeated E2 f_6 = 10 [packed = true];
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 63;
    E3_CONST_2 = 60;
    E3_CONST_3 = 15;
    E3_CONST_4 = 51;
    E3_CONST_5 = 124;
  }
  repeated E3 f_7 = 11 [packed = true];
  optional int32 f_8 = 12;
  optional int32 f_9 = 13;
  optional fixed64 f_10 = 15;
  optional fixed64 f_11 = 16;
  optional string f_12 = 17;
  optional string f_13 = 18;
  optional string f_14 = 19;
  optional int32 f_15 = 21;
  optional string f_16 = 22;
  optional string f_17 = 24;
  optional int32 f_18 = 26;
  optional int32 f_19 = 27;
  optional fixed64 f_20 = 28;
  optional string f_21 = 29;
  optional int32 f_22 = 31;
  optional string f_23 = 33;
  optional fixed64 f_24 = 35;
  optional fixed64 f_25 = 36;
  optional fixed64 f_26 = 37;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 115;
    E4_CONST_2 = 5;
    E4_CONST_3 = 83;
    E4_CONST_4 = 44;
    E4_CONST_5 = 78;
  }
  repeated E4 f_27 = 40 [packed = true];
  optional fixed64 f_28 = 41;
  optional double f_29 = 42;
  message M1 {
    optional int32 f_0 = 1;
    message M25 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 13;
        E6_CONST_2 = 16;
        E6_CONST_3 = 33;
        E6_CONST_4 = 6;
        E6_CONST_5 = 59;
      }
      repeated E6 f_0 = 1 [packed = true];
      optional fixed64 f_1 = 2;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 96;
        E7_CONST_2 = 9;
        E7_CONST_3 = 121;
        E7_CONST_4 = 116;
        E7_CONST_5 = 19;
      }
      optional E7 f_2 = 4;
      optional fixed64 f_3 = 5;
      message M39 {
        optional string f_0 = 2;
        optional bool f_1 = 3;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 5;
        optional int32 f_4 = 7;
        optional bool f_5 = 9;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 27;
          E15_CONST_2 = 56;
          E15_CONST_3 = 31;
          E15_CONST_4 = 5;
          E15_CONST_5 = 82;
        }
        repeated E15 f_6 = 11 [packed = true];
        optional int32 f_7 = 13;
        optional string f_8 = 14;
        optional fixed64 f_9 = 18;
        optional fixed64 f_10 = 19;
        optional int32 f_11 = 24;
        optional int32 f_12 = 25;
        optional string f_13 = 26;
        optional fixed64 f_14 = 27;
        optional int32 f_15 = 28;
        optional fixed32 f_16 = 29;
        optional bool f_17 = 32;
        optional fixed64 f_18 = 35;
        optional fixed64 f_19 = 36;
        optional string f_20 = 37;
        optional string f_21 = 39;
        optional fixed64 f_22 = 40;
        optional fixed32 f_23 = 42;
        optional fixed64 f_24 = 45;
        optional fixed64 f_25 = 46;
        optional string f_26 = 48;
        optional int32 f_27 = 49;
        optional string f_28 = 51;
        optional fixed64 f_29 = 52;
        optional fixed32 f_30 = 53;
      }
      optional M39 f_6 = 6;
    }
    repeated M25 f_3 = 3;
  }
  optional M1 f_44 = 44;
  message M2 {
    optional int32 f_0 = 4;
  }
  optional M2 f_45 = 45;
  message M3 {
    optional fixed64 f_0 = 1;
  }
  optional M3 f_47 = 47;
  message M4 {
    optional int32 f_0 = 2;
    optional int32 f_1 = 3;
    optional bool f_2 = 5;
    optional string f_3 = 6;
  }
  optional M4 f_49 = 49;
  message M5 {
    optional fixed64 f_0 = 3;
    message M30 {
      optional bool f_0 = 2;
    }
    optional M30 f_4 = 4;
  }
  repeated M5 f_52 = 52;
  message M6 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 3;
    optional fixed32 f_2 = 4;
    message M24 {
      optional fixed64 f_0 = 2;
    }
    optional M24 f_5 = 5;
  }
  optional M6 f_53 = 53;
  message M7 {
    optional string f_0 = 1;
    message M21 {
      optional int32 f_0 = 1;
      optional string f_1 = 4;
      optional fixed32 f_2 = 5;
      optional fixed64 f_3 = 7;
      message M33 {
        optional string f_0 = 2;
        message M56 {
          optional int32 f_0 = 1;
        }
        repeated M56 f_5 = 5;
      }
      optional M33 f_10 = 10;
      message M34 {
        optional string f_0 = 1;
      }
      optional M34 f_12 = 12;
      message M40 {
        optional int32 f_0 = 2;
      }
      repeated M40 f_13 = 13;
      message M44 {
        optional string f_0 = 2;
        optional string f_1 = 4;
        optional string f_2 = 5;
        optional string f_3 = 6;
        optional fixed64 f_4 = 7;
      }
      optional M44 f_14 = 14;
    }
    optional M21 f_2 = 2;
    message M22 {
      optional int32 f_0 = 2;
      message M35 {
        optional bool f_0 = 1;
        optional string f_1 = 2;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 5;
        optional fixed64 f_4 = 6;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 110;
          E14_CONST_2 = 71;
          E14_CONST_3 = 109;
          E14_CONST_4 = 15;
          E14_CONST_5 = 123;
        }
        repeated E14 f_5 = 7 [packed = true];
        optional fixed64 f_6 = 9;
        message M55 {
          optional int32 f_0 = 2;
          message M62 {
            optional int32 f_0 = 1;
            optional bool f_1 = 2;
            optional double f_2 = 3;
          }
          repeated M62 f_3 = 3;
        }
        repeated M55 f_10 = 10;
        message M58 {
          optional string f_0 = 1;
        }
        repeated M58 f_11 = 11;
      }
      optional M35 f_5 = 5;
    }
    optional M22 f_3 = 3;
    message M27 {
      optional int32 f_0 = 2;
      optional fixed32 f_1 = 4;
      optional int32 f_2 = 5;
      optional string f_3 = 6;
      optional fixed64 f_4 = 7;
      optional bool f_5 = 8;
    }
    repeated M27 f_5 = 5;
  }
  optional M7 f_54 = 54;
  message M8 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 2;
    optional string f_2 = 3;
    optional bool f_3 = 4;
    message M23 {
      optional string f_0 = 3;
      optional int32 f_1 = 5;
      message M38 {
        optional bool f_0 = 2;
        optional int32 f_1 = 4;
        optional fixed64 f_2 = 8;
        optional fixed64 f_3 = 10;
      }
      repeated M38 f_6 = 6;
      message M47 {
        optional string f_0 = 2;
        optional int32 f_1 = 5;
        message M50 {
          optional int32 f_0 = 3;
          optional string f_1 = 4;
          message M61 {
            optional int32 f_0 = 1;
            message M68 {
              optional int32 f_0 = 1;
              message M71 {
                optional int32 f_0 = 2;
              }
              repeated M71 f_2 = 2;
            }
            optional M68 f_2 = 2;
            message M69 {
              optional fixed32 f_0 = 3;
            }
            repeated M69 f_3 = 3;
          }
          repeated M61 f_6 = 6;
        }
        optional M50 f_7 = 7;
        message M57 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 4;
          optional int32 f_2 = 5;
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 109;
            E19_CONST_2 = 74;
            E19_CONST_3 = 71;
            E19_CONST_4 = 8;
            E19_CONST_5 = 86;
          }
          repeated E19 f_3 = 6 [packed = true];
          optional int32 f_4 = 7;
          optional fixed64 f_5 = 9;
          message M65 {
            optional string f_0 = 1;
            optional string f_1 = 2;
            optional bool f_2 = 3;
            enum E20 {
              E20_UNSPECIFIED = 0;
              E20_CONST_1 = 90;
              E20_CONST_2 = 87;
              E20_CONST_3 = 34;
              E20_CONST_4 = 95;
              E20_CONST_5 = 44;
            }
            repeated E20 f_3 = 5 [packed = true];
            optional string f_4 = 6;
          }
          optional M65 f_10 = 10;
        }
        repeated M57 f_8 = 8;
      }
      optional M47 f_7 = 7;
    }
    optional M23 f_6 = 6;
  }
  optional M8 f_55 = 55;
  message M9 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 2;
    optional fixed64 f_2 = 4;
    message M17 {
      optional string f_0 = 1;
    }
    optional M17 f_5 = 5;
  }
  repeated M9 f_59 = 59;
  message M10 {
    optional string f_0 = 1;
    message M29 {
      optional fixed32 f_0 = 2;
      message M41 {
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 2;
          E16_CONST_2 = 92;
          E16_CONST_3 = 105;
          E16_CONST_4 = 25;
          E16_CONST_5 = 14;
        }
        repeated E16 f_0 = 2 [packed = true];
        optional string f_1 = 3;
        optional fixed64 f_2 = 4;
        optional fixed64 f_3 = 5;
      }
      optional M41 f_3 = 3;
      message M46 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 4;
        optional int32 f_2 = 5;
        optional int32 f_3 = 6;
        message M60 {
          optional string f_0 = 1;
          optional string f_1 = 2;
          optional bool f_2 = 3;
          optional fixed64 f_3 = 5;
          optional int32 f_4 = 6;
          optional fixed64 f_5 = 7;
          optional bool f_6 = 8;
          optional int32 f_7 = 9;
          optional string f_8 = 11;
          optional string f_9 = 13;
          optional string f_10 = 17;
          message M63 {
            optional fixed64 f_0 = 1;
          }
          optional M63 f_18 = 18;
        }
        optional M60 f_7 = 7;
      }
      optional M46 f_4 = 4;
    }
    optional M29 f_4 = 4;
  }
  repeated M10 f_62 = 62;
  message M11 {
    optional string f_0 = 2;
    message M19 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      message M48 {
        optional fixed64 f_0 = 2;
      }
      repeated M48 f_3 = 3;
    }
    optional M19 f_6 = 6;
    message M31 {
      optional bool f_0 = 1;
      message M45 {
        optional double f_0 = 2;
        message M52 {
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 62;
            E18_CONST_2 = 74;
            E18_CONST_3 = 28;
            E18_CONST_4 = 25;
            E18_CONST_5 = 53;
          }
          repeated E18 f_0 = 1 [packed = true];
          optional int32 f_1 = 2;
          optional int32 f_2 = 3;
          optional fixed32 f_3 = 5;
          optional double f_4 = 8;
          optional int32 f_5 = 9;
          message M64 {
            optional fixed64 f_0 = 1;
            optional int32 f_1 = 2;
            optional int32 f_2 = 4;
          }
          optional M64 f_11 = 11;
          message M66 {
            optional string f_0 = 1;
            optional fixed64 f_1 = 2;
            enum E21 {
              E21_UNSPECIFIED = 0;
              E21_CONST_1 = 75;
              E21_CONST_2 = 84;
              E21_CONST_3 = 43;
              E21_CONST_4 = 103;
              E21_CONST_5 = 73;
            }
            repeated E21 f_2 = 3 [packed = true];
            optional double f_3 = 4;
            optional fixed64 f_4 = 6;
            message M70 {
              optional int32 f_0 = 1;
              optional double f_1 = 3;
              optional int64 f_2 = 4;
            }
            optional M70 f_7 = 7;
          }
          repeated M66 f_12 = 12;
        }
        optional M52 f_4 = 4;
      }
      optional M45 f_3 = 3;
    }
    optional M31 f_7 = 7;
  }
  optional M11 f_64 = 64;
  message M12 {
    optional string f_0 = 2;
    optional string f_1 = 4;
    optional string f_2 = 5;
    optional int32 f_3 = 6;
    optional int32 f_4 = 7;
  }
  optional M12 f_67 = 67;
  message M13 {
    optional bool f_0 = 2;
    message M18 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional bool f_2 = 3;
      optional int32 f_3 = 4;
      optional fixed64 f_4 = 5;
      optional fixed64 f_5 = 6;
      optional int32 f_6 = 8;
    }
    optional M18 f_4 = 4;
    message M32 {
      optional int64 f_0 = 1;
      optional fixed32 f_1 = 3;
      optional string f_2 = 5;
      optional fixed32 f_3 = 8;
      optional int32 f_4 = 9;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 5;
        E11_CONST_2 = 75;
        E11_CONST_3 = 33;
        E11_CONST_4 = 23;
        E11_CONST_5 = 32;
      }
      optional E11 f_5 = 11;
      optional int64 f_6 = 12;
      optional int32 f_7 = 15;
      optional double f_8 = 19;
      optional int32 f_9 = 20;
      optional string f_10 = 22;
      optional fixed64 f_11 = 23;
      optional string f_12 = 26;
      optional bool f_13 = 27;
      optional string f_14 = 28;
      optional fixed32 f_15 = 29;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 68;
        E12_CONST_2 = 115;
        E12_CONST_3 = 7;
        E12_CONST_4 = 61;
        E12_CONST_5 = 30;
      }
      optional E12 f_16 = 33;
      optional double f_17 = 34;
      optional int32 f_18 = 36;
      optional string f_19 = 37;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 46;
        E13_CONST_2 = 82;
        E13_CONST_3 = 34;
        E13_CONST_4 = 31;
        E13_CONST_5 = 59;
      }
      optional E13 f_20 = 38;
      optional int32 f_21 = 39;
      optional int32 f_22 = 40;
      optional int32 f_23 = 42;
      optional bool f_24 = 43;
      optional bool f_25 = 44;
      optional bool f_26 = 46;
      optional fixed64 f_27 = 48;
      optional string f_28 = 50;
      optional string f_29 = 52;
      optional fixed64 f_30 = 53;
      optional fixed32 f_31 = 54;
    }
    optional M32 f_5 = 5;
  }
  optional M13 f_68 = 68;
  message M14 {
    optional int32 f_0 = 1;
    message M20 {
      optional fixed64 f_0 = 1;
      message M43 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 3;
        optional string f_2 = 5;
        optional fixed64 f_3 = 7;
        message M54 {
          optional string f_0 = 1;
          message M67 {
            optional fixed64 f_0 = 2;
            optional bool f_1 = 3;
            optional string f_2 = 4;
            optional double f_3 = 8;
            optional int32 f_4 = 9;
          }
          optional M67 f_3 = 3;
        }
        optional M54 f_8 = 8;
        message M59 {
          optional string f_0 = 2;
        }
        optional M59 f_9 = 9;
      }
      optional M43 f_3 = 3;
    }
    repeated M20 f_2 = 2;
  }
  optional M14 f_70 = 70;
  message M15 {
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 49;
      E5_CONST_2 = 34;
      E5_CONST_3 = 67;
      E5_CONST_4 = 45;
      E5_CONST_5 = 39;
    }
    optional E5 f_0 = 3;
    message M28 {
      optional fixed32 f_0 = 1;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 122;
        E10_CONST_2 = 7;
        E10_CONST_3 = 84;
        E10_CONST_4 = 65;
        E10_CONST_5 = 42;
      }
      optional E10 f_1 = 2;
      optional fixed64 f_2 = 4;
      optional int32 f_3 = 6;
      message M36 {
        optional int32 f_0 = 5;
        message M49 {
          optional string f_0 = 2;
          optional bool f_1 = 4;
        }
        repeated M49 f_6 = 6;
        message M53 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 2;
          optional string f_2 = 3;
          optional bool f_3 = 4;
        }
        optional M53 f_8 = 8;
      }
      optional M36 f_7 = 7;
      message M37 {
        optional int64 f_0 = 1;
        optional int32 f_1 = 3;
        optional int32 f_2 = 5;
        optional int32 f_3 = 6;
        optional int32 f_4 = 7;
        optional string f_5 = 9;
      }
      optional M37 f_10 = 10;
      message M42 {
        optional int32 f_0 = 3;
        message M51 {
          optional fixed64 f_0 = 3;
          optional int32 f_1 = 4;
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 69;
            E17_CONST_2 = 40;
            E17_CONST_3 = 106;
            E17_CONST_4 = 56;
            E17_CONST_5 = 7;
          }
          optional E17 f_2 = 5;
          optional string f_3 = 6;
        }
        optional M51 f_4 = 4;
      }
      optional M42 f_11 = 11;
    }
    optional M28 f_5 = 5;
  }
  optional M15 f_72 = 72;
  message M16 {
    optional string f_0 = 1;
    optional bool f_1 = 2;
    optional int32 f_2 = 4;
    optional int32 f_3 = 6;
    optional string f_4 = 11;
    message M26 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 64;
        E8_CONST_2 = 78;
        E8_CONST_3 = 37;
        E8_CONST_4 = 120;
        E8_CONST_5 = 85;
      }
      optional E8 f_0 = 1;
      optional string f_1 = 3;
      optional string f_2 = 5;
      optional string f_3 = 7;
      optional string f_4 = 9;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 47;
        E9_CONST_2 = 109;
        E9_CONST_3 = 26;
        E9_CONST_4 = 54;
        E9_CONST_5 = 22;
      }
      repeated E9 f_5 = 10 [packed = true];
      optional fixed64 f_6 = 11;
    }
    repeated M26 f_13 = 13;
  }
  optional M16 f_76 = 76;
}
