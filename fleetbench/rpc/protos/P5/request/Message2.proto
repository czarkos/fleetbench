// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.request.Message2;

message Message2 {
  optional fixed64 f_0 = 1;
  optional int32 f_1 = 2;
  optional double f_2 = 5;
  optional bool f_3 = 6;
  optional int32 f_4 = 8;
  optional bool f_5 = 10;
  optional fixed64 f_6 = 11;
  optional double f_7 = 13;
  optional int32 f_8 = 14;
  optional fixed64 f_9 = 15;
  optional fixed64 f_10 = 16;
  optional double f_11 = 18;
  optional fixed64 f_12 = 19;
  optional string f_13 = 21;
  optional fixed64 f_14 = 23;
  optional string f_15 = 24;
  optional fixed64 f_16 = 25;
  optional fixed64 f_17 = 27;
  optional int32 f_18 = 29;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 4;
    E1_CONST_2 = 2;
    E1_CONST_3 = 102;
    E1_CONST_4 = 67;
    E1_CONST_5 = 17;
  }
  repeated E1 f_19 = 30 [packed = true];
  optional bool f_20 = 33;
  optional int32 f_21 = 34;
  optional string f_22 = 35;
  optional int32 f_23 = 36;
  optional fixed64 f_24 = 38;
  optional fixed64 f_25 = 39;
  optional bool f_26 = 41;
  optional double f_27 = 42;
  optional fixed32 f_28 = 43;
  optional fixed64 f_29 = 44;
  message M1 {
    optional string f_0 = 2;
    optional double f_1 = 3;
    optional string f_2 = 4;
    message M26 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 5;
      optional bool f_4 = 6;
    }
    repeated M26 f_5 = 5;
    message M30 {
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 58;
        E2_CONST_2 = 10;
        E2_CONST_3 = 68;
        E2_CONST_4 = 88;
        E2_CONST_5 = 30;
      }
      optional E2 f_0 = 2;
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 5;
      message M73 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 4;
        optional fixed64 f_3 = 5;
        optional string f_4 = 7;
        optional fixed64 f_5 = 9;
        optional string f_6 = 10;
      }
      repeated M73 f_6 = 6;
    }
    optional M30 f_6 = 6;
    message M45 {
      optional fixed64 f_0 = 1;
    }
    optional M45 f_7 = 7;
    message M52 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      optional double f_2 = 4;
    }
    repeated M52 f_9 = 9;
  }
  optional M1 f_46 = 46;
  message M2 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 3;
    optional double f_2 = 6;
    message M20 {
      optional bool f_0 = 1;
      message M58 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        optional string f_2 = 3;
        optional double f_3 = 5;
        message M85 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 3;
          optional string f_2 = 6;
          optional fixed64 f_3 = 7;
          optional int32 f_4 = 8;
          optional fixed64 f_5 = 10;
          message M91 {
            optional int32 f_0 = 2;
          }
          optional M91 f_11 = 11;
          message M96 {
            optional bool f_0 = 3;
            optional fixed64 f_1 = 5;
            optional fixed64 f_2 = 8;
            optional int32 f_3 = 9;
            optional int32 f_4 = 10;
          }
          optional M96 f_13 = 13;
        }
        optional M85 f_7 = 7;
      }
      optional M58 f_2 = 2;
    }
    optional M20 f_7 = 7;
    message M42 {
      optional string f_0 = 1;
      message M60 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 4;
      }
      optional M60 f_5 = 5;
    }
    optional M42 f_11 = 11;
  }
  optional M2 f_47 = 47;
  message M3 {
    optional int32 f_0 = 2;
    message M43 {
      optional double f_0 = 2;
    }
    optional M43 f_5 = 5;
  }
  repeated M3 f_49 = 49;
  message M4 {
    optional fixed64 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional string f_2 = 3;
    optional int32 f_3 = 4;
    message M25 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 4;
    }
    optional M25 f_5 = 5;
    message M36 {
      optional fixed64 f_0 = 2;
      message M61 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 4;
        optional fixed64 f_2 = 5;
      }
      repeated M61 f_3 = 3;
      message M74 {
        optional double f_0 = 5;
      }
      optional M74 f_6 = 6;
    }
    optional M36 f_6 = 6;
    message M39 {
      optional int32 f_0 = 1;
      optional fixed32 f_1 = 2;
      optional int32 f_2 = 4;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 16;
        E4_CONST_2 = 28;
        E4_CONST_3 = 64;
        E4_CONST_4 = 77;
        E4_CONST_5 = 124;
      }
      repeated E4 f_3 = 5 [packed = true];
    }
    optional M39 f_7 = 7;
  }
  optional M4 f_50 = 50;
  message M5 {
    optional fixed64 f_0 = 2;
    optional fixed64 f_1 = 3;
  }
  optional M5 f_51 = 51;
  message M6 {
    optional int32 f_0 = 2;
    message M22 {
      optional int32 f_0 = 4;
      optional bool f_1 = 7;
    }
    optional M22 f_3 = 3;
    message M23 {
      optional fixed64 f_0 = 2;
    }
    optional M23 f_4 = 4;
    message M38 {
      optional fixed32 f_0 = 1;
      optional double f_1 = 3;
      optional bool f_2 = 4;
      optional fixed64 f_3 = 6;
    }
    optional M38 f_6 = 6;
  }
  repeated M6 f_53 = 53;
  message M7 {
    optional string f_0 = 2;
    message M21 {
      optional bool f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional int32 f_3 = 6;
    }
    repeated M21 f_3 = 3;
    message M28 {
      optional string f_0 = 1;
      message M57 {
        optional string f_0 = 2;
        optional bool f_1 = 3;
        optional fixed32 f_2 = 5;
        optional string f_3 = 6;
      }
      optional M57 f_3 = 3;
    }
    repeated M28 f_4 = 4;
  }
  optional M7 f_54 = 54;
  message M8 {
    optional fixed64 f_0 = 2;
    optional string f_1 = 4;
    message M24 {
      optional string f_0 = 2;
      optional int64 f_1 = 3;
      optional int32 f_2 = 4;
      message M70 {
        optional int32 f_0 = 1;
      }
      optional M70 f_5 = 5;
    }
    optional M24 f_6 = 6;
    message M47 {
      optional fixed64 f_0 = 1;
    }
    optional M47 f_7 = 7;
    message M48 {
      optional string f_0 = 2;
      optional int32 f_1 = 4;
      optional fixed64 f_2 = 5;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 45;
        E5_CONST_2 = 116;
        E5_CONST_3 = 18;
        E5_CONST_4 = 101;
        E5_CONST_5 = 106;
      }
      optional E5 f_3 = 8;
      optional string f_4 = 10;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 90;
        E6_CONST_2 = 7;
        E6_CONST_3 = 8;
        E6_CONST_4 = 37;
        E6_CONST_5 = 117;
      }
      repeated E6 f_5 = 11 [packed = true];
      optional int32 f_6 = 14;
      optional bool f_7 = 16;
      optional string f_8 = 17;
      optional int32 f_9 = 18;
      optional fixed32 f_10 = 21;
      optional fixed64 f_11 = 22;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 112;
        E7_CONST_2 = 49;
        E7_CONST_3 = 39;
        E7_CONST_4 = 104;
        E7_CONST_5 = 10;
      }
      repeated E7 f_12 = 23 [packed = true];
      optional string f_13 = 25;
      optional int32 f_14 = 27;
      optional fixed64 f_15 = 28;
      optional fixed64 f_16 = 31;
      message M65 {
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 23;
          E10_CONST_2 = 11;
          E10_CONST_3 = 75;
          E10_CONST_4 = 2;
          E10_CONST_5 = 1;
        }
        repeated E10 f_0 = 1 [packed = true];
        optional string f_1 = 2;
        optional bool f_2 = 4;
      }
      repeated M65 f_33 = 33;
    }
    optional M48 f_11 = 11;
  }
  repeated M8 f_55 = 55;
  message M9 {
    optional fixed64 f_0 = 1;
    optional string f_1 = 2;
    message M51 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      message M63 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 92;
          E8_CONST_2 = 58;
          E8_CONST_3 = 38;
          E8_CONST_4 = 64;
          E8_CONST_5 = 102;
        }
        repeated E8 f_2 = 4 [packed = true];
        message M81 {
          optional bool f_0 = 1;
        }
        optional M81 f_6 = 6;
      }
      repeated M63 f_3 = 3;
      message M69 {
        optional fixed64 f_0 = 1;
      }
      optional M69 f_4 = 4;
    }
    optional M51 f_3 = 3;
  }
  optional M9 f_56 = 56;
  message M10 {
    optional bool f_0 = 2;
    message M27 {
      optional int32 f_0 = 2;
    }
    optional M27 f_3 = 3;
    message M31 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 3;
      optional int64 f_2 = 4;
      optional bool f_3 = 6;
      optional fixed64 f_4 = 8;
      optional int32 f_5 = 10;
      optional int32 f_6 = 11;
      optional string f_7 = 14;
      optional fixed32 f_8 = 15;
      optional fixed64 f_9 = 16;
      optional int64 f_10 = 17;
      optional int32 f_11 = 18;
      optional int32 f_12 = 19;
      optional fixed64 f_13 = 20;
      optional fixed32 f_14 = 22;
      optional fixed64 f_15 = 25;
      optional string f_16 = 26;
      optional string f_17 = 27;
      optional fixed64 f_18 = 30;
      optional fixed64 f_19 = 32;
      optional fixed64 f_20 = 34;
      optional fixed64 f_21 = 35;
      optional int32 f_22 = 38;
      optional string f_23 = 39;
      optional string f_24 = 41;
      optional fixed64 f_25 = 43;
      optional fixed64 f_26 = 44;
    }
    optional M31 f_5 = 5;
    message M37 {
      optional bool f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 4;
      message M76 {
        optional int64 f_0 = 1;
        message M86 {
          optional double f_0 = 1;
          optional bool f_1 = 4;
          optional string f_2 = 5;
          optional int32 f_3 = 6;
          optional int32 f_4 = 8;
          optional fixed64 f_5 = 9;
          optional bool f_6 = 10;
          optional fixed64 f_7 = 12;
          optional fixed64 f_8 = 16;
          optional string f_9 = 17;
          optional int32 f_10 = 18;
          optional string f_11 = 19;
          optional int32 f_12 = 20;
          optional string f_13 = 22;
          optional fixed64 f_14 = 23;
          optional double f_15 = 24;
          optional int32 f_16 = 27;
          optional bool f_17 = 29;
          optional int32 f_18 = 30;
          optional double f_19 = 31;
          optional string f_20 = 32;
          optional fixed64 f_21 = 33;
          optional fixed64 f_22 = 35;
        }
        repeated M86 f_4 = 4;
      }
      optional M76 f_6 = 6;
      message M77 {
        optional string f_0 = 1;
      }
      optional M77 f_8 = 8;
    }
    optional M37 f_6 = 6;
    message M46 {
      optional bool f_0 = 1;
      message M55 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
        optional fixed64 f_2 = 4;
        optional string f_3 = 5;
      }
      optional M55 f_2 = 2;
      message M67 {
        optional fixed64 f_0 = 1;
        message M84 {
          optional fixed64 f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed32 f_2 = 3;
          optional bool f_3 = 4;
        }
        optional M84 f_2 = 2;
      }
      optional M67 f_4 = 4;
    }
    optional M46 f_8 = 8;
  }
  optional M10 f_58 = 58;
  message M11 {
    optional fixed64 f_0 = 2;
    message M32 {
      optional int32 f_0 = 1;
    }
    optional M32 f_4 = 4;
    message M49 {
      optional fixed64 f_0 = 1;
    }
    optional M49 f_5 = 5;
  }
  repeated M11 f_59 = 59;
  message M12 {
    optional bool f_0 = 1;
    optional bool f_1 = 4;
    optional int32 f_2 = 6;
    message M33 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 5;
      optional fixed64 f_2 = 6;
      optional fixed64 f_3 = 8;
      message M53 {
        optional fixed32 f_0 = 1;
        optional bool f_1 = 2;
        message M80 {
          optional int32 f_0 = 1;
          optional double f_1 = 4;
          optional fixed64 f_2 = 5;
          message M93 {
            optional string f_0 = 2;
          }
          optional M93 f_6 = 6;
          message M95 {
            optional fixed64 f_0 = 1;
            optional int32 f_1 = 2;
            optional double f_2 = 4;
            optional fixed32 f_3 = 6;
          }
          optional M95 f_7 = 7;
        }
        optional M80 f_3 = 3;
      }
      optional M53 f_11 = 11;
      message M56 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional bool f_3 = 5;
        message M83 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 3;
          optional string f_2 = 4;
          message M89 {
            optional bool f_0 = 1;
          }
          optional M89 f_5 = 5;
          message M94 {
            optional int32 f_0 = 2;
            optional int32 f_1 = 4;
            optional string f_2 = 6;
          }
          optional M94 f_6 = 6;
        }
        repeated M83 f_7 = 7;
      }
      repeated M56 f_13 = 13;
      message M62 {
        optional string f_0 = 1;
        optional double f_1 = 2;
        message M82 {
          optional string f_0 = 2;
          optional int64 f_1 = 3;
          optional string f_2 = 8;
          message M88 {
            optional fixed64 f_0 = 1;
          }
          repeated M88 f_9 = 9;
          message M90 {
            optional fixed64 f_0 = 3;
            message M97 {
              optional bool f_0 = 2;
              optional double f_1 = 4;
              optional bool f_2 = 6;
              optional int32 f_3 = 7;
              optional fixed64 f_4 = 8;
              optional fixed64 f_5 = 10;
              optional int32 f_6 = 12;
              optional fixed64 f_7 = 13;
              optional fixed64 f_8 = 15;
              optional fixed64 f_9 = 16;
              optional int32 f_10 = 17;
              optional string f_11 = 18;
              optional fixed64 f_12 = 19;
              optional string f_13 = 21;
              optional int32 f_14 = 22;
              optional bool f_15 = 26;
            }
            optional M97 f_4 = 4;
          }
          optional M90 f_10 = 10;
          message M92 {
            optional int32 f_0 = 1;
          }
          optional M92 f_11 = 11;
        }
        optional M82 f_3 = 3;
      }
      optional M62 f_18 = 18;
    }
    repeated M33 f_7 = 7;
    message M35 {
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 16;
        E3_CONST_2 = 42;
        E3_CONST_3 = 52;
        E3_CONST_4 = 64;
        E3_CONST_5 = 15;
      }
      repeated E3 f_0 = 1 [packed = true];
    }
    repeated M35 f_8 = 8;
  }
  repeated M12 f_60 = 60;
  message M13 {
    optional fixed64 f_0 = 2;
  }
  optional M13 f_61 = 61;
  message M14 {
    optional bool f_0 = 2;
    optional bool f_1 = 3;
    optional int32 f_2 = 5;
    optional fixed32 f_3 = 6;
    message M17 {
      optional int64 f_0 = 2;
      optional string f_1 = 4;
      optional fixed32 f_2 = 5;
    }
    repeated M17 f_8 = 8;
    message M18 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional bool f_3 = 4;
      optional fixed64 f_4 = 5;
      message M54 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 5;
        optional double f_4 = 6;
        optional int64 f_5 = 7;
      }
      optional M54 f_7 = 7;
      message M64 {
        optional int32 f_0 = 1;
        optional string f_1 = 3;
        optional fixed64 f_2 = 5;
        optional int32 f_3 = 7;
        optional fixed64 f_4 = 8;
        optional fixed64 f_5 = 9;
        optional string f_6 = 10;
        optional fixed64 f_7 = 11;
        optional int32 f_8 = 12;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 123;
          E9_CONST_2 = 89;
          E9_CONST_3 = 51;
          E9_CONST_4 = 109;
          E9_CONST_5 = 5;
        }
        repeated E9 f_9 = 15 [packed = true];
        optional string f_10 = 16;
        optional fixed64 f_11 = 17;
        message M79 {
          optional int32 f_0 = 3;
          message M87 {
            optional bool f_0 = 2;
          }
          optional M87 f_4 = 4;
        }
        optional M79 f_20 = 20;
      }
      repeated M64 f_8 = 8;
      message M71 {
        optional int64 f_0 = 2;
        optional int32 f_1 = 3;
        optional string f_2 = 4;
        optional bool f_3 = 5;
        optional fixed64 f_4 = 6;
      }
      optional M71 f_9 = 9;
    }
    optional M18 f_10 = 10;
    message M44 {
      optional int64 f_0 = 2;
      message M68 {
        optional bool f_0 = 1;
      }
      optional M68 f_4 = 4;
    }
    optional M44 f_11 = 11;
  }
  repeated M14 f_62 = 62;
  message M15 {
    optional fixed32 f_0 = 2;
  }
  optional M15 f_63 = 63;
  message M16 {
    optional double f_0 = 1;
    message M19 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 3;
      message M66 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 4;
        optional double f_2 = 6;
        optional fixed32 f_3 = 7;
        optional int32 f_4 = 9;
      }
      optional M66 f_5 = 5;
    }
    optional M19 f_4 = 4;
    message M29 {
      optional double f_0 = 3;
    }
    optional M29 f_5 = 5;
    message M34 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional double f_2 = 4;
    }
    optional M34 f_8 = 8;
    message M40 {
      optional fixed64 f_0 = 3;
      optional string f_1 = 5;
      optional bool f_2 = 7;
      optional int32 f_3 = 8;
      optional fixed64 f_4 = 9;
      optional fixed32 f_5 = 11;
      optional fixed64 f_6 = 12;
      optional fixed64 f_7 = 13;
      optional fixed64 f_8 = 17;
      optional fixed64 f_9 = 19;
      optional bool f_10 = 20;
      optional fixed64 f_11 = 21;
      optional bool f_12 = 24;
      optional int32 f_13 = 25;
      optional string f_14 = 26;
      optional bool f_15 = 27;
      message M59 {
        optional int32 f_0 = 2;
        optional string f_1 = 4;
        optional int32 f_2 = 5;
        optional int32 f_3 = 6;
      }
      optional M59 f_28 = 28;
      message M78 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
        optional double f_2 = 4;
        optional fixed64 f_3 = 5;
        optional fixed32 f_4 = 6;
        optional fixed64 f_5 = 8;
      }
      optional M78 f_30 = 30;
    }
    optional M40 f_9 = 9;
    message M41 {
      optional bool f_0 = 1;
      optional string f_1 = 2;
      message M72 {
        optional int32 f_0 = 2;
        optional string f_1 = 3;
        optional string f_2 = 4;
        optional string f_3 = 5;
        optional bool f_4 = 6;
      }
      optional M72 f_3 = 3;
      message M75 {
        optional string f_0 = 2;
      }
      optional M75 f_4 = 4;
    }
    optional M41 f_11 = 11;
    message M50 {
      optional double f_0 = 3;
      optional fixed64 f_1 = 5;
      optional double f_2 = 6;
    }
    optional M50 f_12 = 12;
  }
  optional M16 f_64 = 64;
}
