// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.request.Message2;

message Message2 {
  optional fixed64 f_0 = 2;
  optional double f_1 = 4;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 118;
    E1_CONST_2 = 6;
    E1_CONST_3 = 15;
    E1_CONST_4 = 106;
    E1_CONST_5 = 97;
  }
  repeated E1 f_2 = 6 [packed = true];
  optional int32 f_3 = 7;
  optional fixed64 f_4 = 8;
  optional fixed32 f_5 = 11;
  optional fixed64 f_6 = 13;
  optional string f_7 = 14;
  optional fixed64 f_8 = 16;
  optional fixed64 f_9 = 17;
  optional fixed64 f_10 = 19;
  optional string f_11 = 20;
  optional bool f_12 = 22;
  optional int32 f_13 = 23;
  optional bool f_14 = 24;
  optional int32 f_15 = 26;
  optional int32 f_16 = 27;
  optional fixed64 f_17 = 28;
  optional fixed64 f_18 = 29;
  optional int32 f_19 = 31;
  optional bool f_20 = 33;
  optional fixed32 f_21 = 34;
  optional fixed32 f_22 = 36;
  optional string f_23 = 37;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 34;
    E2_CONST_2 = 22;
    E2_CONST_3 = 77;
    E2_CONST_4 = 48;
    E2_CONST_5 = 16;
  }
  repeated E2 f_24 = 38 [packed = true];
  optional fixed64 f_25 = 39;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 79;
    E3_CONST_2 = 39;
    E3_CONST_3 = 121;
    E3_CONST_4 = 50;
    E3_CONST_5 = 65;
  }
  repeated E3 f_26 = 40 [packed = true];
  optional bool f_27 = 41;
  optional fixed64 f_28 = 42;
  optional int32 f_29 = 44;
  message M1 {
    optional int32 f_0 = 1;
    message M4 {
      optional string f_0 = 3;
    }
    repeated M4 f_2 = 2;
    message M7 {
      optional string f_0 = 2;
      message M65 {
        optional string f_0 = 1;
        optional int64 f_1 = 2;
      }
      optional M65 f_4 = 4;
    }
    repeated M7 f_3 = 3;
    message M9 {
      optional string f_0 = 1;
    }
    repeated M9 f_4 = 4;
    message M12 {
      optional fixed64 f_0 = 1;
    }
    optional M12 f_7 = 7;
    message M15 {
      optional string f_0 = 1;
    }
    repeated M15 f_9 = 9;
    message M17 {
      optional int32 f_0 = 1;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 86;
        E10_CONST_2 = 109;
        E10_CONST_3 = 28;
        E10_CONST_4 = 14;
        E10_CONST_5 = 104;
      }
      repeated E10 f_1 = 3 [packed = true];
    }
    optional M17 f_10 = 10;
    message M18 {
      optional fixed64 f_0 = 1;
    }
    optional M18 f_11 = 11;
    message M19 {
      optional fixed64 f_0 = 2;
    }
    optional M19 f_12 = 12;
    message M21 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 3;
      optional string f_2 = 5;
      optional string f_3 = 6;
      optional fixed64 f_4 = 7;
      optional bool f_5 = 9;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 86;
        E11_CONST_2 = 48;
        E11_CONST_3 = 67;
        E11_CONST_4 = 1;
        E11_CONST_5 = 37;
      }
      repeated E11 f_6 = 10 [packed = true];
      optional string f_7 = 11;
      enum E12 {
        E12_UNSPECIFIED = 0;
        E12_CONST_1 = 72;
        E12_CONST_2 = 80;
        E12_CONST_3 = 59;
        E12_CONST_4 = 101;
        E12_CONST_5 = 124;
      }
      repeated E12 f_8 = 14 [packed = true];
      optional fixed64 f_9 = 16;
      optional bool f_10 = 18;
      optional fixed64 f_11 = 19;
      optional bool f_12 = 20;
      optional int32 f_13 = 22;
      optional bool f_14 = 23;
      optional string f_15 = 24;
      optional int32 f_16 = 27;
      optional fixed64 f_17 = 28;
      optional double f_18 = 29;
      optional int32 f_19 = 31;
      optional bool f_20 = 32;
    }
    optional M21 f_15 = 15;
    message M22 {
      optional int32 f_0 = 1;
      enum E13 {
        E13_UNSPECIFIED = 0;
        E13_CONST_1 = 33;
        E13_CONST_2 = 112;
        E13_CONST_3 = 31;
        E13_CONST_4 = 115;
        E13_CONST_5 = 21;
      }
      repeated E13 f_1 = 2 [packed = true];
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 4;
      optional int32 f_4 = 5;
    }
    repeated M22 f_16 = 16;
    message M23 {
      optional int32 f_0 = 2;
    }
    optional M23 f_17 = 17;
    message M27 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional bool f_2 = 4;
      message M76 {
        optional bool f_0 = 2;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 5;
        optional fixed32 f_4 = 6;
        optional string f_5 = 7;
        optional fixed64 f_6 = 10;
        optional string f_7 = 11;
        optional fixed64 f_8 = 13;
        optional int32 f_9 = 14;
        optional double f_10 = 15;
        optional int32 f_11 = 16;
        optional string f_12 = 18;
        optional fixed64 f_13 = 19;
        optional int32 f_14 = 21;
        optional string f_15 = 23;
        optional int32 f_16 = 25;
        optional double f_17 = 26;
        optional fixed64 f_18 = 27;
        optional fixed64 f_19 = 28;
        optional fixed64 f_20 = 30;
        optional fixed64 f_21 = 32;
        optional fixed64 f_22 = 33;
        optional fixed64 f_23 = 36;
        optional int32 f_24 = 37;
        optional int32 f_25 = 39;
        optional string f_26 = 41;
        optional fixed64 f_27 = 42;
        optional fixed64 f_28 = 43;
        optional bool f_29 = 45;
        optional int32 f_30 = 47;
      }
      repeated M76 f_5 = 5;
    }
    repeated M27 f_18 = 18;
    message M28 {
      optional fixed64 f_0 = 1;
      message M58 {
        optional bool f_0 = 1;
        message M78 {
          enum E24 {
            E24_UNSPECIFIED = 0;
            E24_CONST_1 = 53;
            E24_CONST_2 = 26;
            E24_CONST_3 = 81;
            E24_CONST_4 = 48;
            E24_CONST_5 = 5;
          }
          repeated E24 f_0 = 1 [packed = true];
          optional fixed64 f_1 = 3;
          optional int32 f_2 = 4;
          optional string f_3 = 6;
          optional int32 f_4 = 7;
          optional fixed64 f_5 = 8;
          optional double f_6 = 10;
          optional string f_7 = 11;
          optional bool f_8 = 13;
          optional bool f_9 = 14;
          optional fixed64 f_10 = 15;
          optional bool f_11 = 16;
          optional fixed64 f_12 = 20;
          optional fixed64 f_13 = 23;
          enum E25 {
            E25_UNSPECIFIED = 0;
            E25_CONST_1 = 33;
            E25_CONST_2 = 116;
            E25_CONST_3 = 71;
            E25_CONST_4 = 8;
            E25_CONST_5 = 60;
          }
          repeated E25 f_14 = 24 [packed = true];
          optional fixed64 f_15 = 25;
          message M83 {
            optional fixed32 f_0 = 1;
            optional fixed64 f_1 = 2;
            optional fixed32 f_2 = 3;
            optional int32 f_3 = 5;
            message M88 {
              optional fixed64 f_0 = 1;
            }
            optional M88 f_6 = 6;
          }
          optional M83 f_27 = 27;
          message M84 {
            optional fixed32 f_0 = 2;
            message M87 {
              optional int32 f_0 = 1;
            }
            optional M87 f_3 = 3;
          }
          optional M84 f_28 = 28;
        }
        optional M78 f_4 = 4;
      }
      optional M58 f_2 = 2;
    }
    optional M28 f_20 = 20;
    message M30 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
      message M56 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 3;
      }
      optional M56 f_4 = 4;
    }
    optional M30 f_23 = 23;
    message M31 {
      optional fixed64 f_0 = 2;
    }
    optional M31 f_24 = 24;
    message M33 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 4;
      optional int32 f_3 = 6;
      enum E14 {
        E14_UNSPECIFIED = 0;
        E14_CONST_1 = 3;
        E14_CONST_2 = 46;
        E14_CONST_3 = 92;
        E14_CONST_4 = 18;
        E14_CONST_5 = 48;
      }
      optional E14 f_4 = 7;
    }
    optional M33 f_26 = 26;
    message M35 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
      enum E15 {
        E15_UNSPECIFIED = 0;
        E15_CONST_1 = 22;
        E15_CONST_2 = 8;
        E15_CONST_3 = 34;
        E15_CONST_4 = 108;
        E15_CONST_5 = 18;
      }
      repeated E15 f_2 = 4 [packed = true];
      optional int32 f_3 = 6;
      message M61 {
        optional bool f_0 = 2;
        enum E20 {
          E20_UNSPECIFIED = 0;
          E20_CONST_1 = 42;
          E20_CONST_2 = 97;
          E20_CONST_3 = 93;
          E20_CONST_4 = 18;
          E20_CONST_5 = 25;
        }
        repeated E20 f_1 = 3 [packed = true];
        message M77 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 3;
          optional bool f_2 = 4;
          optional int32 f_3 = 5;
          optional fixed64 f_4 = 7;
          optional fixed64 f_5 = 9;
          optional fixed32 f_6 = 10;
          optional fixed64 f_7 = 11;
          optional int32 f_8 = 12;
          optional int32 f_9 = 13;
          optional int32 f_10 = 14;
          optional bool f_11 = 15;
          optional int32 f_12 = 16;
          optional bool f_13 = 18;
          optional bool f_14 = 19;
          optional bool f_15 = 22;
          optional int32 f_16 = 24;
          optional bool f_17 = 25;
          optional fixed64 f_18 = 26;
          optional string f_19 = 29;
          enum E23 {
            E23_UNSPECIFIED = 0;
            E23_CONST_1 = 109;
            E23_CONST_2 = 55;
            E23_CONST_3 = 121;
            E23_CONST_4 = 103;
            E23_CONST_5 = 5;
          }
          repeated E23 f_20 = 30 [packed = true];
          optional string f_21 = 31;
          optional bool f_22 = 33;
          optional string f_23 = 35;
          optional bool f_24 = 36;
          optional fixed64 f_25 = 37;
        }
        optional M77 f_4 = 4;
      }
      optional M61 f_7 = 7;
      message M72 {
        optional string f_0 = 1;
        optional bool f_1 = 3;
        optional int32 f_2 = 7;
        optional bool f_3 = 8;
      }
      optional M72 f_8 = 8;
    }
    repeated M35 f_27 = 27;
    message M39 {
      optional bool f_0 = 1;
    }
    optional M39 f_28 = 28;
    message M40 {
      optional string f_0 = 1;
      message M70 {
        optional string f_0 = 1;
      }
      repeated M70 f_2 = 2;
    }
    repeated M40 f_29 = 29;
    message M41 {
      optional int32 f_0 = 3;
      optional fixed64 f_1 = 4;
      optional bool f_2 = 5;
      optional fixed64 f_3 = 7;
      optional string f_4 = 8;
      message M54 {
        optional fixed32 f_0 = 2;
        optional string f_1 = 4;
        optional fixed64 f_2 = 5;
        optional fixed64 f_3 = 8;
        optional string f_4 = 10;
        optional string f_5 = 11;
      }
      optional M54 f_10 = 10;
      message M63 {
        optional int64 f_0 = 1;
        message M81 {
          optional fixed64 f_0 = 1;
        }
        optional M81 f_4 = 4;
      }
      optional M63 f_12 = 12;
    }
    optional M41 f_30 = 30;
    message M42 {
      optional string f_0 = 1;
      message M67 {
        optional double f_0 = 1;
      }
      optional M67 f_2 = 2;
    }
    optional M42 f_32 = 32;
    message M46 {
      optional bool f_0 = 1;
      message M69 {
        optional bool f_0 = 2;
        message M79 {
          optional fixed64 f_0 = 1;
        }
        repeated M79 f_4 = 4;
      }
      optional M69 f_4 = 4;
    }
    optional M46 f_33 = 33;
    message M50 {
      optional string f_0 = 1;
      optional bool f_1 = 2;
      optional string f_2 = 4;
      enum E17 {
        E17_UNSPECIFIED = 0;
        E17_CONST_1 = 120;
        E17_CONST_2 = 35;
        E17_CONST_3 = 111;
        E17_CONST_4 = 73;
        E17_CONST_5 = 39;
      }
      repeated E17 f_3 = 6 [packed = true];
    }
    repeated M50 f_34 = 34;
    message M52 {
      enum E18 {
        E18_UNSPECIFIED = 0;
        E18_CONST_1 = 89;
        E18_CONST_2 = 90;
        E18_CONST_3 = 72;
        E18_CONST_4 = 119;
        E18_CONST_5 = 82;
      }
      optional E18 f_0 = 4;
      optional int32 f_1 = 6;
      optional bool f_2 = 8;
      optional int32 f_3 = 9;
      optional int32 f_4 = 10;
      optional string f_5 = 11;
      optional int32 f_6 = 12;
    }
    repeated M52 f_39 = 39;
    message M53 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed32 f_2 = 4;
      optional string f_3 = 5;
      optional string f_4 = 6;
      optional fixed64 f_5 = 8;
      optional fixed64 f_6 = 10;
      optional bool f_7 = 12;
      optional fixed64 f_8 = 13;
      optional fixed64 f_9 = 14;
      optional fixed64 f_10 = 15;
      optional fixed32 f_11 = 16;
      optional int32 f_12 = 17;
      optional int32 f_13 = 20;
      optional double f_14 = 21;
      optional fixed64 f_15 = 22;
      optional string f_16 = 23;
      optional int32 f_17 = 24;
    }
    optional M53 f_40 = 40;
  }
  optional M1 f_45 = 45;
  message M2 {
    optional fixed64 f_0 = 3;
    optional double f_1 = 4;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 110;
      E4_CONST_2 = 32;
      E4_CONST_3 = 125;
      E4_CONST_4 = 20;
      E4_CONST_5 = 50;
    }
    repeated E4 f_2 = 5 [packed = true];
    optional int32 f_3 = 6;
    optional int32 f_4 = 8;
    optional int32 f_5 = 9;
    optional int32 f_6 = 11;
    optional fixed64 f_7 = 12;
    optional string f_8 = 16;
    optional fixed64 f_9 = 19;
    optional string f_10 = 20;
    optional fixed64 f_11 = 22;
    optional fixed64 f_12 = 23;
    optional bool f_13 = 25;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 80;
      E5_CONST_2 = 70;
      E5_CONST_3 = 19;
      E5_CONST_4 = 73;
      E5_CONST_5 = 115;
    }
    optional E5 f_14 = 26;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 100;
      E6_CONST_2 = 90;
      E6_CONST_3 = 68;
      E6_CONST_4 = 107;
      E6_CONST_5 = 54;
    }
    repeated E6 f_15 = 27 [packed = true];
    optional fixed64 f_16 = 29;
    optional fixed64 f_17 = 30;
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 63;
      E7_CONST_2 = 10;
      E7_CONST_3 = 82;
      E7_CONST_4 = 25;
      E7_CONST_5 = 44;
    }
    repeated E7 f_18 = 32 [packed = true];
    optional bool f_19 = 33;
    optional int32 f_20 = 34;
    optional int64 f_21 = 35;
    optional bool f_22 = 36;
    optional fixed64 f_23 = 37;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 1;
      E8_CONST_2 = 71;
      E8_CONST_3 = 55;
      E8_CONST_4 = 63;
      E8_CONST_5 = 23;
    }
    repeated E8 f_24 = 39 [packed = true];
    optional fixed32 f_25 = 40;
    optional bool f_26 = 41;
    optional fixed64 f_27 = 43;
    optional int32 f_28 = 44;
    optional fixed64 f_29 = 45;
    optional bool f_30 = 46;
    message M3 {
      optional bool f_0 = 1;
      message M71 {
        optional double f_0 = 2;
      }
      optional M71 f_2 = 2;
    }
    optional M3 f_47 = 47;
    message M5 {
      optional fixed32 f_0 = 1;
      message M73 {
        optional string f_0 = 1;
        enum E21 {
          E21_UNSPECIFIED = 0;
          E21_CONST_1 = 20;
          E21_CONST_2 = 121;
          E21_CONST_3 = 76;
          E21_CONST_4 = 72;
          E21_CONST_5 = 41;
        }
        repeated E21 f_1 = 2 [packed = true];
      }
      repeated M73 f_3 = 3;
    }
    repeated M5 f_48 = 48;
    message M6 {
      optional int32 f_0 = 2;
      optional bool f_1 = 3;
      optional double f_2 = 5;
      optional fixed64 f_3 = 7;
      optional bool f_4 = 9;
      optional fixed64 f_5 = 10;
      message M59 {
        optional fixed64 f_0 = 2;
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 1;
          E19_CONST_2 = 51;
          E19_CONST_3 = 125;
          E19_CONST_4 = 62;
          E19_CONST_5 = 48;
        }
        repeated E19 f_1 = 3 [packed = true];
        optional double f_2 = 4;
      }
      optional M59 f_12 = 12;
    }
    optional M6 f_50 = 50;
    message M8 {
      optional string f_0 = 1;
      message M60 {
        optional int32 f_0 = 2;
        message M82 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 2;
          optional string f_2 = 3;
          optional bool f_3 = 4;
          optional string f_4 = 5;
          optional int32 f_5 = 6;
          optional string f_6 = 7;
          optional fixed64 f_7 = 9;
          optional fixed64 f_8 = 10;
          optional bool f_9 = 11;
          optional double f_10 = 12;
          optional bool f_11 = 14;
        }
        optional M82 f_3 = 3;
      }
      optional M60 f_4 = 4;
    }
    repeated M8 f_51 = 51;
    message M10 {
      optional fixed64 f_0 = 2;
      message M75 {
        optional bool f_0 = 1;
        optional fixed64 f_1 = 3;
        message M80 {
          optional fixed64 f_0 = 1;
          message M85 {
            optional fixed32 f_0 = 2;
            optional fixed64 f_1 = 4;
            optional string f_2 = 6;
            optional string f_3 = 7;
            optional int32 f_4 = 8;
            optional fixed32 f_5 = 10;
            optional int32 f_6 = 11;
            optional int32 f_7 = 12;
            optional string f_8 = 15;
            optional fixed32 f_9 = 17;
            optional string f_10 = 18;
            optional double f_11 = 19;
            optional int32 f_12 = 20;
            optional string f_13 = 21;
            optional string f_14 = 23;
            optional fixed64 f_15 = 25;
            enum E26 {
              E26_UNSPECIFIED = 0;
              E26_CONST_1 = 31;
              E26_CONST_2 = 80;
              E26_CONST_3 = 16;
              E26_CONST_4 = 107;
              E26_CONST_5 = 102;
            }
            optional E26 f_16 = 26;
            optional int32 f_17 = 28;
            optional int32 f_18 = 30;
            optional bool f_19 = 31;
            message M86 {
              optional string f_0 = 1;
            }
            repeated M86 f_33 = 33;
          }
          repeated M85 f_2 = 2;
        }
        repeated M80 f_5 = 5;
      }
      optional M75 f_5 = 5;
    }
    optional M10 f_54 = 54;
    message M11 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional fixed64 f_2 = 5;
      optional bool f_3 = 7;
    }
    optional M11 f_56 = 56;
    message M13 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional fixed32 f_2 = 5;
      optional fixed64 f_3 = 6;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 31;
        E9_CONST_2 = 94;
        E9_CONST_3 = 5;
        E9_CONST_4 = 108;
        E9_CONST_5 = 24;
      }
      repeated E9 f_4 = 8 [packed = true];
      optional int32 f_5 = 9;
    }
    repeated M13 f_58 = 58;
    message M14 {
      optional bool f_0 = 1;
      message M64 {
        optional fixed32 f_0 = 2;
        optional int32 f_1 = 3;
        optional string f_2 = 7;
        optional fixed64 f_3 = 8;
        optional fixed64 f_4 = 9;
        optional fixed64 f_5 = 10;
      }
      optional M64 f_3 = 3;
    }
    optional M14 f_62 = 62;
    message M16 {
      optional string f_0 = 1;
      optional fixed32 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional fixed64 f_4 = 5;
      optional fixed64 f_5 = 8;
    }
    repeated M16 f_63 = 63;
    message M20 {
      optional fixed64 f_0 = 1;
      message M68 {
        optional int32 f_0 = 1;
        optional fixed32 f_1 = 3;
        optional int32 f_2 = 6;
        optional string f_3 = 7;
        optional bool f_4 = 8;
        optional fixed64 f_5 = 10;
      }
      optional M68 f_2 = 2;
    }
    repeated M20 f_65 = 65;
    message M24 {
      optional string f_0 = 3;
    }
    repeated M24 f_68 = 68;
    message M25 {
      optional fixed64 f_0 = 3;
    }
    repeated M25 f_70 = 70;
    message M26 {
      optional int32 f_0 = 1;
    }
    optional M26 f_71 = 71;
    message M29 {
      optional string f_0 = 2;
      optional bool f_1 = 3;
    }
    repeated M29 f_74 = 74;
    message M32 {
      optional string f_0 = 1;
      message M55 {
        optional string f_0 = 1;
      }
      optional M55 f_2 = 2;
    }
    optional M32 f_77 = 77;
    message M34 {
      optional fixed64 f_0 = 5;
    }
    repeated M34 f_78 = 78;
    message M36 {
      optional fixed64 f_0 = 1;
    }
    repeated M36 f_79 = 79;
    message M37 {
      optional int32 f_0 = 1;
    }
    repeated M37 f_80 = 80;
    message M38 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 3;
    }
    optional M38 f_81 = 81;
    message M43 {
      optional string f_0 = 1;
    }
    optional M43 f_82 = 82;
    message M44 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional bool f_3 = 5;
      message M74 {
        optional fixed32 f_0 = 1;
        enum E22 {
          E22_UNSPECIFIED = 0;
          E22_CONST_1 = 10;
          E22_CONST_2 = 72;
          E22_CONST_3 = 82;
          E22_CONST_4 = 80;
          E22_CONST_5 = 3;
        }
        repeated E22 f_1 = 2 [packed = true];
        optional fixed64 f_2 = 5;
        optional bool f_3 = 7;
        optional string f_4 = 8;
        optional bool f_5 = 9;
      }
      optional M74 f_6 = 6;
    }
    repeated M44 f_83 = 83;
    message M45 {
      optional int32 f_0 = 1;
    }
    repeated M45 f_85 = 85;
    message M47 {
      optional string f_0 = 2;
      message M57 {
        optional int32 f_0 = 2;
        optional double f_1 = 3;
        optional string f_2 = 4;
        optional fixed64 f_3 = 5;
        optional bool f_4 = 6;
        optional fixed64 f_5 = 8;
        optional int32 f_6 = 9;
        optional bool f_7 = 10;
        optional int32 f_8 = 11;
        optional fixed64 f_9 = 12;
        optional fixed64 f_10 = 13;
        optional double f_11 = 15;
        optional string f_12 = 16;
        optional int32 f_13 = 17;
        optional fixed64 f_14 = 18;
        optional string f_15 = 19;
        optional fixed32 f_16 = 20;
        optional bool f_17 = 21;
        optional bool f_18 = 23;
        optional fixed64 f_19 = 24;
        optional fixed64 f_20 = 25;
        optional fixed64 f_21 = 27;
        optional fixed64 f_22 = 29;
        optional fixed64 f_23 = 30;
        optional int32 f_24 = 31;
        optional bool f_25 = 36;
        optional int64 f_26 = 39;
        optional double f_27 = 40;
        optional bool f_28 = 42;
        optional fixed64 f_29 = 43;
        optional string f_30 = 45;
        optional fixed64 f_31 = 46;
      }
      optional M57 f_4 = 4;
    }
    optional M47 f_86 = 86;
    message M48 {
      optional bool f_0 = 2;
      optional double f_1 = 3;
      optional fixed64 f_2 = 5;
      enum E16 {
        E16_UNSPECIFIED = 0;
        E16_CONST_1 = 34;
        E16_CONST_2 = 116;
        E16_CONST_3 = 77;
        E16_CONST_4 = 109;
        E16_CONST_5 = 91;
      }
      repeated E16 f_3 = 6 [packed = true];
      message M66 {
        optional bool f_0 = 1;
      }
      optional M66 f_7 = 7;
    }
    repeated M48 f_87 = 87;
    message M49 {
      optional int32 f_0 = 1;
    }
    optional M49 f_88 = 88;
    message M51 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional string f_2 = 3;
      message M62 {
        optional bool f_0 = 3;
        optional int32 f_1 = 4;
      }
      optional M62 f_4 = 4;
    }
    optional M51 f_91 = 91;
  }
  repeated M2 f_48 = 48;
}
