// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.request.Message0;

message Message0 {
  optional string f_0 = 1;
  optional int32 f_1 = 3;
  optional fixed64 f_2 = 4;
  optional fixed32 f_3 = 6;
  optional fixed64 f_4 = 8;
  optional int32 f_5 = 11;
  optional fixed64 f_6 = 14;
  optional fixed64 f_7 = 15;
  optional fixed64 f_8 = 16;
  optional string f_9 = 17;
  optional string f_10 = 19;
  optional int32 f_11 = 20;
  optional int32 f_12 = 21;
  optional int32 f_13 = 24;
  optional fixed64 f_14 = 26;
  optional int32 f_15 = 27;
  optional string f_16 = 28;
  optional double f_17 = 29;
  optional fixed64 f_18 = 31;
  optional bool f_19 = 32;
  optional int64 f_20 = 33;
  optional int32 f_21 = 34;
  optional bool f_22 = 35;
  optional string f_23 = 36;
  optional int32 f_24 = 38;
  optional fixed64 f_25 = 39;
  optional fixed32 f_26 = 40;
  optional string f_27 = 43;
  optional int32 f_28 = 44;
  optional fixed64 f_29 = 45;
  message M1 {
    optional bool f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 3;
    optional fixed64 f_3 = 4;
    message M22 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 3;
    }
    repeated M22 f_5 = 5;
    message M29 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 6;
      optional bool f_2 = 8;
      optional string f_3 = 9;
    }
    repeated M29 f_7 = 7;
    message M41 {
      optional string f_0 = 2;
      optional string f_1 = 3;
    }
    optional M41 f_9 = 9;
  }
  optional M1 f_47 = 47;
  message M2 {
    optional int32 f_0 = 2;
    optional fixed64 f_1 = 4;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 89;
      E1_CONST_2 = 62;
      E1_CONST_3 = 102;
      E1_CONST_4 = 120;
      E1_CONST_5 = 56;
    }
    optional E1 f_2 = 5;
    optional double f_3 = 6;
    optional bool f_4 = 7;
    optional int32 f_5 = 9;
    message M12 {
      optional double f_0 = 2;
    }
    repeated M12 f_12 = 12;
    message M23 {
      optional int32 f_0 = 2;
      optional fixed32 f_1 = 3;
      message M44 {
        optional fixed64 f_0 = 3;
        optional string f_1 = 4;
        optional fixed64 f_2 = 6;
        optional fixed64 f_3 = 7;
        optional fixed64 f_4 = 8;
        optional string f_5 = 9;
        optional int32 f_6 = 10;
        optional fixed64 f_7 = 12;
        optional int32 f_8 = 13;
        optional int32 f_9 = 14;
        optional fixed64 f_10 = 16;
        optional fixed32 f_11 = 18;
        optional fixed64 f_12 = 20;
        optional string f_13 = 21;
        optional int32 f_14 = 25;
        optional fixed64 f_15 = 27;
        message M59 {
          optional string f_0 = 1;
          optional double f_1 = 2;
          optional fixed64 f_2 = 4;
          enum E7 {
            E7_UNSPECIFIED = 0;
            E7_CONST_1 = 73;
            E7_CONST_2 = 36;
            E7_CONST_3 = 63;
            E7_CONST_4 = 97;
            E7_CONST_5 = 61;
          }
          repeated E7 f_3 = 6 [packed = true];
        }
        repeated M59 f_28 = 28;
      }
      repeated M44 f_4 = 4;
    }
    optional M23 f_13 = 13;
    message M24 {
      optional string f_0 = 4;
    }
    optional M24 f_15 = 15;
    message M26 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 7;
        E4_CONST_2 = 22;
        E4_CONST_3 = 26;
        E4_CONST_4 = 5;
        E4_CONST_5 = 40;
      }
      optional E4 f_0 = 4;
    }
    optional M26 f_16 = 16;
  }
  repeated M2 f_48 = 48;
  message M3 {
    optional fixed64 f_0 = 3;
    message M14 {
      optional fixed64 f_0 = 1;
    }
    optional M14 f_4 = 4;
    message M21 {
      optional string f_0 = 2;
      message M54 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 4;
        optional bool f_2 = 5;
        optional int32 f_3 = 6;
        optional int32 f_4 = 8;
        optional string f_5 = 9;
        optional fixed64 f_6 = 11;
        optional bool f_7 = 12;
        optional int32 f_8 = 13;
        optional int32 f_9 = 15;
        optional fixed64 f_10 = 17;
        optional int32 f_11 = 18;
        optional double f_12 = 19;
        optional int32 f_13 = 20;
        optional fixed64 f_14 = 21;
        optional string f_15 = 22;
        optional int32 f_16 = 24;
        optional fixed32 f_17 = 25;
        optional fixed32 f_18 = 27;
        optional int32 f_19 = 28;
        optional fixed32 f_20 = 29;
        optional bool f_21 = 30;
        optional bool f_22 = 32;
        optional fixed64 f_23 = 33;
        message M63 {
          optional bool f_0 = 1;
        }
        repeated M63 f_34 = 34;
        message M66 {
          optional int32 f_0 = 1;
        }
        repeated M66 f_35 = 35;
        message M67 {
          enum E8 {
            E8_UNSPECIFIED = 0;
            E8_CONST_1 = 56;
            E8_CONST_2 = 65;
            E8_CONST_3 = 32;
            E8_CONST_4 = 53;
            E8_CONST_5 = 20;
          }
          optional E8 f_0 = 1;
        }
        optional M67 f_36 = 36;
      }
      repeated M54 f_3 = 3;
    }
    optional M21 f_5 = 5;
    message M27 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional fixed64 f_2 = 4;
    }
    optional M27 f_7 = 7;
    message M30 {
      optional int32 f_0 = 2;
      optional double f_1 = 4;
      optional fixed64 f_2 = 5;
      optional string f_3 = 8;
      optional fixed32 f_4 = 10;
      optional string f_5 = 12;
      optional int32 f_6 = 13;
      optional fixed64 f_7 = 14;
      optional double f_8 = 15;
      optional int32 f_9 = 16;
      optional string f_10 = 17;
      optional string f_11 = 20;
      optional int32 f_12 = 21;
      optional int32 f_13 = 22;
      optional fixed64 f_14 = 24;
      optional fixed64 f_15 = 26;
      optional bool f_16 = 27;
      optional int32 f_17 = 29;
      optional string f_18 = 31;
      optional fixed64 f_19 = 33;
      optional int32 f_20 = 34;
      optional string f_21 = 35;
      optional int32 f_22 = 37;
      optional fixed32 f_23 = 38;
      optional int32 f_24 = 41;
      message M48 {
        optional bool f_0 = 1;
        optional fixed64 f_1 = 2;
        repeated int32 f_2 = 3 [packed = true];
        optional fixed64 f_3 = 5;
        message M65 {
          optional fixed32 f_0 = 2;
          message M75 {
            optional int32 f_0 = 2;
            optional fixed32 f_1 = 3;
            optional string f_2 = 4;
          }
          optional M75 f_6 = 6;
        }
        optional M65 f_6 = 6;
      }
      repeated M48 f_44 = 44;
      message M50 {
        optional fixed32 f_0 = 1;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 4;
        optional fixed64 f_3 = 5;
        optional bool f_4 = 7;
        optional string f_5 = 8;
        optional int32 f_6 = 11;
        optional string f_7 = 13;
        optional int32 f_8 = 16;
        optional int32 f_9 = 17;
        optional string f_10 = 18;
        optional fixed32 f_11 = 21;
        optional int32 f_12 = 22;
        optional int32 f_13 = 23;
        optional int32 f_14 = 25;
        optional string f_15 = 26;
        optional int32 f_16 = 27;
        optional int32 f_17 = 29;
        optional bool f_18 = 30;
        optional bool f_19 = 31;
        optional string f_20 = 32;
        optional int32 f_21 = 34;
        optional bool f_22 = 35;
        optional int32 f_23 = 36;
        optional string f_24 = 37;
        optional int32 f_25 = 39;
        optional string f_26 = 40;
        optional int32 f_27 = 42;
        optional int32 f_28 = 43;
        optional double f_29 = 46;
        optional string f_30 = 48;
        message M58 {
          optional fixed32 f_0 = 1;
          message M76 {
            optional string f_0 = 1;
          }
          optional M76 f_2 = 2;
        }
        repeated M58 f_49 = 49;
        message M64 {
          optional fixed64 f_0 = 1;
          message M74 {
            optional fixed64 f_0 = 1;
          }
          optional M74 f_2 = 2;
          message M79 {
            optional fixed64 f_0 = 1;
            optional int32 f_1 = 2;
            optional fixed64 f_2 = 3;
          }
          optional M79 f_5 = 5;
        }
        optional M64 f_50 = 50;
        message M70 {
          optional fixed64 f_0 = 2;
        }
        repeated M70 f_52 = 52;
      }
      optional M50 f_46 = 46;
    }
    optional M30 f_9 = 9;
    message M39 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 3;
    }
    optional M39 f_10 = 10;
    message M43 {
      optional int32 f_0 = 1;
    }
    optional M43 f_12 = 12;
  }
  optional M3 f_49 = 49;
  message M4 {
    optional double f_0 = 1;
    message M16 {
      optional fixed32 f_0 = 1;
      message M47 {
        optional bool f_0 = 3;
      }
      optional M47 f_4 = 4;
    }
    repeated M16 f_3 = 3;
    message M25 {
      optional fixed64 f_0 = 1;
      message M53 {
        optional string f_0 = 2;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 4;
      }
      optional M53 f_2 = 2;
    }
    repeated M25 f_5 = 5;
    message M31 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 4;
      message M49 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 2;
        message M61 {
          optional double f_0 = 2;
          message M72 {
            optional int32 f_0 = 1;
            message M80 {
              optional int32 f_0 = 2;
              optional string f_1 = 4;
              optional int32 f_2 = 5;
              enum E9 {
                E9_UNSPECIFIED = 0;
                E9_CONST_1 = 15;
                E9_CONST_2 = 89;
                E9_CONST_3 = 25;
                E9_CONST_4 = 42;
                E9_CONST_5 = 29;
              }
              repeated E9 f_3 = 6 [packed = true];
            }
            optional M80 f_4 = 4;
          }
          optional M72 f_3 = 3;
        }
        optional M61 f_3 = 3;
        message M68 {
          optional fixed32 f_0 = 1;
          message M73 {
            optional fixed64 f_0 = 1;
            optional string f_1 = 2;
          }
          optional M73 f_3 = 3;
        }
        repeated M68 f_4 = 4;
        message M71 {
          optional int64 f_0 = 1;
        }
        repeated M71 f_6 = 6;
      }
      repeated M49 f_8 = 8;
    }
    repeated M31 f_6 = 6;
    message M32 {
      optional string f_0 = 2;
    }
    optional M32 f_9 = 9;
    message M37 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    optional M37 f_10 = 10;
  }
  optional M4 f_50 = 50;
  message M5 {
    optional int32 f_0 = 3;
    optional fixed32 f_1 = 4;
    optional fixed64 f_2 = 5;
    optional string f_3 = 6;
    optional string f_4 = 7;
    optional fixed64 f_5 = 8;
    optional fixed64 f_6 = 9;
    message M9 {
      optional fixed64 f_0 = 1;
    }
    repeated M9 f_11 = 11;
    message M17 {
      optional fixed64 f_0 = 2;
    }
    optional M17 f_12 = 12;
    message M19 {
      optional bool f_0 = 1;
      message M45 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        message M69 {
          optional fixed64 f_0 = 1;
        }
        repeated M69 f_3 = 3;
      }
      optional M45 f_3 = 3;
    }
    repeated M19 f_14 = 14;
    message M20 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed32 f_3 = 6;
      optional fixed64 f_4 = 7;
      optional fixed64 f_5 = 8;
      optional string f_6 = 9;
      optional bool f_7 = 10;
      optional int32 f_8 = 11;
      optional fixed64 f_9 = 12;
      optional string f_10 = 15;
      optional bool f_11 = 16;
      optional fixed64 f_12 = 17;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 10;
        E3_CONST_2 = 24;
        E3_CONST_3 = 42;
        E3_CONST_4 = 71;
        E3_CONST_5 = 79;
      }
      repeated E3 f_13 = 18 [packed = true];
      optional double f_14 = 19;
      repeated int32 f_15 = 21 [packed = true];
      optional bool f_16 = 22;
      optional fixed64 f_17 = 23;
      optional double f_18 = 25;
      optional fixed64 f_19 = 26;
      optional string f_20 = 27;
      optional int32 f_21 = 29;
    }
    repeated M20 f_15 = 15;
    message M34 {
      optional int32 f_0 = 3;
      optional int64 f_1 = 5;
      optional int64 f_2 = 7;
      optional int32 f_3 = 8;
      optional fixed64 f_4 = 9;
      message M46 {
        optional string f_0 = 1;
        optional bool f_1 = 3;
        optional fixed64 f_2 = 4;
        optional string f_3 = 7;
        optional int64 f_4 = 8;
        optional double f_5 = 9;
        message M55 {
          optional int32 f_0 = 2;
          optional fixed64 f_1 = 3;
          optional bool f_2 = 4;
        }
        optional M55 f_10 = 10;
        message M57 {
          optional int32 f_0 = 2;
          optional double f_1 = 4;
        }
        optional M57 f_11 = 11;
        message M60 {
          optional int32 f_0 = 1;
          optional bool f_1 = 2;
          optional double f_2 = 4;
          optional fixed64 f_3 = 7;
          optional double f_4 = 8;
        }
        optional M60 f_12 = 12;
      }
      optional M46 f_11 = 11;
    }
    optional M34 f_17 = 17;
  }
  optional M5 f_53 = 53;
  message M6 {
    optional fixed64 f_0 = 1;
    message M10 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 3;
      optional int32 f_3 = 5;
      optional bool f_4 = 6;
      optional string f_5 = 7;
      optional int32 f_6 = 9;
      optional bool f_7 = 12;
      optional bool f_8 = 14;
      optional bool f_9 = 15;
      optional fixed32 f_10 = 17;
      optional fixed64 f_11 = 18;
      optional fixed64 f_12 = 20;
      optional int32 f_13 = 21;
      optional string f_14 = 23;
    }
    repeated M10 f_2 = 2;
    message M13 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
      optional string f_2 = 3;
      optional fixed64 f_3 = 4;
      optional fixed64 f_4 = 5;
    }
    optional M13 f_4 = 4;
    message M18 {
      optional int32 f_0 = 1;
      optional bool f_1 = 2;
      optional int64 f_2 = 4;
      message M52 {
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 48;
          E6_CONST_2 = 15;
          E6_CONST_3 = 88;
          E6_CONST_4 = 110;
          E6_CONST_5 = 76;
        }
        repeated E6 f_0 = 1 [packed = true];
        optional bool f_1 = 2;
        optional int32 f_2 = 5;
      }
      optional M52 f_5 = 5;
    }
    repeated M18 f_6 = 6;
    message M28 {
      optional string f_0 = 1;
    }
    optional M28 f_7 = 7;
    message M38 {
      optional fixed32 f_0 = 1;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 65;
        E5_CONST_2 = 27;
        E5_CONST_3 = 8;
        E5_CONST_4 = 13;
        E5_CONST_5 = 54;
      }
      repeated E5 f_1 = 2 [packed = true];
      optional fixed64 f_2 = 3;
      optional double f_3 = 4;
      optional fixed64 f_4 = 6;
    }
    repeated M38 f_8 = 8;
  }
  optional M6 f_54 = 54;
  message M7 {
    optional int32 f_0 = 3;
    optional int32 f_1 = 4;
    message M33 {
      optional string f_0 = 1;
      optional bool f_1 = 2;
      optional fixed64 f_2 = 5;
      optional int32 f_3 = 6;
    }
    repeated M33 f_5 = 5;
    message M36 {
      optional int64 f_0 = 2;
    }
    repeated M36 f_7 = 7;
    message M42 {
      optional fixed64 f_0 = 4;
    }
    optional M42 f_8 = 8;
  }
  optional M7 f_55 = 55;
  message M8 {
    optional string f_0 = 1;
    optional int32 f_1 = 2;
    optional string f_2 = 3;
    optional fixed64 f_3 = 4;
    optional bool f_4 = 8;
    optional fixed64 f_5 = 9;
    optional int32 f_6 = 10;
    optional int32 f_7 = 13;
    optional int32 f_8 = 14;
    optional double f_9 = 16;
    optional string f_10 = 18;
    optional fixed64 f_11 = 21;
    optional fixed64 f_12 = 22;
    optional fixed64 f_13 = 23;
    optional int32 f_14 = 24;
    optional fixed64 f_15 = 25;
    optional int32 f_16 = 26;
    optional fixed32 f_17 = 27;
    optional int32 f_18 = 28;
    optional int32 f_19 = 29;
    optional string f_20 = 30;
    optional int32 f_21 = 32;
    optional fixed64 f_22 = 33;
    optional string f_23 = 34;
    optional string f_24 = 35;
    optional fixed64 f_25 = 38;
    optional fixed32 f_26 = 39;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 89;
      E2_CONST_2 = 73;
      E2_CONST_3 = 87;
      E2_CONST_4 = 33;
      E2_CONST_5 = 100;
    }
    repeated E2 f_27 = 40 [packed = true];
    optional int32 f_28 = 41;
    optional fixed64 f_29 = 42;
    optional string f_30 = 43;
    optional int32 f_31 = 44;
    message M11 {
      optional int32 f_0 = 2;
    }
    optional M11 f_45 = 45;
    message M15 {
      repeated int32 f_0 = 1 [packed = true];
      optional fixed64 f_1 = 2;
      optional string f_2 = 4;
    }
    optional M15 f_47 = 47;
    message M35 {
      optional int32 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 4;
    }
    repeated M35 f_48 = 48;
    message M40 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 3;
      optional fixed64 f_2 = 4;
      optional bool f_3 = 5;
      message M51 {
        optional string f_0 = 1;
        message M56 {
          optional fixed32 f_0 = 1;
          optional fixed64 f_1 = 3;
          optional uint64 f_2 = 4;
        }
        optional M56 f_2 = 2;
        message M62 {
          optional fixed64 f_0 = 1;
          optional fixed64 f_1 = 3;
          message M77 {
            optional int32 f_0 = 2;
            optional int32 f_1 = 3;
            optional fixed64 f_2 = 4;
            optional fixed32 f_3 = 6;
            optional int32 f_4 = 7;
            optional string f_5 = 8;
          }
          optional M77 f_4 = 4;
          message M78 {
            optional int32 f_0 = 2;
          }
          optional M78 f_6 = 6;
        }
        optional M62 f_5 = 5;
      }
      optional M51 f_6 = 6;
    }
    optional M40 f_49 = 49;
  }
  repeated M8 f_56 = 56;
}
