// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.request.Message0;

message Message0 {
  optional string f_0 = 2;
  optional int32 f_1 = 5;
  optional fixed64 f_2 = 6;
  optional string f_3 = 7;
  optional int32 f_4 = 8;
  optional fixed64 f_5 = 9;
  optional int32 f_6 = 10;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 85;
    E1_CONST_2 = 5;
    E1_CONST_3 = 115;
    E1_CONST_4 = 25;
    E1_CONST_5 = 64;
  }
  repeated E1 f_7 = 12 [packed = true];
  optional int32 f_8 = 13;
  optional fixed64 f_9 = 14;
  optional int32 f_10 = 17;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 92;
    E2_CONST_2 = 44;
    E2_CONST_3 = 68;
    E2_CONST_4 = 34;
    E2_CONST_5 = 111;
  }
  repeated E2 f_11 = 19 [packed = true];
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 59;
    E3_CONST_2 = 123;
    E3_CONST_3 = 107;
    E3_CONST_4 = 47;
    E3_CONST_5 = 98;
  }
  repeated E3 f_12 = 20 [packed = true];
  optional int64 f_13 = 21;
  optional fixed32 f_14 = 22;
  optional int32 f_15 = 23;
  optional int32 f_16 = 24;
  optional int32 f_17 = 27;
  optional bool f_18 = 28;
  optional bool f_19 = 30;
  optional fixed64 f_20 = 32;
  optional string f_21 = 33;
  optional bool f_22 = 34;
  optional int32 f_23 = 35;
  optional fixed32 f_24 = 37;
  optional double f_25 = 38;
  optional fixed64 f_26 = 41;
  optional fixed64 f_27 = 42;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 116;
    E4_CONST_2 = 58;
    E4_CONST_3 = 108;
    E4_CONST_4 = 19;
    E4_CONST_5 = 22;
  }
  repeated E4 f_28 = 45 [packed = true];
  optional fixed64 f_29 = 48;
  message M1 {
    optional string f_0 = 2;
    message M18 {
      optional int64 f_0 = 1;
      message M28 {
        optional int32 f_0 = 2;
        optional string f_1 = 5;
        optional string f_2 = 8;
        optional int32 f_3 = 9;
        optional double f_4 = 10;
        message M56 {
          enum E23 {
            E23_UNSPECIFIED = 0;
            E23_CONST_1 = 28;
            E23_CONST_2 = 86;
            E23_CONST_3 = 62;
            E23_CONST_4 = 8;
            E23_CONST_5 = 111;
          }
          repeated E23 f_0 = 1 [packed = true];
          optional int32 f_1 = 2;
          optional double f_2 = 3;
        }
        repeated M56 f_11 = 11;
        message M68 {
          optional fixed64 f_0 = 1;
          message M74 {
            optional int32 f_0 = 2;
            optional fixed64 f_1 = 3;
            optional string f_2 = 6;
            optional fixed64 f_3 = 7;
            enum E26 {
              E26_UNSPECIFIED = 0;
              E26_CONST_1 = 110;
              E26_CONST_2 = 68;
              E26_CONST_3 = 59;
              E26_CONST_4 = 5;
              E26_CONST_5 = 111;
            }
            optional E26 f_4 = 10;
          }
          optional M74 f_2 = 2;
        }
        repeated M68 f_13 = 13;
      }
      repeated M28 f_2 = 2;
      message M35 {
        optional int32 f_0 = 3;
        message M53 {
          optional string f_0 = 2;
          enum E22 {
            E22_UNSPECIFIED = 0;
            E22_CONST_1 = 46;
            E22_CONST_2 = 27;
            E22_CONST_3 = 1;
            E22_CONST_4 = 3;
            E22_CONST_5 = 33;
          }
          repeated E22 f_1 = 4 [packed = true];
          optional string f_2 = 6;
          optional string f_3 = 8;
          optional fixed64 f_4 = 10;
          optional int64 f_5 = 12;
        }
        optional M53 f_7 = 7;
        message M65 {
          optional bool f_0 = 3;
        }
        optional M65 f_8 = 8;
      }
      optional M35 f_3 = 3;
    }
    repeated M18 f_3 = 3;
  }
  repeated M1 f_51 = 51;
  message M2 {
    optional string f_0 = 2;
    optional int32 f_1 = 3;
    optional int32 f_2 = 4;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 55;
      E5_CONST_2 = 96;
      E5_CONST_3 = 31;
      E5_CONST_4 = 20;
      E5_CONST_5 = 15;
    }
    repeated E5 f_3 = 7 [packed = true];
    optional int32 f_4 = 10;
  }
  optional M2 f_52 = 52;
  message M3 {
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 124;
      E6_CONST_2 = 105;
      E6_CONST_3 = 99;
      E6_CONST_4 = 37;
      E6_CONST_5 = 114;
    }
    repeated E6 f_0 = 1 [packed = true];
    optional bool f_1 = 2;
    message M13 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      message M33 {
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 25;
          E16_CONST_2 = 90;
          E16_CONST_3 = 78;
          E16_CONST_4 = 114;
          E16_CONST_5 = 75;
        }
        repeated E16 f_0 = 1 [packed = true];
      }
      repeated M33 f_5 = 5;
      message M48 {
        optional fixed64 f_0 = 1;
      }
      repeated M48 f_6 = 6;
    }
    optional M13 f_3 = 3;
    message M17 {
      optional int32 f_0 = 1;
      message M34 {
        optional string f_0 = 2;
        message M59 {
          optional bool f_0 = 2;
          optional string f_1 = 4;
          optional int32 f_2 = 5;
          optional fixed32 f_3 = 7;
        }
        optional M59 f_4 = 4;
      }
      repeated M34 f_2 = 2;
      message M36 {
        optional string f_0 = 1;
        optional int32 f_1 = 3;
        optional string f_2 = 5;
        optional bool f_3 = 6;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 69;
          E17_CONST_2 = 96;
          E17_CONST_3 = 42;
          E17_CONST_4 = 70;
          E17_CONST_5 = 101;
        }
        optional E17 f_4 = 7;
        optional double f_5 = 9;
        message M62 {
          optional bool f_0 = 1;
          message M71 {
            optional string f_0 = 2;
          }
          optional M71 f_2 = 2;
        }
        optional M62 f_10 = 10;
      }
      optional M36 f_3 = 3;
      message M50 {
        optional string f_0 = 1;
        message M55 {
          optional fixed64 f_0 = 1;
          message M72 {
            optional string f_0 = 2;
            message M79 {
              enum E27 {
                E27_UNSPECIFIED = 0;
                E27_CONST_1 = 69;
                E27_CONST_2 = 15;
                E27_CONST_3 = 110;
                E27_CONST_4 = 88;
                E27_CONST_5 = 24;
              }
              optional E27 f_0 = 1;
              optional string f_1 = 2;
              optional int32 f_2 = 3;
              enum E28 {
                E28_UNSPECIFIED = 0;
                E28_CONST_1 = 72;
                E28_CONST_2 = 114;
                E28_CONST_3 = 12;
                E28_CONST_4 = 52;
                E28_CONST_5 = 99;
              }
              optional E28 f_3 = 4;
              optional bool f_4 = 5;
              message M80 {
                optional fixed32 f_0 = 2;
                optional int32 f_1 = 3;
                optional int32 f_2 = 4;
              }
              optional M80 f_6 = 6;
            }
            repeated M79 f_4 = 4;
          }
          optional M72 f_4 = 4;
        }
        repeated M55 f_2 = 2;
      }
      optional M50 f_5 = 5;
    }
    optional M17 f_4 = 4;
  }
  optional M3 f_53 = 53;
  message M4 {
    optional int32 f_0 = 1;
  }
  repeated M4 f_55 = 55;
  message M5 {
    optional fixed64 f_0 = 1;
  }
  optional M5 f_57 = 57;
  message M6 {
    optional bool f_0 = 2;
    optional int32 f_1 = 3;
    optional bool f_2 = 4;
    optional int32 f_3 = 5;
    optional int32 f_4 = 6;
  }
  repeated M6 f_58 = 58;
  message M7 {
    optional string f_0 = 3;
    message M14 {
      optional int32 f_0 = 1;
      message M39 {
        optional fixed32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 5;
        optional int32 f_3 = 6;
        optional string f_4 = 9;
        message M66 {
          optional fixed64 f_0 = 1;
          optional int32 f_1 = 6;
          optional int32 f_2 = 7;
        }
        optional M66 f_10 = 10;
      }
      optional M39 f_2 = 2;
      message M49 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 2;
        optional double f_2 = 3;
        message M58 {
          optional int32 f_0 = 1;
          optional bool f_1 = 2;
          optional bool f_2 = 5;
          message M70 {
            optional string f_0 = 2;
            enum E25 {
              E25_UNSPECIFIED = 0;
              E25_CONST_1 = 112;
              E25_CONST_2 = 97;
              E25_CONST_3 = 72;
              E25_CONST_4 = 13;
              E25_CONST_5 = 4;
            }
            repeated E25 f_1 = 3 [packed = true];
            optional string f_2 = 4;
            optional int32 f_3 = 6;
          }
          optional M70 f_6 = 6;
        }
        optional M58 f_5 = 5;
        message M60 {
          optional bool f_0 = 2;
          message M77 {
            optional bool f_0 = 1;
          }
          optional M77 f_4 = 4;
          message M78 {
            optional fixed64 f_0 = 3;
            optional bool f_1 = 4;
            optional int32 f_2 = 6;
            optional int32 f_3 = 7;
            optional double f_4 = 8;
          }
          optional M78 f_6 = 6;
        }
        optional M60 f_6 = 6;
      }
      optional M49 f_3 = 3;
    }
    repeated M14 f_4 = 4;
    message M16 {
      optional int32 f_0 = 1;
      message M40 {
        optional fixed64 f_0 = 1;
        optional double f_1 = 3;
        optional bool f_2 = 5;
      }
      repeated M40 f_3 = 3;
      message M52 {
        optional fixed64 f_0 = 2;
        optional int32 f_1 = 3;
        optional string f_2 = 4;
        enum E21 {
          E21_UNSPECIFIED = 0;
          E21_CONST_1 = 68;
          E21_CONST_2 = 5;
          E21_CONST_3 = 112;
          E21_CONST_4 = 13;
          E21_CONST_5 = 11;
        }
        repeated E21 f_3 = 5 [packed = true];
        optional int32 f_4 = 8;
        optional int32 f_5 = 10;
        optional string f_6 = 12;
        message M64 {
          optional fixed64 f_0 = 1;
          optional fixed64 f_1 = 3;
        }
        optional M64 f_14 = 14;
      }
      optional M52 f_4 = 4;
    }
    optional M16 f_6 = 6;
    message M27 {
      optional string f_0 = 1;
      message M31 {
        optional bool f_0 = 2;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 114;
          E12_CONST_2 = 78;
          E12_CONST_3 = 93;
          E12_CONST_4 = 4;
          E12_CONST_5 = 61;
        }
        optional E12 f_1 = 4;
        optional int32 f_2 = 6;
        optional fixed64 f_3 = 7;
        optional string f_4 = 8;
        message M57 {
          optional int32 f_0 = 4;
          message M73 {
            optional int32 f_0 = 1;
          }
          repeated M73 f_6 = 6;
        }
        optional M57 f_10 = 10;
      }
      optional M31 f_2 = 2;
    }
    optional M27 f_8 = 8;
  }
  repeated M7 f_59 = 59;
  message M8 {
    optional fixed32 f_0 = 1;
    message M19 {
      optional fixed32 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional string f_2 = 5;
      optional string f_3 = 6;
      optional fixed64 f_4 = 8;
      optional int32 f_5 = 10;
    }
    optional M19 f_2 = 2;
    message M20 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed32 f_3 = 5;
      optional int32 f_4 = 6;
      optional fixed64 f_5 = 7;
      message M46 {
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 30;
          E19_CONST_2 = 47;
          E19_CONST_3 = 73;
          E19_CONST_4 = 56;
          E19_CONST_5 = 92;
        }
        optional E19 f_0 = 2;
        optional string f_1 = 3;
        optional fixed64 f_2 = 5;
        message M69 {
          optional int32 f_0 = 4;
          enum E24 {
            E24_UNSPECIFIED = 0;
            E24_CONST_1 = 32;
            E24_CONST_2 = 21;
            E24_CONST_3 = 71;
            E24_CONST_4 = 89;
            E24_CONST_5 = 28;
          }
          repeated E24 f_1 = 6 [packed = true];
          optional bool f_2 = 9;
          message M76 {
            optional string f_0 = 1;
            optional bool f_1 = 2;
            optional fixed64 f_2 = 3;
            optional string f_3 = 4;
          }
          repeated M76 f_10 = 10;
        }
        optional M69 f_7 = 7;
      }
      optional M46 f_9 = 9;
    }
    optional M20 f_3 = 3;
    message M24 {
      optional fixed32 f_0 = 1;
      message M44 {
        optional fixed64 f_0 = 1;
      }
      optional M44 f_4 = 4;
    }
    optional M24 f_4 = 4;
  }
  repeated M8 f_60 = 60;
  message M9 {
    optional int32 f_0 = 2;
    optional string f_1 = 4;
    optional int32 f_2 = 6;
    optional string f_3 = 7;
    optional int32 f_4 = 8;
    optional int32 f_5 = 10;
    message M26 {
      optional int32 f_0 = 1;
      message M30 {
        optional fixed64 f_0 = 1;
      }
      repeated M30 f_2 = 2;
      message M32 {
        optional double f_0 = 2;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 35;
          E13_CONST_2 = 59;
          E13_CONST_3 = 125;
          E13_CONST_4 = 65;
          E13_CONST_5 = 78;
        }
        repeated E13 f_1 = 3 [packed = true];
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 5;
        optional fixed64 f_4 = 6;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 43;
          E14_CONST_2 = 21;
          E14_CONST_3 = 81;
          E14_CONST_4 = 28;
          E14_CONST_5 = 64;
        }
        repeated E14 f_5 = 7 [packed = true];
        optional int32 f_6 = 10;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 52;
          E15_CONST_2 = 28;
          E15_CONST_3 = 18;
          E15_CONST_4 = 112;
          E15_CONST_5 = 92;
        }
        repeated E15 f_7 = 11 [packed = true];
        optional fixed64 f_8 = 12;
        optional int32 f_9 = 13;
        optional int32 f_10 = 15;
        optional fixed64 f_11 = 16;
        optional string f_12 = 17;
        optional fixed64 f_13 = 18;
        optional fixed64 f_14 = 21;
      }
      repeated M32 f_3 = 3;
      message M37 {
        optional fixed64 f_0 = 1;
        optional string f_1 = 2;
        optional string f_2 = 3;
      }
      optional M37 f_7 = 7;
      message M38 {
        optional string f_0 = 2;
        optional fixed64 f_1 = 3;
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 110;
          E18_CONST_2 = 98;
          E18_CONST_3 = 6;
          E18_CONST_4 = 78;
          E18_CONST_5 = 76;
        }
        optional E18 f_2 = 4;
      }
      optional M38 f_9 = 9;
      message M43 {
        optional fixed64 f_0 = 2;
      }
      repeated M43 f_10 = 10;
    }
    optional M26 f_14 = 14;
  }
  optional M9 f_63 = 63;
  message M10 {
    optional fixed32 f_0 = 1;
    message M15 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 22;
        E8_CONST_2 = 35;
        E8_CONST_3 = 103;
        E8_CONST_4 = 63;
        E8_CONST_5 = 19;
      }
      repeated E8 f_0 = 3 [packed = true];
      optional fixed64 f_1 = 4;
      optional fixed64 f_2 = 5;
      optional string f_3 = 6;
    }
    optional M15 f_3 = 3;
  }
  optional M10 f_64 = 64;
  message M11 {
    optional int64 f_0 = 2;
    optional string f_1 = 6;
    optional fixed64 f_2 = 8;
    optional fixed64 f_3 = 10;
    optional int32 f_4 = 13;
    optional fixed64 f_5 = 14;
    message M22 {
      optional double f_0 = 1;
      message M42 {
        optional int32 f_0 = 1;
        message M54 {
          optional fixed64 f_0 = 2;
        }
        optional M54 f_3 = 3;
      }
      optional M42 f_2 = 2;
      message M47 {
        optional fixed64 f_0 = 1;
        message M67 {
          optional fixed64 f_0 = 1;
        }
        repeated M67 f_2 = 2;
      }
      optional M47 f_4 = 4;
    }
    optional M22 f_15 = 15;
  }
  optional M11 f_67 = 67;
  message M12 {
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 102;
      E7_CONST_2 = 28;
      E7_CONST_3 = 31;
      E7_CONST_4 = 91;
      E7_CONST_5 = 76;
    }
    optional E7 f_0 = 2;
    message M21 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int64 f_2 = 3;
      optional int32 f_3 = 6;
      message M29 {
        optional int64 f_0 = 1;
        optional int64 f_1 = 3;
        message M61 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 4;
        }
        optional M61 f_4 = 4;
        message M63 {
          optional bool f_0 = 2;
          message M75 {
            optional fixed64 f_0 = 1;
          }
          repeated M75 f_4 = 4;
        }
        optional M63 f_6 = 6;
      }
      optional M29 f_8 = 8;
      message M41 {
        optional fixed64 f_0 = 2;
      }
      repeated M41 f_10 = 10;
      message M45 {
        optional fixed64 f_0 = 2;
      }
      repeated M45 f_12 = 12;
      message M51 {
        optional string f_0 = 2;
        optional bool f_1 = 4;
        enum E20 {
          E20_UNSPECIFIED = 0;
          E20_CONST_1 = 98;
          E20_CONST_2 = 72;
          E20_CONST_3 = 74;
          E20_CONST_4 = 113;
          E20_CONST_5 = 52;
        }
        optional E20 f_2 = 6;
        optional string f_3 = 7;
        optional string f_4 = 8;
      }
      optional M51 f_14 = 14;
    }
    optional M21 f_5 = 5;
    message M23 {
      optional int32 f_0 = 3;
    }
    repeated M23 f_6 = 6;
    message M25 {
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 23;
        E9_CONST_2 = 119;
        E9_CONST_3 = 31;
        E9_CONST_4 = 86;
        E9_CONST_5 = 56;
      }
      repeated E9 f_0 = 1 [packed = true];
      optional int32 f_1 = 3;
      optional bool f_2 = 7;
      optional int32 f_3 = 9;
      optional fixed64 f_4 = 10;
      optional int32 f_5 = 11;
      optional fixed64 f_6 = 13;
      optional double f_7 = 16;
      optional int32 f_8 = 17;
      optional int32 f_9 = 18;
      optional fixed32 f_10 = 20;
      optional fixed64 f_11 = 21;
      optional fixed32 f_12 = 23;
      optional fixed64 f_13 = 24;
      optional int64 f_14 = 25;
      optional int32 f_15 = 26;
      optional int32 f_16 = 28;
      optional fixed64 f_17 = 30;
      optional fixed32 f_18 = 31;
      optional fixed32 f_19 = 32;
      optional uint64 f_20 = 33;
      optional fixed64 f_21 = 34;
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 97;
        E10_CONST_2 = 120;
        E10_CONST_3 = 114;
        E10_CONST_4 = 3;
        E10_CONST_5 = 32;
      }
      repeated E10 f_22 = 36 [packed = true];
      optional string f_23 = 38;
      optional fixed64 f_24 = 39;
      optional string f_25 = 43;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 60;
        E11_CONST_2 = 104;
        E11_CONST_3 = 26;
        E11_CONST_4 = 97;
        E11_CONST_5 = 113;
      }
      optional E11 f_26 = 45;
      optional fixed64 f_27 = 47;
      optional string f_28 = 48;
      optional bool f_29 = 49;
      optional int32 f_30 = 50;
    }
    optional M25 f_9 = 9;
  }
  optional M12 f_69 = 69;
}
