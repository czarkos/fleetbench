// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.request.Message1;

message Message1 {
  optional bool f_0 = 1;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 34;
    E1_CONST_2 = 7;
    E1_CONST_3 = 63;
    E1_CONST_4 = 41;
    E1_CONST_5 = 35;
  }
  optional E1 f_1 = 3;
  optional bool f_2 = 4;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 14;
    E2_CONST_2 = 116;
    E2_CONST_3 = 57;
    E2_CONST_4 = 104;
    E2_CONST_5 = 120;
  }
  repeated E2 f_3 = 6 [packed = true];
  optional string f_4 = 7;
  optional string f_5 = 8;
  optional bool f_6 = 10;
  optional string f_7 = 11;
  optional fixed64 f_8 = 12;
  optional bool f_9 = 14;
  optional string f_10 = 16;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 26;
    E3_CONST_2 = 47;
    E3_CONST_3 = 110;
    E3_CONST_4 = 44;
    E3_CONST_5 = 35;
  }
  repeated E3 f_11 = 18 [packed = true];
  optional double f_12 = 19;
  optional int32 f_13 = 20;
  optional int32 f_14 = 21;
  optional string f_15 = 22;
  optional int32 f_16 = 23;
  optional int32 f_17 = 24;
  optional bool f_18 = 25;
  optional string f_19 = 26;
  optional int32 f_20 = 27;
  optional fixed64 f_21 = 30;
  optional string f_22 = 31;
  optional fixed64 f_23 = 33;
  repeated string f_24 = 37;
  optional bool f_25 = 38;
  optional fixed64 f_26 = 39;
  optional fixed64 f_27 = 40;
  optional fixed32 f_28 = 41;
  optional fixed64 f_29 = 42;
  message M1 {
    optional fixed64 f_0 = 1;
  }
  optional M1 f_43 = 43;
  message M2 {
    optional fixed64 f_0 = 1;
    message M30 {
      optional int32 f_0 = 3;
    }
    optional M30 f_2 = 2;
  }
  optional M2 f_45 = 45;
  message M3 {
    optional bool f_0 = 1;
    message M20 {
      optional string f_0 = 2;
      optional string f_1 = 3;
      optional fixed64 f_2 = 5;
      optional bool f_3 = 6;
    }
    optional M20 f_2 = 2;
    message M37 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      optional string f_4 = 6;
      optional fixed64 f_5 = 7;
    }
    optional M37 f_3 = 3;
    message M41 {
      optional bool f_0 = 2;
      message M65 {
        optional fixed64 f_0 = 1;
      }
      optional M65 f_4 = 4;
    }
    optional M41 f_4 = 4;
  }
  optional M3 f_46 = 46;
  message M4 {
    optional fixed64 f_0 = 1;
    message M38 {
      optional bool f_0 = 2;
      message M69 {
        optional bool f_0 = 1;
        optional int32 f_1 = 3;
        optional double f_2 = 6;
        optional int32 f_3 = 7;
        optional string f_4 = 8;
        optional bool f_5 = 9;
        optional string f_6 = 10;
        optional bool f_7 = 12;
        optional string f_8 = 13;
        optional int32 f_9 = 15;
        optional bool f_10 = 18;
        optional int32 f_11 = 19;
        optional string f_12 = 21;
        optional string f_13 = 23;
        optional string f_14 = 27;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 4;
          E10_CONST_2 = 34;
          E10_CONST_3 = 120;
          E10_CONST_4 = 38;
          E10_CONST_5 = 94;
        }
        repeated E10 f_15 = 28 [packed = true];
        optional string f_16 = 30;
        optional int32 f_17 = 31;
        optional bool f_18 = 32;
        optional fixed64 f_19 = 33;
        optional string f_20 = 36;
        optional fixed64 f_21 = 38;
        optional fixed64 f_22 = 39;
        message M73 {
          optional int32 f_0 = 1;
          optional bool f_1 = 2;
          optional bool f_2 = 3;
          optional fixed64 f_3 = 4;
          optional int32 f_4 = 5;
        }
        optional M73 f_41 = 41;
      }
      optional M69 f_4 = 4;
    }
    repeated M38 f_2 = 2;
  }
  optional M4 f_47 = 47;
  message M5 {
    optional int32 f_0 = 2;
    message M21 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      message M54 {
        optional int32 f_0 = 1;
        optional bool f_1 = 6;
      }
      optional M54 f_3 = 3;
    }
    repeated M21 f_5 = 5;
    message M45 {
      optional string f_0 = 1;
      optional int32 f_1 = 3;
      optional bool f_2 = 5;
      optional fixed64 f_3 = 6;
      optional fixed64 f_4 = 8;
    }
    optional M45 f_7 = 7;
    message M48 {
      optional fixed64 f_0 = 1;
    }
    repeated M48 f_9 = 9;
  }
  repeated M5 f_48 = 48;
  message M6 {
    optional int64 f_0 = 1;
  }
  repeated M6 f_49 = 49;
  message M7 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 3;
    optional int32 f_2 = 4;
    optional fixed64 f_3 = 7;
    optional bool f_4 = 8;
    message M22 {
      optional fixed32 f_0 = 1;
      optional fixed64 f_1 = 4;
      optional int32 f_2 = 5;
    }
    optional M22 f_9 = 9;
    message M29 {
      optional fixed64 f_0 = 2;
      optional string f_1 = 3;
      optional string f_2 = 4;
      optional fixed64 f_3 = 6;
    }
    optional M29 f_10 = 10;
    message M33 {
      optional string f_0 = 1;
    }
    optional M33 f_11 = 11;
  }
  optional M7 f_50 = 50;
  message M8 {
    optional fixed64 f_0 = 1;
    message M18 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M18 f_2 = 2;
    message M35 {
      optional string f_0 = 1;
      optional fixed64 f_1 = 2;
      message M67 {
        optional int32 f_0 = 2;
        optional int32 f_1 = 4;
        optional int32 f_2 = 5;
        message M75 {
          optional int32 f_0 = 2;
          optional int32 f_1 = 3;
          message M84 {
            enum E11 {
              E11_UNSPECIFIED = 0;
              E11_CONST_1 = 93;
              E11_CONST_2 = 25;
              E11_CONST_3 = 57;
              E11_CONST_4 = 77;
              E11_CONST_5 = 3;
            }
            repeated E11 f_0 = 2 [packed = true];
          }
          optional M84 f_5 = 5;
          message M87 {
            optional fixed64 f_0 = 1;
            optional int64 f_1 = 3;
            optional fixed32 f_2 = 5;
            optional string f_3 = 6;
            optional int32 f_4 = 7;
            optional string f_5 = 8;
            optional double f_6 = 9;
            optional int32 f_7 = 10;
            optional fixed64 f_8 = 11;
            optional int32 f_9 = 12;
            optional string f_10 = 13;
            optional string f_11 = 14;
            optional fixed64 f_12 = 15;
            optional bool f_13 = 17;
            optional double f_14 = 18;
            optional string f_15 = 19;
            optional bool f_16 = 21;
            optional string f_17 = 24;
            optional int32 f_18 = 26;
            optional int32 f_19 = 27;
            optional int32 f_20 = 29;
            optional int32 f_21 = 31;
            optional string f_22 = 32;
            optional int32 f_23 = 34;
            optional int32 f_24 = 37;
            optional fixed64 f_25 = 38;
            optional int32 f_26 = 39;
          }
          repeated M87 f_6 = 6;
        }
        optional M75 f_9 = 9;
      }
      optional M67 f_3 = 3;
    }
    repeated M35 f_4 = 4;
    message M43 {
      optional int32 f_0 = 1;
      optional string f_1 = 3;
      optional string f_2 = 4;
      optional int32 f_3 = 6;
      optional int32 f_4 = 7;
      optional int32 f_5 = 9;
      optional fixed64 f_6 = 10;
    }
    optional M43 f_5 = 5;
    message M44 {
      optional string f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 3;
      optional bool f_3 = 4;
      optional fixed64 f_4 = 6;
      optional string f_5 = 10;
      optional fixed64 f_6 = 11;
      optional fixed64 f_7 = 13;
      optional string f_8 = 15;
      optional fixed32 f_9 = 16;
      optional fixed32 f_10 = 17;
      optional bool f_11 = 19;
      optional double f_12 = 21;
      message M66 {
        optional int32 f_0 = 2;
      }
      optional M66 f_23 = 23;
    }
    optional M44 f_6 = 6;
    message M46 {
      optional string f_0 = 2;
    }
    optional M46 f_7 = 7;
  }
  optional M8 f_52 = 52;
  message M9 {
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 105;
      E4_CONST_2 = 119;
      E4_CONST_3 = 5;
      E4_CONST_4 = 37;
      E4_CONST_5 = 73;
    }
    repeated E4 f_0 = 1 [packed = true];
    optional string f_1 = 2;
    message M34 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 4;
      optional bool f_2 = 5;
      optional fixed64 f_3 = 6;
      optional fixed64 f_4 = 9;
    }
    optional M34 f_3 = 3;
    message M47 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 2;
      message M53 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 4;
        optional fixed32 f_2 = 7;
        optional string f_3 = 9;
      }
      repeated M53 f_5 = 5;
    }
    repeated M47 f_5 = 5;
    message M50 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 3;
      optional fixed64 f_3 = 4;
      optional double f_4 = 5;
      optional string f_5 = 7;
      optional int32 f_6 = 8;
      optional string f_7 = 11;
      optional string f_8 = 12;
      optional int32 f_9 = 13;
      optional fixed32 f_10 = 14;
      optional fixed64 f_11 = 15;
      optional int32 f_12 = 17;
      optional fixed32 f_13 = 18;
      optional fixed64 f_14 = 19;
      optional bool f_15 = 20;
      optional fixed64 f_16 = 21;
      optional bool f_17 = 22;
      optional bool f_18 = 23;
      optional fixed64 f_19 = 26;
      message M58 {
        optional int32 f_0 = 1;
      }
      repeated M58 f_27 = 27;
      message M61 {
        optional int32 f_0 = 3;
        optional bool f_1 = 4;
        optional int32 f_2 = 6;
        optional fixed64 f_3 = 9;
        optional int32 f_4 = 10;
      }
      optional M61 f_28 = 28;
    }
    repeated M50 f_6 = 6;
  }
  optional M9 f_54 = 54;
  message M10 {
    optional fixed64 f_0 = 1;
    optional fixed32 f_1 = 2;
    optional fixed64 f_2 = 4;
    optional int32 f_3 = 5;
    optional int32 f_4 = 6;
    message M27 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 5;
      optional int32 f_2 = 7;
      optional int32 f_3 = 8;
      message M64 {
        optional int32 f_0 = 1;
      }
      optional M64 f_10 = 10;
    }
    optional M27 f_8 = 8;
    message M31 {
      optional string f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 6;
      optional int32 f_4 = 7;
      optional fixed64 f_5 = 11;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 72;
        E7_CONST_2 = 8;
        E7_CONST_3 = 77;
        E7_CONST_4 = 97;
        E7_CONST_5 = 70;
      }
      optional E7 f_6 = 15;
      message M56 {
        optional fixed64 f_0 = 2;
        message M72 {
          optional string f_0 = 1;
        }
        optional M72 f_3 = 3;
      }
      optional M56 f_16 = 16;
      message M63 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 4;
        optional string f_2 = 5;
        optional fixed64 f_3 = 6;
        message M80 {
          optional fixed64 f_0 = 2;
          optional int32 f_1 = 4;
          message M83 {
            optional fixed32 f_0 = 1;
            message M88 {
              optional fixed64 f_0 = 1;
              optional bool f_1 = 2;
            }
            repeated M88 f_2 = 2;
          }
          optional M83 f_5 = 5;
          message M86 {
            optional int32 f_0 = 1;
            optional fixed32 f_1 = 4;
            message M89 {
              optional int32 f_0 = 2;
              optional string f_1 = 5;
              optional int32 f_2 = 6;
            }
            optional M89 f_6 = 6;
          }
          optional M86 f_7 = 7;
        }
        optional M80 f_7 = 7;
      }
      repeated M63 f_17 = 17;
    }
    optional M31 f_9 = 9;
    message M36 {
      optional fixed64 f_0 = 3;
      optional fixed64 f_1 = 4;
      optional int32 f_2 = 5;
      optional string f_3 = 6;
      optional string f_4 = 7;
    }
    optional M36 f_11 = 11;
    message M42 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
    }
    optional M42 f_13 = 13;
  }
  optional M10 f_57 = 57;
  message M11 {
    optional fixed64 f_0 = 1;
    message M28 {
      optional string f_0 = 2;
      message M60 {
        optional string f_0 = 1;
        optional int32 f_1 = 3;
      }
      optional M60 f_3 = 3;
    }
    optional M28 f_3 = 3;
    message M49 {
      optional int32 f_0 = 2;
      message M71 {
        optional fixed64 f_0 = 1;
        optional int64 f_1 = 2;
        optional bool f_2 = 3;
        optional string f_3 = 5;
        optional string f_4 = 8;
      }
      optional M71 f_3 = 3;
    }
    optional M49 f_4 = 4;
  }
  repeated M11 f_60 = 60;
  message M12 {
    optional bool f_0 = 2;
    message M16 {
      optional string f_0 = 2;
      optional bool f_1 = 3;
      optional int32 f_2 = 4;
      optional int32 f_3 = 5;
      optional fixed64 f_4 = 7;
      optional fixed64 f_5 = 8;
      optional bool f_6 = 11;
      optional fixed64 f_7 = 13;
      optional fixed64 f_8 = 14;
      optional fixed64 f_9 = 15;
      optional fixed64 f_10 = 16;
      message M55 {
        optional bool f_0 = 1;
        optional fixed64 f_1 = 2;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 23;
          E9_CONST_2 = 51;
          E9_CONST_3 = 27;
          E9_CONST_4 = 80;
          E9_CONST_5 = 48;
        }
        optional E9 f_2 = 5;
        optional fixed64 f_3 = 6;
        optional int32 f_4 = 8;
        message M74 {
          optional string f_0 = 1;
        }
        repeated M74 f_9 = 9;
      }
      repeated M55 f_17 = 17;
      message M70 {
        optional string f_0 = 2;
        optional int32 f_1 = 3;
        optional string f_2 = 6;
        message M77 {
          optional string f_0 = 1;
          optional int32 f_1 = 3;
          optional int32 f_2 = 5;
          optional bool f_3 = 7;
          optional fixed64 f_4 = 8;
          optional int32 f_5 = 9;
        }
        repeated M77 f_10 = 10;
        message M82 {
          optional int64 f_0 = 1;
          optional int32 f_1 = 2;
          optional int32 f_2 = 3;
          optional fixed64 f_3 = 4;
          optional bool f_4 = 5;
          message M85 {
            optional fixed32 f_0 = 1;
            optional bool f_1 = 3;
            optional fixed64 f_2 = 4;
            optional fixed64 f_3 = 6;
            optional fixed64 f_4 = 8;
            optional int32 f_5 = 10;
          }
          optional M85 f_6 = 6;
        }
        repeated M82 f_11 = 11;
      }
      optional M70 f_19 = 19;
    }
    optional M16 f_5 = 5;
    message M24 {
      optional fixed64 f_0 = 1;
      message M68 {
        optional fixed32 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
        message M79 {
          optional int32 f_0 = 1;
          optional int32 f_1 = 2;
        }
        optional M79 f_5 = 5;
      }
      repeated M68 f_2 = 2;
    }
    optional M24 f_7 = 7;
    message M26 {
      optional string f_0 = 2;
      message M62 {
        optional bool f_0 = 1;
        message M81 {
          optional int32 f_0 = 2;
          optional int64 f_1 = 3;
        }
        repeated M81 f_3 = 3;
      }
      optional M62 f_3 = 3;
    }
    optional M26 f_9 = 9;
  }
  optional M12 f_62 = 62;
  message M13 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 4;
    optional string f_2 = 9;
    optional fixed64 f_3 = 10;
    optional bool f_4 = 13;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 89;
      E5_CONST_2 = 55;
      E5_CONST_3 = 107;
      E5_CONST_4 = 36;
      E5_CONST_5 = 51;
    }
    optional E5 f_5 = 14;
    message M19 {
      optional int32 f_0 = 1;
      optional bool f_1 = 2;
      optional fixed64 f_2 = 3;
      optional string f_3 = 5;
      optional fixed64 f_4 = 7;
      message M52 {
        optional bool f_0 = 1;
        optional fixed64 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional string f_3 = 5;
        optional int32 f_4 = 7;
        optional string f_5 = 8;
        optional bool f_6 = 9;
        optional int32 f_7 = 11;
        optional fixed64 f_8 = 12;
        optional bool f_9 = 13;
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 23;
          E8_CONST_2 = 109;
          E8_CONST_3 = 39;
          E8_CONST_4 = 5;
          E8_CONST_5 = 51;
        }
        repeated E8 f_10 = 14 [packed = true];
        optional string f_11 = 15;
        optional fixed64 f_12 = 16;
        optional double f_13 = 17;
        optional bool f_14 = 18;
        optional fixed64 f_15 = 19;
        optional fixed32 f_16 = 22;
        optional bool f_17 = 24;
        optional string f_18 = 25;
        optional fixed64 f_19 = 26;
        optional double f_20 = 27;
        optional int32 f_21 = 29;
      }
      repeated M52 f_9 = 9;
    }
    optional M19 f_16 = 16;
    message M25 {
      optional fixed64 f_0 = 3;
      optional int32 f_1 = 6;
      optional string f_2 = 7;
    }
    repeated M25 f_18 = 18;
  }
  optional M13 f_63 = 63;
  message M14 {
    optional string f_0 = 1;
    message M17 {
      optional fixed64 f_0 = 2;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 65;
        E6_CONST_2 = 118;
        E6_CONST_3 = 78;
        E6_CONST_4 = 102;
        E6_CONST_5 = 6;
      }
      repeated E6 f_1 = 4 [packed = true];
      optional int32 f_2 = 5;
    }
    optional M17 f_3 = 3;
    message M23 {
      optional bool f_0 = 2;
      message M51 {
        optional int32 f_0 = 2;
      }
      optional M51 f_3 = 3;
      message M57 {
        optional string f_0 = 1;
      }
      optional M57 f_4 = 4;
    }
    optional M23 f_4 = 4;
    message M32 {
      optional int32 f_0 = 1;
      optional int64 f_1 = 2;
      optional fixed32 f_2 = 5;
    }
    optional M32 f_6 = 6;
  }
  repeated M14 f_65 = 65;
  message M15 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional int32 f_2 = 4;
    optional string f_3 = 5;
    message M39 {
      optional int32 f_0 = 1;
      message M59 {
        optional fixed64 f_0 = 2;
        optional string f_1 = 3;
        message M76 {
          optional int32 f_0 = 1;
        }
        repeated M76 f_4 = 4;
        message M78 {
          optional fixed64 f_0 = 1;
          optional bool f_1 = 3;
          optional string f_2 = 4;
          optional fixed64 f_3 = 5;
        }
        optional M78 f_7 = 7;
      }
      optional M59 f_2 = 2;
    }
    repeated M39 f_7 = 7;
    message M40 {
      optional string f_0 = 2;
    }
    optional M40 f_9 = 9;
  }
  repeated M15 f_66 = 66;
}
