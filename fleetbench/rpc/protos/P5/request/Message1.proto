// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.request.Message1;

message Message1 {
  optional int32 f_0 = 1;
  optional int64 f_1 = 2;
  optional int64 f_2 = 3;
  optional bytes f_3 = 4;
  optional int64 f_4 = 5;
  optional uint32 f_5 = 6;
  optional int32 f_6 = 8;
  optional int32 f_7 = 9;
  optional float f_8 = 11;
  optional int64 f_9 = 12;
  optional int32 f_10 = 13;
  optional bytes f_11 = 14;
  message M1 {
    optional bool f_0 = 1;
    message M10 {
      optional int32 f_0 = 1;
    }
    optional M10 f_2 = 2;
  }
  repeated M1 f_15 = 15;
  message M2 {
    optional int32 f_0 = 2;
    message M6 {
      optional int64 f_0 = 1;
      message M16 {
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 57;
          E4_CONST_2 = 79;
          E4_CONST_3 = 71;
          E4_CONST_4 = 112;
          E4_CONST_5 = 61;
        }
        optional E4 f_0 = 1;
      }
      repeated M16 f_2 = 2;
      message M18 {
        optional bytes f_0 = 1 [ctype = CORD];
      }
      repeated M18 f_3 = 3;
      message M19 {
        optional bool f_0 = 1;
        optional int64 f_1 = 2;
        optional int64 f_2 = 3;
        optional fixed32 f_3 = 5;
        optional int32 f_4 = 6;
        message M21 {
          optional bool f_0 = 1;
          optional bytes f_1 = 2;
          optional int32 f_2 = 3;
          optional string f_3 = 4;
          optional bytes f_4 = 5;
          repeated bytes f_5 = 6;
          optional int64 f_6 = 7;
          optional int64 f_7 = 8;
          optional int32 f_8 = 10;
          message M24 {
            optional fixed32 f_0 = 1;
            message M25 {
              optional int32 f_0 = 1;
              message M28 {
                optional float f_0 = 1;
                message M30 {
                  optional uint32 f_0 = 1;
                  message M31 {
                    optional uint64 f_0 = 1;
                    message M33 {
                      optional string f_0 = 2;
                      optional int32 f_1 = 3;
                      optional int64 f_2 = 4;
                      optional bytes f_3 = 5;
                      optional bytes f_4 = 6;
                      optional uint32 f_5 = 8;
                      message M34 {
                        optional int32 f_0 = 1;
                        optional bool f_1 = 3;
                        optional int64 f_2 = 4;
                        optional int64 f_3 = 5;
                        optional bool f_4 = 6;
                        enum E6 {
                          E6_UNSPECIFIED = 0;
                          E6_CONST_1 = 30;
                          E6_CONST_2 = 19;
                          E6_CONST_3 = 42;
                          E6_CONST_4 = 83;
                          E6_CONST_5 = 51;
                        }
                        optional E6 f_5 = 7;
                        message M35 {
                          optional string f_0 = 1;
                          enum E7 {
                            E7_UNSPECIFIED = 0;
                            E7_CONST_1 = 63;
                            E7_CONST_2 = 55;
                            E7_CONST_3 = 58;
                            E7_CONST_4 = 64;
                            E7_CONST_5 = 109;
                          }
                          optional E7 f_1 = 2;
                          optional bool f_2 = 3;
                          enum E8 {
                            E8_UNSPECIFIED = 0;
                            E8_CONST_1 = 13;
                            E8_CONST_2 = 18;
                            E8_CONST_3 = 24;
                            E8_CONST_4 = 90;
                            E8_CONST_5 = 35;
                          }
                          optional E8 f_3 = 5;
                          optional int64 f_4 = 6;
                          optional bytes f_5 = 7;
                          message M36 {
                            enum E9 {
                              E9_UNSPECIFIED = 0;
                              E9_CONST_1 = 43;
                              E9_CONST_2 = 120;
                              E9_CONST_3 = 89;
                              E9_CONST_4 = 49;
                              E9_CONST_5 = 71;
                            }
                            optional E9 f_0 = 1;
                          }
                          repeated M36 f_8 = 8;
                          message M37 {
                            optional int64 f_0 = 3;
                          }
                          repeated M37 f_9 = 9;
                          message M38 {
                            optional int32 f_0 = 1;
                          }
                          optional M38 f_10 = 10;
                        }
                        optional M35 f_8 = 8;
                      }
                      optional M34 f_9 = 9;
                    }
                    repeated M33 f_2 = 2;
                  }
                  optional M31 f_3 = 3;
                  message M32 {
                    optional bool f_0 = 1;
                  }
                  repeated M32 f_4 = 4;
                }
                repeated M30 f_2 = 2;
              }
              optional M28 f_2 = 2;
              message M29 {
                optional fixed32 f_0 = 1;
                optional bool f_1 = 2;
                optional int32 f_2 = 3;
                optional int32 f_3 = 4;
                optional bytes f_4 = 5 [ctype = CORD];
                optional bytes f_5 = 6;
                optional bytes f_6 = 7;
                optional int64 f_7 = 8;
                optional bytes f_8 = 10;
                optional int32 f_9 = 12;
                optional int32 f_10 = 14;
                optional fixed32 f_11 = 15;
                optional int64 f_12 = 16;
              }
              optional M29 f_3 = 3;
            }
            repeated M25 f_2 = 2;
            message M26 {
              enum E5 {
                E5_UNSPECIFIED = 0;
                E5_CONST_1 = 7;
                E5_CONST_2 = 126;
                E5_CONST_3 = 64;
                E5_CONST_4 = 82;
                E5_CONST_5 = 56;
              }
              optional E5 f_0 = 1;
            }
            repeated M26 f_3 = 3;
          }
          optional M24 f_11 = 11;
        }
        optional M21 f_7 = 7;
      }
      optional M19 f_4 = 4;
    }
    optional M6 f_3 = 3;
  }
  optional M2 f_16 = 16;
  message M3 {
    optional fixed32 f_0 = 1;
    message M11 {
      optional int32 f_0 = 1;
      optional bytes f_1 = 2;
      message M13 {
        optional bytes f_0 = 1;
      }
      optional M13 f_3 = 3;
      message M15 {
        optional fixed32 f_0 = 1;
      }
      optional M15 f_4 = 4;
    }
    repeated M11 f_3 = 3;
  }
  optional M3 f_17 = 17;
  message M4 {
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 117;
      E1_CONST_2 = 86;
      E1_CONST_3 = 54;
      E1_CONST_4 = 114;
      E1_CONST_5 = 98;
    }
    optional E1 f_0 = 2;
    message M7 {
      optional bool f_0 = 1;
      message M12 {
        optional fixed32 f_0 = 1;
      }
      repeated M12 f_2 = 2;
    }
    optional M7 f_3 = 3;
    message M8 {
      optional int64 f_0 = 1;
      message M17 {
        optional bytes f_0 = 1;
        message M20 {
          optional int64 f_0 = 2;
          message M22 {
            optional fixed32 f_0 = 1;
            optional fixed32 f_1 = 3;
            optional fixed32 f_2 = 4;
            optional string f_3 = 6;
            optional fixed32 f_4 = 7;
            optional fixed32 f_5 = 8;
          }
          optional M22 f_3 = 3;
          message M23 {
            optional bytes f_0 = 2;
            message M27 {
              optional bool f_0 = 1;
            }
            optional M27 f_3 = 3;
          }
          optional M23 f_4 = 4;
        }
        optional M20 f_2 = 2;
      }
      repeated M17 f_2 = 2;
    }
    repeated M8 f_5 = 5;
    message M9 {
      optional int64 f_0 = 1;
      message M14 {
        optional fixed32 f_0 = 1;
      }
      optional M14 f_2 = 2;
    }
    repeated M9 f_6 = 6;
  }
  optional M4 f_18 = 18;
  message M5 {
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 39;
      E2_CONST_2 = 81;
      E2_CONST_3 = 59;
      E2_CONST_4 = 104;
      E2_CONST_5 = 77;
    }
    optional E2 f_0 = 2;
    optional fixed32 f_1 = 3;
    optional fixed32 f_2 = 5;
    optional int32 f_3 = 6;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 19;
      E3_CONST_2 = 102;
      E3_CONST_3 = 99;
      E3_CONST_4 = 116;
      E3_CONST_5 = 75;
    }
    optional E3 f_4 = 7;
    optional bytes f_5 = 8;
    optional bytes f_6 = 9;
    optional uint32 f_7 = 10;
    optional fixed32 f_8 = 11;
    optional int64 f_9 = 12;
  }
  repeated M5 f_19 = 19;
}
