// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.request.Message1;

message Message1 {
  optional fixed64 f_0 = 1;
  optional int32 f_1 = 2;
  optional int32 f_2 = 4;
  optional fixed64 f_3 = 5;
  optional fixed64 f_4 = 6;
  optional fixed64 f_5 = 8;
  optional string f_6 = 9;
  optional int32 f_7 = 11;
  optional string f_8 = 12;
  optional string f_9 = 14;
  optional bool f_10 = 15;
  optional double f_11 = 17;
  optional string f_12 = 18;
  optional int32 f_13 = 19;
  optional bool f_14 = 21;
  optional fixed64 f_15 = 23;
  optional fixed64 f_16 = 24;
  optional fixed64 f_17 = 25;
  optional double f_18 = 26;
  optional bool f_19 = 27;
  optional fixed64 f_20 = 29;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 107;
    E1_CONST_2 = 65;
    E1_CONST_3 = 62;
    E1_CONST_4 = 76;
    E1_CONST_5 = 40;
  }
  repeated E1 f_21 = 32 [packed = true];
  optional string f_22 = 34;
  optional string f_23 = 36;
  optional int64 f_24 = 38;
  optional string f_25 = 41;
  optional fixed64 f_26 = 44;
  optional string f_27 = 46;
  optional fixed64 f_28 = 47;
  optional fixed64 f_29 = 49;
  message M1 {
    optional fixed64 f_0 = 1;
    optional bool f_1 = 2;
    optional fixed64 f_2 = 3;
    optional int32 f_3 = 4;
    optional int32 f_4 = 5;
    optional fixed64 f_5 = 6;
    optional string f_6 = 7;
  }
  optional M1 f_50 = 50;
  message M2 {
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 3;
      E2_CONST_2 = 27;
      E2_CONST_3 = 88;
      E2_CONST_4 = 7;
      E2_CONST_5 = 77;
    }
    optional E2 f_0 = 1;
    optional bool f_1 = 3;
    optional string f_2 = 7;
    optional int32 f_3 = 10;
  }
  optional M2 f_51 = 51;
  message M3 {
    optional int32 f_0 = 1;
    message M18 {
      optional int32 f_0 = 3;
      message M32 {
        optional fixed64 f_0 = 1;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 115;
          E11_CONST_2 = 41;
          E11_CONST_3 = 123;
          E11_CONST_4 = 37;
          E11_CONST_5 = 113;
        }
        repeated E11 f_1 = 2 [packed = true];
        optional bool f_2 = 3;
      }
      repeated M32 f_5 = 5;
    }
    repeated M18 f_3 = 3;
  }
  optional M3 f_52 = 52;
  message M4 {
    optional bool f_0 = 2;
    message M19 {
      optional int32 f_0 = 2;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 15;
        E8_CONST_2 = 108;
        E8_CONST_3 = 123;
        E8_CONST_4 = 103;
        E8_CONST_5 = 40;
      }
      repeated E8 f_1 = 5 [packed = true];
      optional fixed64 f_2 = 6;
      optional fixed64 f_3 = 8;
      optional double f_4 = 9;
      message M35 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 3;
        optional bool f_3 = 5;
        optional int32 f_4 = 6;
        optional fixed32 f_5 = 8;
        optional fixed64 f_6 = 9;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 119;
          E13_CONST_2 = 118;
          E13_CONST_3 = 11;
          E13_CONST_4 = 101;
          E13_CONST_5 = 74;
        }
        optional E13 f_7 = 11;
        optional fixed64 f_8 = 13;
        optional bool f_9 = 15;
        optional fixed32 f_10 = 16;
        optional fixed64 f_11 = 17;
        optional int32 f_12 = 18;
        optional fixed64 f_13 = 19;
        optional string f_14 = 22;
        optional fixed32 f_15 = 23;
        optional bool f_16 = 25;
        optional fixed64 f_17 = 26;
        optional string f_18 = 27;
        optional int32 f_19 = 30;
        optional string f_20 = 31;
        optional bool f_21 = 33;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 117;
          E14_CONST_2 = 86;
          E14_CONST_3 = 1;
          E14_CONST_4 = 94;
          E14_CONST_5 = 99;
        }
        repeated E14 f_22 = 34 [packed = true];
        optional bool f_23 = 36;
        optional bool f_24 = 37;
        optional int64 f_25 = 39;
        optional fixed32 f_26 = 40;
        optional int32 f_27 = 43;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 99;
          E15_CONST_2 = 56;
          E15_CONST_3 = 21;
          E15_CONST_4 = 26;
          E15_CONST_5 = 15;
        }
        optional E15 f_28 = 44;
        optional int32 f_29 = 45;
        optional int32 f_30 = 46;
      }
      optional M35 f_10 = 10;
      message M40 {
        optional string f_0 = 1;
        optional int32 f_1 = 5;
      }
      optional M40 f_11 = 11;
      message M41 {
        optional fixed32 f_0 = 3;
        optional fixed64 f_1 = 5;
        optional int32 f_2 = 6;
        optional fixed64 f_3 = 7;
      }
      optional M41 f_14 = 14;
    }
    optional M19 f_3 = 3;
  }
  optional M4 f_54 = 54;
  message M5 {
    optional double f_0 = 1;
    message M22 {
      optional int32 f_0 = 3;
      message M25 {
        optional string f_0 = 1;
      }
      optional M25 f_4 = 4;
      message M31 {
        optional fixed64 f_0 = 3;
      }
      optional M31 f_5 = 5;
      message M42 {
        optional bool f_0 = 1;
        optional string f_1 = 2;
        optional int32 f_2 = 3;
        optional bool f_3 = 4;
        optional bool f_4 = 7;
        optional fixed64 f_5 = 8;
        message M51 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 3;
          optional fixed64 f_2 = 6;
          optional string f_3 = 9;
          optional double f_4 = 10;
          message M52 {
            optional fixed64 f_0 = 2;
          }
          repeated M52 f_11 = 11;
          message M57 {
            enum E21 {
              E21_UNSPECIFIED = 0;
              E21_CONST_1 = 31;
              E21_CONST_2 = 78;
              E21_CONST_3 = 100;
              E21_CONST_4 = 70;
              E21_CONST_5 = 71;
            }
            optional E21 f_0 = 1;
            message M63 {
              optional fixed64 f_0 = 1;
              optional fixed64 f_1 = 2;
            }
            optional M63 f_3 = 3;
            message M64 {
              optional int32 f_0 = 3;
              optional double f_1 = 5;
              optional string f_2 = 7;
              optional bool f_3 = 9;
              optional string f_4 = 10;
              message M65 {
                optional int32 f_0 = 1;
              }
              optional M65 f_11 = 11;
            }
            optional M64 f_4 = 4;
          }
          repeated M57 f_12 = 12;
          message M61 {
            optional bool f_0 = 1;
          }
          optional M61 f_13 = 13;
        }
        optional M51 f_9 = 9;
      }
      repeated M42 f_7 = 7;
    }
    repeated M22 f_2 = 2;
  }
  repeated M5 f_57 = 57;
  message M6 {
    optional fixed64 f_0 = 2;
    message M14 {
      optional fixed64 f_0 = 2;
      optional string f_1 = 4;
      optional string f_2 = 6;
      optional string f_3 = 7;
      optional int32 f_4 = 9;
      optional fixed32 f_5 = 12;
      optional int32 f_6 = 13;
      optional bool f_7 = 14;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 80;
        E5_CONST_2 = 61;
        E5_CONST_3 = 115;
        E5_CONST_4 = 11;
        E5_CONST_5 = 126;
      }
      repeated E5 f_8 = 15 [packed = true];
      optional fixed64 f_9 = 16;
      optional fixed64 f_10 = 17;
      optional bool f_11 = 20;
      optional int64 f_12 = 21;
      optional fixed64 f_13 = 25;
      optional string f_14 = 26;
      optional int32 f_15 = 28;
      optional int32 f_16 = 30;
      optional bool f_17 = 32;
      optional string f_18 = 33;
      optional bool f_19 = 36;
      optional fixed64 f_20 = 38;
      optional fixed64 f_21 = 40;
      optional fixed64 f_22 = 41;
      optional int64 f_23 = 43;
      optional double f_24 = 44;
      message M30 {
        optional int32 f_0 = 1;
        optional bool f_1 = 3;
        optional int32 f_2 = 4;
        message M48 {
          optional double f_0 = 1;
          optional double f_1 = 3;
          optional int32 f_2 = 6;
          optional int32 f_3 = 7;
          optional bool f_4 = 8;
          optional int32 f_5 = 10;
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 85;
            E17_CONST_2 = 88;
            E17_CONST_3 = 19;
            E17_CONST_4 = 115;
            E17_CONST_5 = 93;
          }
          repeated E17 f_6 = 11 [packed = true];
          optional fixed64 f_7 = 12;
          optional string f_8 = 13;
          optional string f_9 = 15;
          optional bool f_10 = 17;
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 126;
            E18_CONST_2 = 86;
            E18_CONST_3 = 5;
            E18_CONST_4 = 20;
            E18_CONST_5 = 80;
          }
          repeated E18 f_11 = 18 [packed = true];
          optional fixed64 f_12 = 21;
          optional fixed64 f_13 = 23;
          optional fixed64 f_14 = 25;
          optional fixed64 f_15 = 27;
          optional int32 f_16 = 28;
          optional string f_17 = 29;
          message M59 {
            optional fixed64 f_0 = 1;
          }
          optional M59 f_30 = 30;
        }
        repeated M48 f_5 = 5;
      }
      repeated M30 f_47 = 47;
    }
    optional M14 f_4 = 4;
    message M21 {
      optional int32 f_0 = 1;
    }
    optional M21 f_6 = 6;
  }
  optional M6 f_58 = 58;
  message M7 {
    optional string f_0 = 1;
    message M16 {
      optional bool f_0 = 1;
      message M27 {
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 14;
          E10_CONST_2 = 123;
          E10_CONST_3 = 50;
          E10_CONST_4 = 73;
          E10_CONST_5 = 17;
        }
        optional E10 f_0 = 1;
        optional string f_1 = 5;
        optional bool f_2 = 7;
        optional int32 f_3 = 11;
        message M44 {
          optional bool f_0 = 1;
          optional fixed64 f_1 = 2;
          optional int32 f_2 = 4;
          optional double f_3 = 5;
        }
        optional M44 f_12 = 12;
        message M45 {
          optional fixed64 f_0 = 1;
          optional string f_1 = 2;
          message M53 {
            optional fixed64 f_0 = 2;
            optional double f_1 = 3;
            enum E20 {
              E20_UNSPECIFIED = 0;
              E20_CONST_1 = 116;
              E20_CONST_2 = 40;
              E20_CONST_3 = 105;
              E20_CONST_4 = 85;
              E20_CONST_5 = 75;
            }
            repeated E20 f_2 = 4 [packed = true];
          }
          repeated M53 f_5 = 5;
        }
        optional M45 f_15 = 15;
      }
      optional M27 f_2 = 2;
      message M37 {
        optional fixed64 f_0 = 1;
        message M50 {
          optional fixed64 f_0 = 4;
          optional int32 f_1 = 7;
          optional fixed64 f_2 = 8;
          message M54 {
            optional int32 f_0 = 1;
          }
          repeated M54 f_9 = 9;
        }
        optional M50 f_3 = 3;
      }
      repeated M37 f_4 = 4;
    }
    optional M16 f_2 = 2;
    message M20 {
      optional fixed64 f_0 = 2;
      optional string f_1 = 4;
      optional fixed64 f_2 = 6;
      optional int32 f_3 = 7;
      optional bool f_4 = 9;
      optional fixed64 f_5 = 10;
    }
    optional M20 f_5 = 5;
  }
  repeated M7 f_61 = 61;
  message M8 {
    optional fixed64 f_0 = 2;
    optional bool f_1 = 3;
    optional bool f_2 = 5;
    optional string f_3 = 6;
    message M23 {
      optional fixed32 f_0 = 1;
      optional int32 f_1 = 3;
      optional bool f_2 = 4;
      optional string f_3 = 6;
      optional string f_4 = 8;
      optional int32 f_5 = 10;
      optional string f_6 = 12;
      optional int32 f_7 = 13;
      optional fixed64 f_8 = 14;
      optional string f_9 = 16;
      optional int32 f_10 = 18;
      optional fixed64 f_11 = 19;
      optional string f_12 = 20;
      optional int32 f_13 = 21;
      optional fixed32 f_14 = 22;
      optional string f_15 = 23;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 45;
        E9_CONST_2 = 113;
        E9_CONST_3 = 57;
        E9_CONST_4 = 75;
        E9_CONST_5 = 34;
      }
      repeated E9 f_16 = 24 [packed = true];
      optional int32 f_17 = 25;
      optional int64 f_18 = 26;
      optional fixed64 f_19 = 27;
      optional int32 f_20 = 29;
      optional fixed32 f_21 = 30;
      optional string f_22 = 31;
      optional string f_23 = 32;
      optional fixed64 f_24 = 33;
      optional fixed64 f_25 = 34;
      message M28 {
        optional fixed64 f_0 = 2;
      }
      repeated M28 f_36 = 36;
      message M33 {
        optional fixed64 f_0 = 1;
      }
      repeated M33 f_38 = 38;
      message M38 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 3;
        optional string f_2 = 4;
        optional string f_3 = 5;
        message M43 {
          optional int32 f_0 = 1;
          message M55 {
            optional fixed64 f_0 = 1;
          }
          optional M55 f_3 = 3;
        }
        optional M43 f_6 = 6;
      }
      repeated M38 f_40 = 40;
      message M39 {
        optional bool f_0 = 3;
        optional string f_1 = 5;
        optional string f_2 = 7;
        optional int32 f_3 = 8;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 37;
          E16_CONST_2 = 72;
          E16_CONST_3 = 18;
          E16_CONST_4 = 66;
          E16_CONST_5 = 15;
        }
        repeated E16 f_4 = 9 [packed = true];
        optional fixed64 f_5 = 10;
        message M46 {
          optional int32 f_0 = 2;
          message M56 {
            optional int32 f_0 = 1;
          }
          optional M56 f_4 = 4;
          message M60 {
            optional bool f_0 = 1;
            optional fixed64 f_1 = 2;
            optional int32 f_2 = 4;
            enum E22 {
              E22_UNSPECIFIED = 0;
              E22_CONST_1 = 113;
              E22_CONST_2 = 47;
              E22_CONST_3 = 115;
              E22_CONST_4 = 21;
              E22_CONST_5 = 78;
            }
            optional E22 f_3 = 5;
          }
          repeated M60 f_5 = 5;
          message M62 {
            optional fixed64 f_0 = 1;
            optional fixed32 f_1 = 2;
            optional fixed64 f_2 = 3;
            optional int32 f_3 = 6;
            optional string f_4 = 8;
            optional fixed64 f_5 = 9;
            optional fixed64 f_6 = 11;
            optional fixed64 f_7 = 13;
            optional fixed64 f_8 = 14;
            optional string f_9 = 15;
            optional double f_10 = 16;
            optional string f_11 = 17;
            enum E23 {
              E23_UNSPECIFIED = 0;
              E23_CONST_1 = 72;
              E23_CONST_2 = 59;
              E23_CONST_3 = 75;
              E23_CONST_4 = 73;
              E23_CONST_5 = 82;
            }
            repeated E23 f_12 = 18 [packed = true];
            optional bool f_13 = 19;
            optional int32 f_14 = 21;
            optional int32 f_15 = 23;
            optional fixed64 f_16 = 25;
            optional string f_17 = 27;
            optional fixed64 f_18 = 28;
            enum E24 {
              E24_UNSPECIFIED = 0;
              E24_CONST_1 = 74;
              E24_CONST_2 = 22;
              E24_CONST_3 = 93;
              E24_CONST_4 = 10;
              E24_CONST_5 = 31;
            }
            optional E24 f_19 = 29;
          }
          optional M62 f_6 = 6;
        }
        optional M46 f_12 = 12;
      }
      optional M39 f_42 = 42;
    }
    optional M23 f_8 = 8;
  }
  repeated M8 f_63 = 63;
  message M9 {
    optional bool f_0 = 2;
  }
  repeated M9 f_65 = 65;
  message M10 {
    optional int32 f_0 = 2;
    message M15 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 89;
        E6_CONST_2 = 83;
        E6_CONST_3 = 113;
        E6_CONST_4 = 5;
        E6_CONST_5 = 119;
      }
      optional E6 f_0 = 2;
      optional fixed32 f_1 = 3;
      optional bool f_2 = 4;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 74;
        E7_CONST_2 = 49;
        E7_CONST_3 = 14;
        E7_CONST_4 = 87;
        E7_CONST_5 = 86;
      }
      repeated E7 f_3 = 6 [packed = true];
      optional fixed64 f_4 = 8;
      message M34 {
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 44;
          E12_CONST_2 = 72;
          E12_CONST_3 = 115;
          E12_CONST_4 = 34;
          E12_CONST_5 = 8;
        }
        optional E12 f_0 = 2;
        message M49 {
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 92;
            E19_CONST_2 = 104;
            E19_CONST_3 = 43;
            E19_CONST_4 = 35;
            E19_CONST_5 = 4;
          }
          repeated E19 f_0 = 3 [packed = true];
          message M58 {
            optional fixed64 f_0 = 1;
          }
          repeated M58 f_5 = 5;
        }
        optional M49 f_3 = 3;
      }
      optional M34 f_10 = 10;
    }
    optional M15 f_4 = 4;
  }
  optional M10 f_66 = 66;
  message M11 {
    optional string f_0 = 1;
  }
  optional M11 f_67 = 67;
  message M12 {
    optional string f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 4;
    optional fixed32 f_3 = 5;
    optional string f_4 = 7;
    optional int32 f_5 = 9;
  }
  optional M12 f_68 = 68;
  message M13 {
    optional string f_0 = 1;
    optional fixed64 f_1 = 2;
    optional string f_2 = 3;
    optional int32 f_3 = 4;
    optional string f_4 = 6;
    optional fixed64 f_5 = 7;
    optional fixed64 f_6 = 9;
    optional string f_7 = 10;
    optional fixed64 f_8 = 11;
    optional string f_9 = 13;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 75;
      E3_CONST_2 = 120;
      E3_CONST_3 = 42;
      E3_CONST_4 = 40;
      E3_CONST_5 = 48;
    }
    repeated E3 f_10 = 14 [packed = true];
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 101;
      E4_CONST_2 = 44;
      E4_CONST_3 = 116;
      E4_CONST_4 = 30;
      E4_CONST_5 = 76;
    }
    optional E4 f_11 = 15;
    optional int32 f_12 = 16;
    optional fixed32 f_13 = 17;
    optional bool f_14 = 18;
    optional int32 f_15 = 20;
    optional fixed64 f_16 = 22;
    optional int32 f_17 = 23;
    optional int32 f_18 = 24;
    optional fixed64 f_19 = 25;
    optional fixed64 f_20 = 27;
    optional fixed64 f_21 = 28;
    optional string f_22 = 31;
    optional int32 f_23 = 32;
    optional int32 f_24 = 33;
    optional fixed64 f_25 = 35;
    optional fixed32 f_26 = 36;
    optional int32 f_27 = 39;
    optional int64 f_28 = 41;
    optional double f_29 = 42;
    optional fixed64 f_30 = 43;
    optional bool f_31 = 45;
    optional bool f_32 = 47;
    message M17 {
      optional double f_0 = 3;
      message M24 {
        optional fixed64 f_0 = 3;
        message M47 {
          optional fixed64 f_0 = 1;
        }
        optional M47 f_4 = 4;
      }
      repeated M24 f_5 = 5;
      message M26 {
        optional bool f_0 = 2;
        optional string f_1 = 4;
      }
      repeated M26 f_6 = 6;
      message M29 {
        optional double f_0 = 1;
      }
      optional M29 f_7 = 7;
      message M36 {
        optional string f_0 = 1;
      }
      repeated M36 f_10 = 10;
    }
    optional M17 f_48 = 48;
  }
  repeated M13 f_69 = 69;
}
