// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P5.request.Message1;

message Message1 {
  optional string f_0 = 1;
  optional fixed32 f_1 = 2;
  optional int32 f_2 = 5;
  optional fixed64 f_3 = 6;
  optional string f_4 = 9;
  optional int32 f_5 = 11;
  optional int32 f_6 = 13;
  optional fixed32 f_7 = 14;
  optional bool f_8 = 16;
  optional fixed64 f_9 = 19;
  optional string f_10 = 22;
  optional int32 f_11 = 23;
  optional int32 f_12 = 26;
  optional int32 f_13 = 27;
  optional fixed32 f_14 = 28;
  optional string f_15 = 29;
  optional fixed64 f_16 = 31;
  optional fixed64 f_17 = 32;
  optional int32 f_18 = 33;
  optional int32 f_19 = 35;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 2;
    E1_CONST_2 = 44;
    E1_CONST_3 = 36;
    E1_CONST_4 = 119;
    E1_CONST_5 = 3;
  }
  repeated E1 f_20 = 36 [packed = true];
  optional string f_21 = 37;
  optional string f_22 = 39;
  optional int32 f_23 = 40;
  optional fixed64 f_24 = 41;
  optional fixed64 f_25 = 42;
  optional int32 f_26 = 44;
  optional fixed64 f_27 = 45;
  optional fixed64 f_28 = 48;
  optional string f_29 = 50;
  message M1 {
    optional fixed32 f_0 = 1;
    optional int64 f_1 = 2;
    optional fixed64 f_2 = 3;
    message M6 {
      optional fixed32 f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 4;
      message M50 {
        optional bool f_0 = 2;
        optional fixed32 f_1 = 6;
        optional int32 f_2 = 7;
        message M57 {
          optional string f_0 = 2;
        }
        repeated M57 f_9 = 9;
        message M58 {
          optional int32 f_0 = 1;
        }
        repeated M58 f_10 = 10;
        message M59 {
          optional int32 f_0 = 1;
        }
        optional M59 f_11 = 11;
      }
      repeated M50 f_6 = 6;
    }
    repeated M6 f_4 = 4;
    message M9 {
      optional int32 f_0 = 1;
    }
    optional M9 f_5 = 5;
    message M11 {
      optional int32 f_0 = 1;
    }
    optional M11 f_6 = 6;
    message M12 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 5;
    }
    optional M12 f_7 = 7;
    message M13 {
      optional bool f_0 = 1;
      optional fixed64 f_1 = 4;
      optional int32 f_2 = 5;
      optional string f_3 = 6;
    }
    repeated M13 f_8 = 8;
    message M14 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 4;
      optional fixed64 f_2 = 5;
      optional fixed64 f_3 = 6;
      optional bool f_4 = 7;
      optional int32 f_5 = 8;
      optional fixed32 f_6 = 9;
      optional fixed64 f_7 = 11;
      optional int32 f_8 = 12;
      optional double f_9 = 13;
      optional string f_10 = 14;
      optional int32 f_11 = 15;
      optional fixed64 f_12 = 16;
      optional bool f_13 = 17;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 3;
        E6_CONST_2 = 80;
        E6_CONST_3 = 31;
        E6_CONST_4 = 60;
        E6_CONST_5 = 70;
      }
      repeated E6 f_14 = 18 [packed = true];
      optional int64 f_15 = 19;
      optional string f_16 = 20;
      optional int64 f_17 = 21;
      optional int32 f_18 = 22;
      optional fixed64 f_19 = 23;
      optional fixed32 f_20 = 25;
      optional bool f_21 = 27;
      optional double f_22 = 28;
      optional bool f_23 = 29;
      optional string f_24 = 31;
      optional fixed32 f_25 = 32;
      optional double f_26 = 33;
      optional string f_27 = 34;
      optional int32 f_28 = 36;
      optional int32 f_29 = 37;
      optional int32 f_30 = 39;
      optional int32 f_31 = 40;
    }
    repeated M14 f_10 = 10;
    message M19 {
      optional int32 f_0 = 2;
      optional int32 f_1 = 4;
    }
    optional M19 f_13 = 13;
    message M20 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 2;
      optional bool f_2 = 4;
      optional string f_3 = 5;
      optional int32 f_4 = 6;
    }
    repeated M20 f_15 = 15;
    message M22 {
      optional bool f_0 = 1;
    }
    optional M22 f_17 = 17;
    message M23 {
      optional string f_0 = 2;
      optional string f_1 = 3;
      optional double f_2 = 5;
      message M46 {
        optional fixed64 f_0 = 1;
        optional fixed32 f_1 = 3;
        message M75 {
          enum E19 {
            E19_UNSPECIFIED = 0;
            E19_CONST_1 = 86;
            E19_CONST_2 = 19;
            E19_CONST_3 = 54;
            E19_CONST_4 = 77;
            E19_CONST_5 = 27;
          }
          repeated E19 f_0 = 1 [packed = true];
        }
        repeated M75 f_4 = 4;
      }
      optional M46 f_8 = 8;
    }
    optional M23 f_19 = 19;
    message M25 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 2;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 5;
    }
    repeated M25 f_20 = 20;
    message M30 {
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 110;
        E9_CONST_2 = 100;
        E9_CONST_3 = 117;
        E9_CONST_4 = 49;
        E9_CONST_5 = 57;
      }
      repeated E9 f_0 = 1 [packed = true];
    }
    optional M30 f_21 = 21;
    message M31 {
      optional bool f_0 = 2;
      optional string f_1 = 3;
      optional int32 f_2 = 4;
      optional fixed64 f_3 = 5;
    }
    repeated M31 f_22 = 22;
    message M32 {
      optional double f_0 = 1;
    }
    optional M32 f_23 = 23;
    message M35 {
      optional string f_0 = 2;
    }
    optional M35 f_25 = 25;
    message M36 {
      optional int64 f_0 = 1;
    }
    optional M36 f_28 = 28;
    message M40 {
      optional int32 f_0 = 1;
    }
    repeated M40 f_29 = 29;
    message M42 {
      enum E10 {
        E10_UNSPECIFIED = 0;
        E10_CONST_1 = 80;
        E10_CONST_2 = 121;
        E10_CONST_3 = 5;
        E10_CONST_4 = 91;
        E10_CONST_5 = 25;
      }
      repeated E10 f_0 = 2 [packed = true];
    }
    repeated M42 f_30 = 30;
    message M43 {
      optional fixed64 f_0 = 1;
    }
    optional M43 f_31 = 31;
    message M45 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 4;
      optional fixed64 f_3 = 5;
    }
    optional M45 f_34 = 34;
  }
  optional M1 f_53 = 53;
  message M2 {
    optional bool f_0 = 2;
    optional fixed64 f_1 = 4;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 121;
      E2_CONST_2 = 94;
      E2_CONST_3 = 66;
      E2_CONST_4 = 92;
      E2_CONST_5 = 47;
    }
    repeated E2 f_2 = 5 [packed = true];
    optional fixed64 f_3 = 7;
    optional int32 f_4 = 8;
    optional string f_5 = 9;
    optional string f_6 = 10;
    optional string f_7 = 11;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 88;
      E3_CONST_2 = 96;
      E3_CONST_3 = 78;
      E3_CONST_4 = 80;
      E3_CONST_5 = 76;
    }
    repeated E3 f_8 = 12 [packed = true];
    optional fixed32 f_9 = 13;
    optional fixed64 f_10 = 15;
    optional bool f_11 = 17;
    optional string f_12 = 19;
    optional bool f_13 = 21;
    optional string f_14 = 22;
    optional double f_15 = 23;
    optional int32 f_16 = 24;
    optional string f_17 = 25;
    optional fixed64 f_18 = 26;
    optional int32 f_19 = 27;
    optional string f_20 = 28;
    optional string f_21 = 31;
    optional bool f_22 = 32;
    optional bool f_23 = 35;
    optional int32 f_24 = 36;
    optional bytes f_25 = 37;
    optional fixed64 f_26 = 39;
    optional string f_27 = 40;
    optional int32 f_28 = 41;
    optional int32 f_29 = 43;
    message M3 {
      optional fixed64 f_0 = 3;
    }
    optional M3 f_44 = 44;
    message M4 {
      optional bool f_0 = 1;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 20;
        E4_CONST_2 = 101;
        E4_CONST_3 = 68;
        E4_CONST_4 = 16;
        E4_CONST_5 = 32;
      }
      optional E4 f_1 = 4;
      optional int32 f_2 = 6;
      message M52 {
        optional string f_0 = 2;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 57;
          E14_CONST_2 = 114;
          E14_CONST_3 = 101;
          E14_CONST_4 = 66;
          E14_CONST_5 = 49;
        }
        repeated E14 f_1 = 3 [packed = true];
        optional fixed64 f_2 = 5;
        optional int32 f_3 = 8;
        optional fixed64 f_4 = 9;
        optional int32 f_5 = 10;
        optional bool f_6 = 11;
        optional fixed32 f_7 = 13;
        optional string f_8 = 16;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 30;
          E15_CONST_2 = 52;
          E15_CONST_3 = 70;
          E15_CONST_4 = 36;
          E15_CONST_5 = 69;
        }
        repeated E15 f_9 = 17 [packed = true];
        optional fixed64 f_10 = 18;
        optional bool f_11 = 19;
        optional bool f_12 = 20;
        optional int32 f_13 = 21;
        optional int64 f_14 = 22;
        optional int32 f_15 = 23;
        optional int32 f_16 = 24;
        optional int32 f_17 = 26;
        optional fixed32 f_18 = 27;
        optional fixed64 f_19 = 28;
        optional fixed32 f_20 = 30;
        optional bool f_21 = 31;
        optional fixed32 f_22 = 35;
        optional double f_23 = 36;
        optional string f_24 = 37;
        optional fixed64 f_25 = 38;
        optional int32 f_26 = 40;
        optional bool f_27 = 42;
        optional double f_28 = 44;
        optional fixed64 f_29 = 45;
        optional bool f_30 = 46;
        message M71 {
          optional fixed32 f_0 = 1;
          optional int32 f_1 = 2;
          optional string f_2 = 4;
          optional int64 f_3 = 5;
          optional int32 f_4 = 6;
          optional int32 f_5 = 7;
          message M81 {
            optional int32 f_0 = 1;
            optional bool f_1 = 4;
            optional bool f_2 = 5;
            optional int32 f_3 = 6;
          }
          optional M81 f_8 = 8;
        }
        optional M71 f_48 = 48;
      }
      optional M52 f_10 = 10;
    }
    optional M4 f_45 = 45;
    message M5 {
      optional fixed64 f_0 = 4;
      optional double f_1 = 6;
      optional fixed64 f_2 = 7;
      optional double f_3 = 9;
      optional string f_4 = 11;
      optional string f_5 = 13;
    }
    optional M5 f_47 = 47;
    message M7 {
      optional fixed64 f_0 = 3;
      optional string f_1 = 4;
      optional string f_2 = 6;
      optional fixed64 f_3 = 7;
    }
    repeated M7 f_48 = 48;
    message M8 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 42;
        E5_CONST_2 = 62;
        E5_CONST_3 = 101;
        E5_CONST_4 = 65;
        E5_CONST_5 = 61;
      }
      repeated E5 f_0 = 2 [packed = true];
      optional bool f_1 = 3;
      optional fixed64 f_2 = 7;
      optional fixed64 f_3 = 11;
    }
    repeated M8 f_49 = 49;
    message M10 {
      optional string f_0 = 3;
    }
    optional M10 f_50 = 50;
    message M15 {
      optional fixed64 f_0 = 1;
      message M53 {
        optional int32 f_0 = 1;
        message M65 {
          optional bool f_0 = 2;
        }
        optional M65 f_2 = 2;
        message M69 {
          optional int32 f_0 = 2;
          message M80 {
            optional string f_0 = 1;
            optional fixed64 f_1 = 2;
            optional bool f_2 = 4;
            optional bool f_3 = 5;
          }
          optional M80 f_3 = 3;
        }
        optional M69 f_4 = 4;
      }
      optional M53 f_3 = 3;
    }
    repeated M15 f_52 = 52;
    message M16 {
      optional int32 f_0 = 1;
    }
    optional M16 f_53 = 53;
    message M17 {
      optional fixed64 f_0 = 1;
    }
    repeated M17 f_54 = 54;
    message M18 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 45;
        E7_CONST_2 = 36;
        E7_CONST_3 = 27;
        E7_CONST_4 = 73;
        E7_CONST_5 = 50;
      }
      optional E7 f_0 = 1;
    }
    repeated M18 f_55 = 55;
    message M21 {
      optional int32 f_0 = 2;
      message M48 {
        optional int32 f_0 = 2;
        message M64 {
          optional double f_0 = 1;
          optional bool f_1 = 2;
          optional fixed64 f_2 = 5;
          optional fixed64 f_3 = 6;
        }
        repeated M64 f_4 = 4;
      }
      optional M48 f_5 = 5;
      message M54 {
        optional bool f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 4;
        optional int32 f_3 = 5;
        optional int32 f_4 = 6;
        optional int32 f_5 = 7;
        optional int32 f_6 = 9;
        optional string f_7 = 11;
        optional fixed64 f_8 = 13;
        optional int32 f_9 = 14;
        optional fixed64 f_10 = 16;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 20;
          E16_CONST_2 = 36;
          E16_CONST_3 = 23;
          E16_CONST_4 = 115;
          E16_CONST_5 = 27;
        }
        repeated E16 f_11 = 17 [packed = true];
        optional double f_12 = 19;
        optional int32 f_13 = 20;
        optional string f_14 = 21;
        optional int32 f_15 = 22;
        optional bool f_16 = 23;
        optional int32 f_17 = 24;
        optional string f_18 = 25;
        optional int32 f_19 = 26;
        optional fixed64 f_20 = 27;
        optional double f_21 = 29;
        optional string f_22 = 31;
        optional fixed64 f_23 = 32;
        optional string f_24 = 34;
        optional string f_25 = 35;
        optional bool f_26 = 37;
        optional bool f_27 = 39;
        optional string f_28 = 41;
        message M55 {
          enum E17 {
            E17_UNSPECIFIED = 0;
            E17_CONST_1 = 43;
            E17_CONST_2 = 40;
            E17_CONST_3 = 30;
            E17_CONST_4 = 119;
            E17_CONST_5 = 23;
          }
          optional E17 f_0 = 1;
          optional fixed64 f_1 = 3;
        }
        optional M55 f_42 = 42;
        message M67 {
          optional string f_0 = 1;
        }
        optional M67 f_43 = 43;
        message M72 {
          optional string f_0 = 1;
        }
        optional M72 f_45 = 45;
      }
      repeated M54 f_6 = 6;
    }
    repeated M21 f_56 = 56;
    message M24 {
      optional int32 f_0 = 2;
    }
    optional M24 f_57 = 57;
    message M26 {
      optional bool f_0 = 3;
    }
    repeated M26 f_58 = 58;
    message M27 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 2;
      optional fixed64 f_2 = 3;
      optional int32 f_3 = 4;
      optional int32 f_4 = 5;
      optional int32 f_5 = 7;
      optional fixed64 f_6 = 8;
      optional int32 f_7 = 11;
      optional fixed64 f_8 = 12;
      optional bool f_9 = 13;
      optional bool f_10 = 14;
      optional fixed64 f_11 = 15;
      optional int32 f_12 = 17;
      optional string f_13 = 18;
      optional fixed32 f_14 = 19;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 86;
        E8_CONST_2 = 85;
        E8_CONST_3 = 91;
        E8_CONST_4 = 75;
        E8_CONST_5 = 111;
      }
      repeated E8 f_15 = 20 [packed = true];
      optional int32 f_16 = 21;
      optional fixed64 f_17 = 22;
      optional int32 f_18 = 23;
      optional string f_19 = 26;
      optional string f_20 = 27;
      optional fixed64 f_21 = 29;
    }
    repeated M27 f_59 = 59;
    message M28 {
      optional string f_0 = 1;
      optional int32 f_1 = 3;
      message M47 {
        optional int32 f_0 = 1;
        optional string f_1 = 2;
        optional fixed64 f_2 = 3;
        optional fixed32 f_3 = 4;
        optional int64 f_4 = 6;
        optional string f_5 = 8;
        optional fixed32 f_6 = 9;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 3;
          E12_CONST_2 = 108;
          E12_CONST_3 = 91;
          E12_CONST_4 = 124;
          E12_CONST_5 = 48;
        }
        repeated E12 f_7 = 10 [packed = true];
        optional fixed64 f_8 = 11;
        optional string f_9 = 12;
        optional fixed64 f_10 = 14;
        optional int32 f_11 = 15;
        optional fixed64 f_12 = 17;
        optional string f_13 = 19;
        optional fixed64 f_14 = 21;
        optional fixed64 f_15 = 23;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 2;
          E13_CONST_2 = 112;
          E13_CONST_3 = 71;
          E13_CONST_4 = 69;
          E13_CONST_5 = 54;
        }
        repeated E13 f_16 = 25 [packed = true];
        optional fixed32 f_17 = 26;
        optional string f_18 = 27;
        optional int32 f_19 = 28;
        optional string f_20 = 29;
        optional int32 f_21 = 30;
        optional fixed32 f_22 = 31;
        optional double f_23 = 32;
        optional fixed64 f_24 = 34;
        optional int32 f_25 = 37;
        optional double f_26 = 38;
        optional int32 f_27 = 39;
        optional double f_28 = 40;
        optional string f_29 = 41;
        optional string f_30 = 43;
        message M61 {
          optional int32 f_0 = 1;
          message M76 {
            optional int64 f_0 = 2;
          }
          optional M76 f_2 = 2;
        }
        optional M61 f_44 = 44;
        message M62 {
          optional double f_0 = 1;
          enum E18 {
            E18_UNSPECIFIED = 0;
            E18_CONST_1 = 85;
            E18_CONST_2 = 110;
            E18_CONST_3 = 47;
            E18_CONST_4 = 41;
            E18_CONST_5 = 113;
          }
          repeated E18 f_1 = 2 [packed = true];
          optional string f_2 = 4;
          optional fixed64 f_3 = 5;
          optional int32 f_4 = 6;
          optional fixed32 f_5 = 8;
          optional fixed64 f_6 = 11;
          optional bool f_7 = 13;
          optional int32 f_8 = 14;
          optional string f_9 = 16;
          optional int32 f_10 = 17;
          optional string f_11 = 19;
          optional fixed64 f_12 = 21;
          optional fixed64 f_13 = 23;
          optional string f_14 = 25;
          optional fixed64 f_15 = 26;
          optional fixed32 f_16 = 27;
          optional bool f_17 = 28;
          optional double f_18 = 29;
          optional string f_19 = 30;
          message M77 {
            optional string f_0 = 2;
          }
          optional M77 f_33 = 33;
        }
        repeated M62 f_46 = 46;
        message M74 {
          optional bool f_0 = 1;
        }
        optional M74 f_48 = 48;
      }
      repeated M47 f_4 = 4;
    }
    optional M28 f_60 = 60;
    message M29 {
      optional string f_0 = 1;
    }
    optional M29 f_62 = 62;
    message M33 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      optional bool f_2 = 5;
      optional string f_3 = 7;
    }
    repeated M33 f_63 = 63;
    message M34 {
      optional string f_0 = 1;
    }
    repeated M34 f_64 = 64;
    message M37 {
      optional int32 f_0 = 2;
      message M51 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional string f_3 = 6;
        optional bool f_4 = 8;
        optional string f_5 = 9;
        message M56 {
          optional string f_0 = 2;
        }
        repeated M56 f_10 = 10;
        message M60 {
          optional int32 f_0 = 1;
          message M79 {
            optional fixed64 f_0 = 1;
            optional bytes f_1 = 2;
            message M82 {
              optional int32 f_0 = 2;
              optional int32 f_1 = 4;
            }
            optional M82 f_3 = 3;
          }
          repeated M79 f_2 = 2;
        }
        optional M60 f_11 = 11;
        message M70 {
          optional string f_0 = 1;
          optional fixed64 f_1 = 2;
          optional int32 f_2 = 4;
          message M78 {
            optional int32 f_0 = 1;
            enum E20 {
              E20_UNSPECIFIED = 0;
              E20_CONST_1 = 122;
              E20_CONST_2 = 37;
              E20_CONST_3 = 66;
              E20_CONST_4 = 2;
              E20_CONST_5 = 102;
            }
            repeated E20 f_1 = 3 [packed = true];
            message M83 {
              enum E21 {
                E21_UNSPECIFIED = 0;
                E21_CONST_1 = 55;
                E21_CONST_2 = 35;
                E21_CONST_3 = 41;
                E21_CONST_4 = 25;
                E21_CONST_5 = 45;
              }
              repeated E21 f_0 = 1 [packed = true];
              optional string f_1 = 2;
            }
            optional M83 f_4 = 4;
          }
          optional M78 f_6 = 6;
        }
        repeated M70 f_13 = 13;
        message M73 {
          optional bool f_0 = 1;
        }
        optional M73 f_14 = 14;
      }
      optional M51 f_4 = 4;
    }
    optional M37 f_66 = 66;
    message M38 {
      optional string f_0 = 1;
    }
    optional M38 f_69 = 69;
    message M39 {
      optional int32 f_0 = 1;
    }
    optional M39 f_74 = 74;
    message M41 {
      optional fixed64 f_0 = 1;
      optional bool f_1 = 3;
      optional fixed32 f_2 = 4;
      optional bool f_3 = 5;
      optional int32 f_4 = 7;
    }
    optional M41 f_75 = 75;
    message M44 {
      optional string f_0 = 1;
      enum E11 {
        E11_UNSPECIFIED = 0;
        E11_CONST_1 = 96;
        E11_CONST_2 = 110;
        E11_CONST_3 = 102;
        E11_CONST_4 = 74;
        E11_CONST_5 = 36;
      }
      optional E11 f_1 = 2;
      optional string f_2 = 4;
      message M49 {
        optional string f_0 = 1;
        message M63 {
          optional bool f_0 = 3;
          optional fixed64 f_1 = 4;
        }
        optional M63 f_3 = 3;
        message M66 {
          optional int32 f_0 = 2;
        }
        optional M66 f_4 = 4;
        message M68 {
          optional fixed64 f_0 = 2;
        }
        optional M68 f_5 = 5;
      }
      optional M49 f_6 = 6;
    }
    repeated M44 f_76 = 76;
  }
  repeated M2 f_56 = 56;
}
