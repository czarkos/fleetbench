// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P10.response.Message1;

message Message1 {
  optional fixed64 f_0 = 1;
  optional int32 f_1 = 2;
  optional int32 f_2 = 3;
  optional fixed64 f_3 = 4;
  optional double f_4 = 5;
  optional int32 f_5 = 6;
  optional int32 f_6 = 7;
  optional int32 f_7 = 8;
  optional double f_8 = 10;
  optional double f_9 = 11;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 35;
    E1_CONST_2 = 13;
    E1_CONST_3 = 91;
    E1_CONST_4 = 62;
    E1_CONST_5 = 95;
  }
  repeated E1 f_10 = 12 [packed = true];
  optional int32 f_11 = 13;
  optional bool f_12 = 14;
  optional fixed64 f_13 = 15;
  optional double f_14 = 16;
  optional fixed64 f_15 = 17;
  optional float f_16 = 18;
  optional float f_17 = 19;
  optional string f_18 = 20;
  optional double f_19 = 21;
  optional float f_20 = 22;
  optional int64 f_21 = 23;
  optional int32 f_22 = 24;
  optional fixed64 f_23 = 25;
  optional bool f_24 = 26;
  optional fixed32 f_25 = 27;
  message M1 {
    optional int64 f_0 = 1;
    optional bool f_1 = 3;
    optional fixed64 f_2 = 4;
    optional int32 f_3 = 5;
    message M22 {
      optional float f_0 = 1;
      optional int32 f_1 = 2;
      optional int64 f_2 = 3;
      optional float f_3 = 4;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 6;
        E5_CONST_2 = 86;
        E5_CONST_3 = 37;
        E5_CONST_4 = 120;
        E5_CONST_5 = 58;
      }
      repeated E5 f_4 = 5 [packed = true];
      optional float f_5 = 6;
      optional double f_6 = 7;
      optional fixed64 f_7 = 8;
      optional double f_8 = 10;
      optional fixed64 f_9 = 11;
      optional double f_10 = 12;
      optional double f_11 = 13;
      optional double f_12 = 14;
      optional fixed64 f_13 = 15;
      optional fixed64 f_14 = 16;
      optional fixed64 f_15 = 17;
      optional float f_16 = 18;
      optional fixed64 f_17 = 19;
      optional int32 f_18 = 20;
      optional float f_19 = 21;
      optional fixed64 f_20 = 22;
      optional fixed64 f_21 = 23;
    }
    optional M22 f_6 = 6;
  }
  repeated M1 f_28 = 28;
  message M2 {
    optional float f_0 = 1;
    message M14 {
      optional double f_0 = 1;
    }
    optional M14 f_2 = 2;
    message M21 {
      optional float f_0 = 1;
      message M34 {
        optional int32 f_0 = 1;
      }
      optional M34 f_2 = 2;
    }
    optional M21 f_4 = 4;
  }
  repeated M2 f_29 = 29;
  message M3 {
    optional fixed64 f_0 = 1;
    message M7 {
      optional bool f_0 = 1;
      optional double f_1 = 2;
      optional float f_2 = 3;
    }
    optional M7 f_2 = 2;
    message M13 {
      optional double f_0 = 1;
      optional int32 f_1 = 2;
      message M25 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
      }
      repeated M25 f_3 = 3;
    }
    optional M13 f_4 = 4;
    message M15 {
      optional int32 f_0 = 1;
    }
    optional M15 f_5 = 5;
    message M16 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      optional int32 f_2 = 3;
      optional int32 f_3 = 4;
      optional int32 f_4 = 5;
      message M31 {
        optional fixed64 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional int32 f_2 = 3;
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 84;
          E6_CONST_2 = 119;
          E6_CONST_3 = 75;
          E6_CONST_4 = 38;
          E6_CONST_5 = 16;
        }
        optional E6 f_3 = 5;
      }
      repeated M31 f_6 = 6;
    }
    optional M16 f_6 = 6;
    message M19 {
      optional int64 f_0 = 1;
    }
    optional M19 f_7 = 7;
    message M20 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
    }
    repeated M20 f_8 = 8;
  }
  optional M3 f_30 = 30;
  message M4 {
    optional double f_0 = 1;
    message M9 {
      optional bool f_0 = 1;
      optional double f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 4;
      optional int32 f_4 = 5;
      optional fixed64 f_5 = 6;
      optional int32 f_6 = 7;
      optional float f_7 = 8;
      optional fixed64 f_8 = 9;
      optional fixed32 f_9 = 10;
      optional int32 f_10 = 11;
      optional int32 f_11 = 12;
      optional fixed64 f_12 = 13;
      optional bool f_13 = 14;
      optional int32 f_14 = 15;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 71;
        E4_CONST_2 = 73;
        E4_CONST_3 = 98;
        E4_CONST_4 = 70;
        E4_CONST_5 = 125;
      }
      optional E4 f_15 = 16;
      optional double f_16 = 17;
      message M27 {
        optional fixed64 f_0 = 1;
        message M38 {
          optional int32 f_0 = 1;
        }
        optional M38 f_2 = 2;
      }
      optional M27 f_18 = 18;
    }
    repeated M9 f_2 = 2;
  }
  repeated M4 f_31 = 31;
  message M5 {
    optional int32 f_0 = 1;
    optional int32 f_1 = 2;
    optional int32 f_2 = 3;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 62;
      E2_CONST_2 = 103;
      E2_CONST_3 = 67;
      E2_CONST_4 = 54;
      E2_CONST_5 = 8;
    }
    repeated E2 f_3 = 4 [packed = true];
    message M17 {
      optional fixed32 f_0 = 1;
      message M33 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
        optional float f_2 = 3;
        optional fixed64 f_3 = 4;
        optional float f_4 = 5;
        optional int32 f_5 = 7;
        optional fixed64 f_6 = 8;
        optional int32 f_7 = 9;
        optional int32 f_8 = 10;
        optional float f_9 = 11;
        repeated bool f_10 = 12 [packed = true];
      }
      optional M33 f_2 = 2;
    }
    optional M17 f_5 = 5;
    message M18 {
      optional fixed64 f_0 = 1;
      optional fixed64 f_1 = 2;
      message M26 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
        optional int32 f_2 = 3;
      }
      optional M26 f_3 = 3;
      message M32 {
        optional fixed64 f_0 = 1;
        optional int32 f_1 = 2;
      }
      repeated M32 f_4 = 4;
    }
    optional M18 f_6 = 6;
  }
  repeated M5 f_32 = 32;
  message M6 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional double f_2 = 3;
    optional bool f_3 = 4;
    optional float f_4 = 5;
    optional int32 f_5 = 7;
    optional fixed64 f_6 = 8;
    optional fixed64 f_7 = 9;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 53;
      E3_CONST_2 = 98;
      E3_CONST_3 = 72;
      E3_CONST_4 = 74;
      E3_CONST_5 = 113;
    }
    optional E3 f_8 = 10;
    optional fixed64 f_9 = 11;
    optional fixed64 f_10 = 12;
    optional int32 f_11 = 13;
    optional double f_12 = 14;
    optional fixed64 f_13 = 15;
    optional bool f_14 = 16;
    optional fixed32 f_15 = 17;
    optional int32 f_16 = 18;
    optional int32 f_17 = 19;
    optional int32 f_18 = 20;
    optional int32 f_19 = 21;
    optional fixed64 f_20 = 22;
    optional int32 f_21 = 23;
    optional fixed64 f_22 = 24;
    optional fixed64 f_23 = 25;
    message M8 {
      optional bool f_0 = 1;
    }
    optional M8 f_26 = 26;
    message M10 {
      optional int32 f_0 = 1;
      optional double f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 4;
      optional float f_4 = 6;
      message M29 {
        optional float f_0 = 1;
        optional fixed64 f_1 = 2;
      }
      optional M29 f_7 = 7;
      message M36 {
        repeated bool f_0 = 1 [packed = true];
      }
      optional M36 f_8 = 8;
    }
    optional M10 f_27 = 27;
    message M11 {
      optional int32 f_0 = 2;
      message M23 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 2;
        message M37 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 2;
          optional int32 f_2 = 3;
          optional fixed64 f_3 = 4;
          optional fixed64 f_4 = 5;
          message M41 {
            optional fixed64 f_0 = 1;
            optional int32 f_1 = 2;
            optional int64 f_2 = 3;
            optional int32 f_3 = 4;
            optional bool f_4 = 5;
          }
          repeated M41 f_6 = 6;
          message M42 {
            optional double f_0 = 1;
          }
          repeated M42 f_7 = 7;
        }
        optional M37 f_3 = 3;
      }
      optional M23 f_3 = 3;
      message M24 {
        optional fixed64 f_0 = 1;
        message M39 {
          optional double f_0 = 1;
          optional bool f_1 = 2;
          optional double f_2 = 3;
          optional int32 f_3 = 4;
        }
        optional M39 f_2 = 2;
        message M40 {
          optional fixed64 f_0 = 1;
          optional fixed64 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional fixed64 f_3 = 4;
        }
        optional M40 f_3 = 3;
      }
      optional M24 f_4 = 4;
    }
    repeated M11 f_28 = 28;
    message M12 {
      optional double f_0 = 1;
      message M28 {
        optional fixed32 f_0 = 1;
      }
      repeated M28 f_2 = 2;
      message M30 {
        optional int32 f_0 = 1;
      }
      optional M30 f_3 = 3;
      message M35 {
        optional fixed64 f_0 = 1;
      }
      repeated M35 f_4 = 4;
    }
    optional M12 f_29 = 29;
  }
  repeated M6 f_33 = 33;
}
