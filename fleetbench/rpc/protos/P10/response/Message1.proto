// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P10.response.Message1;

message Message1 {
  optional int64 f_0 = 1;
  optional uint32 f_1 = 3;
  optional string f_2 = 4;
  message M1 {
    optional int32 f_0 = 4;
  }
  repeated M1 f_6 = 6;
  message M2 {
    optional int64 f_0 = 1;
    optional bool f_1 = 2;
    optional int32 f_2 = 3;
  }
  optional M2 f_8 = 8;
  message M3 {
    optional double f_0 = 2;
  }
  repeated M3 f_12 = 12;
  message M4 {
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 111;
      E1_CONST_2 = 121;
      E1_CONST_3 = 123;
      E1_CONST_4 = 75;
      E1_CONST_5 = 21;
    }
    optional E1 f_0 = 1;
  }
  optional M4 f_14 = 14;
  message M5 {
    optional uint64 f_0 = 2;
  }
  repeated M5 f_15 = 15;
  message M6 {
    optional string f_0 = 2;
  }
  optional M6 f_16 = 16;
  message M7 {
    optional string f_0 = 2;
  }
  optional M7 f_17 = 17;
  message M8 {
    optional int32 f_0 = 1;
  }
  optional M8 f_18 = 18;
  message M9 {
    optional int32 f_0 = 4;
  }
  optional M9 f_20 = 20;
  message M10 {
    optional int32 f_0 = 3;
  }
  repeated M10 f_22 = 22;
  message M11 {
    optional int32 f_0 = 1;
  }
  optional M11 f_26 = 26;
  message M12 {
    optional bool f_0 = 3;
  }
  optional M12 f_27 = 27;
  message M13 {
    optional int32 f_0 = 3;
    optional int64 f_1 = 6;
    optional bytes f_2 = 8;
    repeated int32 f_3 = 9 [packed = true];
    optional uint64 f_4 = 10;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 11;
      E2_CONST_2 = 41;
      E2_CONST_3 = 50;
      E2_CONST_4 = 122;
      E2_CONST_5 = 29;
    }
    optional E2 f_5 = 11;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 65;
      E3_CONST_2 = 56;
      E3_CONST_3 = 74;
      E3_CONST_4 = 60;
      E3_CONST_5 = 5;
    }
    optional E3 f_6 = 14;
    optional bytes f_7 = 15;
    optional float f_8 = 16;
    enum E4 {
      E4_UNSPECIFIED = 0;
      E4_CONST_1 = 107;
      E4_CONST_2 = 86;
      E4_CONST_3 = 90;
      E4_CONST_4 = 101;
      E4_CONST_5 = 109;
    }
    optional E4 f_9 = 18;
    optional int32 f_10 = 21;
    optional int64 f_11 = 23;
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 111;
      E5_CONST_2 = 98;
      E5_CONST_3 = 30;
      E5_CONST_4 = 120;
      E5_CONST_5 = 86;
    }
    optional E5 f_12 = 27;
    enum E6 {
      E6_UNSPECIFIED = 0;
      E6_CONST_1 = 38;
      E6_CONST_2 = 80;
      E6_CONST_3 = 95;
      E6_CONST_4 = 91;
      E6_CONST_5 = 27;
    }
    optional E6 f_13 = 29;
    optional string f_14 = 30;
    optional string f_15 = 34 ;
    optional int64 f_16 = 35;
    enum E7 {
      E7_UNSPECIFIED = 0;
      E7_CONST_1 = 69;
      E7_CONST_2 = 96;
      E7_CONST_3 = 27;
      E7_CONST_4 = 25;
      E7_CONST_5 = 41;
    }
    optional E7 f_17 = 38;
    optional bytes f_18 = 39;
    repeated string f_19 = 41;
    optional int32 f_20 = 43;
    optional uint64 f_21 = 45;
    optional int32 f_22 = 47;
    enum E8 {
      E8_UNSPECIFIED = 0;
      E8_CONST_1 = 5;
      E8_CONST_2 = 59;
      E8_CONST_3 = 82;
      E8_CONST_4 = 125;
      E8_CONST_5 = 104;
    }
    optional E8 f_23 = 49;
    repeated float f_24 = 51 [packed = true];
    optional int32 f_25 = 54;
  }
  optional M13 f_28 = 28;
}
