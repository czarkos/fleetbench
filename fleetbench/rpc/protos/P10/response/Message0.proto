// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P10.response.Message0;

message Message0 {
  optional int32 f_0 = 2;
  optional fixed64 f_1 = 3;
  optional int32 f_2 = 4;
  optional double f_3 = 6;
  optional int32 f_4 = 7;
  optional float f_5 = 8;
  optional fixed64 f_6 = 9;
  optional float f_7 = 10;
  optional double f_8 = 11;
  optional int32 f_9 = 13;
  optional double f_10 = 14;
  optional fixed32 f_11 = 15;
  optional fixed32 f_12 = 16;
  optional float f_13 = 17;
  optional int32 f_14 = 18;
  optional double f_15 = 19;
  optional int32 f_16 = 20;
  optional double f_17 = 21;
  optional int32 f_18 = 22;
  optional double f_19 = 23;
  optional double f_20 = 24;
  optional double f_21 = 25;
  optional int32 f_22 = 26;
  optional int32 f_23 = 27;
  optional fixed64 f_24 = 29;
  optional double f_25 = 30;
  message M1 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional fixed64 f_2 = 3;
    message M25 {
      optional fixed64 f_0 = 1;
      message M39 {
        optional int32 f_0 = 1;
      }
      repeated M39 f_2 = 2;
    }
    optional M25 f_4 = 4;
    message M26 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional float f_2 = 3;
      optional int32 f_3 = 4;
      optional int32 f_4 = 5;
    }
    optional M26 f_5 = 5;
  }
  repeated M1 f_31 = 31;
  message M2 {
    optional float f_0 = 1;
    message M13 {
      optional bool f_0 = 1;
    }
    optional M13 f_2 = 2;
    message M15 {
      optional int32 f_0 = 1;
    }
    optional M15 f_3 = 3;
  }
  optional M2 f_32 = 32;
  message M3 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 2;
    optional double f_2 = 3;
    optional double f_3 = 4;
    optional fixed64 f_4 = 5;
    optional double f_5 = 7;
    message M22 {
      optional double f_0 = 2;
    }
    optional M22 f_8 = 8;
  }
  repeated M3 f_33 = 33;
  message M4 {
    optional double f_0 = 1;
    optional bool f_1 = 2;
    optional float f_2 = 3;
    optional fixed64 f_3 = 4;
    message M17 {
      optional int32 f_0 = 1;
      optional float f_1 = 2;
      optional fixed32 f_2 = 3;
      optional fixed32 f_3 = 4;
      optional int32 f_4 = 5;
      optional int64 f_5 = 7;
      optional fixed64 f_6 = 8;
      optional int32 f_7 = 9;
      optional float f_8 = 10;
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 106;
        E2_CONST_2 = 11;
        E2_CONST_3 = 74;
        E2_CONST_4 = 47;
        E2_CONST_5 = 27;
      }
      repeated E2 f_9 = 11 [packed = true];
      optional fixed64 f_10 = 12;
      repeated bool f_11 = 13 [packed = true];
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 126;
        E3_CONST_2 = 57;
        E3_CONST_3 = 81;
        E3_CONST_4 = 73;
        E3_CONST_5 = 9;
      }
      optional E3 f_12 = 14;
    }
    optional M17 f_5 = 5;
  }
  optional M4 f_34 = 34;
  message M5 {
    optional int32 f_0 = 1;
    message M21 {
      optional fixed64 f_0 = 1;
      optional double f_1 = 2;
    }
    optional M21 f_2 = 2;
    message M29 {
      optional fixed64 f_0 = 1;
    }
    repeated M29 f_3 = 3;
  }
  optional M5 f_35 = 35;
  message M6 {
    optional int32 f_0 = 1;
    message M14 {
      optional double f_0 = 1;
      message M41 {
        optional double f_0 = 1;
        optional double f_1 = 2;
        message M43 {
          optional int32 f_0 = 1;
        }
        optional M43 f_3 = 3;
      }
      optional M41 f_2 = 2;
    }
    optional M14 f_2 = 2;
    message M16 {
      optional int32 f_0 = 1;
    }
    repeated M16 f_3 = 3;
    message M19 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      optional fixed64 f_3 = 4;
      message M42 {
        optional double f_0 = 1;
        optional int32 f_1 = 3;
        optional fixed64 f_2 = 4;
        optional double f_3 = 5;
        optional double f_4 = 6;
        optional float f_5 = 7;
        optional int32 f_6 = 8;
        optional int32 f_7 = 9;
        optional int32 f_8 = 10;
        optional double f_9 = 11;
        optional fixed64 f_10 = 12;
        optional int64 f_11 = 14;
        optional bool f_12 = 15;
        optional float f_13 = 16;
        optional float f_14 = 18;
        optional int32 f_15 = 20;
        optional int32 f_16 = 21;
        optional fixed64 f_17 = 22;
        optional double f_18 = 23;
        optional double f_19 = 24;
        optional fixed64 f_20 = 25;
      }
      optional M42 f_5 = 5;
    }
    optional M19 f_4 = 4;
    message M23 {
      optional bool f_0 = 1;
      optional int32 f_1 = 2;
      optional double f_2 = 3;
      optional int32 f_3 = 4;
    }
    repeated M23 f_5 = 5;
    message M30 {
      optional fixed64 f_0 = 2;
      optional int32 f_1 = 3;
    }
    optional M30 f_6 = 6;
  }
  repeated M6 f_36 = 36;
  message M7 {
    optional int32 f_0 = 1;
    optional double f_1 = 2;
    optional int32 f_2 = 3;
    optional bool f_3 = 4;
    optional double f_4 = 5;
    optional double f_5 = 6;
    message M11 {
      optional double f_0 = 1;
      optional fixed64 f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 4;
      message M40 {
        optional fixed64 f_0 = 1;
      }
      optional M40 f_5 = 5;
    }
    optional M11 f_7 = 7;
  }
  repeated M7 f_37 = 37;
  message M8 {
    repeated bool f_0 = 1 [packed = true];
    message M24 {
      optional float f_0 = 1;
    }
    optional M24 f_2 = 2;
    message M31 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
    }
    optional M31 f_3 = 3;
  }
  repeated M8 f_38 = 38;
  message M9 {
    optional float f_0 = 1;
    message M18 {
      optional double f_0 = 2;
      message M33 {
        optional fixed32 f_0 = 1;
      }
      optional M33 f_3 = 3;
      message M36 {
        optional double f_0 = 1;
        repeated bool f_1 = 2 [packed = true];
        message M45 {
          optional int32 f_0 = 1;
          message M48 {
            optional int32 f_0 = 1;
            optional fixed64 f_1 = 2;
            optional int32 f_2 = 3;
            optional fixed64 f_3 = 4;
            optional int32 f_4 = 5;
            optional float f_5 = 6;
            optional double f_6 = 7;
            optional double f_7 = 8;
            optional double f_8 = 9;
            optional double f_9 = 10;
            optional int64 f_10 = 11;
            optional float f_11 = 12;
            optional int32 f_12 = 13;
            optional int32 f_13 = 14;
            optional int32 f_14 = 15;
            optional fixed32 f_15 = 17;
            optional bool f_16 = 18;
            optional double f_17 = 19;
            optional int32 f_18 = 20;
            optional int32 f_19 = 21;
            optional float f_20 = 23;
            optional fixed64 f_21 = 24;
            optional double f_22 = 25;
          }
          optional M48 f_2 = 2;
        }
        repeated M45 f_4 = 4;
        message M46 {
          optional int32 f_0 = 1;
          optional double f_1 = 2;
          optional int32 f_2 = 4;
          optional int32 f_3 = 5;
          optional fixed64 f_4 = 6;
          optional int32 f_5 = 8;
          optional double f_6 = 9;
          optional fixed64 f_7 = 10;
        }
        repeated M46 f_5 = 5;
      }
      optional M36 f_4 = 4;
    }
    optional M18 f_2 = 2;
    message M20 {
      optional fixed64 f_0 = 1;
      message M38 {
        optional float f_0 = 1;
      }
      optional M38 f_3 = 3;
    }
    optional M20 f_3 = 3;
    message M27 {
      repeated bool f_0 = 1 [packed = true];
      message M37 {
        optional double f_0 = 1;
        optional fixed64 f_1 = 3;
        optional int32 f_2 = 4;
        optional int32 f_3 = 5;
        optional fixed64 f_4 = 6;
        optional fixed64 f_5 = 7;
        optional int32 f_6 = 8;
        optional float f_7 = 9;
        optional float f_8 = 10;
        optional double f_9 = 11;
        optional int32 f_10 = 12;
        optional bool f_11 = 13;
        enum E4 {
          E4_UNSPECIFIED = 0;
          E4_CONST_1 = 53;
          E4_CONST_2 = 103;
          E4_CONST_3 = 121;
          E4_CONST_4 = 77;
          E4_CONST_5 = 16;
        }
        optional E4 f_12 = 14;
        enum E5 {
          E5_UNSPECIFIED = 0;
          E5_CONST_1 = 119;
          E5_CONST_2 = 89;
          E5_CONST_3 = 24;
          E5_CONST_4 = 8;
          E5_CONST_5 = 38;
        }
        optional E5 f_13 = 15;
        optional fixed64 f_14 = 16;
        optional int32 f_15 = 17;
        optional double f_16 = 18;
        optional double f_17 = 19;
        optional int32 f_18 = 20;
        optional double f_19 = 21;
        optional int32 f_20 = 22;
        message M44 {
          optional double f_0 = 1;
          optional int32 f_1 = 2;
          optional fixed64 f_2 = 3;
          optional bool f_3 = 4;
          optional int32 f_4 = 5;
          optional float f_5 = 7;
          message M47 {
            optional double f_0 = 1;
          }
          optional M47 f_9 = 9;
        }
        repeated M44 f_23 = 23;
      }
      optional M37 f_2 = 2;
    }
    optional M27 f_4 = 4;
  }
  repeated M9 f_39 = 39;
  message M10 {
    optional int32 f_0 = 1;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 44;
      E1_CONST_2 = 104;
      E1_CONST_3 = 86;
      E1_CONST_4 = 67;
      E1_CONST_5 = 110;
    }
    repeated E1 f_1 = 2 [packed = true];
    optional double f_2 = 3;
    optional int32 f_3 = 4;
    optional float f_4 = 5;
    optional int32 f_5 = 6;
    message M12 {
      optional double f_0 = 1;
      message M35 {
        optional fixed64 f_0 = 1;
      }
      repeated M35 f_2 = 2;
    }
    repeated M12 f_7 = 7;
    message M28 {
      optional fixed64 f_0 = 2;
      message M34 {
        optional double f_0 = 1;
      }
      repeated M34 f_3 = 3;
    }
    optional M28 f_8 = 8;
    message M32 {
      optional fixed64 f_0 = 2;
      optional int64 f_1 = 3;
      optional int32 f_2 = 4;
      optional float f_3 = 5;
      optional int32 f_4 = 7;
      optional int32 f_5 = 8;
      optional fixed32 f_6 = 9;
      optional float f_7 = 10;
      optional float f_8 = 11;
      optional int32 f_9 = 12;
      optional float f_10 = 13;
      optional int32 f_11 = 14;
      optional fixed64 f_12 = 15;
      optional int64 f_13 = 16;
      optional double f_14 = 17;
      optional double f_15 = 18;
      optional bool f_16 = 19;
      optional int32 f_17 = 20;
      optional double f_18 = 21;
      optional float f_19 = 22;
      optional double f_20 = 23;
      optional fixed64 f_21 = 24;
    }
    optional M32 f_9 = 9;
  }
  optional M10 f_40 = 40;
}
