// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P10.request.Message0;

message Message0 {
  optional fixed64 f_0 = 2;
  optional double f_1 = 3;
  optional fixed64 f_2 = 6;
  optional fixed64 f_3 = 7;
  optional bool f_4 = 8;
  optional fixed64 f_5 = 9;
  optional string f_6 = 11;
  optional string f_7 = 12;
  optional fixed64 f_8 = 13;
  optional double f_9 = 16;
  optional fixed64 f_10 = 17;
  optional string f_11 = 18;
  optional fixed64 f_12 = 19;
  optional int32 f_13 = 20;
  optional fixed64 f_14 = 23;
  optional int32 f_15 = 24;
  optional fixed64 f_16 = 25;
  optional string f_17 = 27;
  repeated int32 f_18 = 28 [packed = true];
  optional fixed64 f_19 = 29;
  optional fixed64 f_20 = 30;
  optional double f_21 = 32;
  optional int32 f_22 = 34;
  optional fixed64 f_23 = 35;
  optional fixed64 f_24 = 36;
  optional fixed64 f_25 = 37;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 69;
    E1_CONST_2 = 77;
    E1_CONST_3 = 103;
    E1_CONST_4 = 74;
    E1_CONST_5 = 59;
  }
  repeated E1 f_26 = 39 [packed = true];
  optional bool f_27 = 40;
  optional int32 f_28 = 42;
  optional int32 f_29 = 44;
  optional double f_30 = 45;
  optional int32 f_31 = 47;
  message M1 {
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 34;
      E2_CONST_2 = 73;
      E2_CONST_3 = 126;
      E2_CONST_4 = 96;
      E2_CONST_5 = 84;
    }
    optional E2 f_0 = 3;
    message M10 {
      optional int32 f_0 = 2;
      optional fixed64 f_1 = 6;
      optional string f_2 = 7;
      optional string f_3 = 9;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 119;
        E4_CONST_2 = 126;
        E4_CONST_3 = 57;
        E4_CONST_4 = 81;
        E4_CONST_5 = 73;
      }
      repeated E4 f_4 = 10 [packed = true];
    }
    optional M10 f_4 = 4;
    message M12 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional fixed32 f_2 = 5;
      optional string f_3 = 6;
      optional string f_4 = 8;
      optional string f_5 = 9;
      optional bool f_6 = 11;
      optional int32 f_7 = 12;
      optional int32 f_8 = 13;
      optional fixed64 f_9 = 15;
      message M27 {
        optional fixed64 f_0 = 1;
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 110;
          E6_CONST_2 = 11;
          E6_CONST_3 = 24;
          E6_CONST_4 = 26;
          E6_CONST_5 = 15;
        }
        optional E6 f_1 = 2;
        optional string f_2 = 4;
        optional fixed64 f_3 = 5;
        optional fixed64 f_4 = 6;
        message M61 {
          optional string f_0 = 1;
          message M70 {
            optional double f_0 = 3;
            message M78 {
              optional int32 f_0 = 1;
            }
            optional M78 f_4 = 4;
          }
          optional M70 f_2 = 2;
          message M72 {
            optional bool f_0 = 2;
          }
          optional M72 f_3 = 3;
        }
        optional M61 f_8 = 8;
      }
      repeated M27 f_16 = 16;
      message M41 {
        optional int32 f_0 = 1;
      }
      optional M41 f_17 = 17;
      message M54 {
        optional int32 f_0 = 1;
      }
      optional M54 f_19 = 19;
      message M55 {
        optional int32 f_0 = 1;
        optional string f_1 = 4;
        optional int32 f_2 = 5;
        optional fixed64 f_3 = 7;
        optional fixed64 f_4 = 9;
      }
      optional M55 f_20 = 20;
      message M58 {
        optional string f_0 = 1;
        optional fixed32 f_1 = 2;
        optional double f_2 = 4;
      }
      optional M58 f_21 = 21;
    }
    optional M12 f_6 = 6;
  }
  repeated M1 f_49 = 49;
  message M2 {
    optional fixed64 f_0 = 1;
    optional string f_1 = 2;
    optional bool f_2 = 3;
    optional string f_3 = 4;
    optional string f_4 = 6;
    optional fixed32 f_5 = 7;
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 84;
      E3_CONST_2 = 58;
      E3_CONST_3 = 50;
      E3_CONST_4 = 98;
      E3_CONST_5 = 73;
    }
    repeated E3 f_6 = 8 [packed = true];
    optional fixed64 f_7 = 9;
    repeated string f_8 = 11;
    optional int64 f_9 = 13;
    optional fixed64 f_10 = 14;
    optional fixed64 f_11 = 15;
    optional fixed64 f_12 = 18;
    optional string f_13 = 20;
    optional int32 f_14 = 21;
    optional string f_15 = 23;
    message M11 {
      optional fixed32 f_0 = 1;
      message M38 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
      }
      optional M38 f_2 = 2;
      message M40 {
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 122;
          E12_CONST_2 = 52;
          E12_CONST_3 = 80;
          E12_CONST_4 = 92;
          E12_CONST_5 = 101;
        }
        repeated E12 f_0 = 2 [packed = true];
        optional int32 f_1 = 3;
      }
      optional M40 f_5 = 5;
      message M50 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
      }
      optional M50 f_7 = 7;
    }
    optional M11 f_25 = 25;
    message M15 {
      optional fixed64 f_0 = 4;
      message M29 {
        optional int32 f_0 = 1;
      }
      optional M29 f_6 = 6;
    }
    repeated M15 f_28 = 28;
    message M23 {
      optional int64 f_0 = 3;
      optional string f_1 = 4;
      optional bool f_2 = 5;
      optional int32 f_3 = 6;
      optional int32 f_4 = 7;
      optional int32 f_5 = 9;
      optional fixed64 f_6 = 11;
      optional fixed64 f_7 = 12;
      optional string f_8 = 13;
      optional int32 f_9 = 14;
      optional fixed64 f_10 = 16;
      optional int32 f_11 = 17;
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 86;
        E5_CONST_2 = 6;
        E5_CONST_3 = 112;
        E5_CONST_4 = 100;
        E5_CONST_5 = 63;
      }
      repeated E5 f_12 = 18 [packed = true];
      optional int64 f_13 = 20;
      optional int32 f_14 = 21;
      optional bytes f_15 = 22;
      optional fixed64 f_16 = 24;
      optional string f_17 = 27;
      optional fixed64 f_18 = 29;
      optional int32 f_19 = 30;
      optional fixed32 f_20 = 31;
      optional bool f_21 = 33;
      optional string f_22 = 35;
      optional string f_23 = 37;
      optional uint64 f_24 = 38;
      optional string f_25 = 39;
      optional string f_26 = 40;
      optional fixed32 f_27 = 42;
      optional int32 f_28 = 43;
      optional fixed64 f_29 = 45;
      optional bool f_30 = 48;
      optional bool f_31 = 50;
      optional bool f_32 = 52;
      optional fixed32 f_33 = 53;
      message M24 {
        optional fixed32 f_0 = 1;
        message M65 {
          optional int32 f_0 = 2;
          message M69 {
            enum E16 {
              E16_UNSPECIFIED = 0;
              E16_CONST_1 = 107;
              E16_CONST_2 = 9;
              E16_CONST_3 = 36;
              E16_CONST_4 = 32;
              E16_CONST_5 = 117;
            }
            optional E16 f_0 = 1;
            optional int32 f_1 = 2;
            optional fixed64 f_2 = 4;
            optional double f_3 = 5;
            optional string f_4 = 8;
          }
          optional M69 f_3 = 3;
        }
        repeated M65 f_3 = 3;
      }
      optional M24 f_54 = 54;
      message M32 {
        optional int32 f_0 = 2;
        optional bool f_1 = 4;
        optional fixed64 f_2 = 5;
        optional string f_3 = 6;
        optional string f_4 = 8;
      }
      optional M32 f_55 = 55;
    }
    optional M23 f_30 = 30;
  }
  repeated M2 f_50 = 50;
  message M3 {
    optional int32 f_0 = 1;
    optional string f_1 = 3;
    optional int32 f_2 = 5;
    optional int32 f_3 = 6;
    optional bool f_4 = 7;
    message M13 {
      optional string f_0 = 1;
      optional int32 f_1 = 2;
      message M25 {
        optional fixed64 f_0 = 1;
      }
      optional M25 f_3 = 3;
    }
    optional M13 f_8 = 8;
    message M19 {
      optional int32 f_0 = 2;
      message M31 {
        optional string f_0 = 1;
      }
      repeated M31 f_3 = 3;
      message M36 {
        optional int32 f_0 = 2;
      }
      optional M36 f_4 = 4;
      message M51 {
        optional int32 f_0 = 1;
        optional int64 f_1 = 3;
      }
      repeated M51 f_5 = 5;
    }
    optional M19 f_9 = 9;
  }
  optional M3 f_51 = 51;
  message M4 {
    optional int32 f_0 = 1;
  }
  optional M4 f_52 = 52;
  message M5 {
    optional int32 f_0 = 2;
    message M14 {
      optional int32 f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 4;
      message M52 {
        optional string f_0 = 1;
      }
      repeated M52 f_5 = 5;
    }
    optional M14 f_3 = 3;
  }
  optional M5 f_53 = 53;
  message M6 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional uint64 f_2 = 4;
    optional bool f_3 = 5;
    optional int32 f_4 = 6;
    optional string f_5 = 7;
    message M18 {
      optional double f_0 = 3;
    }
    optional M18 f_8 = 8;
    message M20 {
      optional string f_0 = 1;
      message M28 {
        optional int32 f_0 = 1;
      }
      repeated M28 f_2 = 2;
      message M43 {
        optional double f_0 = 1;
        optional int32 f_1 = 3;
        optional string f_2 = 5;
      }
      optional M43 f_3 = 3;
      message M47 {
        optional uint64 f_0 = 1;
      }
      optional M47 f_6 = 6;
    }
    repeated M20 f_10 = 10;
  }
  optional M6 f_54 = 54;
  message M7 {
    optional int32 f_0 = 1;
    message M9 {
      optional int32 f_0 = 1;
      message M30 {
        optional string f_0 = 2;
        message M67 {
          optional int32 f_0 = 4;
          optional fixed64 f_1 = 6;
          optional fixed64 f_2 = 7;
          optional int32 f_3 = 10;
          optional double f_4 = 12;
          optional int32 f_5 = 13;
          optional fixed64 f_6 = 15;
          optional int32 f_7 = 17;
          optional string f_8 = 18;
          optional fixed64 f_9 = 19;
          optional fixed32 f_10 = 20;
          optional string f_11 = 22;
          repeated int32 f_12 = 23 [packed = true];
          optional int32 f_13 = 24;
          optional int32 f_14 = 25;
          optional string f_15 = 26;
          optional fixed64 f_16 = 28;
          optional fixed64 f_17 = 30;
          optional bool f_18 = 31;
          optional int32 f_19 = 34;
          optional string f_20 = 36;
          optional bool f_21 = 41;
          optional fixed32 f_22 = 42;
          optional string f_23 = 43;
          optional bytes f_24 = 45;
          optional fixed64 f_25 = 47;
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 86;
            E14_CONST_2 = 18;
            E14_CONST_3 = 88;
            E14_CONST_4 = 26;
            E14_CONST_5 = 70;
          }
          repeated E14 f_26 = 48 [packed = true];
          optional int32 f_27 = 50;
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 35;
            E15_CONST_2 = 62;
            E15_CONST_3 = 8;
            E15_CONST_4 = 46;
            E15_CONST_5 = 55;
          }
          optional E15 f_28 = 51;
          optional fixed64 f_29 = 52;
          optional fixed64 f_30 = 53;
          optional int32 f_31 = 54;
          optional string f_32 = 57;
          optional int32 f_33 = 59;
          optional int32 f_34 = 61;
        }
        optional M67 f_4 = 4;
      }
      repeated M30 f_2 = 2;
      message M49 {
        optional fixed64 f_0 = 2;
      }
      optional M49 f_5 = 5;
    }
    optional M9 f_2 = 2;
    message M16 {
      optional string f_0 = 1;
      message M34 {
        optional int32 f_0 = 2;
        message M66 {
          optional int64 f_0 = 2;
          message M73 {
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 46;
              E17_CONST_2 = 84;
              E17_CONST_3 = 32;
              E17_CONST_4 = 20;
              E17_CONST_5 = 104;
            }
            optional E17 f_0 = 1;
            optional int32 f_1 = 2;
            message M75 {
              optional string f_0 = 1;
              optional string f_1 = 2;
              optional string f_2 = 5;
            }
            optional M75 f_5 = 5;
            message M76 {
              enum E20 {
                E20_UNSPECIFIED = 0;
                E20_CONST_1 = 108;
                E20_CONST_2 = 93;
                E20_CONST_3 = 83;
                E20_CONST_4 = 4;
                E20_CONST_5 = 84;
              }
              repeated E20 f_0 = 1 [packed = true];
            }
            optional M76 f_7 = 7;
          }
          optional M73 f_3 = 3;
        }
        optional M66 f_3 = 3;
      }
      optional M34 f_2 = 2;
      message M35 {
        optional fixed64 f_0 = 1;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 73;
          E7_CONST_2 = 44;
          E7_CONST_3 = 85;
          E7_CONST_4 = 31;
          E7_CONST_5 = 71;
        }
        repeated E7 f_1 = 2 [packed = true];
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 124;
          E8_CONST_2 = 72;
          E8_CONST_3 = 35;
          E8_CONST_4 = 119;
          E8_CONST_5 = 101;
        }
        optional E8 f_2 = 4;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 115;
          E9_CONST_2 = 42;
          E9_CONST_3 = 104;
          E9_CONST_4 = 81;
          E9_CONST_5 = 116;
        }
        repeated E9 f_3 = 5 [packed = true];
        optional int32 f_4 = 7;
        optional uint64 f_5 = 10;
        optional int32 f_6 = 11;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 23;
          E10_CONST_2 = 27;
          E10_CONST_3 = 26;
          E10_CONST_4 = 71;
          E10_CONST_5 = 49;
        }
        repeated E10 f_7 = 13 [packed = true];
        optional string f_8 = 14;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 66;
          E11_CONST_2 = 110;
          E11_CONST_3 = 33;
          E11_CONST_4 = 84;
          E11_CONST_5 = 120;
        }
        repeated E11 f_9 = 15 [packed = true];
        optional bool f_10 = 16;
        optional fixed64 f_11 = 18;
        message M60 {
          optional int32 f_0 = 1;
          optional int64 f_1 = 2;
          optional string f_2 = 3;
          message M74 {
            optional string f_0 = 2;
            optional fixed64 f_1 = 3;
            optional int32 f_2 = 4;
            optional int32 f_3 = 5;
            optional bool f_4 = 8;
            optional int32 f_5 = 10;
            optional fixed32 f_6 = 12;
            optional bool f_7 = 13;
            optional double f_8 = 14;
            optional fixed64 f_9 = 16;
            optional int32 f_10 = 18;
            optional int32 f_11 = 20;
            enum E18 {
              E18_UNSPECIFIED = 0;
              E18_CONST_1 = 87;
              E18_CONST_2 = 78;
              E18_CONST_3 = 47;
              E18_CONST_4 = 13;
              E18_CONST_5 = 16;
            }
            optional E18 f_12 = 21;
            optional int64 f_13 = 23;
            optional fixed64 f_14 = 27;
            optional fixed32 f_15 = 28;
            optional bool f_16 = 29;
            optional fixed64 f_17 = 30;
            optional fixed32 f_18 = 33;
            optional string f_19 = 34;
            optional fixed64 f_20 = 36;
            optional int32 f_21 = 37;
            optional fixed64 f_22 = 39;
            optional fixed64 f_23 = 41;
            optional fixed32 f_24 = 44;
            enum E19 {
              E19_UNSPECIFIED = 0;
              E19_CONST_1 = 46;
              E19_CONST_2 = 20;
              E19_CONST_3 = 43;
              E19_CONST_4 = 13;
              E19_CONST_5 = 110;
            }
            repeated E19 f_25 = 45 [packed = true];
            optional int32 f_26 = 46;
            optional fixed64 f_27 = 48;
            optional fixed64 f_28 = 50;
            optional string f_29 = 51;
            optional double f_30 = 53;
            optional fixed64 f_31 = 54;
            optional bool f_32 = 55;
            optional fixed64 f_33 = 56;
            optional string f_34 = 58;
            message M77 {
              optional string f_0 = 2;
              optional fixed64 f_1 = 4;
              enum E21 {
                E21_UNSPECIFIED = 0;
                E21_CONST_1 = 120;
                E21_CONST_2 = 61;
                E21_CONST_3 = 119;
                E21_CONST_4 = 6;
                E21_CONST_5 = 23;
              }
              optional E21 f_2 = 6;
              optional int32 f_3 = 8;
            }
            optional M77 f_59 = 59;
          }
          optional M74 f_4 = 4;
        }
        optional M60 f_19 = 19;
        message M63 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 2;
          optional string f_2 = 3;
          optional string f_3 = 4;
          optional fixed64 f_4 = 7;
          message M71 {
            optional fixed64 f_0 = 1;
          }
          optional M71 f_11 = 11;
        }
        optional M63 f_21 = 21;
      }
      optional M35 f_3 = 3;
      message M45 {
        optional string f_0 = 2;
        message M64 {
          repeated int32 f_0 = 1 [packed = true];
          optional fixed32 f_1 = 2;
          optional fixed32 f_2 = 3;
          optional double f_3 = 4;
          optional fixed32 f_4 = 5;
          optional fixed64 f_5 = 6;
        }
        optional M64 f_5 = 5;
      }
      optional M45 f_4 = 4;
      message M53 {
        optional double f_0 = 1;
      }
      optional M53 f_5 = 5;
    }
    optional M16 f_4 = 4;
    message M17 {
      optional int32 f_0 = 3;
      message M46 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 3;
        optional fixed32 f_2 = 5;
        optional fixed64 f_3 = 6;
        optional fixed64 f_4 = 7;
        optional bool f_5 = 8;
        optional int32 f_6 = 9;
        optional int32 f_7 = 11;
        optional int32 f_8 = 13;
      }
      repeated M46 f_5 = 5;
      message M48 {
        repeated string f_0 = 2;
      }
      optional M48 f_7 = 7;
      message M56 {
        optional fixed64 f_0 = 2;
      }
      optional M56 f_8 = 8;
    }
    optional M17 f_5 = 5;
    message M21 {
      optional string f_0 = 2;
      message M57 {
        optional bool f_0 = 1;
        optional int32 f_1 = 5;
        optional bool f_2 = 6;
        optional int32 f_3 = 8;
      }
      optional M57 f_4 = 4;
    }
    optional M21 f_7 = 7;
  }
  repeated M7 f_56 = 56;
  message M8 {
    optional bool f_0 = 1;
    message M22 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 2;
      optional string f_2 = 4;
      optional bool f_3 = 5;
      message M26 {
        optional int32 f_0 = 1;
        optional int32 f_1 = 2;
      }
      repeated M26 f_7 = 7;
      message M33 {
        optional int32 f_0 = 1;
        optional fixed64 f_1 = 2;
      }
      optional M33 f_10 = 10;
      message M37 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 2;
        optional fixed64 f_2 = 3;
        optional int32 f_3 = 4;
        optional fixed64 f_4 = 5;
        optional int32 f_5 = 7;
      }
      repeated M37 f_11 = 11;
      message M39 {
        optional string f_0 = 1;
      }
      optional M39 f_12 = 12;
      message M42 {
        optional int32 f_0 = 1;
        message M62 {
          repeated string f_0 = 3;
          optional fixed32 f_1 = 4;
        }
        optional M62 f_2 = 2;
      }
      optional M42 f_13 = 13;
      message M44 {
        optional string f_0 = 3;
        message M59 {
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 25;
            E13_CONST_2 = 45;
            E13_CONST_3 = 57;
            E13_CONST_4 = 6;
            E13_CONST_5 = 78;
          }
          repeated E13 f_0 = 1 [packed = true];
          message M68 {
            optional fixed64 f_0 = 1;
          }
          optional M68 f_2 = 2;
        }
        optional M59 f_6 = 6;
      }
      repeated M44 f_15 = 15;
    }
    optional M22 f_2 = 2;
  }
  optional M8 f_59 = 59;
}
