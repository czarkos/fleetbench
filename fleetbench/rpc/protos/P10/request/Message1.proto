// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.rpc.P10.request.Message1;

message Message1 {
  optional string f_0 = 2;
  optional fixed64 f_1 = 3;
  optional string f_2 = 6;
  optional fixed64 f_3 = 7;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 92;
    E1_CONST_2 = 58;
    E1_CONST_3 = 118;
    E1_CONST_4 = 18;
    E1_CONST_5 = 95;
  }
  optional E1 f_4 = 9;
  optional int32 f_5 = 10;
  optional int32 f_6 = 11;
  enum E2 {
    E2_UNSPECIFIED = 0;
    E2_CONST_1 = 126;
    E2_CONST_2 = 125;
    E2_CONST_3 = 74;
    E2_CONST_4 = 4;
    E2_CONST_5 = 44;
  }
  optional E2 f_7 = 12;
  optional string f_8 = 15;
  optional fixed64 f_9 = 19;
  optional bool f_10 = 20;
  repeated int32 f_11 = 21 [packed = true];
  optional fixed64 f_12 = 22;
  optional fixed32 f_13 = 24;
  optional fixed64 f_14 = 26;
  optional string f_15 = 28;
  enum E3 {
    E3_UNSPECIFIED = 0;
    E3_CONST_1 = 64;
    E3_CONST_2 = 52;
    E3_CONST_3 = 33;
    E3_CONST_4 = 83;
    E3_CONST_5 = 96;
  }
  repeated E3 f_16 = 29 [packed = true];
  optional int32 f_17 = 30;
  optional int32 f_18 = 32;
  optional int32 f_19 = 33;
  optional string f_20 = 34;
  enum E4 {
    E4_UNSPECIFIED = 0;
    E4_CONST_1 = 35;
    E4_CONST_2 = 31;
    E4_CONST_3 = 75;
    E4_CONST_4 = 24;
    E4_CONST_5 = 126;
  }
  repeated E4 f_21 = 35 [packed = true];
  optional int32 f_22 = 37;
  optional int32 f_23 = 39;
  optional bool f_24 = 40;
  optional fixed64 f_25 = 41;
  optional double f_26 = 42;
  optional bool f_27 = 44;
  optional bool f_28 = 46;
  optional int32 f_29 = 47;
  optional fixed64 f_30 = 49;
  optional int32 f_31 = 50;
  message M1 {
    optional fixed64 f_0 = 1;
    optional int32 f_1 = 2;
  }
  optional M1 f_52 = 52;
  message M2 {
    optional string f_0 = 1;
  }
  optional M2 f_53 = 53;
  message M3 {
    optional int32 f_0 = 2;
    message M34 {
      optional fixed64 f_0 = 1;
      message M52 {
        optional string f_0 = 1;
      }
      optional M52 f_4 = 4;
    }
    repeated M34 f_5 = 5;
  }
  repeated M3 f_54 = 54;
  message M4 {
    optional string f_0 = 2;
    optional string f_1 = 3;
    optional fixed32 f_2 = 4;
    message M31 {
      optional fixed64 f_0 = 2;
      message M59 {
        optional string f_0 = 3;
        message M88 {
          optional fixed32 f_0 = 2;
          optional bool f_1 = 4;
          optional fixed64 f_2 = 5;
          optional fixed64 f_3 = 6;
          optional string f_4 = 8;
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 59;
            E15_CONST_2 = 68;
            E15_CONST_3 = 4;
            E15_CONST_4 = 102;
            E15_CONST_5 = 2;
          }
          optional E15 f_5 = 12;
        }
        repeated M88 f_4 = 4;
      }
      optional M59 f_6 = 6;
      message M75 {
        optional double f_0 = 3;
        message M77 {
          optional fixed64 f_0 = 2;
          optional string f_1 = 3;
          optional fixed64 f_2 = 4;
          enum E12 {
            E12_UNSPECIFIED = 0;
            E12_CONST_1 = 85;
            E12_CONST_2 = 106;
            E12_CONST_3 = 21;
            E12_CONST_4 = 11;
            E12_CONST_5 = 124;
          }
          optional E12 f_3 = 7;
        }
        optional M77 f_4 = 4;
      }
      optional M75 f_7 = 7;
    }
    optional M31 f_6 = 6;
    message M36 {
      optional fixed64 f_0 = 2;
      message M61 {
        optional fixed64 f_0 = 1;
      }
      optional M61 f_4 = 4;
    }
    repeated M36 f_7 = 7;
  }
  optional M4 f_55 = 55;
  message M5 {
    optional int32 f_0 = 1;
    message M26 {
      optional fixed32 f_0 = 1;
      optional bool f_1 = 3;
      optional int32 f_2 = 4;
      optional int32 f_3 = 6;
      optional double f_4 = 7;
      optional int32 f_5 = 8;
      message M56 {
        optional fixed64 f_0 = 1;
      }
      optional M56 f_10 = 10;
      message M62 {
        optional string f_0 = 1;
        optional fixed64 f_1 = 3;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 7;
          E11_CONST_2 = 107;
          E11_CONST_3 = 34;
          E11_CONST_4 = 31;
          E11_CONST_5 = 82;
        }
        repeated E11 f_2 = 5 [packed = true];
        optional fixed64 f_3 = 7;
        optional int32 f_4 = 8;
        message M87 {
          optional int32 f_0 = 2;
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 106;
            E14_CONST_2 = 75;
            E14_CONST_3 = 95;
            E14_CONST_4 = 15;
            E14_CONST_5 = 65;
          }
          optional E14 f_1 = 3;
          optional fixed32 f_2 = 4;
          optional int32 f_3 = 5;
          optional int32 f_4 = 6;
          optional fixed64 f_5 = 7;
          message M99 {
            optional string f_0 = 1;
            optional string f_1 = 3;
            optional string f_2 = 5;
            optional fixed64 f_3 = 6;
            optional int32 f_4 = 7;
            optional fixed64 f_5 = 8;
            optional int32 f_6 = 9;
            optional string f_7 = 11;
            enum E16 {
              E16_UNSPECIFIED = 0;
              E16_CONST_1 = 26;
              E16_CONST_2 = 115;
              E16_CONST_3 = 63;
              E16_CONST_4 = 60;
              E16_CONST_5 = 15;
            }
            repeated E16 f_8 = 12 [packed = true];
            optional double f_9 = 13;
            optional fixed32 f_10 = 14;
            optional bool f_11 = 15;
            optional int32 f_12 = 16;
            optional string f_13 = 18;
            optional bool f_14 = 19;
            optional fixed64 f_15 = 21;
            optional bool f_16 = 23;
            optional string f_17 = 24;
            optional fixed64 f_18 = 25;
            optional fixed32 f_19 = 27;
            optional int32 f_20 = 29;
            optional string f_21 = 30;
            optional double f_22 = 33;
            optional fixed64 f_23 = 34;
            optional fixed64 f_24 = 36;
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 34;
              E17_CONST_2 = 65;
              E17_CONST_3 = 21;
              E17_CONST_4 = 17;
              E17_CONST_5 = 13;
            }
            optional E17 f_25 = 38;
            enum E18 {
              E18_UNSPECIFIED = 0;
              E18_CONST_1 = 82;
              E18_CONST_2 = 36;
              E18_CONST_3 = 103;
              E18_CONST_4 = 29;
              E18_CONST_5 = 2;
            }
            repeated E18 f_26 = 39 [packed = true];
            optional int64 f_27 = 40;
            optional int32 f_28 = 41;
            optional string f_29 = 43;
            optional int32 f_30 = 44;
            optional fixed32 f_31 = 45;
            enum E19 {
              E19_UNSPECIFIED = 0;
              E19_CONST_1 = 115;
              E19_CONST_2 = 16;
              E19_CONST_3 = 42;
              E19_CONST_4 = 109;
              E19_CONST_5 = 68;
            }
            repeated E19 f_32 = 48 [packed = true];
            optional uint64 f_33 = 49;
          }
          repeated M99 f_8 = 8;
        }
        repeated M87 f_9 = 9;
      }
      optional M62 f_12 = 12;
      message M73 {
        optional fixed64 f_0 = 2;
        optional bool f_1 = 3;
        optional int32 f_2 = 4;
      }
      optional M73 f_14 = 14;
    }
    optional M26 f_4 = 4;
    message M43 {
      optional bool f_0 = 2;
      message M48 {
        optional fixed64 f_0 = 2;
        optional uint64 f_1 = 3;
        optional int32 f_2 = 5;
        optional string f_3 = 6;
      }
      repeated M48 f_3 = 3;
    }
    optional M43 f_5 = 5;
  }
  optional M5 f_57 = 57;
  message M6 {
    repeated string f_0 = 1;
  }
  optional M6 f_59 = 59;
  message M7 {
    enum E5 {
      E5_UNSPECIFIED = 0;
      E5_CONST_1 = 116;
      E5_CONST_2 = 30;
      E5_CONST_3 = 76;
      E5_CONST_4 = 22;
      E5_CONST_5 = 7;
    }
    optional E5 f_0 = 1;
    optional uint64 f_1 = 2;
    message M21 {
      optional fixed64 f_0 = 1;
      optional string f_1 = 2;
      optional bool f_2 = 4;
      optional int32 f_3 = 6;
      message M60 {
        optional fixed64 f_0 = 2;
        optional fixed64 f_1 = 4;
        optional int32 f_2 = 5;
        optional string f_3 = 6;
      }
      repeated M60 f_7 = 7;
      message M64 {
        optional double f_0 = 1;
        optional int32 f_1 = 3;
        optional fixed32 f_2 = 5;
        optional string f_3 = 7;
        message M84 {
          optional fixed64 f_0 = 2;
          optional fixed64 f_1 = 3;
        }
        optional M84 f_8 = 8;
      }
      optional M64 f_8 = 8;
    }
    optional M21 f_3 = 3;
    message M22 {
      optional fixed64 f_0 = 1;
      optional int32 f_1 = 3;
    }
    repeated M22 f_7 = 7;
    message M32 {
      repeated int32 f_0 = 1 [packed = true];
    }
    repeated M32 f_8 = 8;
    message M37 {
      optional string f_0 = 2;
    }
    optional M37 f_9 = 9;
  }
  optional M7 f_61 = 61;
  message M8 {
    optional string f_0 = 1;
    message M29 {
      optional bytes f_0 = 2;
      optional string f_1 = 4;
      optional double f_2 = 5;
    }
    optional M29 f_2 = 2;
    message M47 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional fixed64 f_2 = 3;
      optional double f_3 = 5;
      message M50 {
        optional fixed64 f_0 = 1;
      }
      repeated M50 f_7 = 7;
      message M58 {
        optional int32 f_0 = 1;
        optional string f_1 = 2;
        optional fixed64 f_2 = 3;
        optional string f_3 = 5;
      }
      repeated M58 f_8 = 8;
    }
    optional M47 f_5 = 5;
  }
  optional M8 f_62 = 62;
  message M9 {
    optional string f_0 = 1;
    message M46 {
      optional int32 f_0 = 1;
    }
    optional M46 f_3 = 3;
  }
  repeated M9 f_63 = 63;
  message M10 {
    optional fixed64 f_0 = 1;
    message M42 {
      optional fixed64 f_0 = 1;
    }
    optional M42 f_2 = 2;
  }
  optional M10 f_64 = 64;
  message M11 {
    optional fixed64 f_0 = 1;
    message M23 {
      optional string f_0 = 2;
      optional double f_1 = 5;
      optional string f_2 = 7;
      optional fixed64 f_3 = 8;
    }
    repeated M23 f_2 = 2;
  }
  optional M11 f_65 = 65;
  message M12 {
    optional int32 f_0 = 1;
    optional fixed64 f_1 = 2;
    optional int32 f_2 = 4;
    optional fixed32 f_3 = 6;
    message M24 {
      optional int32 f_0 = 1;
      message M51 {
        optional int32 f_0 = 2;
      }
      optional M51 f_3 = 3;
    }
    optional M24 f_7 = 7;
    message M38 {
      optional fixed64 f_0 = 1;
      message M54 {
        optional int64 f_0 = 2;
        optional int64 f_1 = 3;
        optional bool f_2 = 4;
        optional int32 f_3 = 5;
        optional string f_4 = 6;
        optional string f_5 = 7;
        optional fixed64 f_6 = 8;
        optional fixed64 f_7 = 9;
        optional double f_8 = 10;
        optional int32 f_9 = 11;
        optional fixed64 f_10 = 15;
        optional fixed64 f_11 = 16;
        optional fixed64 f_12 = 17;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 71;
          E10_CONST_2 = 92;
          E10_CONST_3 = 100;
          E10_CONST_4 = 44;
          E10_CONST_5 = 111;
        }
        optional E10 f_13 = 18;
        optional string f_14 = 20;
        optional string f_15 = 21;
        optional double f_16 = 24;
        optional fixed64 f_17 = 25;
        optional string f_18 = 26;
        optional int32 f_19 = 27;
        optional int32 f_20 = 28;
        optional bool f_21 = 31;
        optional int32 f_22 = 32;
        optional string f_23 = 34;
        optional int32 f_24 = 35;
        optional string f_25 = 36;
        optional fixed32 f_26 = 37;
        optional int32 f_27 = 39;
        optional int32 f_28 = 42;
        optional double f_29 = 43;
        optional int32 f_30 = 44;
      }
      optional M54 f_2 = 2;
      message M74 {
        optional string f_0 = 1;
      }
      repeated M74 f_4 = 4;
    }
    optional M38 f_8 = 8;
  }
  optional M12 f_66 = 66;
  message M13 {
    optional string f_0 = 1;
    message M27 {
      optional fixed32 f_0 = 2;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 39;
        E7_CONST_2 = 65;
        E7_CONST_3 = 117;
        E7_CONST_4 = 55;
        E7_CONST_5 = 43;
      }
      optional E7 f_1 = 3;
      optional fixed64 f_2 = 5;
      message M70 {
        optional string f_0 = 2;
        message M85 {
          optional fixed64 f_0 = 1;
          message M95 {
            optional string f_0 = 1;
            optional fixed64 f_1 = 3;
            optional int32 f_2 = 5;
            optional string f_3 = 7;
            message M101 {
              optional int32 f_0 = 1;
              optional fixed64 f_1 = 2;
            }
            optional M101 f_8 = 8;
          }
          repeated M95 f_4 = 4;
        }
        repeated M85 f_4 = 4;
      }
      optional M70 f_6 = 6;
      message M71 {
        optional double f_0 = 3;
        message M81 {
          optional string f_0 = 2;
          optional fixed32 f_1 = 4;
          optional string f_2 = 6;
          optional fixed64 f_3 = 8;
        }
        repeated M81 f_4 = 4;
      }
      optional M71 f_7 = 7;
    }
    optional M27 f_2 = 2;
  }
  optional M13 f_67 = 67;
  message M14 {
    optional int32 f_0 = 1;
    message M40 {
      optional bool f_0 = 1;
    }
    repeated M40 f_5 = 5;
  }
  optional M14 f_69 = 69;
  message M15 {
    optional int32 f_0 = 3;
    optional int32 f_1 = 5;
    optional string f_2 = 6;
    optional fixed64 f_3 = 7;
  }
  repeated M15 f_71 = 71;
  message M16 {
    optional bool f_0 = 1;
  }
  optional M16 f_72 = 72;
  message M17 {
    optional string f_0 = 2;
    message M28 {
      optional fixed64 f_0 = 2;
      message M55 {
        optional double f_0 = 1;
        message M86 {
          optional bool f_0 = 2;
        }
        optional M86 f_2 = 2;
        message M94 {
          optional string f_0 = 1;
        }
        repeated M94 f_3 = 3;
      }
      optional M55 f_3 = 3;
      message M67 {
        optional fixed32 f_0 = 2;
      }
      optional M67 f_4 = 4;
      message M69 {
        optional bool f_0 = 2;
        optional bytes f_1 = 4;
        optional fixed64 f_2 = 7;
        message M91 {
          optional bool f_0 = 2;
        }
        optional M91 f_8 = 8;
      }
      optional M69 f_6 = 6;
    }
    optional M28 f_3 = 3;
    message M30 {
      optional fixed64 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 4;
      message M63 {
        optional int32 f_0 = 4;
      }
      optional M63 f_6 = 6;
    }
    optional M30 f_6 = 6;
    message M33 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 109;
        E8_CONST_2 = 75;
        E8_CONST_3 = 31;
        E8_CONST_4 = 59;
        E8_CONST_5 = 101;
      }
      repeated E8 f_0 = 2 [packed = true];
    }
    optional M33 f_7 = 7;
    message M41 {
      optional int32 f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 4;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 1;
        E9_CONST_2 = 45;
        E9_CONST_3 = 42;
        E9_CONST_4 = 113;
        E9_CONST_5 = 14;
      }
      repeated E9 f_3 = 5 [packed = true];
      message M68 {
        optional string f_0 = 1;
        optional fixed32 f_1 = 2;
        optional double f_2 = 4;
        message M80 {
          optional int32 f_0 = 1;
          message M97 {
            optional fixed64 f_0 = 2;
          }
          optional M97 f_2 = 2;
        }
        optional M80 f_6 = 6;
        message M90 {
          optional bool f_0 = 1;
          message M96 {
            optional fixed32 f_0 = 2;
            optional int64 f_1 = 6;
            optional string f_2 = 7;
            optional double f_3 = 9;
            message M100 {
              optional bool f_0 = 1;
            }
            repeated M100 f_10 = 10;
            message M102 {
              optional string f_0 = 2;
              optional bool f_1 = 3;
              optional bool f_2 = 4;
            }
            optional M102 f_11 = 11;
            message M103 {
              optional string f_0 = 2;
              optional fixed64 f_1 = 4;
              enum E20 {
                E20_UNSPECIFIED = 0;
                E20_CONST_1 = 109;
                E20_CONST_2 = 41;
                E20_CONST_3 = 25;
                E20_CONST_4 = 27;
                E20_CONST_5 = 66;
              }
              repeated E20 f_2 = 5 [packed = true];
              optional string f_3 = 8;
              optional string f_4 = 9;
              optional double f_5 = 11;
              optional double f_6 = 12;
              optional int32 f_7 = 13;
              optional string f_8 = 16;
              optional int32 f_9 = 17;
              enum E21 {
                E21_UNSPECIFIED = 0;
                E21_CONST_1 = 80;
                E21_CONST_2 = 76;
                E21_CONST_3 = 98;
                E21_CONST_4 = 2;
                E21_CONST_5 = 101;
              }
              optional E21 f_10 = 18;
              optional string f_11 = 20;
              optional int32 f_12 = 21;
              optional fixed64 f_13 = 23;
              optional int32 f_14 = 24;
              optional uint64 f_15 = 25;
              enum E22 {
                E22_UNSPECIFIED = 0;
                E22_CONST_1 = 112;
                E22_CONST_2 = 75;
                E22_CONST_3 = 50;
                E22_CONST_4 = 4;
                E22_CONST_5 = 76;
              }
              optional E22 f_16 = 26;
              optional string f_17 = 27;
              optional int32 f_18 = 28;
              optional double f_19 = 29;
              optional fixed64 f_20 = 30;
              optional int32 f_21 = 31;
              optional fixed64 f_22 = 32;
              optional int32 f_23 = 34;
              optional fixed64 f_24 = 35;
              optional int32 f_25 = 36;
              optional fixed64 f_26 = 37;
              optional bool f_27 = 38;
              optional string f_28 = 39;
              optional int32 f_29 = 41;
              optional double f_30 = 43;
              optional fixed32 f_31 = 44;
              optional fixed64 f_32 = 46;
              optional fixed32 f_33 = 47;
            }
            optional M103 f_13 = 13;
          }
          repeated M96 f_3 = 3;
          message M98 {
            optional fixed64 f_0 = 1;
            optional fixed64 f_1 = 3;
            optional double f_2 = 5;
          }
          repeated M98 f_4 = 4;
        }
        repeated M90 f_7 = 7;
        message M93 {
          optional int32 f_0 = 3;
        }
        optional M93 f_9 = 9;
      }
      optional M68 f_7 = 7;
    }
    repeated M41 f_8 = 8;
  }
  repeated M17 f_73 = 73;
  message M18 {
    optional int32 f_0 = 2;
    optional int32 f_1 = 3;
    optional int32 f_2 = 5;
    message M44 {
      optional fixed32 f_0 = 2;
      optional fixed64 f_1 = 3;
      optional int32 f_2 = 5;
      optional bool f_3 = 7;
      optional uint64 f_4 = 8;
      optional int32 f_5 = 11;
      optional bool f_6 = 15;
    }
    optional M44 f_6 = 6;
  }
  optional M18 f_74 = 74;
  message M19 {
    optional string f_0 = 1;
    message M35 {
      optional fixed64 f_0 = 1;
      optional fixed32 f_1 = 2;
      optional string f_2 = 4;
      optional fixed64 f_3 = 5;
      message M65 {
        optional bool f_0 = 1;
        message M92 {
          optional bool f_0 = 2;
          optional fixed64 f_1 = 4;
          optional int32 f_2 = 6;
        }
        repeated M92 f_2 = 2;
      }
      optional M65 f_9 = 9;
    }
    optional M35 f_4 = 4;
    message M45 {
      optional string f_0 = 2;
      message M49 {
        optional int32 f_0 = 1;
        message M79 {
          optional int32 f_0 = 1;
          optional fixed64 f_1 = 2;
        }
        optional M79 f_2 = 2;
        message M82 {
          optional fixed32 f_0 = 2;
          optional fixed32 f_1 = 3;
          optional bool f_2 = 4;
        }
        repeated M82 f_3 = 3;
      }
      repeated M49 f_4 = 4;
      message M53 {
        optional double f_0 = 1;
        optional int32 f_1 = 2;
      }
      optional M53 f_5 = 5;
      message M57 {
        optional fixed64 f_0 = 3;
        message M76 {
          optional fixed64 f_0 = 1;
        }
        optional M76 f_4 = 4;
        message M78 {
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 72;
            E13_CONST_2 = 48;
            E13_CONST_3 = 22;
            E13_CONST_4 = 28;
            E13_CONST_5 = 110;
          }
          repeated E13 f_0 = 2 [packed = true];
          optional int32 f_1 = 3;
          optional fixed64 f_2 = 4;
          optional string f_3 = 5;
          optional string f_4 = 6;
        }
        optional M78 f_6 = 6;
      }
      optional M57 f_6 = 6;
      message M72 {
        optional bool f_0 = 1;
      }
      optional M72 f_7 = 7;
    }
    optional M45 f_5 = 5;
  }
  optional M19 f_76 = 76;
  message M20 {
    optional string f_0 = 1;
    message M25 {
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 57;
        E6_CONST_2 = 5;
        E6_CONST_3 = 88;
        E6_CONST_4 = 45;
        E6_CONST_5 = 101;
      }
      repeated E6 f_0 = 1 [packed = true];
      optional string f_1 = 2;
      optional int32 f_2 = 3;
      message M66 {
        repeated int32 f_0 = 1 [packed = true];
        optional string f_1 = 2;
        optional string f_2 = 3;
        optional int32 f_3 = 4;
        message M83 {
          optional fixed64 f_0 = 2;
        }
        repeated M83 f_5 = 5;
        message M89 {
          optional int32 f_0 = 1;
        }
        optional M89 f_8 = 8;
      }
      repeated M66 f_4 = 4;
    }
    optional M25 f_2 = 2;
    message M39 {
      optional string f_0 = 1;
      optional fixed32 f_1 = 3;
      optional string f_2 = 4;
      optional int32 f_3 = 5;
    }
    optional M39 f_4 = 4;
  }
  optional M20 f_78 = 78;
}
