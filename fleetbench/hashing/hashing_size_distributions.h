// Generated by //fleetbench/updater/hashing:extract_distributions
// DO NOT EDIT!

// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef THIRD_PARTY_FLEETBENCH_HASHING_SIZE_DISTRIBUTIONS_H_
#define THIRD_PARTY_FLEETBENCH_HASHING_SIZE_DISTRIBUTIONS_H_

#include "absl/strings/string_view.h"
#include "absl/types/span.h"

namespace fleetbench {
namespace hashing {

static constexpr double Computecrc32cGoogleB[] = {
#include "distributions/Computecrc32cGoogleB.csv"
};
static constexpr double Computecrc32cGoogleC[] = {
#include "distributions/Computecrc32cGoogleC.csv"
};
static constexpr double Computecrc32cGoogleD[] = {
#include "distributions/Computecrc32cGoogleD.csv"
};
static constexpr double Computecrc32cGoogleF[] = {
#include "distributions/Computecrc32cGoogleF.csv"
};
static constexpr double Computecrc32cGoogleQ[] = {
#include "distributions/Computecrc32cGoogleQ.csv"
};
static constexpr double Computecrc32cGoogleS[] = {
#include "distributions/Computecrc32cGoogleS.csv"
};
static constexpr double Computecrc32cGoogleU[] = {
#include "distributions/Computecrc32cGoogleU.csv"
};
static constexpr double Computecrc32cGoogleV[] = {
#include "distributions/Computecrc32cGoogleV.csv"
};
static constexpr double Extendcrc32cinternalGoogleB[] = {
#include "distributions/Extendcrc32cinternalGoogleB.csv"
};
static constexpr double Extendcrc32cinternalGoogleC[] = {
#include "distributions/Extendcrc32cinternalGoogleC.csv"
};
static constexpr double Extendcrc32cinternalGoogleD[] = {
#include "distributions/Extendcrc32cinternalGoogleD.csv"
};
static constexpr double Extendcrc32cinternalGoogleF[] = {
#include "distributions/Extendcrc32cinternalGoogleF.csv"
};
static constexpr double Extendcrc32cinternalGoogleL[] = {
#include "distributions/Extendcrc32cinternalGoogleL.csv"
};
static constexpr double Extendcrc32cinternalGoogleP[] = {
#include "distributions/Extendcrc32cinternalGoogleP.csv"
};
static constexpr double Extendcrc32cinternalGoogleQ[] = {
#include "distributions/Extendcrc32cinternalGoogleQ.csv"
};
static constexpr double Extendcrc32cinternalGoogleS[] = {
#include "distributions/Extendcrc32cinternalGoogleS.csv"
};
static constexpr double Extendcrc32cinternalGoogleU[] = {
#include "distributions/Extendcrc32cinternalGoogleU.csv"
};
static constexpr double Extendcrc32cinternalGoogleV[] = {
#include "distributions/Extendcrc32cinternalGoogleV.csv"
};

// Represents a probability distribution for the size of an input to a hashing
// operation.
struct SizeDistribution {
  absl::string_view name;  // The name of the distribution.
  absl::Span<const double>
      distributions;  // Size indexed array of probabilities.
};

// Returns a list of SizeDistribution for each hashing operation.
absl::Span<const SizeDistribution> GetComputeCrc32cSizeDistributions();
absl::Span<const SizeDistribution> GetExtendCrc32cInternalSizeDistributions();

}  // namespace hashing
}  // namespace fleetbench

#endif  // THIRD_PARTY_FLEETBENCH_HASHING_SIZE_DISTRIBUTIONS_H_
